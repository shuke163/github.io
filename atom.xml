<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shuke&#39;s Blog</title>
  
  <subtitle>技术 管理 生活 格局 人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuke163.github.io/"/>
  <updated>2020-04-20T06:40:26.165Z</updated>
  <id>https://shuke163.github.io/</id>
  
  <author>
    <name>shuke</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flask之路-前戏</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:40:00.000Z</published>
    <updated>2020-04-20T06:40:26.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask之路-前戏"><a href="#Flask之路-前戏" class="headerlink" title="Flask之路-前戏"></a>Flask之路-前戏</h2><p>以下内容都是学习Flask框架之前需要了解的知识点,敲黑板…</p><h3 id="一-Flask前戏之装饰器"><a href="#一-Flask前戏之装饰器" class="headerlink" title="一. Flask前戏之装饰器"></a>一. Flask前戏之装饰器</h3><h4 id="1-1-无参装饰器"><a href="#1-1-无参装饰器" class="headerlink" title="1.1 无参装饰器"></a>1.1 无参装饰器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;4&#x2F;15</span><br><span class="line"></span><br><span class="line">def wapper(f):</span><br><span class="line">    def inner(*args, **kwargs):</span><br><span class="line">        return f(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line"># 1. 立即执行wapper函数,并且将被装饰的函数当作参数传递</span><br><span class="line"># 2. 此时的func&#x3D;inner</span><br><span class="line">@wapper</span><br><span class="line">def func(arg):</span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(123)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; 123</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure><h4 id="2-带参数的装饰器"><a href="#2-带参数的装饰器" class="headerlink" title="2. 带参数的装饰器"></a>2. 带参数的装饰器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def outer(num):</span><br><span class="line">    def wapper(f):</span><br><span class="line">        def inner(*args, **kwargs):</span><br><span class="line">            return f(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        return inner</span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    return wapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 首先执行wapper(666)，获得返回值;@wapper;此时@wapper,再执行wapper(func)函数,获得返回值inner，此时:func&#x3D;inner函数</span><br><span class="line">@outer(666)</span><br><span class="line">def func(arg):</span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line">func(&#39;Hello&#39;)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">666</span><br><span class="line">Hello</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure><h4 id="4-扩展"><a href="#4-扩展" class="headerlink" title="4. 扩展"></a>4. 扩展</h4><p>这里我们引入一个functools模块，这个模块是它能将装饰过的函数的特殊属性保留,对于这个functools.wraps装饰器，相当于wrapper = functools.wraps(func)(wrapper)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import  functools</span><br><span class="line">def wapper(func):</span><br><span class="line">    @functools.wraps(func)</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        return func(*args,**kwargs)</span><br><span class="line">    return inner</span><br><span class="line">@wapper</span><br><span class="line">def index():</span><br><span class="line">    print(&quot;hello world ,from index&quot;)</span><br><span class="line">@wapper</span><br><span class="line">def order():</span><br><span class="line">    print(&quot;hell world ,from order&quot;)</span><br><span class="line"></span><br><span class="line">print(index.__name__) </span><br><span class="line">print(order.__name__) </span><br><span class="line">##########  使用functools.wraps(函数) #############</span><br><span class="line">index</span><br><span class="line">order</span><br><span class="line">########## 不使用functools.wraps(函数)#####################</span><br><span class="line">inner</span><br><span class="line">inner</span><br></pre></td></tr></table></figure><h3 id="二-Flask前戏之面向对象"><a href="#二-Flask前戏之面向对象" class="headerlink" title="二. Flask前戏之面向对象"></a>二. Flask前戏之面向对象</h3><p>面向对象3大特性: 继承 封装 多态</p><ul><li>继承<br>子类继承父类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Parent(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def talk(self):</span><br><span class="line">        print(&quot;Say Hello!&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Child(Parent):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 &#x3D; Child()</span><br><span class="line">c1.talk()</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; Say Hello!</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">PS: 在python3.x中类的继承遵循广度优先原则,在python2.x中遵循深度优先原则</span><br></pre></td></tr></table></figure></li><li>封装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1. 示例</span><br><span class="line">class Foo(object):</span><br><span class="line">    def __init__(self, age, name):</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line"># 此处的18和&#39;shuke&#39;被封装到Foo类中</span><br><span class="line">f1 &#x3D; Foo(18, &#39;shuke&#39;)</span><br><span class="line"></span><br><span class="line">2. 示例</span><br><span class="line">class Bar(object):</span><br><span class="line">    def __init__(self, counter, obj):</span><br><span class="line">        self.age &#x3D; counter</span><br><span class="line">        self.obj &#x3D; obj</span><br><span class="line"></span><br><span class="line"># 此处的self.obj即为Foo类的对象f1</span><br><span class="line">b1 &#x3D; Bar(1, f1)</span><br><span class="line"></span><br><span class="line">3. 示例</span><br><span class="line">class Bar(object):</span><br><span class="line">    def __init__(self, counter):</span><br><span class="line">        self.age &#x3D; counter</span><br><span class="line">        self.obj &#x3D; Foo(18, &#39;shuke&#39;)</span><br><span class="line">        </span><br><span class="line"># 此处的self.obj即为Foo类的对象</span><br><span class="line">b1 &#x3D; Bar(1)</span><br></pre></td></tr></table></figure></li><li>多态<br>鸭子模型</li></ul><p>PS: 一个py文件中的函数可以被当作模块导入,在其他文件中调用即为封装思想</p><h3 id="三-python中什么后面可以加括号"><a href="#三-python中什么后面可以加括号" class="headerlink" title="三. python中什么后面可以加括号"></a>三. python中什么后面可以加括号</h3><h4 id="3-1-基本形式如下"><a href="#3-1-基本形式如下" class="headerlink" title="3.1 基本形式如下"></a>3.1 基本形式如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def func(arg):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    由于arg在函数中加括号，所以基本上只有4中表现形式</span><br><span class="line">    :param arg: </span><br><span class="line">    :return: </span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    arg()</span><br></pre></td></tr></table></figure><p>a. 函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def f1():</span><br><span class="line">    print(&quot;f1&quot;)</span><br><span class="line">    </span><br><span class="line">func(f1)</span><br></pre></td></tr></table></figure><p>b. 类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Foo(object):</span><br><span class="line">    pass</span><br><span class="line"># 执行类.__init__构造方法</span><br><span class="line">func(Foo)</span><br></pre></td></tr></table></figure><p>c. 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class F3(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def example(self):</span><br><span class="line">        print(&quot;F3&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj &#x3D; F3()</span><br><span class="line">func(obj.example)</span><br></pre></td></tr></table></figure><p>d. 对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class F4(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def __call__(self, *args, **kwargs):</span><br><span class="line">        print(&quot;call方法&quot;)</span><br><span class="line"></span><br><span class="line">obj &#x3D; F4()</span><br><span class="line">obj()</span><br><span class="line">&#39;&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; call方法</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">func(obj)</span><br></pre></td></tr></table></figure><h4 id="延伸-函数与方法的区别"><a href="#延伸-函数与方法的区别" class="headerlink" title="延伸(函数与方法的区别)"></a>延伸(函数与方法的区别)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class F3(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def example(self):</span><br><span class="line">        print(&quot;F3&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj &#x3D; F3()</span><br><span class="line"># 方法</span><br><span class="line">obj.example()</span><br><span class="line"># 函数</span><br><span class="line">F3.example</span><br></pre></td></tr></table></figure><h4 id="科学依据"><a href="#科学依据" class="headerlink" title="科学依据"></a>科学依据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from types import MethodType, FunctionType</span><br><span class="line"></span><br><span class="line">class F3(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def example(self):</span><br><span class="line">        print(&quot;F3&quot;)</span><br><span class="line"></span><br><span class="line">ret1 &#x3D; isinstance(F3.example, MethodType)</span><br><span class="line">ret2 &#x3D; isinstance(F3.example, FunctionType)</span><br><span class="line">print(ret1, ret2)</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; False True</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">obj &#x3D; F3()</span><br><span class="line">ret3 &#x3D; isinstance(obj.example, MethodType)</span><br><span class="line">ret4 &#x3D; isinstance(obj.example, FunctionType)</span><br><span class="line">print(ret3, ret4)</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; True False</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Flask之路-前戏
    
    </summary>
    
    
      <category term="Flask" scheme="https://shuke163.github.io/categories/Flask/"/>
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/Flask/PYTHON/"/>
    
    
      <category term="Flask" scheme="https://shuke163.github.io/tags/Flask/"/>
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Flask之路(一)</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:39:18.000Z</published>
    <updated>2020-04-20T06:42:55.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask之路-一"><a href="#Flask之路-一" class="headerlink" title="Flask之路(一)"></a>Flask之路(一)</h2><h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h3><p>Flask是一个基于Python开发并且依赖jinja2模板和Werkzeug WSGI服务的一个微型框架，对于Werkzeug本质是Socket服务端，其用于接收http请求并对请求进行预处理，然后触发Flask框架，开发人员基于Flask框架提供的功能对请求进行相应的处理，并返回给用户，如果要返回给用户复杂的内容时，需要借助jinja2模板来实现对模板的处理，即：将模板和数据进行渲染，将渲染后的字符串返回给用户浏览器。</p><p>“微”(micro) 并不表示你需要把整个 Web 应用塞进单个 Python 文件（虽然确实可以 ），也不意味着 Flask 在功能上有所欠缺。微框架中的“微”意味着 Flask 旨在保持核心简单而易于扩展。Flask 不会替你做出太多决策——比如使用何种数据库。而那些 Flask 所选择的——比如使用何种模板引擎——则很容易替换。除此之外的一切都由可由你掌握。如此，Flask 可以与您珠联璧合。</p><p>默认情况下，Flask 不包含数据库抽象层、表单验证，或是其它任何已有多种库可以胜任的功能。然而，Flask 支持用扩展来给应用添加这些功能，如同是 Flask 本身实现的一样。众多的扩展提供了数据库集成、表单验证、上传处理、各种各样的开放认证技术等功能。Flask 也许是“微小”的，但它已准备好在需求繁杂的生产环境中投入使用。</p><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask</span><br></pre></td></tr></table></figure><h4 id="2-WSGI实现原理"><a href="#2-WSGI实现原理" class="headerlink" title="2. WSGI实现原理"></a>2. WSGI实现原理</h4><p>Flask依赖werkzeug模块实现了WSGi协议,监听socket的请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from werkzeug.wrappers import Request, Response</span><br><span class="line"></span><br><span class="line">@Request.application</span><br><span class="line">def hello(request):</span><br><span class="line">    return Response(&#39;Hello World!&#39;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    from werkzeug.serving import run_simple</span><br><span class="line">    run_simple(&#39;localhost&#39;, 4000, hello)</span><br><span class="line"></span><br><span class="line">werkzeug</span><br></pre></td></tr></table></figure><h4 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3. 基本使用"></a>3. 基本使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return &#39;Hello World!&#39;</span><br><span class="line">    </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br><span class="line">$ curl http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h3 id="二-路由系统源码分析"><a href="#二-路由系统源码分析" class="headerlink" title="二. 路由系统源码分析"></a>二. 路由系统源码分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">def index():</span><br><span class="line">    return &#39;Hello World!!&#39;</span><br><span class="line"></span><br><span class="line"># app对象的run方法中,self.add_url_rule(rule, endpoint, f, **options)</span><br><span class="line"># 此处的rule是请求的uri路径，endpoint类似于Django中路由系统的name参数，用于反向生成URL,参数f为触发执行的函数fun,此处也可以是class对象，会触发对象的__call__方法</span><br><span class="line">app.add_url_rule(&#39;&#x2F;index&#39;, &#39;index&#39;, index)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    # 1. 请求进来首先会触发run_simple函数运行,同时执行app.__call__方法</span><br><span class="line">    # 封装请求</span><br><span class="line">    # 路由匹配</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="三-Flask的装饰器"><a href="#三-Flask的装饰器" class="headerlink" title="三. Flask的装饰器"></a>三. Flask的装饰器</h3><h4 id="3-1-装饰器"><a href="#3-1-装饰器" class="headerlink" title="3.1 装饰器"></a>3.1 装饰器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;4&#x2F;15</span><br><span class="line"></span><br><span class="line"># 1. 无参装饰器</span><br><span class="line">def wapper(f):</span><br><span class="line">    def inner(*args, **kwargs):</span><br><span class="line">        return f(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line"># 1. 立即执行wapper函数,并且将被装饰的函数当作参数传递</span><br><span class="line"># 2. 此时的func&#x3D;inner</span><br><span class="line">@wapper</span><br><span class="line">def func(arg):</span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(123)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; 123</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2. 带参数的装饰器,此处为3层的函数嵌套</span><br><span class="line">def outer(num):</span><br><span class="line">    def wapper(f):</span><br><span class="line">        def inner(*args, **kwargs):</span><br><span class="line">            return f(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        return inner</span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    return wapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 首先执行wapper(666)，获得返回值;@wapper;此时@wapper,再执行wapper(func)函数,获得返回值inner，此时:func&#x3D;inner函数</span><br><span class="line">@outer(666)</span><br><span class="line">def func(arg):</span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(&#39;Hello&#39;)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">666</span><br><span class="line">Hello</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure><h4 id="3-2-Flask中的路由装饰器"><a href="#3-2-Flask中的路由装饰器" class="headerlink" title="3.2 Flask中的路由装饰器"></a>3.2 Flask中的路由装饰器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)   #app.router函数装返回decorator对象:形入@decorator</span><br><span class="line">def hello_world():</span><br><span class="line">    return &#39;Hello World!&#39;</span><br></pre></td></tr></table></figure><p>⚠️  Flask中路由系统使用的就是带参数的装饰器形式,本质是封装成rule对象,添加到app.url_map属性中</p><h4 id="3-3-Flask中认证的装饰器用法"><a href="#3-3-Flask中认证的装饰器用法" class="headerlink" title="3.3 Flask中认证的装饰器用法"></a>3.3 Flask中认证的装饰器用法</h4><p>a. functools 模块使用示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import functools</span><br><span class="line">def wapper(func):</span><br><span class="line">    @functools.wraps(func)</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        return func(*args,**kwargs)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@wapper</span><br><span class="line">def index():</span><br><span class="line">    print(&#39;函数内容&#39;)</span><br><span class="line"></span><br><span class="line">@wapper</span><br><span class="line">def order():</span><br><span class="line">    print(&#39;函数内容&#39;)</span><br><span class="line"></span><br><span class="line">print(index.__name__)</span><br><span class="line">print(order.__name__)</span><br></pre></td></tr></table></figure><p>b. Flask中应用示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">import functools</span><br><span class="line">from flask import Flask,render_template,request,redirect,session</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__,template_folder&#x3D;&quot;templates&quot;)</span><br><span class="line">app.secret_key &#x3D; &#39;as923lrjks9d8fwlkxlduf&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def auth(func):</span><br><span class="line">    @functools.wraps(func)</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        user_info &#x3D; session.get(&#39;user_info&#39;)</span><br><span class="line">        if not user_info:</span><br><span class="line">            return redirect(&#39;&#x2F;login&#39;)</span><br><span class="line">        return func(*args,**kwargs)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;order: inner函数, name: order</span><br><span class="line">    &#x2F;index: inner函数, name: index</span><br><span class="line">&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;order&#39;,methods&#x3D;[&#39;GET&#39;])</span><br><span class="line">@auth</span><br><span class="line">def order():</span><br><span class="line">    user_info &#x3D; session.get(&#39;user_info&#39;)</span><br><span class="line">    if not user_info:</span><br><span class="line">        return redirect(&#39;&#x2F;login&#39;)</span><br><span class="line"></span><br><span class="line">    return render_template(&#39;index.html&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;index&#39;,methods&#x3D;[&#39;GET&#39;])</span><br><span class="line">@auth</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&#39;index.html&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;login&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">        return render_template(&#39;login.html&#39;)</span><br><span class="line">    else:</span><br><span class="line">        user &#x3D; request.form.get(&#39;user&#39;)</span><br><span class="line">        pwd &#x3D; request.form.get(&#39;pwd&#39;)</span><br><span class="line">        if user &#x3D;&#x3D; &#39;shuke&#39; and pwd &#x3D;&#x3D; &#39;123&#39;:</span><br><span class="line">            session[&#39;user_info&#39;] &#x3D; user</span><br><span class="line">            return redirect(&#39;&#x2F;index&#39;)</span><br><span class="line">        # return render_template(&#39;login.html&#39;,msg &#x3D; &quot;用户名或密码错误&quot;,error &#x3D; &quot;请注册&quot;)</span><br><span class="line">        return render_template(&#39;login.html&#39;,**&#123;&#39;msg&#39;:&#39;用户名或密码错误&#39;&#125;)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;logout&#39;,methods&#x3D;[&#39;GET&#39;])</span><br><span class="line">def logout():</span><br><span class="line">    del session[&#39;user_info&#39;]</span><br><span class="line">    return redirect(&#39;&#x2F;login&#39;)</span><br><span class="line">    </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>⚠️  此处,使用auth装饰器的时候多个函数会对应到同一个同一个装饰器函数inner对象,Flask启动会报错;<br>此时可以使用endpoint参数解决此问题,Flask内部默认使用函数的<strong>name</strong>获取的函数名作为endpoint参数;<br>或者利用functools模块保留被装饰函数的元信息;<br>在实际应用中建议使用类似于Django的中间件方式更优雅的方式解决;</p><h3 id="四-配置文件"><a href="#四-配置文件" class="headerlink" title="四. 配置文件"></a>四. 配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">flask中的配置文件是一个flask.config.Config对象（继承字典）,默认配置为：</span><br><span class="line">    &#123;</span><br><span class="line">        &#39;DEBUG&#39;:                                get_debug_flag(default&#x3D;False),  是否开启Debug模式</span><br><span class="line">        &#39;TESTING&#39;:                              False,                          是否开启测试模式</span><br><span class="line">        &#39;PROPAGATE_EXCEPTIONS&#39;:                 None,                          </span><br><span class="line">        &#39;PRESERVE_CONTEXT_ON_EXCEPTION&#39;:        None,</span><br><span class="line">        &#39;SECRET_KEY&#39;:                           None,</span><br><span class="line">        &#39;PERMANENT_SESSION_LIFETIME&#39;:           timedelta(days&#x3D;31),</span><br><span class="line">        &#39;USE_X_SENDFILE&#39;:                       False,</span><br><span class="line">        &#39;LOGGER_NAME&#39;:                          None,</span><br><span class="line">        &#39;LOGGER_HANDLER_POLICY&#39;:               &#39;always&#39;,</span><br><span class="line">        &#39;SERVER_NAME&#39;:                          None,</span><br><span class="line">        &#39;APPLICATION_ROOT&#39;:                     None,</span><br><span class="line">        &#39;SESSION_COOKIE_NAME&#39;:                  &#39;session&#39;,</span><br><span class="line">        &#39;SESSION_COOKIE_DOMAIN&#39;:                None,</span><br><span class="line">        &#39;SESSION_COOKIE_PATH&#39;:                  None,</span><br><span class="line">        &#39;SESSION_COOKIE_HTTPONLY&#39;:              True,</span><br><span class="line">        &#39;SESSION_COOKIE_SECURE&#39;:                False,</span><br><span class="line">        &#39;SESSION_REFRESH_EACH_REQUEST&#39;:         True,</span><br><span class="line">        &#39;MAX_CONTENT_LENGTH&#39;:                   None,</span><br><span class="line">        &#39;SEND_FILE_MAX_AGE_DEFAULT&#39;:            timedelta(hours&#x3D;12),</span><br><span class="line">        &#39;TRAP_BAD_REQUEST_ERRORS&#39;:              False,</span><br><span class="line">        &#39;TRAP_HTTP_EXCEPTIONS&#39;:                 False,</span><br><span class="line">        &#39;EXPLAIN_TEMPLATE_LOADING&#39;:             False,</span><br><span class="line">        &#39;PREFERRED_URL_SCHEME&#39;:                 &#39;http&#39;,</span><br><span class="line">        &#39;JSON_AS_ASCII&#39;:                        True,</span><br><span class="line">        &#39;JSON_SORT_KEYS&#39;:                       True,</span><br><span class="line">        &#39;JSONIFY_PRETTYPRINT_REGULAR&#39;:          True,</span><br><span class="line">        &#39;JSONIFY_MIMETYPE&#39;:                     &#39;application&#x2F;json&#39;,</span><br><span class="line">        &#39;TEMPLATES_AUTO_RELOAD&#39;:                None,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>方式一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    app.config[&#39;DEBUG&#39;] &#x3D; True</span><br><span class="line"> </span><br><span class="line">    PS： 由于Config对象本质上是字典，所以还可以使用app.config.update(...)</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">方式二：</span><br></pre></td></tr></table></figure><pre><code>app.config.from_pyfile(&quot;python文件名称&quot;)    如：        settings.py            DEBUG = True        app.config.from_pyfile(&quot;settings.py&quot;)app.config.from_envvar(&quot;环境变量名称&quot;)    环境变量的值为python文件名称名称，内部调用from_pyfile方法app.config.from_json(&quot;json文件名称&quot;)    JSON文件名称，必须是json格式，因为内部会执行json.loadsapp.config.from_mapping({&apos;DEBUG&apos;:True})    字典格式app.config.from_object(&quot;python类或类的路径&quot;)    app.config.from_object(&apos;pro_flask.settings.TestingConfig&apos;)    settings.py 内容        class Config(object):            DEBUG = False            TESTING = False            DATABASE_URI = &apos;sqlite://:memory:&apos;        class ProductionConfig(Config):            DATABASE_URI = &apos;mysql://user@localhost/foo&apos;        class DevelopmentConfig(Config):            DEBUG = True        class TestingConfig(Config):            TESTING = True</code></pre><p>PS: 从sys.path中已经存在的路径下开始查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PS: settings.py文件默认路径要放在程序root_path目录，如果instance_relative_config为True，则就是instance_path目录</span><br><span class="line"></span><br><span class="line">### 五. 路由系统</span><br><span class="line">#### 5.1 路由基本使用</span><br><span class="line">- @app.route(&#39;&#x2F;user&#x2F;&lt;username&gt;&#39;)</span><br><span class="line">- @app.route(&#39;&#x2F;post&#x2F;&lt;int:post_id&gt;&#39;)</span><br><span class="line">- @app.route(&#39;&#x2F;post&#x2F;&lt;float:post_id&gt;&#39;)</span><br><span class="line">- @app.route(&#39;&#x2F;post&#x2F;&lt;path:path&gt;&#39;)</span><br><span class="line">- @app.route(&#39;&#x2F;login&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])</span><br><span class="line"></span><br><span class="line">常用路由系统有以上五种，所有的路由系统都是基于以下对应关系来处理:</span><br></pre></td></tr></table></figure><p>DEFAULT_CONVERTERS = {<br>    ‘default’:          UnicodeConverter,<br>    ‘string’:           UnicodeConverter,<br>    ‘any’:              AnyConverter,<br>    ‘path’:             PathConverter,<br>    ‘int’:              IntegerConverter,<br>    ‘float’:            FloatConverter,<br>    ‘uuid’:             UUIDConverter,<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 5.2 注册路由原理</span><br></pre></td></tr></table></figure><p>def auth(func):<br>            def inner(<em>args, *</em>kwargs):<br>                print(‘before’)<br>                result = func(<em>args, *</em>kwargs)<br>                print(‘after’)<br>                return result</p><pre><code>return inner@app.route(&apos;/index.html&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;],endpoint=&apos;index&apos;)@authdef index():    return &apos;Index&apos;或def index():    return &quot;Index&quot;self.add_url_rule(rule=&apos;/index.html&apos;, endpoint=&quot;index&quot;, view_func=index, methods=[&quot;GET&quot;,&quot;POST&quot;])orapp.add_url_rule(rule=&apos;/index.html&apos;, endpoint=&quot;index&quot;, view_func=index, methods=[&quot;GET&quot;,&quot;POST&quot;])app.view_functions[&apos;index&apos;] = index或def auth(func):    def inner(*args, **kwargs):        print(&apos;before&apos;)        result = func(*args, **kwargs)        print(&apos;after&apos;)        return resultreturn innerclass IndexView(views.View):    methods = [&apos;GET&apos;]    decorators = [auth, ]    def dispatch_request(self):        print(&apos;Index&apos;)        return &apos;Index!&apos;app.add_url_rule(&apos;/index&apos;, view_func=IndexView.as_view(name=&apos;index&apos;))  # name=endpoint或class IndexView(views.MethodView):    methods = [&apos;GET&apos;]    decorators = [auth, ]    def get(self):        return &apos;Index.GET&apos;    def post(self):        return &apos;Index.POST&apos;app.add_url_rule(&apos;/index&apos;, view_func=IndexView.as_view(name=&apos;index&apos;))  # name=endpoint@app.route和app.add_url_rule参数：    rule,                       URL规则    view_func,                  视图函数名称    defaults=None,              默认值,当URL中无参数，函数需要参数时，使用defaults={&apos;k&apos;:&apos;v&apos;}为函数提供参数    endpoint=None,              名称，用于反向生成URL，即： url_for(&apos;名称&apos;)    methods=None,               允许的请求方式，如：[&quot;GET&quot;,&quot;POST&quot;]    strict_slashes=None,        对URL最后的 / 符号是否严格要求，                                如：                                    @app.route(&apos;/index&apos;,strict_slashes=False)，                                        访问 http://www.xx.com/index/ 或 http://www.xx.com/index均可                                    @app.route(&apos;/index&apos;,strict_slashes=True)                                        仅访问 http://www.xx.com/index     redirect_to=None,           重定向到指定地址                                如：                                    @app.route(&apos;/index/&lt;int:nid&gt;&apos;, redirect_to=&apos;/home/&lt;nid&gt;&apos;)                                    或                                    def func(adapter, nid):                                        return &quot;/home/888&quot;                                    @app.route(&apos;/index/&lt;int:nid&gt;&apos;, redirect_to=func)    subdomain=None,             子域名访问                                        from flask import Flask, views, url_for                                        app = Flask(import_name=__name__)                                        app.config[&apos;SERVER_NAME&apos;] = &apos;wupeiqi.com:5000&apos;                                        @app.route(&quot;/&quot;, subdomain=&quot;admin&quot;)                                        def static_index():                                            &quot;&quot;&quot;Flask supports static subdomains                                            This is available at static.your-domain.tld&quot;&quot;&quot;                                            return &quot;static.your-domain.tld&quot;                                        @app.route(&quot;/dynamic&quot;, subdomain=&quot;&lt;username&gt;&quot;)                                        def username_index(username):                                            &quot;&quot;&quot;Dynamic subdomains are also supported                                            Try going to user1.your-domain.tld/dynamic&quot;&quot;&quot;                                            return username + &quot;.your-domain.tld&quot;                                        if __name__ == &apos;__main__&apos;:                                            app.run()</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 5.3 自定义正则路由匹配</span><br></pre></td></tr></table></figure><p>from flask import Flask, views, url_for<br>            from werkzeug.routing import BaseConverter</p><pre><code>app = Flask(import_name=__name__)class RegexConverter(BaseConverter):    &quot;&quot;&quot;    自定义URL匹配正则表达式    &quot;&quot;&quot;    def __init__(self, map, regex):        super(RegexConverter, self).__init__(map)        self.regex = regex    def to_python(self, value):        &quot;&quot;&quot;        路由匹配时，匹配成功后传递给视图函数中参数的值        :param value:         :return:         &quot;&quot;&quot;        return int(value)    def to_url(self, value):        &quot;&quot;&quot;        使用url_for反向生成URL时，传递的参数经过该方法处理，返回的值用于生成URL中的参数        :param value:         :return:         &quot;&quot;&quot;        val = super(RegexConverter, self).to_url(value)        return val# 添加到flask中app.url_map.converters[&apos;regex&apos;] = RegexConverter@app.route(&apos;/index/&lt;regex(&quot;\d+&quot;):nid&gt;&apos;)def index(nid):    print(url_for(&apos;index&apos;, nid=&apos;888&apos;))    return &apos;Index&apos;if __name__ == &apos;__main__&apos;:    app.run()</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">### 五. </span><br><span class="line">1. 模板的使用</span><br><span class="line">Flask使用的是Jinja2模板，所以其语法和Django无差别</span><br><span class="line">2. 自定义模板方法</span><br><span class="line">Flask中自定义模板方法的方式和Bottle相似，创建一个函数并通过参数的形式传入render_template，如：</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head lang="en">    <meta charset="UTF-8">    <title></title></head><body>    <h1>自定义函数</h1>    </body></html><p>html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"># cat run.py</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from flask import Flask,render_template</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def wupeiqi():</span><br><span class="line">    return &#39;&lt;h1&gt;Wupeiqi&lt;&#x2F;h1&gt;&#39;</span><br><span class="line"> </span><br><span class="line">@app.route(&#39;&#x2F;login&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])</span><br><span class="line">def login():</span><br><span class="line">    return render_template(&#39;login.html&#39;, ww&#x3D;wupeiqi)</span><br><span class="line"> </span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>example.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;% macro input(name, type&#x3D;&#39;text&#39;, value&#x3D;&#39;&#39;) %&#125;</span><br><span class="line">        &lt;input type&#x3D;&quot;&#123;&#123; type &#125;&#125;&quot; name&#x3D;&quot;&#123;&#123; name &#125;&#125;&quot; value&#x3D;&quot;&#123;&#123; value &#125;&#125;&quot;&gt;</span><br><span class="line">    &#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; input(&#39;n1&#39;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% include &#39;tp.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;asdf&#123;&#123; v.k1&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>注⚠️：Markup等价django的mark_safe</p><h3 id="六-请求和响应"><a href="#六-请求和响应" class="headerlink" title="六. 请求和响应"></a>六. 请求和响应</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">    from flask import request</span><br><span class="line">    from flask import render_template</span><br><span class="line">    from flask import redirect</span><br><span class="line">    from flask import make_response</span><br><span class="line"></span><br><span class="line">    app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @app.route(&#39;&#x2F;login.html&#39;, methods&#x3D;[&#39;GET&#39;, &quot;POST&quot;])</span><br><span class="line">    def login():</span><br><span class="line"></span><br><span class="line">        # 请求相关信息</span><br><span class="line">        # request.method</span><br><span class="line">        # request.args</span><br><span class="line">        # request.form</span><br><span class="line">        # request.values</span><br><span class="line">        # request.cookies</span><br><span class="line">        # request.headers</span><br><span class="line">        # request.path</span><br><span class="line">        # request.full_path</span><br><span class="line">        # request.script_root</span><br><span class="line">        # request.url</span><br><span class="line">        # request.base_url</span><br><span class="line">        # request.url_root</span><br><span class="line">        # request.host_url</span><br><span class="line">        # request.host</span><br><span class="line">        # request.files</span><br><span class="line">        # obj &#x3D; request.files[&#39;the_file_name&#39;]</span><br><span class="line">        # obj.save(&#39;&#x2F;var&#x2F;www&#x2F;uploads&#x2F;&#39; + secure_filename(f.filename))</span><br><span class="line"></span><br><span class="line">        # 响应相关信息</span><br><span class="line">        # return &quot;字符串&quot;</span><br><span class="line">        # return render_template(&#39;html模板路径&#39;,**&#123;&#125;)</span><br><span class="line">        # return redirect(&#39;&#x2F;index.html&#39;)</span><br><span class="line"></span><br><span class="line">        # response &#x3D; make_response(render_template(&#39;index.html&#39;))</span><br><span class="line">        # response是flask.wrappers.Response类型</span><br><span class="line">        # response.delete_cookie(&#39;key&#39;)</span><br><span class="line">        # response.set_cookie(&#39;key&#39;, &#39;value&#39;)</span><br><span class="line">        # response.headers[&#39;X-Something&#39;] &#x3D; &#39;A value&#39;</span><br><span class="line">        # return response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return &quot;内容&quot;</span><br><span class="line"></span><br><span class="line">    if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">        app.run()</span><br></pre></td></tr></table></figure><h3 id="七-Session"><a href="#七-Session" class="headerlink" title="七. Session"></a>七. Session</h3><p>除请求对象之外，还有一个 session 对象。它允许你在不同请求间存储特定用户的信息。它是在 Cookies 的基础上实现的，并且对 Cookies 进行密钥签名要使用会话，你需要设置一个密钥。<br>设置：session[‘username’] ＝ ‘xxx’<br>删除：session.pop(‘username’, None)</p><ol><li>基本使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, session, redirect, url_for, escape, request</span><br><span class="line"> </span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"> </span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    if &#39;username&#39; in session:</span><br><span class="line">        return &#39;Logged in as %s&#39; % escape(session[&#39;username&#39;])</span><br><span class="line">    return &#39;You are not logged in&#39;</span><br><span class="line"> </span><br><span class="line">@app.route(&#39;&#x2F;login&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        session[&#39;username&#39;] &#x3D; request.form[&#39;username&#39;]</span><br><span class="line">        return redirect(url_for(&#39;index&#39;))</span><br><span class="line">    return &#39;&#39;&#39;</span><br><span class="line">        &lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;&lt;input type&#x3D;text name&#x3D;username&gt;</span><br><span class="line">            &lt;p&gt;&lt;input type&#x3D;submit value&#x3D;Login&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line"> </span><br><span class="line">@app.route(&#39;&#x2F;logout&#39;)</span><br><span class="line">def logout():</span><br><span class="line">    # remove the username from the session if it&#39;s there</span><br><span class="line">    session.pop(&#39;username&#39;, None)</span><br><span class="line">    return redirect(url_for(&#39;index&#39;))</span><br><span class="line"> </span><br><span class="line"># set the secret key.  keep this really secret:</span><br><span class="line">app.secret_key &#x3D; &#39;A0Zr98j&#x2F;3yX R~XHH!jmN]LWX&#x2F;,?RT&#39;</span><br></pre></td></tr></table></figure></li><li>自定义Session<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">pip3 install Flask-Session</span><br><span class="line">        </span><br><span class="line">        run.py</span><br><span class="line">            from flask import Flask</span><br><span class="line">            from flask import session</span><br><span class="line">            from pro_flask.utils.session import MySessionInterface</span><br><span class="line">            app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">            app.secret_key &#x3D; &#39;A0Zr98j&#x2F;3yX R~XHH!jmN]LWX&#x2F;,?RT&#39;</span><br><span class="line">            app.session_interface &#x3D; MySessionInterface()</span><br><span class="line"></span><br><span class="line">            @app.route(&#39;&#x2F;login.html&#39;, methods&#x3D;[&#39;GET&#39;, &quot;POST&quot;])</span><br><span class="line">            def login():</span><br><span class="line">                print(session)</span><br><span class="line">                session[&#39;user1&#39;] &#x3D; &#39;alex&#39;</span><br><span class="line">                session[&#39;user2&#39;] &#x3D; &#39;alex&#39;</span><br><span class="line">                del session[&#39;user2&#39;]</span><br><span class="line"></span><br><span class="line">                return &quot;内容&quot;</span><br><span class="line"></span><br><span class="line">            if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">                app.run()</span><br><span class="line"></span><br><span class="line">        session.py</span><br><span class="line">            #!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">            # -*- coding:utf-8 -*-</span><br><span class="line">            import uuid</span><br><span class="line">            import json</span><br><span class="line">            from flask.sessions import SessionInterface</span><br><span class="line">            from flask.sessions import SessionMixin</span><br><span class="line">            from itsdangerous import Signer, BadSignature, want_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            class MySession(dict, SessionMixin):</span><br><span class="line">                def __init__(self, initial&#x3D;None, sid&#x3D;None):</span><br><span class="line">                    self.sid &#x3D; sid</span><br><span class="line">                    self.initial &#x3D; initial</span><br><span class="line">                    super(MySession, self).__init__(initial or ())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                def __setitem__(self, key, value):</span><br><span class="line">                    super(MySession, self).__setitem__(key, value)</span><br><span class="line"></span><br><span class="line">                def __getitem__(self, item):</span><br><span class="line">                    return super(MySession, self).__getitem__(item)</span><br><span class="line"></span><br><span class="line">                def __delitem__(self, key):</span><br><span class="line">                    super(MySession, self).__delitem__(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            class MySessionInterface(SessionInterface):</span><br><span class="line">                session_class &#x3D; MySession</span><br><span class="line">                container &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">                def __init__(self):</span><br><span class="line">                    import redis</span><br><span class="line">                    self.redis &#x3D; redis.Redis()</span><br><span class="line"></span><br><span class="line">                def _generate_sid(self):</span><br><span class="line">                    return str(uuid.uuid4())</span><br><span class="line"></span><br><span class="line">                def _get_signer(self, app):</span><br><span class="line">                    if not app.secret_key:</span><br><span class="line">                        return None</span><br><span class="line">                    return Signer(app.secret_key, salt&#x3D;&#39;flask-session&#39;,</span><br><span class="line">                                  key_derivation&#x3D;&#39;hmac&#39;)</span><br><span class="line"></span><br><span class="line">                def open_session(self, app, request):</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                    程序刚启动时执行，需要返回一个session对象</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                    sid &#x3D; request.cookies.get(app.session_cookie_name)</span><br><span class="line">                    if not sid:</span><br><span class="line">                        sid &#x3D; self._generate_sid()</span><br><span class="line">                        return self.session_class(sid&#x3D;sid)</span><br><span class="line"></span><br><span class="line">                    signer &#x3D; self._get_signer(app)</span><br><span class="line">                    try:</span><br><span class="line">                        sid_as_bytes &#x3D; signer.unsign(sid)</span><br><span class="line">                        sid &#x3D; sid_as_bytes.decode()</span><br><span class="line">                    except BadSignature:</span><br><span class="line">                        sid &#x3D; self._generate_sid()</span><br><span class="line">                        return self.session_class(sid&#x3D;sid)</span><br><span class="line"></span><br><span class="line">                    # session保存在redis中</span><br><span class="line">                    # val &#x3D; self.redis.get(sid)</span><br><span class="line">                    # session保存在内存中</span><br><span class="line">                    val &#x3D; self.container.get(sid)</span><br><span class="line"></span><br><span class="line">                    if val is not None:</span><br><span class="line">                        try:</span><br><span class="line">                            data &#x3D; json.loads(val)</span><br><span class="line">                            return self.session_class(data, sid&#x3D;sid)</span><br><span class="line">                        except:</span><br><span class="line">                            return self.session_class(sid&#x3D;sid)</span><br><span class="line">                    return self.session_class(sid&#x3D;sid)</span><br><span class="line"></span><br><span class="line">                def save_session(self, app, session, response):</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                    程序结束前执行，可以保存session中所有的值</span><br><span class="line">                    如：</span><br><span class="line">                        保存到resit</span><br><span class="line">                        写入到用户cookie</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                    domain &#x3D; self.get_cookie_domain(app)</span><br><span class="line">                    path &#x3D; self.get_cookie_path(app)</span><br><span class="line">                    httponly &#x3D; self.get_cookie_httponly(app)</span><br><span class="line">                    secure &#x3D; self.get_cookie_secure(app)</span><br><span class="line">                    expires &#x3D; self.get_expiration_time(app, session)</span><br><span class="line"></span><br><span class="line">                    val &#x3D; json.dumps(dict(session))</span><br><span class="line"></span><br><span class="line">                    # session保存在redis中</span><br><span class="line">                    # self.redis.setex(name&#x3D;session.sid, value&#x3D;val, time&#x3D;app.permanent_session_lifetime)</span><br><span class="line">                    # session保存在内存中</span><br><span class="line">                    self.container.setdefault(session.sid, val)</span><br><span class="line"></span><br><span class="line">                    session_id &#x3D; self._get_signer(app).sign(want_bytes(session.sid))</span><br><span class="line"></span><br><span class="line">                    response.set_cookie(app.session_cookie_name, session_id,</span><br><span class="line">                                        expires&#x3D;expires, httponly&#x3D;httponly,</span><br><span class="line">                                        domain&#x3D;domain, path&#x3D;path, secure&#x3D;secure)</span><br></pre></td></tr></table></figure></li><li>第三方Session<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pip3 install redis</span><br><span class="line">pip3 install flask-session</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from flask import Flask, session, redirect</span><br><span class="line">from flask.ext.session import Session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">app.debug &#x3D; True</span><br><span class="line">app.secret_key &#x3D; &#39;asdfasdfasd&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.config[&#39;SESSION_TYPE&#39;] &#x3D; &#39;redis&#39;</span><br><span class="line">from redis import Redis</span><br><span class="line">app.config[&#39;SESSION_REDIS&#39;] &#x3D; Redis(host&#x3D;&#39;192.168.0.94&#39;,port&#x3D;&#39;6379&#39;)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;login&#39;)</span><br><span class="line">def login():</span><br><span class="line">    session[&#39;username&#39;] &#x3D; &#39;alex&#39;</span><br><span class="line">    return redirect(&#39;&#x2F;index&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;index&#39;)</span><br><span class="line">def index():</span><br><span class="line">    name &#x3D; session[&#39;username&#39;]</span><br><span class="line">    return name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="八-蓝图-Blueprint"><a href="#八-蓝图-Blueprint" class="headerlink" title="八. 蓝图(Blueprint)"></a>八. 蓝图(Blueprint)</h3>蓝图用于为应用提供目录划分：</li></ol><ul><li>小型应用程序：示例</li><li>大型应用程序：示例</li><li>其他：<ul><li>蓝图URL前缀：xxx = Blueprint(‘account’, <strong>name</strong>,url_prefix=’/xxx’)</li><li>蓝图子域名：xxx = Blueprint(‘account’, <strong>name</strong>,subdomain=’admin’)</li><li>前提需要给配置SERVER_NAME： app.config[‘SERVER_NAME’] = ‘<a href="http://www.shuke.com:5000&#39;">www.shuke.com:5000&#39;</a><br>访问时：<a href="http://www.shuke.com:5000/login.html" target="_blank" rel="noopener">www.shuke.com:5000/login.html</a></li></ul></li></ul><h3 id="九-闪现-message"><a href="#九-闪现-message" class="headerlink" title="九. 闪现(message)"></a>九. 闪现(message)</h3><p>message是一个基于Session实现的用于保存数据的集合，其特点是：使用一次就删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, flash, redirect, render_template, request, get_flashed_messages</span><br><span class="line"></span><br><span class="line">        app &#x3D; Flask(__name__)</span><br><span class="line">        app.secret_key &#x3D; &#39;some_secret&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @app.route(&#39;&#x2F;&#39;)</span><br><span class="line">        def index1():</span><br><span class="line">            messages &#x3D; get_flashed_messages()</span><br><span class="line">            print(messages)</span><br><span class="line">            return &quot;Index1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @app.route(&#39;&#x2F;set&#39;)</span><br><span class="line">        def index2():</span><br><span class="line">            v &#x3D; request.args.get(&#39;p&#39;)</span><br><span class="line">            flash(v)</span><br><span class="line">            return &#39;ok&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">            app.run()</span><br></pre></td></tr></table></figure><h3 id="十-中间件"><a href="#十-中间件" class="headerlink" title="十. 中间件"></a>十. 中间件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, flash, redirect, render_template, request</span><br><span class="line"> </span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">app.secret_key &#x3D; &#39;some_secret&#39;</span><br><span class="line"> </span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index1():</span><br><span class="line">    return render_template(&#39;index.html&#39;)</span><br><span class="line"> </span><br><span class="line">@app.route(&#39;&#x2F;set&#39;)</span><br><span class="line">def index2():</span><br><span class="line">    v &#x3D; request.args.get(&#39;p&#39;)</span><br><span class="line">    flash(v)</span><br><span class="line">    return &#39;ok&#39;</span><br><span class="line"> </span><br><span class="line">class MiddleWare:</span><br><span class="line">    def __init__(self,wsgi_app):</span><br><span class="line">        self.wsgi_app &#x3D; wsgi_app</span><br><span class="line"> </span><br><span class="line">    def __call__(self, *args, **kwargs):</span><br><span class="line"> </span><br><span class="line">        return self.wsgi_app(*args, **kwargs)</span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.wsgi_app &#x3D; MiddleWare(app.wsgi_app)</span><br><span class="line">    app.run(port&#x3D;9999)</span><br></pre></td></tr></table></figure><h3 id="十一-请求扩展"><a href="#十一-请求扩展" class="headerlink" title="十一. 请求扩展"></a>十一. 请求扩展</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from flask import Flask, Request, render_template</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__, template_folder&#x3D;&#39;templates&#39;)</span><br><span class="line">app.debug &#x3D; True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.before_first_request</span><br><span class="line">def before_first_request1():</span><br><span class="line">    print(&#39;before_first_request1&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.before_first_request</span><br><span class="line">def before_first_request2():</span><br><span class="line">    print(&#39;before_first_request2&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.before_request</span><br><span class="line">def before_request1():</span><br><span class="line">    Request.nnn &#x3D; 123</span><br><span class="line">    print(&#39;before_request1&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.before_request</span><br><span class="line">def before_request2():</span><br><span class="line">    print(&#39;before_request2&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.after_request</span><br><span class="line">def after_request1(response):</span><br><span class="line">    print(&#39;before_request1&#39;, response)</span><br><span class="line">    return response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.after_request</span><br><span class="line">def after_request2(response):</span><br><span class="line">    print(&#39;before_request2&#39;, response)</span><br><span class="line">    return response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.errorhandler(404)</span><br><span class="line">def page_not_found(error):</span><br><span class="line">    return &#39;This page does not exist&#39;, 404</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.template_global()</span><br><span class="line">def sb(a1, a2):</span><br><span class="line">    return a1 + a2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.template_filter()</span><br><span class="line">def db(a1, a2, a3):</span><br><span class="line">    return a1 + a2 + a3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return render_template(&#39;hello.html&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="十二-Flask插件"><a href="#十二-Flask插件" class="headerlink" title="十二. Flask插件"></a>十二. Flask插件</h3><ul><li>WTForms    </li><li>SQLAchemy</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.cnblogs.com/wupeiqi/articles/7552008.html" target="_blank" rel="noopener">Flask-武沛齐-博客园</a><br><a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener">欢迎使用 Flask — Flask 0.10.1 文档</a><br><a href="http://flask.pocoo.org/docs/0.12/" target="_blank" rel="noopener">Welcome to Flask — Flask Documentation  (0.12)</a><br><a href="https://wizardforcel.gitbooks.io/explore-flask/content/index.html" target="_blank" rel="noopener">Flask 之旅</a> </p>]]></content>
    
    <summary type="html">
    
      Flask之路(一)
    
    </summary>
    
    
      <category term="Flask" scheme="https://shuke163.github.io/categories/Flask/"/>
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/Flask/PYTHON/"/>
    
    
      <category term="Flask" scheme="https://shuke163.github.io/tags/Flask/"/>
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Web框架本质</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:38:46.000Z</published>
    <updated>2020-04-20T06:39:05.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web框架本质"><a href="#Web框架本质" class="headerlink" title="Web框架本质"></a>Web框架本质</h2><p>众所周知，对于所有的Web应用，本质上其实就是一个socket服务端，用户的浏览器其实就是一个socket客户端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;4&#x2F;22</span><br><span class="line"></span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def handle_request(client):</span><br><span class="line">    # 获取客户端发送的数据</span><br><span class="line">    buf &#x3D; client.recv(1024)</span><br><span class="line">    # 回复客户端的请求</span><br><span class="line">    client.send(b&quot;HTTP&#x2F;1.1 200 OK\r\n\r\n&quot;)</span><br><span class="line">    client.send(b&quot;Hello, shuke&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 创建socket对象</span><br><span class="line">    sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.bind((&#39;localhost&#39;, 9000))</span><br><span class="line">    sock.listen(5)</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        # 监听socket，等待请求的到来</span><br><span class="line">        connection, address &#x3D; sock.accept()</span><br><span class="line">        handle_request(connection)</span><br><span class="line">        # 关闭连接</span><br><span class="line">        connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">$ curl http:&#x2F;&#x2F;localhost:9000</span><br><span class="line">Hello, shuke</span><br></pre></td></tr></table></figure><p>上述通过socket来实现了其本质，而对于真实开发中的python web程序来说，一般会分为两部分：服务器程序和应用程序。服务器程序负责对socket服务器进行封装，并在请求到来时，对请求的各种数据进行整理。应用程序则负责具体的逻辑处理。为了方便应用程序的开发，就出现了众多的Web框架，例如：Django、Flask、web.py 等。不同的框架有不同的开发方式，但是无论如何，开发出的应用程序都要和服务器程序配合，才能为用户提供服务。这样，服务器程序就需要为不同的框架提供不同的支持。这样混乱的局面无论对于服务器还是框架，都是不好的。对服务器来说，需要支持各种不同框架，对框架来说，只有支持它的服务器才能被开发出的应用使用。这时候，标准化就变得尤为重要。我们可以设立一个标准，只要服务器程序支持这个标准，框架也支持这个标准，那么他们就可以配合使用。一旦标准确定，双方各自实现。这样，服务器可以支持更多支持标准的框架，框架也可以使用更多支持标准的服务器。</p><p>WSGI（Web Server Gateway Interface）是一种规范，它定义了使用python编写的web app与web server之间接口格式，实现web app与web server间的解耦。</p><p>python标准库提供的独立WSGI服务器称为wsgiref</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from wsgiref.simple_server import make_server</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def RunServer(environ, start_response):</span><br><span class="line">    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text&#x2F;html&#39;)])</span><br><span class="line">    return [bytes(&#39;&lt;h1&gt;Hello, web!&lt;&#x2F;h1&gt;&#39;, encoding&#x3D;&#39;utf-8&#39;), ]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    httpd &#x3D; make_server(&#39;&#39;, 8000, RunServer)</span><br><span class="line">    print(&quot;Serving HTTP on port 8000...&quot;)</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure><h2 id="自定义框架"><a href="#自定义框架" class="headerlink" title="自定义框架"></a>自定义框架</h2><p>一. 框架<br>通过python标准库提供的wsgiref模块开发一个自己的Web框架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">#coding:utf-8</span><br><span class="line">from wsgiref.simple_server import make_server</span><br><span class="line"> </span><br><span class="line">def index():</span><br><span class="line">    return &#39;index&#39;</span><br><span class="line"> </span><br><span class="line">def login():</span><br><span class="line">    return &#39;login&#39;</span><br><span class="line"> </span><br><span class="line">def routers():</span><br><span class="line">     </span><br><span class="line">    urlpatterns &#x3D; (</span><br><span class="line">        (&#39;&#x2F;index&#x2F;&#39;,index),</span><br><span class="line">        (&#39;&#x2F;login&#x2F;&#39;,login),</span><br><span class="line">    )</span><br><span class="line">     </span><br><span class="line">    return urlpatterns</span><br><span class="line"> </span><br><span class="line">def RunServer(environ, start_response):</span><br><span class="line">    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text&#x2F;html&#39;)])</span><br><span class="line">    url &#x3D; environ[&#39;PATH_INFO&#39;]</span><br><span class="line">    urlpatterns &#x3D; routers()</span><br><span class="line">    func &#x3D; None</span><br><span class="line">    for item in urlpatterns:</span><br><span class="line">        if item[0] &#x3D;&#x3D; url:</span><br><span class="line">            func &#x3D; item[1]</span><br><span class="line">            break</span><br><span class="line">    if func:</span><br><span class="line">        return func()</span><br><span class="line">    else:</span><br><span class="line">        return &#39;404 not found&#39;</span><br><span class="line">     </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    httpd &#x3D; make_server(&#39;&#39;, 8000, RunServer)</span><br><span class="line">    print &quot;Serving HTTP on port 8000...&quot;</span><br><span class="line">    httpd.serve_forever()</span><br><span class="line">&#96;&#96;&#96;    </span><br><span class="line">2、模板引擎</span><br><span class="line"></span><br><span class="line">在上一步骤中，对于所有的login、index均返回给用户浏览器一个简单的字符串，在现实的Web请求中一般会返回一个复杂的符合HTML规则的字符串，所以我们一般将要返回给用户的HTML写在指定文件中，然后再返回,如：</span><br></pre></td></tr></table></figure><h1 id="cat-index-html"><a href="#cat-index-html" class="headerlink" title="cat index.html"></a>cat index.html</h1><!DOCTYPE html><html><head lang="en">    <meta charset="UTF-8">    <title></title></head><body>    <h1>Index</h1></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"># cat login.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"> </span><br><span class="line">from wsgiref.simple_server import make_server</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def index():</span><br><span class="line">    # return &#39;index&#39;</span><br><span class="line">    f &#x3D; open(&#39;index.html&#39;)</span><br><span class="line">    data &#x3D; f.read()</span><br><span class="line">    return data</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def login():</span><br><span class="line">    # return &#39;login&#39;</span><br><span class="line">    f &#x3D; open(&#39;login.html&#39;)</span><br><span class="line">    data &#x3D; f.read()</span><br><span class="line">    return data</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def routers():</span><br><span class="line"> </span><br><span class="line">    urlpatterns &#x3D; (</span><br><span class="line">        (&#39;&#x2F;index&#x2F;&#39;, index),</span><br><span class="line">        (&#39;&#x2F;login&#x2F;&#39;, login),</span><br><span class="line">    )</span><br><span class="line"> </span><br><span class="line">    return urlpatterns</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def run_server(environ, start_response):</span><br><span class="line">    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text&#x2F;html&#39;)])</span><br><span class="line">    url &#x3D; environ[&#39;PATH_INFO&#39;]</span><br><span class="line">    urlpatterns &#x3D; routers()</span><br><span class="line">    func &#x3D; None</span><br><span class="line">    for item in urlpatterns:</span><br><span class="line">        if item[0] &#x3D;&#x3D; url:</span><br><span class="line">            func &#x3D; item[1]</span><br><span class="line">            break</span><br><span class="line">    if func:</span><br><span class="line">        return func()</span><br><span class="line">    else:</span><br><span class="line">        return &#39;404 not found&#39;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    httpd &#x3D; make_server(&#39;&#39;, 8000, run_server)</span><br><span class="line">    print &quot;Serving HTTP on port 8000...&quot;</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure>对于上述代码，虽然可以返回给用户HTML的内容以现实复杂的页面，但是还是存在问题：如何给用户返回动态内容？- 自定义一套特殊的语法，进行替换- 使用开源工具jinja2，遵循其指定语法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># cat index.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;% for item in user_list %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"> </span><br><span class="line">from wsgiref.simple_server import make_server</span><br><span class="line">from jinja2 import Template</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def index():</span><br><span class="line">    # return &#39;index&#39;</span><br><span class="line"> </span><br><span class="line">    # template &#x3D; Template(&#39;Hello &#123;&#123; name &#125;&#125;!&#39;)</span><br><span class="line">    # result &#x3D; template.render(name&#x3D;&#39;John Doe&#39;)</span><br><span class="line"> </span><br><span class="line">    f &#x3D; open(&#39;index.html&#39;)</span><br><span class="line">    result &#x3D; f.read()</span><br><span class="line">    template &#x3D; Template(result)</span><br><span class="line">    data &#x3D; template.render(name&#x3D;&#39;John Doe&#39;, user_list&#x3D;[&#39;alex&#39;, &#39;eric&#39;])</span><br><span class="line">    return data.encode(&#39;utf-8&#39;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def login():</span><br><span class="line">    # return &#39;login&#39;</span><br><span class="line">    f &#x3D; open(&#39;login.html&#39;)</span><br><span class="line">    data &#x3D; f.read()</span><br><span class="line">    return data</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def routers():</span><br><span class="line"> </span><br><span class="line">    urlpatterns &#x3D; (</span><br><span class="line">        (&#39;&#x2F;index&#x2F;&#39;, index),</span><br><span class="line">        (&#39;&#x2F;login&#x2F;&#39;, login),</span><br><span class="line">    )</span><br><span class="line"> </span><br><span class="line">    return urlpatterns</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def run_server(environ, start_response):</span><br><span class="line">    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text&#x2F;html&#39;)])</span><br><span class="line">    url &#x3D; environ[&#39;PATH_INFO&#39;]</span><br><span class="line">    urlpatterns &#x3D; routers()</span><br><span class="line">    func &#x3D; None</span><br><span class="line">    for item in urlpatterns:</span><br><span class="line">        if item[0] &#x3D;&#x3D; url:</span><br><span class="line">            func &#x3D; item[1]</span><br><span class="line">            break</span><br><span class="line">    if func:</span><br><span class="line">        return func()</span><br><span class="line">    else:</span><br><span class="line">        return &#39;404 not found&#39;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    httpd &#x3D; make_server(&#39;&#39;, 8000, run_server)</span><br><span class="line">    print &quot;Serving HTTP on port 8000...&quot;</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure>遵循jinja2的语法规则，其内部会对指定的语法进行相应的替换，从而达到动态的返回内容;对于模板引擎的本质，参考: [白话tornado源码之褪去模板外衣的前戏](http://www.cnblogs.com/wupeiqi/p/4592637.html)<p><a href="http://www.cnblogs.com/wupeiqi/articles/5237672.html" target="_blank" rel="noopener">原文</a></p>]]></content>
    
    <summary type="html">
    
      Web框架本质
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket小试牛刀</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:38:07.000Z</published>
    <updated>2020-04-20T06:38:34.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebSocket小试牛刀"><a href="#WebSocket小试牛刀" class="headerlink" title="WebSocket小试牛刀"></a>WebSocket小试牛刀</h2><h2 id="一-为什么需要WebSocket"><a href="#一-为什么需要WebSocket" class="headerlink" title="一. 为什么需要WebSocket?"></a>一. 为什么需要WebSocket?</h2><h3 id="1-1-初次接触-WebSocket-的人，都会问同样的问题：我们已经有了-HTTP-协议，为什么还需要另一个协议？"><a href="#1-1-初次接触-WebSocket-的人，都会问同样的问题：我们已经有了-HTTP-协议，为什么还需要另一个协议？" class="headerlink" title="1.1 初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？"></a>1.1 初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？</h3><p>WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）首先HTTP有1.1和1.0之说，也就是所谓的keep-alive，把多个HTTP请求合并为一个，但是Websocket其实是一个新协议，跟HTTP协议基本没有关系，只是为了兼容现有浏览器的握手规范而已，也就是说它是HTTP协议上的一种补充.<br>答案其实很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起,特别是短链接,无状态,请求在获取相应信息之后立刻断开连接.</p><h3 id="1-2-那么-WebSocet到底是什么呢-它能带来什么好处？"><a href="#1-2-那么-WebSocet到底是什么呢-它能带来什么好处？" class="headerlink" title="1.2 那么,WebSocet到底是什么呢?它能带来什么好处？"></a>1.2 那么,WebSocet到底是什么呢?它能带来什么好处？</h3><p>Websocket是什么样的协议，具体有什么优点首先，Websocket是一个持久化的协议，相对于HTTP这种非持久的协议来说。<br>简单的举个例子吧，用目前应用比较广泛的PHP生命周期来解释。</p><ul><li>HTTP的生命周期通过Request来界定，也就是一个Request 一个Response，那么在HTTP1.0中，这次HTTP请求就结束了。</li><li>在HTTP1.1中进行了改进，使得有一个keep-alive，也就是说，在一个HTTP连接中，可以发送多个Request，接收多个Response。但是请记住 Request = Response,在HTTP中永远是这样，也就是说一个request只能有一个response。而且这个response也是被动的，不能主动发起。</li></ul><h4 id="1-3-教练，你BB了这么多，跟Websocket有什么关系呢？"><a href="#1-3-教练，你BB了这么多，跟Websocket有什么关系呢？" class="headerlink" title="1.3 教练，你BB了这么多，跟Websocket有什么关系呢？"></a>1.3 教练，你BB了这么多，跟Websocket有什么关系呢？</h4><p>好吧，我正准备说Websocket呢。。首先Websocket是基于HTTP协议的，或者说借用了HTTP的协议来完成一部分握手。在握手阶段是一样的,以下涉及专业技术内容，不想看的可以跳过.<br>首先我们来看个典型的Websocket握手</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;chat HTTP&#x2F;1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw&#x3D;&#x3D;</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">Origin: http:&#x2F;&#x2F;example.com</span><br></pre></td></tr></table></figure><p>熟悉HTTP的童鞋可能发现了，这段类似HTTP协议的握手请求中，多了几个东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br></pre></td></tr></table></figure><p>这个就是Websocket的核心了，告诉Apache、Nginx等服务器：注意啦，窝发起的是Websocket协议，快点帮我找到对应的助理处理~不是那个老土的HTTP:)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw&#x3D;&#x3D;</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><p>首先，Sec-WebSocket-Key 是一个Base64 encode的值，这个是浏览器随机生成的，告诉服务器：泥煤，不要忽悠窝，我要验证尼是不是真的是Websocket助理。然后，Sec_WebSocket-Protocol 是一个用户定义的字符串，用来区分同URL下，不同的服务所需要的协议。简单理解：今晚我要服务A，别搞错啦<del>最后，Sec-WebSocket-Version 是告诉服务器所使用的Websocket Draft（协议版本），在最初的时候，Websocket协议还在 Draft 阶段，各种奇奇怪怪的协议都有，而且还有很多期奇奇怪怪不同的东西，什么Firefox和Chrome用的不是一个版本之类的，当初Websocket协议太多可是一个大难题。。不过现在还好，已经定下来啦</del>大家都使用的一个东西~ 脱水：服务员，我要的是13岁的噢→_→<br>然后服务器会返回下列东西，表示已经接受到请求， 成功建立Websocket啦！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk&#x3D;</span><br><span class="line">Sec-WebSocket-Protocol: chat</span><br></pre></td></tr></table></figure><p>这里开始就是HTTP最后负责的区域了，告诉客户，我已经成功切换协议啦~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br></pre></td></tr></table></figure><p>依然是固定的，告诉客户端即将升级的是Websocket协议，而不是mozillasocket，lurnarsocket或者shitsocket。然后，Sec-WebSocket-Accept 这个则是经过服务器确认，并且加密过后的 Sec-WebSocket-Key。服务器：好啦好啦，知道啦，给你看我的ID CARD来证明行了吧。。后面的，Sec-WebSocket-Protocol 则是表示最终使用的协议。至此，HTTP已经完成它所有工作了，接下来就是完全按照Websocket协议进行了。<br>⚠️ : WebSocket两个重要的流程: 1. 握手; 2. 加密;</p><h2 id="二-剖析WebSocket请求流程"><a href="#二-剖析WebSocket请求流程" class="headerlink" title="二. 剖析WebSocket请求流程"></a>二. 剖析WebSocket请求流程</h2><p>下面讲使用Python编写Socket服务端，一步一步分析请求过程!!!</p><h3 id="2-1-服务端"><a href="#2-1-服务端" class="headerlink" title="2.1 服务端"></a>2.1 服务端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">sock.bind((&#39;127.0.0.1&#39;, 8002))</span><br><span class="line">sock.listen(5)</span><br><span class="line"># 等待用户连接</span><br><span class="line">conn, address &#x3D; sock.accept()</span><br></pre></td></tr></table></figure><p>启动Socket服务器后，等待用户【连接】，然后进行收发数据。</p><h3 id="2-2-客户端连接"><a href="#2-2-客户端连接" class="headerlink" title="2.2 客户端连接"></a>2.2 客户端连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;WebSocket协议学习&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        &#x2F;&#x2F; 向 127.0.0.1:8002 发送一个WebSocket请求</span><br><span class="line">        var socket &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;127.0.0.1:8002&quot;);</span><br><span class="line">        socket.onmessage &#x3D; function (event) &#123;</span><br><span class="line">        &#x2F;* 服务器端向客户端发送数据时，自动执行(回掉函数) *&#x2F;</span><br><span class="line">        var response &#x3D; event.data;</span><br><span class="line">        console.log(response);</span><br><span class="line">    &#125;;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>当客户端向服务端发送连接请求时，不仅连接还会发送[握手]信息，并等待服务端响应，至此连接才创建成功！</p><h3 id="2-3-建立连接"><a href="#2-3-建立连接" class="headerlink" title="2.3 建立连接"></a>2.3 建立连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"> </span><br><span class="line">sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">sock.bind((&#39;127.0.0.1&#39;, 8002))</span><br><span class="line">sock.listen(5)</span><br><span class="line"># 获取客户端socket对象</span><br><span class="line">conn, address &#x3D; sock.accept()</span><br><span class="line"># 获取客户端的【握手】信息</span><br><span class="line">data &#x3D; conn.recv(1024)</span><br><span class="line">...</span><br><span class="line">conn.send(&#39;响应【握手】信息&#39;)</span><br></pre></td></tr></table></figure><p>请求和响应的【握手】信息需要遵循规则:</p><ol><li>从请求【握手】信息中提取 Sec-WebSocket-Key</li><li>利用magic_string 和 Sec-WebSocket-Key 进行hmac1加密，再进行base64加密</li><li>将加密结果响应给客户端<br>⚠️ ：magic string为：258EAFA5-E914-47DA-95CA-C5AB0DC85B11<br>请求【握手】信息格式为:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;chatsocket HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:8002</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Origin: http:&#x2F;&#x2F;localhost:63342</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">Sec-WebSocket-Key: mnwFxiOlctXFN&#x2F;DeMt1Amg&#x3D;&#x3D;</span><br><span class="line">Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</span><br></pre></td></tr></table></figure><h3 id="2-4-提取Sec-WebSocket-Key值并加密："><a href="#2-4-提取Sec-WebSocket-Key值并加密：" class="headerlink" title="2.4 提取Sec-WebSocket-Key值并加密："></a>2.4 提取Sec-WebSocket-Key值并加密：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import base64</span><br><span class="line">import hashlib</span><br><span class="line"> </span><br><span class="line">def get_headers(data):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    将请求头格式化成字典</span><br><span class="line">    :param data:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    header_dict &#x3D; &#123;&#125;</span><br><span class="line">    data &#x3D; str(data, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line"> </span><br><span class="line">    for i in data.split(&#39;\r\n&#39;):</span><br><span class="line">        print(i)</span><br><span class="line">    header, body &#x3D; data.split(&#39;\r\n\r\n&#39;, 1)</span><br><span class="line">    header_list &#x3D; header.split(&#39;\r\n&#39;)</span><br><span class="line">    for i in range(0, len(header_list)):</span><br><span class="line">        if i &#x3D;&#x3D; 0:</span><br><span class="line">            if len(header_list[i].split(&#39; &#39;)) &#x3D;&#x3D; 3:</span><br><span class="line">                header_dict[&#39;method&#39;], header_dict[&#39;url&#39;], header_dict[&#39;protocol&#39;] &#x3D; header_list[i].split(&#39; &#39;)</span><br><span class="line">        else:</span><br><span class="line">            k, v &#x3D; header_list[i].split(&#39;:&#39;, 1)</span><br><span class="line">            header_dict[k] &#x3D; v.strip()</span><br><span class="line">    return header_dict</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">sock.bind((&#39;127.0.0.1&#39;, 8002))</span><br><span class="line">sock.listen(5)</span><br><span class="line"> </span><br><span class="line">conn, address &#x3D; sock.accept()</span><br><span class="line">data &#x3D; conn.recv(1024)</span><br><span class="line">headers &#x3D; get_headers(data) # 提取请求头信息</span><br><span class="line"># 对请求头中的sec-websocket-key进行加密</span><br><span class="line">response_tpl &#x3D; &quot;HTTP&#x2F;1.1 101 Switching Protocols\r\n&quot; \</span><br><span class="line">      &quot;Upgrade:websocket\r\n&quot; \</span><br><span class="line">      &quot;Connection: Upgrade\r\n&quot; \</span><br><span class="line">      &quot;Sec-WebSocket-Accept: %s\r\n&quot; \</span><br><span class="line">      &quot;WebSocket-Location: ws:&#x2F;&#x2F;%s%s\r\n\r\n&quot;</span><br><span class="line">magic_string &#x3D; &#39;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#39;</span><br><span class="line">value &#x3D; headers[&#39;Sec-WebSocket-Key&#39;] + magic_string</span><br><span class="line">ac &#x3D; base64.b64encode(hashlib.sha1(value.encode(&#39;utf-8&#39;)).digest())</span><br><span class="line">response_str &#x3D; response_tpl % (ac.decode(&#39;utf-8&#39;), headers[&#39;Host&#39;], headers[&#39;url&#39;])</span><br><span class="line"># 响应【握手】信息</span><br><span class="line">conn.send(bytes(response_str, encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h2 id="三-客户端和服务端收发数据"><a href="#三-客户端和服务端收发数据" class="headerlink" title="三. 客户端和服务端收发数据"></a>三. 客户端和服务端收发数据</h2><p>客户端和服务端传输数据时，需要对数据进行【封包】和【解包】。客户端的JavaScript类库已经封装【封包】和【解包】过程，但Socket服务端需要手动实现。</p><h3 id="3-1-第一步：获取客户端发送的数据【解包】"><a href="#3-1-第一步：获取客户端发送的数据【解包】" class="headerlink" title="3.1 第一步：获取客户端发送的数据【解包】"></a>3.1 第一步：获取客户端发送的数据【解包】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 基于python实现的解包</span><br><span class="line"></span><br><span class="line">info &#x3D; conn.recv(8096)</span><br><span class="line">payload_len &#x3D; info[1] &amp; 127</span><br><span class="line">if payload_len &#x3D;&#x3D; 126:</span><br><span class="line">    extend_payload_len &#x3D; info[2:4]</span><br><span class="line">    mask &#x3D; info[4:8]</span><br><span class="line">    decoded &#x3D; info[8:]</span><br><span class="line">elif payload_len &#x3D;&#x3D; 127:</span><br><span class="line">    extend_payload_len &#x3D; info[2:10]</span><br><span class="line">    mask &#x3D; info[10:14]</span><br><span class="line">    decoded &#x3D; info[14:]</span><br><span class="line">else:</span><br><span class="line">    extend_payload_len &#x3D; None</span><br><span class="line">    mask &#x3D; info[2:6]</span><br><span class="line">    decoded &#x3D; info[6:]</span><br><span class="line"></span><br><span class="line">bytes_list &#x3D; bytearray()</span><br><span class="line">for i in range(len(decoded)):</span><br><span class="line">    chunk &#x3D; decoded[i] ^ mask[i % 4]</span><br><span class="line">    bytes_list.append(chunk)</span><br><span class="line">body &#x3D; str(bytes_list, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">print(body)</span><br></pre></td></tr></table></figure><h3 id="3-2-解包详细过程"><a href="#3-2-解包详细过程" class="headerlink" title="3.2 解包详细过程:"></a>3.2 解包详细过程:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class="line">|F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class="line">|I|S|S|S|  (4)  |A|     (7)     |             (16&#x2F;64)           |</span><br><span class="line">|N|V|V|V|       |S|             |   (if payload len&#x3D;&#x3D;126&#x2F;127)   |</span><br><span class="line">| |1|2|3|       |K|             |                               |</span><br><span class="line">+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class="line">|     Extended payload length continued, if payload len &#x3D;&#x3D; 127  |</span><br><span class="line">+ - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class="line">|                               |Masking-key, if MASK set to 1  |</span><br><span class="line">+-------------------------------+-------------------------------+</span><br><span class="line">| Masking-key (continued)       |          Payload Data         |</span><br><span class="line">+-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class="line">:                     Payload Data continued ...                :</span><br><span class="line">+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class="line">|                     Payload Data continued ...                |</span><br><span class="line">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure><h4 id="3-2-1-官方解释"><a href="#3-2-1-官方解释" class="headerlink" title="3.2.1 官方解释"></a>3.2.1 官方解释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">The MASK bit simply tells whether the message is encoded. Messages from the client must be masked, so your server should expect this to be 1. (In fact, section 5.1 of the spec says that your server must disconnect from a client if that client sends an unmasked message.) When sending a frame back to the client, do not mask it and do not set the mask bit. We&#39;ll explain masking later. Note: You have to mask messages even when using a secure socket.RSV1-3 can be ignored, they are for extensions.</span><br><span class="line"></span><br><span class="line">The opcode field defines how to interpret the payload data: 0x0 for continuation, 0x1 for text (which is always encoded in UTF-8), 0x2 for binary, and other so-called &quot;control codes&quot; that will be discussed later. In this version of WebSockets, 0x3 to 0x7 and 0xB to 0xF have no meaning.</span><br><span class="line"></span><br><span class="line">The FIN bit tells whether this is the last message in a series. If it&#39;s 0, then the server will keep listening for more parts of the message; otherwise, the server should consider the message delivered. More on this later.</span><br><span class="line"></span><br><span class="line">Decoding Payload Length</span><br><span class="line"></span><br><span class="line">To read the payload data, you must know when to stop reading. That&#39;s why the payload length is important to know. Unfortunately, this is somewhat complicated. To read it, follow these steps:</span><br><span class="line"></span><br><span class="line">Read bits 9-15 (inclusive) and interpret that as an unsigned integer. If it&#39;s 125 or less, then that&#39;s the length; you&#39;re done. If it&#39;s 126, go to step 2. If it&#39;s 127, go to step 3.</span><br><span class="line">Read the next 16 bits and interpret those as an unsigned integer. You&#39;re done.</span><br><span class="line">Read the next 64 bits and interpret those as an unsigned integer (The most significant bit MUST be 0). You&#39;re done.</span><br><span class="line">Reading and Unmasking the Data</span><br><span class="line"></span><br><span class="line">If the MASK bit was set (and it should be, for client-to-server messages), read the next 4 octets (32 bits); this is the masking key. Once the payload length and masking key is decoded, you can go ahead and read that number of bytes from the socket. Let&#39;s call the data ENCODED, and the key MASK. To get DECODED, loop through the octets (bytes a.k.a. characters for text data) of ENCODED and XOR the octet with the (i modulo 4)th octet of MASK. In pseudo-code (that happens to be valid JavaScript):</span><br><span class="line"></span><br><span class="line">var DECODED &#x3D; &quot;&quot;;</span><br><span class="line">for (var i &#x3D; 0; i &lt; ENCODED.length; i++) &#123;</span><br><span class="line">    DECODED[i] &#x3D; ENCODED[i] ^ MASK[i % 4];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Now you can figure out what DECODED means depending on your application.</span><br></pre></td></tr></table></figure><h3 id="3-3-向客户端发送数据【封包】"><a href="#3-3-向客户端发送数据【封包】" class="headerlink" title="3.3 向客户端发送数据【封包】"></a>3.3 向客户端发送数据【封包】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def send_msg(conn, msg_bytes):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    WebSocket服务端向客户端发送消息</span><br><span class="line">    :param conn: 客户端连接到服务器端的socket对象,即： conn,address &#x3D; socket.accept()</span><br><span class="line">    :param msg_bytes: 向客户端发送的字节</span><br><span class="line">    :return: </span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    import struct</span><br><span class="line"></span><br><span class="line">    token &#x3D; b&quot;\x81&quot;</span><br><span class="line">    length &#x3D; len(msg_bytes)</span><br><span class="line">    if length &lt; 126:</span><br><span class="line">        token +&#x3D; struct.pack(&quot;B&quot;, length)</span><br><span class="line">    elif length &lt;&#x3D; 0xFFFF:</span><br><span class="line">        token +&#x3D; struct.pack(&quot;!BH&quot;, 126, length)</span><br><span class="line">    else:</span><br><span class="line">        token +&#x3D; struct.pack(&quot;!BQ&quot;, 127, length)</span><br><span class="line"></span><br><span class="line">    msg &#x3D; token + msg_bytes</span><br><span class="line">    conn.send(msg)</span><br><span class="line">    return True</span><br></pre></td></tr></table></figure><h2 id="四-基于python实现简单示例"><a href="#四-基于python实现简单示例" class="headerlink" title="四. 基于python实现简单示例"></a>四. 基于python实现简单示例</h2><h3 id="4-1-基于Python-socket实现的WebSocket服务端"><a href="#4-1-基于Python-socket实现的WebSocket服务端" class="headerlink" title="4.1 基于Python socket实现的WebSocket服务端"></a>4.1 基于Python socket实现的WebSocket服务端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;5&#x2F;12</span><br><span class="line"></span><br><span class="line">import socket</span><br><span class="line">import hashlib</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">def get_headers(data):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    将请求头格式化成字典</span><br><span class="line">    :param data:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    header_dict &#x3D; &#123;&#125;</span><br><span class="line">    data &#x3D; str(data, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">    header, body &#x3D; data.split(&#39;\r\n\r\n&#39;, 1)</span><br><span class="line">    header_list &#x3D; header.split(&#39;\r\n&#39;)</span><br><span class="line">    for i in range(0, len(header_list)):</span><br><span class="line">        if i &#x3D;&#x3D; 0:</span><br><span class="line">            if len(header_list[i].split(&#39; &#39;)) &#x3D;&#x3D; 3:</span><br><span class="line">                header_dict[&#39;method&#39;], header_dict[&#39;url&#39;], header_dict[&#39;protocol&#39;] &#x3D; header_list[i].split(&#39; &#39;)</span><br><span class="line">        else:</span><br><span class="line">            k, v &#x3D; header_list[i].split(&#39;:&#39;, 1)</span><br><span class="line">            header_dict[k] &#x3D; v.strip()</span><br><span class="line">    return header_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def send_msg(conn, msg_bytes):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    WebSocket服务端向客户端发送消息</span><br><span class="line">    :param conn: 客户端连接到服务器端的socket对象,即： conn,address &#x3D; socket.accept()</span><br><span class="line">    :param msg_bytes: 向客户端发送的字节</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    import struct</span><br><span class="line"></span><br><span class="line">    token &#x3D; b&quot;\x81&quot;</span><br><span class="line">    length &#x3D; len(msg_bytes)</span><br><span class="line">    if length &lt; 126:</span><br><span class="line">        token +&#x3D; struct.pack(&quot;B&quot;, length)</span><br><span class="line">    elif length &lt;&#x3D; 0xFFFF:</span><br><span class="line">        token +&#x3D; struct.pack(&quot;!BH&quot;, 126, length)</span><br><span class="line">    else:</span><br><span class="line">        token +&#x3D; struct.pack(&quot;!BQ&quot;, 127, length)</span><br><span class="line"></span><br><span class="line">    msg &#x3D; token + msg_bytes</span><br><span class="line">    conn.send(msg)</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">sock.bind((&#39;127.0.0.1&#39;, 8002))</span><br><span class="line">sock.listen(5)</span><br><span class="line"></span><br><span class="line"># 等待用户连接</span><br><span class="line">conn, address &#x3D; sock.accept()</span><br><span class="line"></span><br><span class="line"># WebSocket发来的连接</span><br><span class="line"># 1. 获取握手数据</span><br><span class="line">data &#x3D; conn.recv(1024)</span><br><span class="line">headers &#x3D; get_headers(data)</span><br><span class="line"></span><br><span class="line"># 2. 对握手信息进行加密：</span><br><span class="line">magic_string &#x3D; &#39;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#39;</span><br><span class="line">value &#x3D; headers[&#39;Sec-WebSocket-Key&#39;] + magic_string</span><br><span class="line">ac &#x3D; base64.b64encode(hashlib.sha1(value.encode(&#39;utf-8&#39;)).digest())</span><br><span class="line"></span><br><span class="line"># 3. 返回握手信息</span><br><span class="line">response_tpl &#x3D; &quot;HTTP&#x2F;1.1 101 Switching Protocols\r\n&quot; \</span><br><span class="line">               &quot;Upgrade:websocket\r\n&quot; \</span><br><span class="line">               &quot;Connection: Upgrade\r\n&quot; \</span><br><span class="line">               &quot;Sec-WebSocket-Accept: %s\r\n&quot; \</span><br><span class="line">               &quot;WebSocket-Location: ws:&#x2F;&#x2F;127.0.0.1:8002\r\n\r\n&quot;</span><br><span class="line"></span><br><span class="line">response_str &#x3D; response_tpl % (ac.decode(&#39;utf-8&#39;),)</span><br><span class="line"></span><br><span class="line">conn.sendall(bytes(response_str, encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line"></span><br><span class="line"># 之后，才能进行收发数据。</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    # 对数据进行解密</span><br><span class="line">    # send_msg(conn, bytes(&#39;alex&#39;, encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">    # send_msg(conn, bytes(&#39;SB&#39;, encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">    # info &#x3D; conn.recv(8096)</span><br><span class="line">    # print(info)</span><br><span class="line"></span><br><span class="line">    info &#x3D; conn.recv(8096)</span><br><span class="line">    payload_len &#x3D; info[1] &amp; 127</span><br><span class="line">    if payload_len &#x3D;&#x3D; 126:</span><br><span class="line">        extend_payload_len &#x3D; info[2:4]</span><br><span class="line">        mask &#x3D; info[4:8]</span><br><span class="line">        decoded &#x3D; info[8:]</span><br><span class="line">    elif payload_len &#x3D;&#x3D; 127:</span><br><span class="line">        extend_payload_len &#x3D; info[2:10]</span><br><span class="line">        mask &#x3D; info[10:14]</span><br><span class="line">        decoded &#x3D; info[14:]</span><br><span class="line">    else:</span><br><span class="line">        extend_payload_len &#x3D; None</span><br><span class="line">        mask &#x3D; info[2:6]</span><br><span class="line">        decoded &#x3D; info[6:]</span><br><span class="line"></span><br><span class="line">    bytes_list &#x3D; bytearray()</span><br><span class="line">    for i in range(len(decoded)):</span><br><span class="line">        chunk &#x3D; decoded[i] ^ mask[i % 4]</span><br><span class="line">        bytes_list.append(chunk)</span><br><span class="line">    msg &#x3D; str(bytes_list, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">    rep &#x3D; msg + &#39; hello&#39;</span><br><span class="line">    send_msg(conn, bytes(rep, encoding&#x3D;&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure><h3 id="4-2-利用JavaScript类库实现客户端"><a href="#4-2-利用JavaScript类库实现客户端" class="headerlink" title="4.2 利用JavaScript类库实现客户端"></a>4.2 利用JavaScript类库实现客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;txt&quot;&#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;btn&quot; value&#x3D;&quot;提交&quot; onclick&#x3D;&quot;sendMsg();&quot;&#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;close&quot; value&#x3D;&quot;关闭连接&quot; onclick&#x3D;&quot;closeConn();&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;content&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var socket &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;127.0.0.1:8003&#x2F;chatsocket&quot;);</span><br><span class="line"> </span><br><span class="line">    socket.onopen &#x3D; function () &#123;</span><br><span class="line">        &#x2F;* 与服务器端连接成功后，自动执行 *&#x2F;</span><br><span class="line"> </span><br><span class="line">        var newTag &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">        newTag.innerHTML &#x3D; &quot;【连接成功】&quot;;</span><br><span class="line">        document.getElementById(&#39;content&#39;).appendChild(newTag);</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    socket.onmessage &#x3D; function (event) &#123;</span><br><span class="line">        &#x2F;* 服务器端向客户端发送数据时，自动执行 *&#x2F;</span><br><span class="line">        var response &#x3D; event.data;</span><br><span class="line">        var newTag &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">        newTag.innerHTML &#x3D; response;</span><br><span class="line">        document.getElementById(&#39;content&#39;).appendChild(newTag);</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    socket.onclose &#x3D; function (event) &#123;</span><br><span class="line">        &#x2F;* 服务器端主动断开连接时，自动执行 *&#x2F;</span><br><span class="line">        var newTag &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">        newTag.innerHTML &#x3D; &quot;【关闭连接】&quot;;</span><br><span class="line">        document.getElementById(&#39;content&#39;).appendChild(newTag);</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    function sendMsg() &#123;</span><br><span class="line">        var txt &#x3D; document.getElementById(&#39;txt&#39;);</span><br><span class="line">        socket.send(txt.value);</span><br><span class="line">        txt.value &#x3D; &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function closeConn() &#123;</span><br><span class="line">        socket.close();</span><br><span class="line">        var newTag &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">        newTag.innerHTML &#x3D; &quot;【关闭连接】&quot;;</span><br><span class="line">        document.getElementById(&#39;content&#39;).appendChild(newTag);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>此时,我们在浏览器的Console控制台利用Socket对象发送消息,将会收到返回信息</p><h2 id="五-基于Tornado框架实现Web聊天室"><a href="#五-基于Tornado框架实现Web聊天室" class="headerlink" title="五. 基于Tornado框架实现Web聊天室"></a>五. 基于Tornado框架实现Web聊天室</h2><p>Tornado是一个支持WebSocket的优秀框架，其内部原理正如1~5步骤描述，当然Tornado内部封装功能更加完整。<br>以下是基于Tornado实现的聊天室示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"># cat app.py</span><br><span class="line"></span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import uuid</span><br><span class="line">import json</span><br><span class="line">import tornado.ioloop</span><br><span class="line">import tornado.web</span><br><span class="line">import tornado.websocket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class IndexHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.render(&#39;index.html&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ChatHandler(tornado.websocket.WebSocketHandler):</span><br><span class="line">    # 用户存储当前聊天室用户</span><br><span class="line">    waiters &#x3D; set()</span><br><span class="line">    # 用于存储历时消息</span><br><span class="line">    messages &#x3D; []</span><br><span class="line"></span><br><span class="line">    def open(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        客户端连接成功时，自动执行</span><br><span class="line">        :return: </span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        ChatHandler.waiters.add(self)</span><br><span class="line">        uid &#x3D; str(uuid.uuid4())</span><br><span class="line">        self.write_message(uid)</span><br><span class="line"></span><br><span class="line">        for msg in ChatHandler.messages:</span><br><span class="line">            content &#x3D; self.render_string(&#39;message.html&#39;, **msg)</span><br><span class="line">            self.write_message(content)</span><br><span class="line"></span><br><span class="line">    def on_message(self, message):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        客户端连发送消息时，自动执行</span><br><span class="line">        :param message: </span><br><span class="line">        :return: </span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        msg &#x3D; json.loads(message)</span><br><span class="line">        ChatHandler.messages.append(message)</span><br><span class="line"></span><br><span class="line">        for client in ChatHandler.waiters:</span><br><span class="line">            content &#x3D; client.render_string(&#39;message.html&#39;, **msg)</span><br><span class="line">            client.write_message(content)</span><br><span class="line"></span><br><span class="line">    def on_close(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        客户端关闭连接时，，自动执行</span><br><span class="line">        :return: </span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        ChatHandler.waiters.remove(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def run():</span><br><span class="line">    settings &#x3D; &#123;</span><br><span class="line">        &#39;template_path&#39;: &#39;templates&#39;,</span><br><span class="line">        &#39;static_path&#39;: &#39;static&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">    application &#x3D; tornado.web.Application([</span><br><span class="line">        (r&quot;&#x2F;&quot;, IndexHandler),</span><br><span class="line">        (r&quot;&#x2F;chat&quot;, ChatHandler),</span><br><span class="line">    ], **settings)</span><br><span class="line">    application.listen(8888)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    run()</span><br><span class="line">&#96;&#96;&#96;    </span><br><span class="line">客户端</span><br></pre></td></tr></table></figure><h1 id="cat-index-html"><a href="#cat-index-html" class="headerlink" title="cat index.html"></a>cat index.html</h1><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Python聊天室</title><meta name="generator" content="Hexo 4.2.0"><link rel="alternate" href="/atom.xml" title="shuke's Blog" type="application/atom+xml"></head><body>    <div>        <input type="text" id="txt"/>        <input type="button" id="btn" value="提交" onclick="sendMsg();"/>        <input type="button" id="close" value="关闭连接" onclick="closeConn();"/>    </div>    <div id="container" style="border: 1px solid #dddddd;margin: 20px;min-height: 500px;"><pre><code>&lt;/div&gt;&lt;script src=&quot;/static/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    $(function () {        wsUpdater.start();    });    var wsUpdater = {        socket: null,        uid: null,        start: function() {            var url = &quot;ws://127.0.0.1:8888/chat&quot;;            wsUpdater.socket = new WebSocket(url);            wsUpdater.socket.onmessage = function(event) {                console.log(event);                if(wsUpdater.uid){                    wsUpdater.showMessage(event.data);                }else{                    wsUpdater.uid = event.data;                }            }        },        showMessage: function(content) {            $(&apos;#container&apos;).append(content);        }    };    function sendMsg() {        var msg = {            uid: wsUpdater.uid,            message: $(&quot;#txt&quot;).val()        };        wsUpdater.socket.send(JSON.stringify(msg));    }</code></pre><p></script></p></body></html>```<p><a href="https://files.cnblogs.com/files/aslongas/2.WebSocket%E7%A4%BA%E4%BE%8B%EF%BC%9AFlask.rar" target="_blank" rel="noopener">Flask-WebSocket投票示例</a></p><p><a href="http://www.cnblogs.com/wupeiqi/p/6558766.html" target="_blank" rel="noopener">原文参考</a></p>]]></content>
    
    <summary type="html">
    
      WebSocket小试牛刀
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Django基于RBAC的权限组件</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:11:34.000Z</published>
    <updated>2020-04-20T06:21:46.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django基于RBAC的权限组件"><a href="#Django基于RBAC的权限组件" class="headerlink" title="Django基于RBAC的权限组件"></a>Django基于RBAC的权限组件</h1><hr><h3 id="RBAC前奏"><a href="#RBAC前奏" class="headerlink" title="RBAC前奏"></a>RBAC前奏</h3><ol><li><p>RBAC概念<br>RBAC（Role-Based Access Control，基于角色的访问控制），就是用户通过角色与权限进行关联。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。在这种模型中，用户与角色之间，角色与权限之间，一般者是多对多的关系。</p></li><li><p>扩展</p><ul><li>角色是什么？可以理解为一定数量的权限的集合，权限的载体。例如：一个论坛系统，“超级管理员”、“版主”都是角色。版主可管理版内的帖子、可管理版内的用户等，这些是权限。要给某个用户授予这些权限，不需要直接将权限授予用户，可将“版主”这个角色赋予该用户。 </li><li>当用户的数量非常大时，要给系统每个用户逐一授权（授角色），是件非常烦琐的事情。这时，就需要给用户分组，每个用户组内有多个用户。除了可给用户授权外，还可以给用户组授权。这样一来，用户拥有的所有权限，就是用户个人拥有的权限与该用户所在用户组拥有的权限之和。</li><li>在应用系统中，权限表现成什么？对功能模块的操作，对上传文件的删改，菜单的访问，甚至页面上某个按钮、某个图片的可见性控制，都可属于权限的范畴。有些权限设计，会把功能操作作为一类，而把文件、菜单、页面元素等作为另一类，这样构成“用户-角色-权限-资源”的授权模型。而在做数据表建模时，可把功能操作和资源统一管理，也就是都直接与权限表进行关联，这样可能更具便捷性和易扩展性。</li><li>请留意权限表中有一列“权限类型”，我们根据它的取值来区分是哪一类权限，如“MENU”表示菜单的访问权限、“OPERATION”表示功能模块的操作权限、“FILE”表示文件的修改权限、“ELEMENT”表示页面元素的可见性控制等。</li><li>这样设计的好处有二。其一，不需要区分哪些是权限操作，哪些是资源，（实际上，有时候也不好区分，如菜单，把它理解为资源呢还是功能模块权限呢？）。其二，方便扩展，当系统要对新的东西进行权限控制时，我只需要建立一个新的关联表“权限XX关联表”，并确定这类权限的权限类型字符串。</li><li>这里要注意的是，权限表与权限菜单关联表、权限菜单关联表与菜单表都是一对一的关系。（文件、页面权限点、功能操作等同理）。也就是每添加一个菜单，就得同时往这三个表中各插入一条记录。这样，可以不需要权限菜单关联表，让权限表与菜单表直接关联，此时，须在权限表中新增一列用来保存菜单的ID，权限表通过“权限类型”和这个ID来区分是种类型下的哪条记录。</li><li>随着系统的日益庞大，为了方便管理，可引入角色组对角色进行分类管理，跟用户组不同，角色组不参与授权。例如：某电网系统的权限管理模块中，角色就是挂在区局下，而区局在这里可当作角色组，它不参于权限分配。另外，为方便上面各主表自身的管理与查找，可采用树型结构，如菜单树、功能树等，当然这些可不需要参于权限分配。</li></ul></li><li><p>基于rbac的实现<br><a href="https://github.com/shonenada/flask-rbac" target="_blank" rel="noopener">flask-rbac</a><br><a href="https://pypi.python.org/pypi/simple-rbac/0.1.1" target="_blank" rel="noopener">simple-rbac</a></p></br></li></ol><h3 id="知识点储备"><a href="#知识点储备" class="headerlink" title="知识点储备"></a>知识点储备</h3><ol><li>Django ORM<br>常用的orm方法，all,values,values_list等<br>from models import User</li></ol><ul><li>all<br>models.User.objects.all(),返回值为queryset类型，形如：[obj,obj,obj]</li><li>values<br>models.User.objects.values(‘id’,’username’,’password’),返回值为queryset类型，形如：[{‘id’:1,’username’:’shuke’,’password’:’123456’}]</li><li>values_list<br>models.User.objects.values_list(‘id’,’username’,’password’),返回值为queryset类型，形如: [(1,’shuke’,’123456’),(2,’mary’,’123456’)]</li></ul><ol start="2"><li>一对多及多对多</li></ol><ul><li>一对多（FK常用操作）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">class A(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line"></span><br><span class="line">class B(models.Model):</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line">    fk &#x3D; models.ForeignKey(to&#x3D;&quot;A&quot;)</span><br><span class="line"># 跨表操作</span><br><span class="line">a. all()</span><br><span class="line">b_list &#x3D; models.B.objects.all()</span><br><span class="line">for item in b_list:</span><br><span class="line">    item.id</span><br><span class="line">    item.name</span><br><span class="line">    item.fk_id</span><br><span class="line">    item.fk</span><br><span class="line">    item.fk.name</span><br><span class="line">    item.fk.id</span><br><span class="line">b. values()</span><br><span class="line">b_list &#x3D; models.B.objects.values(&#39;id&#39;,&#39;name&#39;,&#39;fk_id&#39;,&#39;fk__name&#39;)</span><br><span class="line">for item in b_list:</span><br><span class="line">    item[&#39;id&#39;]</span><br><span class="line">    item[&#39;name&#39;]</span><br><span class="line">    item[&#39;fk_id&#39;]</span><br><span class="line">    item[&#39;fk__name&#39;]</span><br><span class="line">c. values_list()</span><br><span class="line">b_list &#x3D; models.B.objects.values_list(&#39;id&#39;,&#39;name&#39;,&#39;fk_id&#39;,&#39;fk__name&#39;)</span><br><span class="line">for item in b_list:</span><br><span class="line">    item[0]  # id</span><br><span class="line">    item[1]  # name</span><br><span class="line">    item[2]  # fk_id</span><br><span class="line">    item[3]  # fk__name</span><br><span class="line">d. 查找名称是&quot;Jack&quot;的用户所有B表中的数据</span><br><span class="line">models.B.objects.filter(fk__name&#x3D;&quot;Jack&quot;).all()</span><br></pre></td></tr></table></figure></li><li>多对多(ManyToMany)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">class A(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line"></span><br><span class="line">class B(models.Model):</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line">    m2m &#x3D; models.ManyToMany(to&#x3D;&quot;A&quot;)</span><br><span class="line">PS: 自动会生成第3张表</span><br><span class="line">a. 在A和B表中各插入2条数据</span><br><span class="line">models.A.objects.create(name&#x3D;&quot;Jack&quot;)</span><br><span class="line">models.A.objects.create(name&#x3D;&quot;Mary&quot;)</span><br><span class="line"></span><br><span class="line">models.A.objects.create(title&#x3D;&quot;IT&quot;)</span><br><span class="line">models.A.objects.create(title&#x3D;&quot;CTO&quot;)</span><br><span class="line"></span><br><span class="line">b. CTO和[&#39;Jack&#39;,&#39;Mary&#39;]创建关系</span><br><span class="line">obj &#x3D; models.B.objects.get(title&#x3D;&quot;CTO&quot;)</span><br><span class="line">obj.m2m.add(1)   # 此处可以写id也可以写关联的A表中的obj</span><br><span class="line">obj.m2m.add(2)</span><br><span class="line"></span><br><span class="line">c. 查找CTO的关联的人</span><br><span class="line">obj &#x3D; models.B.objects.get(title&#x3D;&quot;CTO&quot;)</span><br><span class="line">obj.m2m.all()    # 得到一个QuerySet列表，内容为A表中的对象</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>中间件<br>中间件其实就是一个类，包含2个方法,形如:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class MiddleWare:</span><br><span class="line">    # 所有的resquest请求都需要经过该方法,且该方法返回值为None时，继续请求下一个中间件</span><br><span class="line">    def process_request(self,request):</span><br><span class="line">        pass</span><br><span class="line">    def process_response(self,request,response):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure></li></ol><p><em>注: 中间件编写完成后需要在settings文件中进行注册使用，注册时注意中间件顺序</em></p><ol start="4"><li>Session与Cookie的区别</li></ol><ul><li>由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。</li><li>思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。</li><li>Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。</li><li>总结：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</li></ul><ol start="5"><li>正则模块re<br>re.match()方法<br>决定RE是否在字符串刚开始的位置匹配,返回_sre.SRE_Match对象，如果不能匹配返回None。<br>注：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符’$’<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">re.match(pattern, string, flags&#x3D;0)</span><br><span class="line"></span><br><span class="line">print(re.match(&#39;com&#39;,&#39;comwww.runcomoob&#39;).group())</span><br><span class="line">print(re.match(&#39;com&#39;,&#39;Comwww.runcomoob&#39;,re.I).group())</span><br><span class="line">执行结果如下：</span><br><span class="line">com</span><br><span class="line">com</span><br></pre></td></tr></table></figure></li></ol><hr></br><h3 id="RBAC实现"><a href="#RBAC实现" class="headerlink" title="RBAC实现"></a>RBAC实现</h3><h4 id="开发RBAC流程"><a href="#开发RBAC流程" class="headerlink" title="开发RBAC流程"></a>开发RBAC流程</h4><ol><li>表结构设计</li><li>Django Admin录入数据</li><li>用户登陆<ul><li>获取角色</li><li>获取权限</li><li>对权限URL进行去重</li></ul></li><li>生成权限结构信息，写入session中<br>{<br> 1: {<pre><code>&apos;urls&apos;: [&apos;/userinfo/&apos;, &apos;/userinfo/add/&apos;, &apos;/userinfo/(\\d+)/delete/&apos;, &apos;/userinfo/(\\d+)/change/&apos;],&apos;codes&apos;: [&apos;list&apos;, &apos;add&apos;, &apos;del&apos;, &apos;edit&apos;]</code></pre> },<br> 2: {<pre><code>&apos;urls&apos;: [&apos;/order/&apos;, &apos;/order/add/&apos;, &apos;/order/(\\d+)/delete/&apos;, &apos;/order/(\\d+)/change/&apos;],&apos;codes&apos;: [&apos;list&apos;, &apos;add&apos;, &apos;del&apos;, &apos;edit&apos;]</code></pre> }<br>}</li><li>注册中间件<ul><li>白名单</li><li>获取当前访问url: request.path_info</li><li>session中获取权限，进行权限访问验证</li></ul></li><li>自动生成菜单功能<ul><li>采用自定义tag方式实现(inclusion_tag)</li><li>作为模板使用{ menu_html request }方式导入html文件中使用</li></ul></li><li>通过Django Admin后台进行管理及维护工作 </br></li></ol><h4 id="Django-ORM表结构设计"><a href="#Django-ORM表结构设计" class="headerlink" title="Django ORM表结构设计"></a>Django ORM表结构设计</h4><p><strong>5个类6张表</strong></p><ol><li>菜单表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Menu(models.Models):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    菜单表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32,verbose_name&#x3D;&#39;菜单标题&#39;)</span><br><span class="line">    </span><br><span class="line">     # django admin后台显示用</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;菜单表&quot;</span><br><span class="line">    # 重写__str__方法，实例化后的对象将以字符串的形式展示，但实际是一个obj,所以，请不要相信你的眼睛，必要时使用type(arg)进行验证</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br></pre></td></tr></table></figure></li><li>权限组表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Group(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    权限组</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    caption &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;组名称&quot;)</span><br><span class="line">    menu &#x3D; models.ForeignKey(to&#x3D;&quot;Menu&quot;, default&#x3D;1, blank&#x3D;True, verbose_name&#x3D;&quot;关联的菜单&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;权限组&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.caption</span><br></pre></td></tr></table></figure></li><li>权限表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Permission(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    权限表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;标题&quot;)</span><br><span class="line">    url &#x3D; models.CharField(max_length&#x3D;128, verbose_name&#x3D;&quot;含正则的URL&quot;)</span><br><span class="line">    # menu_gp为null说明是title为菜单项</span><br><span class="line">    menu_gp &#x3D; models.ForeignKey(to&#x3D;&quot;Permission&quot;, null&#x3D;True, blank&#x3D;True, verbose_name&#x3D;&quot;默认选中的组内权限ID&quot;, related_name&#x3D;&quot;pm&quot;)</span><br><span class="line">    code &#x3D; models.CharField(max_length&#x3D;16, verbose_name&#x3D;&quot;权限码&quot;)</span><br><span class="line">    group &#x3D; models.ForeignKey(to&#x3D;&quot;Group&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;所属组&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;权限表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br></pre></td></tr></table></figure></li><li>用户表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class User(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;用户名&quot;)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;64, verbose_name&#x3D;&quot;密码&quot;)</span><br><span class="line">    email &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;邮箱&quot;)</span><br><span class="line">    roles &#x3D; models.ManyToManyField(to&#x3D;&quot;Role&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;用户关联的角色&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;用户表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.username</span><br></pre></td></tr></table></figure></li><li>角色表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Role(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    角色表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;角色名称&quot;)</span><br><span class="line">    permissions &#x3D; models.ManyToManyField(to&#x3D;&quot;Permission&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;角色关联的权限&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;角色表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br></pre></td></tr></table></figure></li><li>附加</li></ol><ul><li>创建数据库表结构信息</li><li>创建超级用户</li><li>在admin.py中注册models类</li><li>登陆admin管理后台添加数据，进行管理</li></ul></br><h3 id="settings中添加配置项"><a href="#settings中添加配置项" class="headerlink" title="settings中添加配置项"></a>settings中添加配置项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在文件末尾添加配置信息</span><br><span class="line"></span><br><span class="line">vim projectname&#x2F;settings.py</span><br><span class="line"># ########################### 权限管理相关 ###########################3</span><br><span class="line">PERMISSION_MENU_KEY &#x3D; &quot;asdkjalsdf9uajsdf&quot;</span><br><span class="line">PERMISSION_URL_DICT_KEY &#x3D; &quot;iujmsufnsdflsdkf&quot;</span><br><span class="line"></span><br><span class="line">VALID_URL&#x3D; [</span><br><span class="line">    &#39;^&#x2F;login&#x2F;&#39;,</span><br><span class="line">    &quot;^&#x2F;admin*&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="初始化权限信息"><a href="#初始化权限信息" class="headerlink" title="初始化权限信息"></a>初始化权限信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#cat rbac&#x2F;service&#x2F;init_permission.py</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line">def init_permission(request,user):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户权限信息初始化，获取当前用户所有权限信息，并保存到Session中</span><br><span class="line">    此处的request以及user参数均为对象，user为登陆成功时在数据库中查询到的user对象</span><br><span class="line">    :param request:</span><br><span class="line">    :param user:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 去空去重</span><br><span class="line">    permission_list &#x3D; user.roles.filter(permissions__id__isnull&#x3D;False).values(</span><br><span class="line">        &#39;permissions__id&#39;,</span><br><span class="line">        &#39;permissions__title&#39;,                # 用户列表</span><br><span class="line">        &#39;permissions__url&#39;,</span><br><span class="line">        &#39;permissions__code&#39;,</span><br><span class="line">        &#39;permissions__menu_gp_id&#39;,           # 组内菜单ID，Null表示是菜单</span><br><span class="line">        &#39;permissions__group_id&#39;,             # 权限的组ID</span><br><span class="line">        &#39;permissions__group__menu_id&#39;,       # 当前权限所在组的菜单ID</span><br><span class="line">        &#39;permissions__group__menu__title&#39;,   # 当前权限所在组的菜单名称</span><br><span class="line">    ).distinct()</span><br><span class="line">    </span><br><span class="line">    # 菜单相关配置，在inclusion_tag中使用</span><br><span class="line">    menu_permission_list&#x3D; []</span><br><span class="line">    for item in permission_list:</span><br><span class="line">        tpl &#x3D; &#123;</span><br><span class="line">            &#39;id&#39;: item[&#39;permissions__id&#39;],</span><br><span class="line">            &#39;title&#39;: item[&#39;permissions__title&#39;],</span><br><span class="line">            &#39;url&#39;: item[&#39;permissions__url&#39;],</span><br><span class="line">            &#39;menu_gp_id&#39;: item[&#39;permissions_menu_gp_id&#39;],</span><br><span class="line">            &#39;menu_id&#39;: item[&#39;permissions__group__menu_id&#39;],</span><br><span class="line">            &#39;menu_title&#39;: item[&#39;permissions__group__menu__title&#39;] </span><br><span class="line">        &#125;</span><br><span class="line">        menu_permission_list.append(tpl)</span><br><span class="line">        request.session[settings.PERMISSION_MENU_KEY] &#x3D; menu_permission_list</span><br><span class="line">        # 形如</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;host&#x2F;&quot;,&quot;menu_title&quot;: &quot;主机管理&quot;,&quot;title&quot;: &quot;主机列表&quot;,&quot;id&quot;: 1,&quot;menu_gp_id&quot;: null,&quot;menu_id&quot;: 1&#125;,</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;host&#x2F;add&#x2F;&quot;,&quot;menu_title&quot;: &quot;主机管理&quot;,&quot;title&quot;: &quot;添加主机&quot;,&quot;id&quot;: 2,&quot;menu_gp_id&quot;: 1,&quot;menu_id&quot;: 1&#125;,</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;host&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,&quot;menu_title&quot;: &quot;主机管理&quot;,&quot;title&quot;: &quot;删除主机&quot;,&quot;id&quot;: 3,&quot;menu_gp_id&quot;: 1,&quot;menu_id&quot;: 1&#125;,</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;host&#x2F;(\\d+)&#x2F;change&#x2F;&quot;,&quot;menu_title&quot;: &quot;主机管理&quot;,&quot;title&quot;: &quot;修改主机&quot;,&quot;id&quot;: 4,&quot;menu_gp_id&quot;: 1,&quot;menu_id&quot;: 1&#125;</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;userinfo&#x2F;&quot;,&quot;menu_title&quot;: &quot;用户管理&quot;,&quot;title&quot;: &quot;用户列表&quot;,&quot;id&quot;: 5,&quot;menu_gp_id&quot;: null,&quot;menu_id&quot;: 2&#125;,</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;userinfo&#x2F;add&#x2F;&quot;,&quot;menu_title&quot;: &quot;用户管理&quot;,&quot;title&quot;: &quot;添加用户&quot;,&quot;id&quot;: 6,&quot;menu_gp_id&quot;: 5,&quot;menu_id&quot;: 2&#125;,</span><br><span class="line">        ......</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    # 权限相关，中间件使用</span><br><span class="line">    permission_dict &#x3D; &#123;&#125;</span><br><span class="line">    for item in permission_list:</span><br><span class="line">        group_id &#x3D; item[&#39;permissions__group_id&#39;]</span><br><span class="line">        code &#x3D; item[&#39;permissions__code&#39;]</span><br><span class="line">        url &#x3D; item[&#39;permissions__url&#39;]</span><br><span class="line">        if group_id in permission_dict:</span><br><span class="line">            permission_dict[group_id][&#39;codes&#39;].append(code)</span><br><span class="line">            permission_dict[group_id][&#39;urls&#39;].append(url)</span><br><span class="line">        else:</span><br><span class="line">            permission_dict[group_id] &#x3D; &#123;&quot;codes&quot;: [code, ], &quot;urls&quot;: [url, ]&#125;</span><br><span class="line">    request.session[settings.PERMISSION_URL_DICT_KEY] &#x3D; permission_dict</span><br><span class="line">    # 形如</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;1&quot;: &#123;</span><br><span class="line">            &quot;codes&quot;: [&quot;list&quot;,&quot;add&quot;,&quot;delete&quot;,&quot;edit&quot;],</span><br><span class="line">            &quot;urls&quot;: [&quot;&#x2F;host&#x2F;&quot;,&quot;&#x2F;host&#x2F;add&#x2F;&quot;,&quot;&#x2F;host&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,&quot;&#x2F;host&#x2F;(\\d+)&#x2F;change&#x2F;&quot;]</span><br><span class="line">         &#125;,</span><br><span class="line">        &quot;2&quot;: &#123;</span><br><span class="line">            &quot;codes&quot;: [&quot;list&quot;,&quot;add&quot;,&quot;delete&quot;,&quot;change&quot;],</span><br><span class="line">            &quot;urls&quot;: [&quot;&#x2F;userinfo&#x2F;&quot;,&quot;&#x2F;userinfo&#x2F;add&#x2F;&quot;,&quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,&quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;change&#x2F;&quot;]</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p><em>注: 用户登陆成功后进行初始化权限信息,在处理用户权限时需要进行数据去重</em></p><h3 id="菜单List及权限Dict格式如下所示："><a href="#菜单List及权限Dict格式如下所示：" class="headerlink" title="菜单List及权限Dict格式如下所示："></a>菜单List及权限Dict格式如下所示：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"># 菜单List request.session[settings.PERMISSION_MENU_KEY]</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;host&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;主机列表&quot;,</span><br><span class="line">        &quot;id&quot;: 1,</span><br><span class="line">        &quot;menu_gp_id&quot;: null,</span><br><span class="line">        &quot;menu_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;host&#x2F;add&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;添加主机&quot;,</span><br><span class="line">        &quot;id&quot;: 2,</span><br><span class="line">        &quot;menu_gp_id&quot;: 1,</span><br><span class="line">        &quot;menu_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;host&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;删除主机&quot;,</span><br><span class="line">        &quot;id&quot;: 3,</span><br><span class="line">        &quot;menu_gp_id&quot;: 1,</span><br><span class="line">        &quot;menu_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;host&#x2F;(\\d+)&#x2F;change&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;修改主机&quot;,</span><br><span class="line">        &quot;id&quot;: 4,</span><br><span class="line">        &quot;menu_gp_id&quot;: 1,</span><br><span class="line">        &quot;menu_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;用户列表&quot;,</span><br><span class="line">        &quot;id&quot;: 5,</span><br><span class="line">        &quot;menu_gp_id&quot;: null,</span><br><span class="line">        &quot;menu_id&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;add&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;添加用户&quot;,</span><br><span class="line">        &quot;id&quot;: 6,</span><br><span class="line">        &quot;menu_gp_id&quot;: 5,</span><br><span class="line">        &quot;menu_id&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;删除用户&quot;,</span><br><span class="line">        &quot;id&quot;: 7,</span><br><span class="line">        &quot;menu_gp_id&quot;: 5,</span><br><span class="line">        &quot;menu_id&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;change&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;修改用户&quot;,</span><br><span class="line">        &quot;id&quot;: 8,</span><br><span class="line">        &quot;menu_gp_id&quot;: 5,</span><br><span class="line">        &quot;menu_id&quot;: 2</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 权限Dict request.session[settings.PERMISSION_URL_DICT_KEY]</span><br><span class="line">&#123;</span><br><span class="line">    &quot;1&quot;: &#123;</span><br><span class="line">        &quot;codes&quot;: [</span><br><span class="line">            &quot;list&quot;,</span><br><span class="line">            &quot;add&quot;,</span><br><span class="line">            &quot;delete&quot;,</span><br><span class="line">            &quot;edit&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;urls&quot;: [</span><br><span class="line">            &quot;&#x2F;host&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;host&#x2F;add&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;host&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;host&#x2F;(\\d+)&#x2F;change&#x2F;&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;2&quot;: &#123;</span><br><span class="line">        &quot;codes&quot;: [</span><br><span class="line">            &quot;list&quot;,</span><br><span class="line">            &quot;add&quot;,</span><br><span class="line">            &quot;delete&quot;,</span><br><span class="line">            &quot;change&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;urls&quot;: [</span><br><span class="line">            &quot;&#x2F;userinfo&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;userinfo&#x2F;add&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;change&#x2F;&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">cat rbac&#x2F;middleware&#x2F;rbac.py</span><br><span class="line"></span><br><span class="line">from django.shortcuts import redirect,HttpResponse</span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line"># 在后续版本中可能会被废弃，故在此直接引入</span><br><span class="line">#from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">class MiddlewareMixin(object):</span><br><span class="line">    def __init__(self, get_response&#x3D;None):</span><br><span class="line">        self.get_response &#x3D; get_response</span><br><span class="line">        super(MiddlewareMixin, self).__init__()</span><br><span class="line"></span><br><span class="line">    def __call__(self, request):</span><br><span class="line">        response &#x3D; None</span><br><span class="line">        if hasattr(self, &#39;process_request&#39;):</span><br><span class="line">            response &#x3D; self.process_request(request)</span><br><span class="line">        if not response:</span><br><span class="line">            response &#x3D; self.get_response(request)</span><br><span class="line">        if hasattr(self, &#39;process_response&#39;):</span><br><span class="line">            response &#x3D; self.process_response(request, response)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line">class RbacMiddleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self,request):</span><br><span class="line">        # 1. 当前请求URL</span><br><span class="line">        current_request_url &#x3D; request.path_info</span><br><span class="line"></span><br><span class="line">        # 2. 处理白名单,如login及admin页面需开放访问权限，根据实际情况而定</span><br><span class="line">        for url in settings.VALID_URL_LIST:</span><br><span class="line">            if re.match(url,current_request_url):</span><br><span class="line">                return None</span><br><span class="line"></span><br><span class="line">        # 3. 获取session中保存的权限信息</span><br><span class="line">        permission_dict &#x3D; request.session.get(settings.PERMISSION_MENU_LIST)</span><br><span class="line">        if not permission_dict:</span><br><span class="line">            # 登陆页面</span><br><span class="line">            return redirect(settings.RBAC_LOGIN_URL)</span><br><span class="line"></span><br><span class="line">        flag &#x3D; False</span><br><span class="line">        for group_id, values in permission_dict.items():</span><br><span class="line">            for url in values[&#39;urls&#39;]:</span><br><span class="line">                regex &#x3D; settings.URL_FORMAT.format(url)</span><br><span class="line">                if re.match(regex, current_request_url):</span><br><span class="line">                    flag &#x3D; True</span><br><span class="line">                    break</span><br><span class="line">            if flag:</span><br><span class="line">                break</span><br><span class="line">        if not flag:</span><br><span class="line">            # 无权访问页面，可以直接redirect</span><br><span class="line">            return HttpResponse(&#39;无权访问&#39;)</span><br></pre></td></tr></table></figure></br><h4 id="自动生成菜单template-tags"><a href="#自动生成菜单template-tags" class="headerlink" title="自动生成菜单template tags"></a>自动生成菜单template tags</h4><ol><li>template tags部分<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2017&#x2F;11&#x2F;20</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line">from django.template import Library</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">register &#x3D; Library()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@register.inclusion_tag(&#39;menu.html&#39;)</span><br><span class="line">def menu_html(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    获取session中的菜单信息，匹配当前URL，生成菜单</span><br><span class="line">    :param request: 请求的requst对象</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    menu_list &#x3D; request.session.get(settings.PERMISSION_MENU_KEY)</span><br><span class="line">    # 当前请求URL</span><br><span class="line">    current_url &#x3D; request.path_info</span><br><span class="line"></span><br><span class="line">    menu_dict &#x3D; &#123;&#125;</span><br><span class="line">    # menu_gp_id为空则是菜单</span><br><span class="line">    for item in menu_list:</span><br><span class="line">        if not item[&#39;menu_gp_id&#39;]:</span><br><span class="line">            menu_dict[item[&#39;id&#39;]] &#x3D; item</span><br><span class="line"></span><br><span class="line">    for item in menu_list:</span><br><span class="line">        regax &#x3D; &quot;^&#123;0&#125;$&quot;.format(item[&#39;url&#39;])</span><br><span class="line">        if re.match(regax, current_url):</span><br><span class="line">            menu_gp_id &#x3D; item[&#39;menu_gp_id&#39;]</span><br><span class="line">            if menu_gp_id:</span><br><span class="line">                menu_dict[menu_gp_id][&#39;active&#39;] &#x3D; True</span><br><span class="line">            else:</span><br><span class="line">                menu_dict[item[&#39;id&#39;]][&#39;active&#39;] &#x3D; True</span><br><span class="line"></span><br><span class="line">    result &#x3D; &#123;&#125;</span><br><span class="line">    for item in menu_dict.values():</span><br><span class="line">        active &#x3D; item.get(&#39;active&#39;)</span><br><span class="line">        menu_id &#x3D; item[&#39;menu_id&#39;]</span><br><span class="line">        if menu_id in result:</span><br><span class="line">            result[menu_id][&#39;children&#39;].append(&#123;&#39;title&#39;: item[&#39;title&#39;], &#39;url&#39;: item[&#39;url&#39;], &#39;active&#39;: active&#125;)</span><br><span class="line">            if active:</span><br><span class="line">                result[menu_id][&#39;active&#39;] &#x3D; True</span><br><span class="line">        else:</span><br><span class="line">            result[menu_id] &#x3D; &#123;</span><br><span class="line">                &#39;menu_id&#39;: item[&#39;menu_id&#39;],</span><br><span class="line">                &#39;menu_title&#39;: item[&#39;menu_title&#39;],</span><br><span class="line">                &#39;active&#39;: active,</span><br><span class="line">                &#39;children&#39;: [</span><br><span class="line">                    &#123;&#39;title&#39;: item[&#39;title&#39;], &#39;url&#39;: item[&#39;url&#39;], &#39;active&#39;: active&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">    print(json.dumps(result, indent&#x3D;4, ensure_ascii&#x3D;False))</span><br><span class="line">    return &#123;&#39;menu_dict&#39;: result&#125;</span><br></pre></td></tr></table></figure></li><li>生成的菜单树格式如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;1&quot;: &#123;</span><br><span class="line">        &quot;children&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;url&quot;: &quot;&#x2F;host&#x2F;&quot;,</span><br><span class="line">                &quot;active&quot;: null,</span><br><span class="line">                &quot;title&quot;: &quot;主机列表&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;menu_id&quot;: 1,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;active&quot;: null</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;2&quot;: &#123;</span><br><span class="line">        &quot;children&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;&quot;,</span><br><span class="line">                &quot;active&quot;: null,</span><br><span class="line">                &quot;title&quot;: &quot;用户列表&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;menu_id&quot;: 2,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;active&quot;: null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>menu_tpl.html部分<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for k,item in menu_dict.items %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;item&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;item-title&quot;&gt; &#123;&#123; item.menu_title &#125;&#125; &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% if item.active %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;item-permission&quot;&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;item-permission hide&quot;&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">            &#123;% for v in item.children %&#125;</span><br><span class="line">                &#123;% if v.active %&#125;</span><br><span class="line">                    &lt;a href&#x3D;&quot;&#123;&#123; v.url &#125;&#125;&quot; class&#x3D;&quot;active&quot;&gt;&#123;&#123; v.title &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    &lt;a href&#x3D;&quot;&#123;&#123; v.url &#125;&#125;&quot;&gt;&#123;&#123; v.title &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li>HTML部分使用tags<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 上文中的menu_html函数依赖request参数，此处需要传入</span><br><span class="line">&#123; load rbac &#125;</span><br><span class="line">&#123; menu_html request &#125;</span><br></pre></td></tr></table></figure></li></ol><p><em>注: 自定义tags只支持传入1个参数</em><br></br></p><h4 id="注册中间件使用"><a href="#注册中间件使用" class="headerlink" title="注册中间件使用"></a>注册中间件使用</h4><p>project/settings.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE &#x3D; [</span><br><span class="line">    &#39;django.middleware.security.SecurityMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.common.CommonMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,</span><br><span class="line">    &#39;rbac.middleware.rbac.RbacMiddleware&#39;,</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h4><p>在Django Admin中维护rbac的权限系统并使用<br></br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，基于role实现的rbac组件基本开发完成，在Django中作为app引入在settings文件中注册后就可以生效使用了,engoy it!</p>]]></content>
    
    <summary type="html">
    
      Django基于RBAC的权限组件
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django基于Admin原理实现的CURD组件</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:10:38.000Z</published>
    <updated>2020-04-20T06:11:00.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django基于Admin原理实现的CURD组件"><a href="#Django基于Admin原理实现的CURD组件" class="headerlink" title="Django基于Admin原理实现的CURD组件"></a>Django基于Admin原理实现的CURD组件</h1><hr></br><h2 id="Django管理后台admin"><a href="#Django管理后台admin" class="headerlink" title="Django管理后台admin"></a>Django管理后台admin</h2><p>常用共29个功能: <a href="http://www.cnblogs.com/wupeiqi/articles/7444717.html" target="_blank" rel="noopener">参考</a></p><ol><li>在项目的app中的admin.py文件中注册models类，示例如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"># cat app_name&#x2F;admin.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.contrib.admin import ModelAdmin</span><br><span class="line">from . import models</span><br><span class="line">from django.shortcuts import HttpResponse</span><br><span class="line">from django.forms import ModelForm</span><br><span class="line">from django.forms import fields</span><br><span class="line">from django.forms import widgets</span><br><span class="line"></span><br><span class="line"># 用户表,自定义admin后台错误信息提示</span><br><span class="line">class UserModelForm(ModelForm):</span><br><span class="line">    others &#x3D; fields.CharField()</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; models.UserInfo</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br><span class="line">        error_messages &#x3D; &#123;</span><br><span class="line">            &#39;name&#39;:&#123;&#39;required&#39;:&#39;用户名不能问空&#39;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">class UserInfoModelAdmin(ModelAdmin):</span><br><span class="line">    # 使用自定义的form表单验证功能</span><br><span class="line">    form &#x3D; UserModelForm</span><br><span class="line"></span><br><span class="line">    # 1.定义列表页面，显示列数据</span><br><span class="line">    list_display &#x3D; [&#39;name&#39;,&#39;pwd&#39;,&#39;email&#39;]</span><br><span class="line"></span><br><span class="line">    def email(self, obj):</span><br><span class="line">        return obj.name + obj.pwd</span><br><span class="line"></span><br><span class="line">    email.empty_value_display &#x3D; &quot;默认为空时显示的值&quot;</span><br><span class="line"></span><br><span class="line">    # 2.定义列表页面，列可以进行点击进入编辑页面</span><br><span class="line">    list_display_links &#x3D; [&#39;pwd&#39;]</span><br><span class="line">    </span><br><span class="line">    # 3.定义列表页面，快速搜索</span><br><span class="line">    list_filter &#x3D; [&#39;ut&#39;]</span><br><span class="line">    </span><br><span class="line">    # 4.定义列表页面，分页功能</span><br><span class="line">    list_per_page &#x3D; 10</span><br><span class="line">    </span><br><span class="line">    # 5. 列是否可编辑</span><br><span class="line">    list_editable &#x3D; [&#39;name&#39;]</span><br><span class="line"></span><br><span class="line">    # 6. 查询列</span><br><span class="line">    search_fields &#x3D; [&#39;name&#39;,&#39;pwd&#39;]</span><br><span class="line"></span><br><span class="line">    # 7. 是否在页面顶端显示保存按钮</span><br><span class="line">    # save_on_top &#x3D; True</span><br><span class="line"></span><br><span class="line">    # 8. 下拉选项的批量操作，类似于批量删除功能</span><br><span class="line">    def func(self, request, queryset):</span><br><span class="line">        print(self, request, queryset)</span><br><span class="line">        id_list &#x3D; request.POST.getlist(&#39;_selected_action&#39;)</span><br><span class="line">        # models.UserInfo.objects.filter(id__in&#x3D;id_list).delete()</span><br><span class="line"></span><br><span class="line">    func.short_description &#x3D; &quot;批量初始化&quot;</span><br><span class="line"></span><br><span class="line">    actions &#x3D; [func, ]</span><br><span class="line"></span><br><span class="line">    # 9. 列表页面使用模板文件</span><br><span class="line">    change_list_template &#x3D; [&#39;xxx.html&#39;]</span><br><span class="line">    </span><br><span class="line">    # raw_id_fields &#x3D; [&#39;ut&#39;,]</span><br><span class="line">    # fields &#x3D; [&#39;name&#39;]</span><br><span class="line">    # exclude &#x3D; [&#39;name&#39;,]</span><br><span class="line">    </span><br><span class="line">    # 10. 分类展示</span><br><span class="line">    # fieldsets &#x3D; (</span><br><span class="line">    #     (&#39;基本数据&#39;, &#123;</span><br><span class="line">    #         &#39;fields&#39;: (&#39;name&#39;,)</span><br><span class="line">    #     &#125;),</span><br><span class="line">    #     (&#39;其他&#39;, &#123;</span><br><span class="line">    #         &#39;classes&#39;: (&#39;collapse&#39;, &#39;wide&#39;, &#39;extrapretty&#39;),  # &#39;collapse&#39;,&#39;wide&#39;, &#39;extrapretty&#39;</span><br><span class="line">    #         &#39;fields&#39;: (&#39;pwd&#39;, &#39;ut&#39;),</span><br><span class="line">    #     &#125;),</span><br><span class="line">    # )</span><br><span class="line"></span><br><span class="line">    # 11.快速过滤</span><br><span class="line">    # filter_vertical &#x3D; (&quot;roles&quot;,)</span><br><span class="line">    filter_horizontal &#x3D; (&quot;roles&quot;,)</span><br><span class="line">    </span><br><span class="line">    # 12. 排序</span><br><span class="line">    ordering &#x3D; [&#39;-id&#39;]</span><br><span class="line"></span><br><span class="line"># 注册使用自定义的UserInfoModelAdmin类的页面展示规则</span><br><span class="line">admin.site.register(models.UserInfo,UserInfoModelAdmin)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2. 用户类型表(基于ModelAdmin类)</span><br><span class="line">class UserTypeModelAdmin(ModelAdmin):</span><br><span class="line">    list_display &#x3D; [&#39;title&#39;]</span><br><span class="line">    </span><br><span class="line">admin.site.register(models.UserType,UserTypeModelAdmin)</span><br></pre></td></tr></table></figure></li></ol><p><em>注: 默认使用ModelAdmin类进行后台操作，可以定义自己的calss，通过继承ModelAdmin类实现定制页面展示功能</em><br>2. Django自带Admin原理<br>2.1 每注册一个model类，Django内部会生成4个对应的增删改查URL，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">URL:</span><br><span class="line">    &#x2F;admin&#x2F;app_name&#x2F;model_name&#x2F;</span><br><span class="line">    &#x2F;admin&#x2F;app_name&#x2F;model_name&#x2F;add&#x2F;</span><br><span class="line">    &#x2F;admin&#x2F;app_name&#x2F;model_name&#x2F;1&#x2F;change&#x2F;</span><br><span class="line">    &#x2F;admin&#x2F;app_name&#x2F;model_name&#x2F;1&#x2F;delete&#x2F;</span><br><span class="line">    例：&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;</span><br></pre></td></tr></table></figure><p>2.2 内部实现机制</p><ul><li>在app下面的admin.py文件中注册models类;</li><li>Django程序在启动时会循环所有app下面的admin文件中注册的models类，为每个models类生成对应的增删改查4个URL;</li><li>每个注册的model类会封装一个用于处理当前类所对应的URL的view对象,用于处理CURD操作，默认为ModelAdmin类对象;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. self.model&#x3D;models.UserInfo</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;                obj1.changelist_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;add&#x2F;            obj1.add_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;(\d+)&#x2F;delete&#x2F;   obj1.delete_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;(\d+)&#x2F;change&#x2F;   obj1.change_view</span><br><span class="line"></span><br><span class="line">2. self.model&#x3D;models.UserType</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;usertype&#x2F;                obj2.changelist_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;usertype&#x2F;add&#x2F;            obj2.add_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;usertype&#x2F;(\d+)&#x2F;delete&#x2F;   obj2.delete_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;usertype&#x2F;(\d+)&#x2F;change&#x2F;   obj2.change_view</span><br></pre></td></tr></table></figure></br></li></ul><h2 id="自定义实现CURD类似Admin功能"><a href="#自定义实现CURD类似Admin功能" class="headerlink" title="自定义实现CURD类似Admin功能"></a>自定义实现CURD类似Admin功能</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>了解django启动时执行的启动文件顺序</li><li>制作启动文件</li><li>settings.py配置文件中注册启动文件使全局生效</li><li>实现组件CURD业务逻辑</li><li>主要参考Django Admin的实现，利用单利模式和include原理实现路由分发</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><em>假设组件app名称为: arya</em></p><ol><li>Django程序启动顺序<br>在程序启动时，django会根据配置项INSTALLED_APPS中注册的启动文件，遍历每个App下面对应的注册启动文件,在arya组件下面的app.py文件中实现ready方法激活启动文件,如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># arya&#x2F;app.py</span><br><span class="line"></span><br><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line">class AryaConfig(AppConfig):</span><br><span class="line">    name &#x3D; &#39;arya&#39;</span><br><span class="line"></span><br><span class="line">    # Django启动时自动扫描所有app下面的arya模块</span><br><span class="line">    def ready(self):</span><br><span class="line">        from django.utils.module_loading import autodiscover_modules</span><br><span class="line">        autodiscover_modules(&#39;arya&#39;)</span><br></pre></td></tr></table></figure></li><li>在项目的setting.py文件中配置，激活组件，使全局生效，此时Django启动时，在完全启动前，便会扫描所有app下面的arya.py文件并加载生效<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    &#39;arya.apps.AryaConfig&#39;,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>核心代码逻辑实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"># cat arya&#x2F;seevice&#x2F;v1.py</span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.shortcuts import render, HttpResponse, redirect</span><br><span class="line"></span><br><span class="line">class AryaConfig(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    每个models类的URL对应处理的View实现</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, model_class, site):</span><br><span class="line">        self.model_class &#x3D; model_class</span><br><span class="line">        # View对象</span><br><span class="line">        self.site &#x3D; site</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def urls(self):</span><br><span class="line">        partterns &#x3D; [</span><br><span class="line">            url(r&#39;^$&#39;, self.changelist_view),</span><br><span class="line">            url(r&#39;^add&#x2F;&#39;, self.add_view),</span><br><span class="line">            url(r&#39;^(\d+)&#x2F;change&#x2F;$&#39;, self.change_view),</span><br><span class="line">            url(r&#39;^(\d+)&#x2F;delete&#x2F;$&#39;, self.delete_view)</span><br><span class="line">        ]</span><br><span class="line">        return partterns</span><br><span class="line"></span><br><span class="line">    def changelist_view(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        列表试图</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # return HttpResponse(&quot;列表页面&quot;)</span><br><span class="line">        return render(request, &#39;arya&#x2F;changelist.html&#39;)</span><br><span class="line"></span><br><span class="line">    def add_view(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        添加试图</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return HttpResponse(&quot;添加试图&quot;)</span><br><span class="line"></span><br><span class="line">    def change_view(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        修改试图</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return HttpResponse(&quot;修改试图&quot;)</span><br><span class="line"></span><br><span class="line">    def delete_view(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        删除试图</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return HttpResponse(&quot;删除试图&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AryaSite(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    实现类似于admin.site.register()功能</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    # 存放所有的models类及对应处理UTRL的的view对象</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self._registry &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    def register(self, class_name, config_class):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        注册方法,封装对象</span><br><span class="line">        self._registry &#x3D; &#123;</span><br><span class="line">            module.UserInfo: obj1,  # obj1 &#x3D; AryaConfig(models.UserInfo,site),</span><br><span class="line">            module.UserType: obj2,  # obj2 &#x3D; AryaConfig(models.UserType,site),</span><br><span class="line">        &#125;</span><br><span class="line">        :param class_name: models类</span><br><span class="line">        :param config_class: 对应的View类(AryaConfig)</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self._registry[class_name] &#x3D; config_class(class_name, self)</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def urls(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        处理子路由</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        partterns &#x3D; [</span><br><span class="line">            url(r&#39;^login&#x2F;$&#39;, self.login),</span><br><span class="line">            url(r&#39;^logout&#x2F;$&#39;, self.logout),</span><br><span class="line">        ]</span><br><span class="line">        # 循环self._registry属性里面的每一个元素，key为models类，value为URLS对应处理的类obj对象</span><br><span class="line">        for model_class, arya_config_obj in self._registry.items():</span><br><span class="line">            # 分别为app名称和models的类名称</span><br><span class="line">            print(&quot;*&quot; * 50)</span><br><span class="line">            print(model_class._meta.app_label, model_class._meta.model_name)</span><br><span class="line">            app_model_name_urls &#x3D; r&#39;^&#123;0&#125;&#x2F;&#123;1&#125;&#x2F;&#39;.format(model_class._meta.app_label, model_class._meta.model_name)</span><br><span class="line">            # arya_config_obj.urls self._registry字典中存放的values对象obj下面的urls方法</span><br><span class="line">            pt &#x3D; url(app_model_name_urls, (arya_config_obj.urls, None, None))</span><br><span class="line">            partterns.append(pt)</span><br><span class="line">        # 3元组</span><br><span class="line">        return partterns, None, None</span><br><span class="line"></span><br><span class="line">    def login(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        登陆</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return redirect(&#39;login&#39;)</span><br><span class="line"></span><br><span class="line">    def logout(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        退出</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return redirect(&#39;login&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 实例化，利用单例模式</span><br><span class="line">site &#x3D; AryaSite()</span><br></pre></td></tr></table></figure></br></li></ol><h3 id="引入arya组件并使用"><a href="#引入arya组件并使用" class="headerlink" title="引入arya组件并使用"></a>引入arya组件并使用</h3><ol><li><p>创建app，引入arya组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建多个app，并在每个app下面创建arya.py文件，用于实现CURD操作</span><br><span class="line">django startapp app01</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>在app01下面创建models模型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># cat app01&#x2F;models.py</span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class UserType(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户类型表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;用户类型&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;用户类型表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Role(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    角色表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    caption &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;角色名&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;角色表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.caption</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserInfo(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;用户名&quot;)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;64, verbose_name&#x3D;&quot;密码&quot;)</span><br><span class="line">    email &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;邮箱&quot;)</span><br><span class="line">    ut &#x3D; models.ForeignKey(to&#x3D;&quot;UserType&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;用户类型&quot;)</span><br><span class="line">    roles &#x3D; models.ManyToManyField(to&#x3D;&quot;Role&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;所属角色&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;用户表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.username</span><br></pre></td></tr></table></figure></li><li><p>生成表结构并制作部分展示数据，可以直接在表中添加，也可以通过admin后台进行添加</p></li><li><p>在app01中的arya.py文件中注册models类并自定义实现展示UI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># cat app01&#x2F;arya.py</span><br><span class="line"></span><br><span class="line">from arya.service import v1</span><br><span class="line">from . import models</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># 自定义属性控制UI展示</span><br><span class="line">class UserInfoConfig(v1.AryaConfig):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    自定义用户信息UI</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    list_display &#x3D; [&#39;username&#39;, &#39;ut&#39;, &#39;roles&#39;, &#39;email&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserTypeConfig(v1.AryaConfig):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    自定义用户类型UI</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    list_display &#x3D; [&#39;title&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class RoleConfig(v1.AryaConfig):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    自定义角色UI</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    list_display &#x3D; [&#39;caption&#39;]</span><br><span class="line"></span><br><span class="line"># 注册models</span><br><span class="line">v1.site.register(models.UserInfo, UserInfoConfig)</span><br><span class="line">v1.site.register(models.UserType, UserTypeConfig)</span><br><span class="line">v1.site.register(models.Role, RoleConfig)</span><br></pre></td></tr></table></figure></li><li><p>在项目中应用arya组件，使URL生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#cat project_name&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from arya.service import v1</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line"># url的第二个参数返回类型为([],None,None)的元组,源码见include方法</span><br><span class="line"># 此处的login和logut也可以使用arya&#x2F;service&#x2F;v1.py文件中定义的路由，示例为自己实现</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    # 此处会生成对应的多个URL子路由</span><br><span class="line">    url(r&#39;^arya&#x2F;&#39;, v1.site.urls),</span><br><span class="line">    url(r&#39;^index&#x2F;$&#39;, views.index, name&#x3D;&quot;index&quot;),</span><br><span class="line">    url(r&#39;^login&#x2F;$&#39;, views.login, name&#x3D;&quot;login&quot;),</span><br><span class="line">    url(r&#39;^logout&#x2F;$&#39;, views.logout, name&#x3D;&quot;logout&quot;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>路由试图处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># cat project_name&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.shortcuts import render, redirect</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line">def login(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    登陆</span><br><span class="line">    :param request:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">        return render(request, &#39;login.html&#39;)</span><br><span class="line">    else:</span><br><span class="line">        username &#x3D; request.POST.get(&#39;username&#39;)</span><br><span class="line">        password &#x3D; request.POST.get(&#39;password&#39;)</span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;username, password&#x3D;password).first()</span><br><span class="line">        if obj:</span><br><span class="line">            request.session[&#39;userinfo&#39;] &#x3D; &#123;&#39;username&#39;: obj.username, &#39;is_login&#39;: True&#125;</span><br><span class="line">            return redirect(&#39;index&#39;)</span><br><span class="line">        return render(request, &#39;login.html&#39;, &#123;&#39;msg&#39;: &#39;用户名或密码错误&#39;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def logout(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    退出</span><br><span class="line">    :param request:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">        return redirect(&#39;login&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    首页</span><br><span class="line">    :param request:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">        return render(request, &#39;index.html&#39;)</span><br></pre></td></tr></table></figure></li><li><p>项目URL<br>此时在项目的路由中已经存在对应增删改查的4个URL，如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># app_nmae 应用名</span><br><span class="line"># models_name models类名小写</span><br><span class="line">arya&#x2F;app_name&#x2F;models_name&#x2F;</span><br><span class="line">arya&#x2F;app_name&#x2F;models_name&#x2F;add&#x2F;</span><br><span class="line">arya&#x2F;app_name&#x2F;models_name&#x2F;(\d+)&#x2F;change&#x2F;</span><br><span class="line">arya&#x2F;app_name&#x2F;models_name&#x2F;(\d+)&#x2F;delete&#x2F;</span><br><span class="line"># 在该示例中为: </span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;arya&#x2F;app01&#x2F;userinfo&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;arya&#x2F;app01&#x2F;userinfo&#x2F;add&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;arya&#x2F;app01&#x2F;userinfo&#x2F;()</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li><li><p>扩展<br>在每个app下面的arya.py文件中继承arya组件中的service.v1.AryaConfig类，自己内部实现处理URL的view以及定制化操作</p></br>  </li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  至此，自定义实现的类似Django admin组件基本开发完成，能够满足models模型数据的CURD操作。在Django中作为app引入CustAdmin组件，然后在settings文件中注册后就<br>可以生效使用了,engoy it!</p><p><a href="https://github.com/shuke163/CustAdmin" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      Django基于Admin原理实现的CURD组件
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django 聚合</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:09:59.000Z</published>
    <updated>2020-04-20T06:10:24.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-聚合"><a href="#Django-聚合" class="headerlink" title="Django 聚合"></a>Django 聚合</h1><hr><ol><li>在查询集上生成聚合(aggregate)<br>aggregate()是QuerySet 的一个终止子句，意思是说，它返回一个包含一些键值对的字典。键的名称是聚合值的标识符，值是计算出来的聚合值。键的名称是按照字段和聚合函数的名称自动生成出来的。如果你想要为聚合值指定一个名称，可以向聚合子句提供它。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Book.objects.aggregate(average_price&#x3D;Avg(&#39;price&#39;))</span><br><span class="line">&#123;&#39;average_price&#39;: 34.35&#125;</span><br></pre></td></tr></table></figure></li><li>为查询集的每一项生成聚合(annotate)<br>逐个对象的汇总结果可以由annotate()子句生成。当annotate()子句被指定之后，QuerySet中的每个对象都会被注上特定的值。<br>这些注解的语法都和aggregate()子句所使用的相同。annotate()的每个参数都描述了将要被计算的聚合。比如，给图书添加作者数量的注解：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Build an annotated queryset</span><br><span class="line">&gt;&gt;&gt; from django.db.models import Count</span><br><span class="line">&gt;&gt;&gt; q &#x3D; Book.objects.annotate(Count(&#39;authors&#39;))</span><br><span class="line"># Interrogate the first object in the queryset</span><br><span class="line">&gt;&gt;&gt; q[0]</span><br><span class="line">&lt;Book: The Definitive Guide to Django&gt;</span><br><span class="line">&gt;&gt;&gt; q[0].authors__count</span><br><span class="line">2</span><br><span class="line"># Interrogate the second object in the queryset</span><br><span class="line">&gt;&gt;&gt; q[1]</span><br><span class="line">&lt;Book: Practical Django Projects&gt;</span><br><span class="line">&gt;&gt;&gt; q[1].authors__count</span><br><span class="line">1</span><br></pre></td></tr></table></figure>和使用 aggregate()一样，注解的名称也根据聚合函数的名称和聚合字段的名称得到的。你可以在指定注解时，为默认名称提供一个别名：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; q &#x3D; Book.objects.annotate(num_authors&#x3D;Count(&#39;authors&#39;))</span><br><span class="line">&gt;&gt;&gt; q[0].num_authors</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; q[1].num_authors</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>与 aggregate() 不同的是， annotate() 不是一个终止子句。annotate()子句的返回结果是一个查询集 (QuerySet)；这个 QuerySet可以用任何QuerySet方法进行修改，包括 filter(), order_by(), 甚至是再次应用annotate()。</p><p><a href="http://python.usyiyi.cn/documents/django_182/topics/db/aggregation.html" target="_blank" rel="noopener">Django 聚合</a></p>]]></content>
    
    <summary type="html">
    
      Django 聚合
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django 自定义分页实现</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:09:17.000Z</published>
    <updated>2020-04-20T06:09:42.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django-自定义分页实现"><a href="#Django-自定义分页实现" class="headerlink" title="Django 自定义分页实现"></a>Django 自定义分页实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2017&#x2F;9&#x2F;9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Page(object):</span><br><span class="line">    def __init__(self, current_page, all_count, base_url, per_page&#x3D;10, pager_page_count&#x3D;11):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :param current_page: 当前页</span><br><span class="line">        :param all_count: 数据总条数</span><br><span class="line">        :param base_url: 分页的url</span><br><span class="line">        :param per_page: 每页显示的数据条数</span><br><span class="line">        :param pager_page_count: 每页显示的页码数量</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.current_page &#x3D; current_page</span><br><span class="line">        self.per_page &#x3D; per_page</span><br><span class="line">        self.all_count &#x3D; all_count</span><br><span class="line">        self.base_url &#x3D; base_url</span><br><span class="line">        self.pager_page_count &#x3D; pager_page_count</span><br><span class="line">        pager_count, b &#x3D; divmod(all_count, per_page)</span><br><span class="line">        if b !&#x3D; 0:</span><br><span class="line">            pager_count +&#x3D; 1</span><br><span class="line">        self.pager_count &#x3D; pager_count</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def start(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        数据库获取值的起始索引位置</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return (self.current_page - 1) * self.per_page</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def end(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        数据库获取值的结束索引位置</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.current_page * self.per_page</span><br><span class="line"></span><br><span class="line">    def page_html(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        渲染的HTML页码</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 页码</span><br><span class="line">        pager_page_count &#x3D; self.pager_page_count</span><br><span class="line">        half_pager_page_count &#x3D; int(pager_page_count &#x2F; 2)</span><br><span class="line"></span><br><span class="line">        if self.pager_count &lt; self.pager_page_count:</span><br><span class="line">            pager_start &#x3D; 1</span><br><span class="line">            pager_end &#x3D; self.pager_count</span><br><span class="line">        else:</span><br><span class="line">            # 数据较多，页码超过11，最少110条</span><br><span class="line">            if self.current_page &lt;&#x3D; half_pager_page_count:</span><br><span class="line">                pager_start &#x3D; 1</span><br><span class="line">                pager_end &#x3D; pager_page_count</span><br><span class="line">            else:</span><br><span class="line">                if (self.current_page + half_pager_page_count) &gt; self.pager_count:</span><br><span class="line">                    pager_start &#x3D; self.pager_count - pager_page_count + 1</span><br><span class="line">                    pager_end &#x3D; self.pager_count</span><br><span class="line">                else:</span><br><span class="line">                    pager_start &#x3D; self.current_page - half_pager_page_count</span><br><span class="line">                    pager_end &#x3D; self.current_page + half_pager_page_count</span><br><span class="line">        page_list &#x3D; []</span><br><span class="line">        if self.current_page &lt;&#x3D; 1:</span><br><span class="line">            # prev &#x3D; &#39;&lt;a href&#x3D;&quot;#&quot;&gt;上一页&lt;&#x2F;a&gt;&#39;</span><br><span class="line">            prev &#x3D; &#39;&lt;li class&#x3D;&quot;disabled&quot;&gt;&lt;a href&#x3D;&quot;#&quot; aria-label&#x3D;&quot;Previous&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;laquo;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">        else:</span><br><span class="line">            # prev &#x3D; &#39;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;上一页&lt;&#x2F;a&gt;&#39; % (self.base_url, self.current_page - 1,)</span><br><span class="line">            prev &#x3D; &#39;&lt;li&gt;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot; aria-label&#x3D;&quot;Previous&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;laquo;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39; % \</span><br><span class="line">                   (self.base_url, self.current_page - 1)</span><br><span class="line">        page_list.append(prev)</span><br><span class="line">        for i in range(pager_start, pager_end + 1):</span><br><span class="line">            if self.current_page &#x3D;&#x3D; i:</span><br><span class="line">                # tpl &#x3D; &#39;&lt;a class&#x3D;&quot;active&quot; href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;%s&lt;&#x2F;a&gt;&#39; % (self.base_url, i, i)</span><br><span class="line">                tpl &#x3D; &#39;&lt;li class&#x3D;&quot;active&quot;&gt;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;%s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39; % (self.base_url, i, i)</span><br><span class="line">            else:</span><br><span class="line">                # tpl &#x3D; &#39;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;%s&lt;&#x2F;a&gt;&#39; % (self.base_url, i, i)</span><br><span class="line">                tpl &#x3D; &#39;&lt;li&gt;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;%s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39; % (self.base_url, i, i)</span><br><span class="line">            page_list.append(tpl)</span><br><span class="line"></span><br><span class="line">        if self.current_page &gt;&#x3D; self.pager_count:</span><br><span class="line">            # nex &#x3D; &#39;&lt;a href&#x3D;&quot;#&quot;&gt;下一页&lt;&#x2F;a&gt;&#39;</span><br><span class="line">            nex &#x3D; &#39;&lt;li class&#x3D;&quot;disabled&quot;&gt;&lt;a href&#x3D;&quot;#&quot; aria-label&#x3D;&quot;Next&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;raquo;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">        else:</span><br><span class="line">            # nex &#x3D; &#39;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;下一页&lt;&#x2F;a&gt;&#39; % (self.base_url, self.current_page + 1,)</span><br><span class="line">            nex &#x3D; &#39;&lt;li&gt;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot; aria-label&#x3D;&quot;Next&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;raquo;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39; % \</span><br><span class="line">                  (self.base_url, self.current_page + 1)</span><br><span class="line">        page_list.append(nex)</span><br><span class="line">        page_str &#x3D; &quot;&quot;.join(page_list)</span><br><span class="line">        return page_str</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Django 自定义分页实现
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>日期格式转换</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:08:30.000Z</published>
    <updated>2020-04-20T06:08:53.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日期格式转换"><a href="#日期格式转换" class="headerlink" title="日期格式转换"></a>日期格式转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2017&#x2F;9&#x2F;11</span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line">from datetime import date</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">class JsonCustomEncoder(json.JSONEncoder):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    处理datetime格式数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def default(self, field):</span><br><span class="line">        if isinstance(field, datetime):</span><br><span class="line">            return field.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)</span><br><span class="line">        elif isinstance(field, date):</span><br><span class="line">            return field.strftime(&#39;%Y-%m-%d&#39;)</span><br><span class="line">        else:</span><br><span class="line">            return json.JSONEncoder.default(self, field)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      日期格式转换
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>如何禁用自动命名的Django迁移</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:06:52.000Z</published>
    <updated>2020-04-20T06:07:10.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何禁用自动命名的Django迁移"><a href="#如何禁用自动命名的Django迁移" class="headerlink" title="如何禁用自动命名的Django迁移"></a>如何禁用自动命名的Django迁移</h2><blockquote><p>本文主要介绍如何在<code>Django</code>执行<code>makemigrations</code>时完成文件的命名</p></blockquote><p>当你运行Django的manage.py makemigrations时，它将根据迁移的内容为迁移生成一个名称。例如，如果你是在添加单个字段，它会将迁移命名为0002_mymodel_myfield.py。但是，当你的迁移中包含不止一步操作时，它将使用一个简单的‘auto’和当前日期+时间进行命名，例如，0002_auto_20200113_1837.py。你可以为makemigrations提供-n/–name参数，但是开发人员经常会忘记这一点。</p><p>命名是编程中一个众所周知的难题。管理这些具有自动名称的迁移会很困难: 如果不打开它们，你就无法分辨哪个是哪个，而且如果它们是在同一天生成的，它们就会有相同的名称，那你就可能会混淆它们。</p><p>这在以下情况中会非常令人头疼:</p><ul><li>变基分支</li><li>挖掘历史记录</li><li>部署到生产环境</li></ul><p>在最坏的情况下，运行错误的迁移可能会导致数据丢失!<br>我们还很容易忘记修改迁移名称和提交，因为Django不会提示你输入一个更好的名称。我们可以通过一些自动化措施来防范这种情况!</p><p>让我们来看看实现这一点的三种技术。</p><ol><li><strong>重写makemigrations以要求提供 -n/–name</strong><br>这个方法使用了重写内置管理命令的技术，这与我在文章《让Django测试总是重新构建数据库(如果它存在的话)》中使用的技术相同。</li></ol><p>在你的项目的“核心”应用程序中添加一个新的makemigrations命令(例如:myapp/management/commands/makemigrations.py)，内容如下:</p>]]></content>
    
    <summary type="html">
    
      如何禁用自动命名的Django迁移
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>什么是RESTful API以及Django RestFramework</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:04:45.000Z</published>
    <updated>2020-04-20T06:05:11.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-什么是RESTful-API以及Django-RestFramework"><a href="#一-什么是RESTful-API以及Django-RestFramework" class="headerlink" title="一. 什么是RESTful API以及Django RestFramework"></a>一. 什么是RESTful API以及Django RestFramework</h2><h3 id="1-协议"><a href="#1-协议" class="headerlink" title="1. 协议"></a>1. 协议</h3><p>API与用户的通信协议，总是使用HTTPS协议。</p><h3 id="2-域名"><a href="#2-域名" class="headerlink" title="2. 域名"></a>2. 域名</h3><ul><li>应该尽量将API部署在专用域名之下(存在跨域问题): <a href="https://api.example.com" target="_blank" rel="noopener">https://api.example.com</a></li><li>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下: <a href="https://example.org/api/" target="_blank" rel="noopener">https://example.org/api/</a></li></ul><h3 id="3-版本"><a href="#3-版本" class="headerlink" title="3. 版本"></a>3. 版本</h3><p>应该将API的版本号放入URL: <a href="https://api.example.com/v1/" target="_blank" rel="noopener">https://api.example.com/v1/</a><br>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。<a href="https://developer.github.com/v3/media/#request-specific-version" target="_blank" rel="noopener">GitHub Developer Guide</a>采用这种做法,跨域时会引发多次请求</p><h3 id="4-路径-Endpoint"><a href="#4-路径-Endpoint" class="headerlink" title="4. 路径(Endpoint)"></a>4. 路径(Endpoint)</h3><p>路径又称”终点”（endpoint），表示API的具体网址。<br>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。<br>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.example.com&#x2F;v1&#x2F;zoos</span><br><span class="line">https:&#x2F;&#x2F;api.example.com&#x2F;v1&#x2F;animals</span><br><span class="line">https:&#x2F;&#x2F;api.example.com&#x2F;v1&#x2F;employees</span><br></pre></td></tr></table></figure><h3 id="5-HTTP动词"><a href="#5-HTTP动词" class="headerlink" title="5. HTTP动词"></a>5. HTTP动词</h3><p>对于资源的具体操作类型，由HTTP动词表示。<br>常用的HTTP动词有下面五个(括号里是对应的SQL命令)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET（SELECT）：从服务器取出资源（一项或多项）</span><br><span class="line">POST（CREATE）：在服务器新建一个资源</span><br><span class="line">PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）</span><br><span class="line">PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）</span><br><span class="line">DELETE（DELETE）：从服务器删除资源</span><br></pre></td></tr></table></figure><p>还有两个不常用的HTTP动词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HEAD：获取资源的元数据</span><br><span class="line">OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的</span><br></pre></td></tr></table></figure><p>下面是一些栗子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;zoos：列出所有动物园</span><br><span class="line">POST &#x2F;zoos：新建一个动物园</span><br><span class="line">GET &#x2F;zoos&#x2F;ID：获取某个指定动物园的信息</span><br><span class="line">PUT &#x2F;zoos&#x2F;ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="line">PATCH &#x2F;zoos&#x2F;ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="line">DELETE &#x2F;zoos&#x2F;ID：删除某个动物园</span><br><span class="line">GET &#x2F;zoos&#x2F;ID&#x2F;animals：列出某个指定动物园的所有动物</span><br><span class="line">DELETE &#x2F;zoos&#x2F;ID&#x2F;animals&#x2F;ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure><h3 id="6-过滤信息-Filtering"><a href="#6-过滤信息-Filtering" class="headerlink" title="6. 过滤信息(Filtering)"></a>6. 过滤信息(Filtering)</h3><p>如果记录数量很多,服务器不可能都将它们返回给用户.API应该提供参数,过滤返回结果<br>常见的参数形式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?limit&#x3D;10：指定返回记录的数量</span><br><span class="line">?offset&#x3D;10：指定返回记录的开始位置。</span><br><span class="line">?page&#x3D;2&amp;per_page&#x3D;100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby&#x3D;name&amp;order&#x3D;asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id&#x3D;1：指定筛选条件</span><br></pre></td></tr></table></figure><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p><h3 id="7-状态码-Status-Codes"><a href="#7-状态码-Status-Codes" class="headerlink" title="7. 状态码(Status Codes)"></a>7. 状态码(Status Codes)</h3><p>服务器向用户返回的状态码和提示信息，常见的有以下一些(方括号中是该状态码对应的HTTP动词)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST&#x2F;PUT&#x2F;PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST&#x2F;PUT&#x2F;PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST&#x2F;PUT&#x2F;PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功</span><br></pre></td></tr></table></figure><p>注意: 状态码的完全列表参见<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">这里</a></p><h3 id="8-错误处理-Error-handling"><a href="#8-错误处理-Error-handling" class="headerlink" title="8. 错误处理(Error handling)"></a>8. 错误处理(Error handling)</h3><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    error: &quot;Invalid API key&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-返回结果"><a href="#9-返回结果" class="headerlink" title="9. 返回结果"></a>9. 返回结果</h3><p>针对不同操作，服务器向用户返回的结果应该符合以下规范</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;collection：返回资源对象的列表（数组）</span><br><span class="line">GET &#x2F;collection&#x2F;resource：返回单个资源对象</span><br><span class="line">POST &#x2F;collection：返回新生成的资源对象</span><br><span class="line">PUT &#x2F;collection&#x2F;resource：返回完整的资源对象</span><br><span class="line">PATCH &#x2F;collection&#x2F;resource：返回完整的资源对象</span><br><span class="line">DELETE &#x2F;collection&#x2F;resource：返回一个空文档</span><br></pre></td></tr></table></figure><h3 id="10-Hypermedia-API"><a href="#10-Hypermedia-API" class="headerlink" title="10. Hypermedia API"></a>10. Hypermedia API</h3><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。<br>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;link&quot;: &#123;</span><br><span class="line">  &quot;rel&quot;:   &quot;collection https:&#x2F;&#x2F;www.example.com&#x2F;zoos&quot;,</span><br><span class="line">  &quot;href&quot;:  &quot;https:&#x2F;&#x2F;api.example.com&#x2F;zoos&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;List of zoos&quot;,</span><br><span class="line">  &quot;type&quot;:  &quot;application&#x2F;vnd.yourformat+json&quot;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。<br>Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问api.github.com会得到一个所有可用API的网址列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;current_user_url&quot;: &quot;https:&#x2F;&#x2F;api.github.com&#x2F;user&quot;,</span><br><span class="line">  &quot;authorizations_url&quot;: &quot;https:&#x2F;&#x2F;api.github.com&#x2F;authorizations&quot;,</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看到，如果想获取当前用户的信息，应该去访问\api.github.com/user，然后就得到了下面结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;message&quot;: &quot;Requires authentication&quot;,</span><br><span class="line">  &quot;documentation_url&quot;: &quot;https:&#x2F;&#x2F;developer.github.com&#x2F;v3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码表示，服务器给出了提示信息，以及文档的网址</p><h3 id="11-其他"><a href="#11-其他" class="headerlink" title="11. 其他"></a>11. 其他</h3><ul><li>API的身份认证应该使用<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">OAuth 2.0</a>框架。</li><li>服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</li></ul><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南 - 阮一峰的网络日志</a><br><a href="https://github.com/aisuhua/restful-api-design-references" target="_blank" rel="noopener">GitHub - aisuhua/restful-api-design-references: RESTful API 设计参考文献列表</a>  </p><h2 id="二-基于Django的实现"><a href="#二-基于Django的实现" class="headerlink" title="二. 基于Django的实现"></a>二. 基于Django的实现</h2><h3 id="2-1-路由系统"><a href="#2-1-路由系统" class="headerlink" title="2.1 路由系统"></a>2.1 路由系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from app01 import views</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^users&#39;, views.UserView.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-2-CBV试图"><a href="#2-2-CBV试图" class="headerlink" title="2.2 CBV试图"></a>2.2 CBV试图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class UserView(View):</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        result &#x3D; &#123;&quot;status&quot;: True, &quot;data&quot;: &quot;This is a get request&quot;, &quot;msg&quot;: None, &quot;code&quot;: 2000&#125;</span><br><span class="line">        return JsonResponse(result, status&#x3D;200)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        result &#x3D; &#123;&quot;status&quot;: True, &quot;data&quot;: &quot;This is a post request&quot;, &quot;msg&quot;: None, &quot;code&quot;: 2000&#125;</span><br><span class="line">        return JsonResponse(result, status&#x3D;200)</span><br></pre></td></tr></table></figure><h2 id="三-基于Django-Rest-Framework-框架实现"><a href="#三-基于Django-Rest-Framework-框架实现" class="headerlink" title="三. 基于Django Rest Framework 框架实现"></a>三. 基于Django Rest Framework 框架实现</h2><h3 id="3-1-基本流程"><a href="#3-1-基本流程" class="headerlink" title="3.1 基本流程"></a>3.1 基本流程</h3><p>路由:URL.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^index&#39;, views.IndexView.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图: views.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">class IndexView(APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    请求到来之后，都要执行dispatch方法，dispatch方法根据请求方式不同触发反射 get&#x2F;post&#x2F;put 等方法</span><br><span class="line">    注意：APIView中的dispatch方法有好多好多的功能</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        return super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure><p>⚠️ : 以上是Django rest framework框架基本流程,重要的功能是在APIView的dispatch中触发,也是框架的源码入口</p><h3 id="3-2-认证和授权"><a href="#3-2-认证和授权" class="headerlink" title="3.2 认证和授权"></a>3.2 认证和授权</h3><h4 id="3-2-1-基于token的验证"><a href="#3-2-1-基于token的验证" class="headerlink" title="3.2.1 基于token的验证"></a>3.2.1 基于token的验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat models.py </span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class UserInfo(models.Model):</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;64)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserToken(models.Model):</span><br><span class="line">    user &#x3D; models.OneToOneField(&#39;UserInfo&#39;, on_delete&#x3D;True)</span><br><span class="line">    token &#x3D; models.CharField(max_length&#x3D;64)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ cat views.py</span><br><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from app01 import models</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line">class AuthView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []    # 登录认证接口覆盖默认的toekn认证类</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        response &#x3D; &#123;&#39;code&#39;: 1000&#125;</span><br><span class="line">        user &#x3D; request.data.get(&#39;username&#39;)</span><br><span class="line">        pwd &#x3D; request.data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;user, password&#x3D;pwd).first()</span><br><span class="line">        if not obj:</span><br><span class="line">            response[&#39;code&#39;] &#x3D; 1001</span><br><span class="line">            response[&#39;msg&#39;] &#x3D; &#39;用户或密码错误&#39;</span><br><span class="line">            return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            response[&#39;token&#39;] &#x3D; token</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">        return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return HttpResponse(&#39;user.get: %s&#39; % request.user)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&#39;user.post&#39;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;auth.py</span><br><span class="line"></span><br><span class="line">from rest_framework.authentication import BaseAuthentication</span><br><span class="line">from rest_framework.exceptions import AuthenticationFailed</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line">class TokenAuthtication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        (user,auth) 表示认证成功,并将元组分别赋值给request.user&#x2F;request.auth</span><br><span class="line">        :raise AuthenticationFailed(&#39;认证失败&#39;)  表示认证失败</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        token &#x3D; request.query_params.get(&#39;token&#39;)</span><br><span class="line">        if not token:</span><br><span class="line">            raise AuthenticationFailed(&quot;用户Token未携带&quot;)</span><br><span class="line"></span><br><span class="line">        token_obj &#x3D; models.UserToken.objects.filter(token&#x3D;token).first()</span><br><span class="line">        if not token_obj:</span><br><span class="line">            raise AuthenticationFailed(&quot;Token已失效或错误&quot;)</span><br><span class="line">        return (token_obj.user.username, token_obj)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat settings.py</span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: [&#39;app01.utils.auth.TokenAuthtication&#39;, ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证:</p><ol><li>首先在数据库中构造请求登录的用户名密码</li><li>构造数据获取token信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST \</span><br><span class="line">&gt;   http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;auth&#x2F; \</span><br><span class="line">&gt;   -H &#39;Cache-Control: no-cache&#39; \</span><br><span class="line">&gt;   -H &#39;Content-Type: application&#x2F;json&#39; \</span><br><span class="line">&gt;   -H &#39;Postman-Token: 8439ce0a-94ff-3970-c8c2-4c6bc200bb4f&#39; \</span><br><span class="line">&gt;   -d &#39;&#123;&quot;username&quot;: &quot;eric&quot;,&quot;password&quot;:&quot;123&quot;&#125;&#39;</span><br><span class="line">返回:</span><br><span class="line">&#123;&quot;code&quot;: 1000, &quot;token&quot;: &quot;4c90f696-008b-4e30-86fa-4b00b6fc9237&quot;&#125;</span><br></pre></td></tr></table></figure></li><li>携带token访问user接口,获取用户信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &#39;http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;user&#x2F;?token&#x3D;4c90f696-008b-4e30-86fa-4b00b6fc9237&#39; \</span><br><span class="line">&gt;   -H &#39;Cache-Control: no-cache&#39; \</span><br><span class="line">&gt;   -H &#39;Postman-Token: 1b4125ad-7ad1-1cca-70fd-6a00cca16d96&#39;</span><br><span class="line">返回:</span><br><span class="line">user.get: eric</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-2-2-基于请求头认证"><a href="#3-2-2-基于请求头认证" class="headerlink" title="3.2.2 基于请求头认证"></a>3.2.2 基于请求头认证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;auth.py</span><br><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;6&#x2F;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from rest_framework.authentication import BaseAuthentication</span><br><span class="line">from rest_framework.exceptions import AuthenticationFailed</span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line">class HeaderAuthentication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        用户认证，如果验证成功后返回元组： (用户,用户Token)</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">            None,表示跳过该验证；</span><br><span class="line">                如果跳过了所有认证，默认用户和Token和使用配置文件进行设置</span><br><span class="line">                self._authenticator &#x3D; None</span><br><span class="line">                if api_settings.UNAUTHENTICATED_USER:</span><br><span class="line">                    self.user &#x3D; api_settings.UNAUTHENTICATED_USER()</span><br><span class="line">                else:</span><br><span class="line">                    self.user &#x3D; None</span><br><span class="line"></span><br><span class="line">                if api_settings.UNAUTHENTICATED_TOKEN:</span><br><span class="line">                    self.auth &#x3D; api_settings.UNAUTHENTICATED_TOKEN()</span><br><span class="line">                else:</span><br><span class="line">                    self.auth &#x3D; None</span><br><span class="line">            (user,token)表示验证通过并设置用户名和Token；</span><br><span class="line">            AuthenticationFailed异常</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        import base64</span><br><span class="line">        import uuid</span><br><span class="line">        auth &#x3D; request.META.get(&#39;HTTP_AUTHORIZATION&#39;, b&#39;&#39;)</span><br><span class="line">        if auth:</span><br><span class="line">            auth &#x3D; auth.encode(&#39;utf-8&#39;)</span><br><span class="line">        auth &#x3D; auth.split()</span><br><span class="line">        if not auth or auth[0].lower() !&#x3D; b&#39;basic&#39;:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        if len(auth) !&#x3D; 2:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        username, part, password &#x3D; base64.b64decode(auth[1]).decode(&#39;utf-8&#39;).partition(&#39;:&#39;)</span><br><span class="line">        try:</span><br><span class="line">            obj &#x3D; models.UserInfo.objects.filter(username&#x3D;username, password&#x3D;password).first()</span><br><span class="line">            if not obj:</span><br><span class="line">                raise exceptions.AuthenticationFailed(&#39;用户名或密码错误&#39;)</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            token_obj, status &#x3D; models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            return (token_obj.user.username, token_obj)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line"></span><br><span class="line">    def authenticate_header(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Return a string to be used as the value of the &#96;WWW-Authenticate&#96;</span><br><span class="line">        header in a &#96;401 Unauthenticated&#96; response, or &#96;None&#96; if the</span><br><span class="line">        authentication scheme should return &#96;403 Permission Denied&#96; responses.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return &#39;Basic realm&#x3D;api&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ cat views.py</span><br><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from app01.utils.auth import HeaderAuthentication</span><br><span class="line">from app01 import models</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AuthView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        response &#x3D; &#123;&#39;code&#39;: 1000&#125;</span><br><span class="line">        user &#x3D; request.data.get(&#39;username&#39;)</span><br><span class="line">        pwd &#x3D; request.data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;user, password&#x3D;pwd).first()</span><br><span class="line">        if not obj:</span><br><span class="line">            response[&#39;code&#39;] &#x3D; 1001</span><br><span class="line">            response[&#39;msg&#39;] &#x3D; &#39;用户或密码错误&#39;</span><br><span class="line">            return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            response[&#39;token&#39;] &#x3D; token</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">        return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    authentication_classes &#x3D; [HeaderAuthentication, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return HttpResponse(&#39;user.get: %s,token: %s&#39; % (request.user, request.auth))</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&#39;user.post&#39;)</span><br></pre></td></tr></table></figure><p>验证:</p><ol><li>首先在数据库中构造请求登录的用户名密码</li><li>构造数据获取token信息,建议使用postman进行构造测试<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET \</span><br><span class="line">  http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;user&#x2F; \</span><br><span class="line">  -H &#39;Authorization: Basic c2h1a2U6MTIz&#39; \</span><br><span class="line">  -H &#39;Cache-Control: no-cache&#39; \</span><br><span class="line">  -H &#39;Postman-Token: ba3f99ce-da6a-7e5f-3e0b-3c79129ecca1&#39;</span><br><span class="line">返回:</span><br><span class="line">user.get: shuke,token: 2d3af34a-1598-4d5a-af56-7f29a706a26e</span><br></pre></td></tr></table></figure><h4 id="3-2-3-多个认证规则"><a href="#3-2-3-多个认证规则" class="headerlink" title="3.2.3 多个认证规则"></a>3.2.3 多个认证规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;auth.py</span><br><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;6&#x2F;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from rest_framework.authentication import BaseAuthentication</span><br><span class="line">from rest_framework.exceptions import AuthenticationFailed</span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TokenAuthtication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        (user,auth) 表示认证成功,并将元组分别赋值给request.user&#x2F;request.auth</span><br><span class="line">        :raise AuthenticationFailed(&#39;认证失败&#39;)  表示认证失败</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        token &#x3D; request.query_params.get(&#39;token&#39;)</span><br><span class="line">        if not token:</span><br><span class="line">            raise AuthenticationFailed(&quot;用户Token未携带&quot;)</span><br><span class="line"></span><br><span class="line">        token_obj &#x3D; models.UserToken.objects.filter(token&#x3D;token).first()</span><br><span class="line">        if not token_obj:</span><br><span class="line">            raise AuthenticationFailed(&quot;Token已失效或错误&quot;)</span><br><span class="line">        return (token_obj.user.username, token_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HeaderAuthentication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        用户认证，如果验证成功后返回元组： (用户,用户Token)</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">            None,表示跳过该验证；</span><br><span class="line">                如果跳过了所有认证，默认用户和Token和使用配置文件进行设置</span><br><span class="line">                self._authenticator &#x3D; None</span><br><span class="line">                if api_settings.UNAUTHENTICATED_USER:</span><br><span class="line">                    self.user &#x3D; api_settings.UNAUTHENTICATED_USER()</span><br><span class="line">                else:</span><br><span class="line">                    self.user &#x3D; None</span><br><span class="line"></span><br><span class="line">                if api_settings.UNAUTHENTICATED_TOKEN:</span><br><span class="line">                    self.auth &#x3D; api_settings.UNAUTHENTICATED_TOKEN()</span><br><span class="line">                else:</span><br><span class="line">                    self.auth &#x3D; None</span><br><span class="line">            (user,token)表示验证通过并设置用户名和Token；</span><br><span class="line">            AuthenticationFailed异常</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        import base64</span><br><span class="line">        import uuid</span><br><span class="line">        auth &#x3D; request.META.get(&#39;HTTP_AUTHORIZATION&#39;, b&#39;&#39;)</span><br><span class="line">        if auth:</span><br><span class="line">            auth &#x3D; auth.encode(&#39;utf-8&#39;)</span><br><span class="line">        auth &#x3D; auth.split()</span><br><span class="line">        if not auth or auth[0].lower() !&#x3D; b&#39;basic&#39;:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        if len(auth) !&#x3D; 2:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        username, part, password &#x3D; base64.b64decode(auth[1]).decode(&#39;utf-8&#39;).partition(&#39;:&#39;)</span><br><span class="line">        try:</span><br><span class="line">            obj &#x3D; models.UserInfo.objects.filter(username&#x3D;username, password&#x3D;password).first()</span><br><span class="line">            if not obj:</span><br><span class="line">                raise exceptions.AuthenticationFailed(&#39;用户名或密码错误&#39;)</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            token_obj, status &#x3D; models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            return (token_obj.user.username, token_obj)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line"></span><br><span class="line">    def authenticate_header(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Return a string to be used as the value of the &#96;WWW-Authenticate&#96;</span><br><span class="line">        header in a &#96;401 Unauthenticated&#96; response, or &#96;None&#96; if the</span><br><span class="line">        authentication scheme should return &#96;403 Permission Denied&#96; responses.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return &#39;Basic realm&#x3D;api&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ cat views.py</span><br><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from app01.utils.auth import HeaderAuthentication, TokenAuthtication</span><br><span class="line">from app01 import models</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AuthView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        response &#x3D; &#123;&#39;code&#39;: 1000&#125;</span><br><span class="line">        user &#x3D; request.data.get(&#39;username&#39;)</span><br><span class="line">        pwd &#x3D; request.data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;user, password&#x3D;pwd).first()</span><br><span class="line">        if not obj:</span><br><span class="line">            response[&#39;code&#39;] &#x3D; 1001</span><br><span class="line">            response[&#39;msg&#39;] &#x3D; &#39;用户或密码错误&#39;</span><br><span class="line">            return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            response[&#39;token&#39;] &#x3D; token</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">        return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    authentication_classes &#x3D; [HeaderAuthentication, TokenAuthtication]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return HttpResponse(&#39;user.get: %s,token: %s&#39; % (request.user, request.auth))</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&#39;user.post&#39;)</span><br></pre></td></tr></table></figure>验证:</li><li>首先在数据库中构造请求登录的用户名密码</li><li>构造数据获取token信息,建议使用postman进行构造测试<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET \</span><br><span class="line">  http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;user&#x2F; \</span><br><span class="line">  -H &#39;Authorization: Basic c2h1a2U6MTIz&#39; \</span><br><span class="line">  -H &#39;Cache-Control: no-cache&#39; \</span><br><span class="line">  -H &#39;Postman-Token: f91805b7-c742-b713-0010-c75cdbfbb24a&#39;</span><br><span class="line">返回:</span><br><span class="line">user.get: shuke,token: 9c3ca96a-ac03-4207-aaec-20433bae6058</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-2-4-认证和权限"><a href="#3-2-4-认证和权限" class="headerlink" title="3.2.4 认证和权限"></a>3.2.4 认证和权限</h4><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>model</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserInfo(models.Model):</span><br><span class="line">    user_type_choices &#x3D; (</span><br><span class="line">        (1, &#39;普通用户&#39;),</span><br><span class="line">        (2, &#39;管理员&#39;),</span><br><span class="line">        (3, &#39;超级管理员&#39;),</span><br><span class="line">    )</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;64)</span><br><span class="line">    user_type &#x3D; models.IntegerField(choices&#x3D;user_type_choices, default&#x3D;1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserToken(models.Model):</span><br><span class="line">    user &#x3D; models.OneToOneField(&#39;UserInfo&#39;, on_delete&#x3D;True)</span><br><span class="line">    token &#x3D; models.CharField(max_length&#x3D;64)</span><br></pre></td></tr></table></figure><p>认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;auth.py</span><br><span class="line"></span><br><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;6&#x2F;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from rest_framework.authentication import BaseAuthentication</span><br><span class="line">from rest_framework.exceptions import AuthenticationFailed</span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TokenAuthtication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        (user,auth) 表示认证成功,并将元组分别赋值给request.user&#x2F;request.auth</span><br><span class="line">        :raise AuthenticationFailed(&#39;认证失败&#39;)  表示认证失败</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        token &#x3D; request.query_params.get(&#39;token&#39;)</span><br><span class="line">        if not token:</span><br><span class="line">            raise AuthenticationFailed(&quot;用户Token未携带&quot;)</span><br><span class="line"></span><br><span class="line">        token_obj &#x3D; models.UserToken.objects.filter(token&#x3D;token).first()</span><br><span class="line">        if not token_obj:</span><br><span class="line">            raise AuthenticationFailed(&quot;Token已失效或错误&quot;)</span><br><span class="line">        return (token_obj.user.username, token_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HeaderAuthentication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        用户认证，如果验证成功后返回元组： (用户,用户Token)</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">            None,表示跳过该验证；</span><br><span class="line">                如果跳过了所有认证，默认用户和Token和使用配置文件进行设置</span><br><span class="line">                self._authenticator &#x3D; None</span><br><span class="line">                if api_settings.UNAUTHENTICATED_USER:</span><br><span class="line">                    self.user &#x3D; api_settings.UNAUTHENTICATED_USER()</span><br><span class="line">                else:</span><br><span class="line">                    self.user &#x3D; None</span><br><span class="line"></span><br><span class="line">                if api_settings.UNAUTHENTICATED_TOKEN:</span><br><span class="line">                    self.auth &#x3D; api_settings.UNAUTHENTICATED_TOKEN()</span><br><span class="line">                else:</span><br><span class="line">                    self.auth &#x3D; None</span><br><span class="line">            (user,token)表示验证通过并设置用户名和Token；</span><br><span class="line">            AuthenticationFailed异常</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        import base64</span><br><span class="line">        import uuid</span><br><span class="line">        auth &#x3D; request.META.get(&#39;HTTP_AUTHORIZATION&#39;, b&#39;&#39;)</span><br><span class="line">        if auth:</span><br><span class="line">            auth &#x3D; auth.encode(&#39;utf-8&#39;)</span><br><span class="line">        auth &#x3D; auth.split()</span><br><span class="line">        if not auth or auth[0].lower() !&#x3D; b&#39;basic&#39;:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        if len(auth) !&#x3D; 2:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        username, part, password &#x3D; base64.b64decode(auth[1]).decode(&#39;utf-8&#39;).partition(&#39;:&#39;)</span><br><span class="line">        try:</span><br><span class="line">            obj &#x3D; models.UserInfo.objects.filter(username&#x3D;username, password&#x3D;password).first()</span><br><span class="line">            if not obj:</span><br><span class="line">                raise exceptions.AuthenticationFailed(&#39;用户名或密码错误&#39;)</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            token_obj, status &#x3D; models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            return (token_obj.user.username, token_obj)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line"></span><br><span class="line">    def authenticate_header(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Return a string to be used as the value of the &#96;WWW-Authenticate&#96;</span><br><span class="line">        header in a &#96;401 Unauthenticated&#96; response, or &#96;None&#96; if the</span><br><span class="line">        authentication scheme should return &#96;403 Permission Denied&#96; responses.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return &#39;Basic realm&#x3D;api&#39;</span><br></pre></td></tr></table></figure><p>权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;permission.py</span><br><span class="line"></span><br><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;6&#x2F;3</span><br><span class="line">from rest_framework.permissions import BasePermission</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserPermission(BasePermission):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    权限验证</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def has_permission(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        判断是否有权限访问当前请求</span><br><span class="line">        Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.</span><br><span class="line">        :param request:</span><br><span class="line">        :param view:</span><br><span class="line">        :return: True有权限；False无权限</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        user_type_id &#x3D; request.auth.user.user_type</span><br><span class="line">        if user_type_id &gt; 0:</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    # GenericAPIView中get_object时调用</span><br><span class="line">    def has_object_permission(self, request, view, obj):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        视图继承GenericAPIView，并在其中使用get_object时获取对象时，触发单独对象权限验证</span><br><span class="line">        Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.</span><br><span class="line">        :param request:</span><br><span class="line">        :param view:</span><br><span class="line">        :param obj:</span><br><span class="line">        :return: True有权限；False无权限</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        user_type_id &#x3D; request.auth.user.user_type</span><br><span class="line">        if user_type_id &gt; 0:</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ManagerPermission(BasePermission):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    视图继承GenericAPIView，并在其中使用get_object时获取对象时，触发单独对象权限验证</span><br><span class="line">    Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.</span><br><span class="line">    :param request:</span><br><span class="line">    :param view:</span><br><span class="line">    :param obj:</span><br><span class="line">    :return: True有权限；False无权限</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def has_permission(self, request, view):</span><br><span class="line">        user_type_id &#x3D; request.auth.user.user_type</span><br><span class="line">        if user_type_id &gt; 1:</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    # GenericAPIView中get_object时调用</span><br><span class="line">    def has_object_permission(self, request, view, obj):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        视图继承GenericAPIView，并在其中使用get_object时获取对象时，触发单独对象权限验证</span><br><span class="line">        Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.</span><br><span class="line">        :param request:</span><br><span class="line">        :param view:</span><br><span class="line">        :param obj:</span><br><span class="line">        :return: True有权限；False无权限</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        user_type_id &#x3D; request.auth.user.user_type</span><br><span class="line">        if user_type_id &gt; 1:</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure><p>试图函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from app01.utils.auth import HeaderAuthentication, TokenAuthtication</span><br><span class="line">from app01.utils.permission import UserPermission, ManagerPermission</span><br><span class="line">from app01 import models</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AuthView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        response &#x3D; &#123;&#39;code&#39;: 1000&#125;</span><br><span class="line">        user &#x3D; request.data.get(&#39;username&#39;)</span><br><span class="line">        pwd &#x3D; request.data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;user, password&#x3D;pwd).first()</span><br><span class="line">        if not obj:</span><br><span class="line">            response[&#39;code&#39;] &#x3D; 1001</span><br><span class="line">            response[&#39;msg&#39;] &#x3D; &#39;用户或密码错误&#39;</span><br><span class="line">            return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            response[&#39;token&#39;] &#x3D; token</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">        return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    # 认证的动作是由request.user触发</span><br><span class="line">    authentication_classes &#x3D; [HeaderAuthentication, TokenAuthtication]</span><br><span class="line"></span><br><span class="line">    # 循环执行所有的权限,当前试图只允许管理员以上权限访问</span><br><span class="line">    permission_classes &#x3D; [ManagerPermission, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return HttpResponse(&#39;user.get: %s,token: %s&#39; % (request.user, request.auth))</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&#39;user.post&#39;)</span><br></pre></td></tr></table></figure><p>验证:<br><img src="https://note.youdao.com/yws/api/personal/file/WEB9df3ae98ed15b4c4725de0cc826fabe9?method=download&shareKey=f430295de0aa74cb2fa4f45b94d245ec" alt="无访问权限"><br><img src="https://note.youdao.com/yws/api/personal/file/WEBfa5e5818486654600b9b0563e7d4c262?method=download&shareKey=a547b0c96cdd95d95323c1fdbb9b2294" alt="有访问权限"></p><p>全局应用权限<br>上述操作中均是对单独视图进行特殊配置，如果想要对全局进行配置，则需要再配置文件中写入即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;UNAUTHENTICATED_USER&#39;: None,</span><br><span class="line">    &#39;UNAUTHENTICATED_TOKEN&#39;: None,</span><br><span class="line">    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: [&#39;app01.utils.auth.HeaderAuthentication&#39;, ],</span><br><span class="line">    &quot;DEFAULT_PERMISSION_CLASSES&quot;: [</span><br><span class="line">        &quot;app01.utils.permission.ManagerPermission&quot;,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ cat views.py</span><br><span class="line"></span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure><h3 id="3-3-用户访问次数-频率限制"><a href="#3-3-用户访问次数-频率限制" class="headerlink" title="3.3 用户访问次数/频率限制"></a>3.3 用户访问次数/频率限制</h3><h4 id="3-3-1-基于用户IP访问限制频率"><a href="#3-3-1-基于用户IP访问限制频率" class="headerlink" title="3.3.1 基于用户IP访问限制频率"></a>3.3.1 基于用户IP访问限制频率</h4><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import time</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from rest_framework.throttling import BaseThrottle</span><br><span class="line">from rest_framework.settings import api_settings</span><br><span class="line"></span><br><span class="line"># 保存访问记录</span><br><span class="line">RECORD &#x3D; &#123;</span><br><span class="line">    &#39;用户IP&#39;: [12312139, 12312135, 12312133, ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestThrottle(BaseThrottle):</span><br><span class="line">    ctime &#x3D; time.time</span><br><span class="line"></span><br><span class="line">    def get_ident(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        根据用户IP和代理IP，当做请求者的唯一IP</span><br><span class="line">        Identify the machine making the request by parsing HTTP_X_FORWARDED_FOR</span><br><span class="line">        if present and number of proxies is &gt; 0. If not use all of</span><br><span class="line">        HTTP_X_FORWARDED_FOR if it is available, if not use REMOTE_ADDR.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        xff &#x3D; request.META.get(&#39;HTTP_X_FORWARDED_FOR&#39;)</span><br><span class="line">        remote_addr &#x3D; request.META.get(&#39;REMOTE_ADDR&#39;)</span><br><span class="line">        num_proxies &#x3D; api_settings.NUM_PROXIES</span><br><span class="line"></span><br><span class="line">        if num_proxies is not None:</span><br><span class="line">            if num_proxies &#x3D;&#x3D; 0 or xff is None:</span><br><span class="line">                return remote_addr</span><br><span class="line">            addrs &#x3D; xff.split(&#39;,&#39;)</span><br><span class="line">            client_addr &#x3D; addrs[-min(num_proxies, len(addrs))]</span><br><span class="line">            return client_addr.strip()</span><br><span class="line"></span><br><span class="line">        return &#39;&#39;.join(xff.split()) if xff else remote_addr</span><br><span class="line"></span><br><span class="line">    def allow_request(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        是否仍然在允许范围内</span><br><span class="line">        Return &#96;True&#96; if the request should be allowed, &#96;False&#96; otherwise.</span><br><span class="line">        :param request: </span><br><span class="line">        :param view: </span><br><span class="line">        :return: True，表示可以通过；False表示已超过限制，不允许访问</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 获取用户唯一标识（如：IP）</span><br><span class="line"></span><br><span class="line">        # 允许一分钟访问10次</span><br><span class="line">        num_request &#x3D; 10</span><br><span class="line">        time_request &#x3D; 60</span><br><span class="line"></span><br><span class="line">        now &#x3D; self.ctime()</span><br><span class="line">        ident &#x3D; self.get_ident(request)</span><br><span class="line">        self.ident &#x3D; ident</span><br><span class="line">        if ident not in RECORD:</span><br><span class="line">            RECORD[ident] &#x3D; [now, ]</span><br><span class="line">            return True</span><br><span class="line">        history &#x3D; RECORD[ident]</span><br><span class="line">        while history and history[-1] &lt;&#x3D; now - time_request:</span><br><span class="line">            history.pop()</span><br><span class="line">        if len(history) &lt; num_request:</span><br><span class="line">            history.insert(0, now)</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">    def wait(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        多少秒后可以允许继续访问</span><br><span class="line">        Optionally, return a recommended number of seconds to wait before</span><br><span class="line">        the next request.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        last_time &#x3D; RECORD[self.ident][0]</span><br><span class="line">        now &#x3D; self.ctime()</span><br><span class="line">        return int(60 + last_time - now)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    throttle_classes &#x3D; [TestThrottle, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def throttled(self, request, wait):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        访问次数被限制时，定制错误信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        class Throttled(exceptions.Throttled):</span><br><span class="line">            default_detail &#x3D; &#39;请求被限制.&#39;</span><br><span class="line">            extra_detail_singular &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line">            extra_detail_plural &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line">            </span><br><span class="line">        raise Throttled(wait)</span><br></pre></td></tr></table></figure><h4 id="3-3-2-基于用户IP控制访问频率-利用Django缓存"><a href="#3-3-2-基于用户IP控制访问频率-利用Django缓存" class="headerlink" title="3.3.2 基于用户IP控制访问频率(利用Django缓存)"></a>3.3.2 基于用户IP控制访问频率(利用Django缓存)</h4><p>全局配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;test_scope&#39;: &#39;10&#x2F;m&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from rest_framework.throttling import SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestThrottle(SimpleRateThrottle):</span><br><span class="line"></span><br><span class="line">    # 配置文件定义的显示频率的Key</span><br><span class="line">    scope &#x3D; &quot;test_scope&quot;</span><br><span class="line"></span><br><span class="line">    def get_cache_key(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Should return a unique cache-key which can be used for throttling.</span><br><span class="line">        Must be overridden.</span><br><span class="line"></span><br><span class="line">        May return &#96;None&#96; if the request should not be throttled.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not request.user:</span><br><span class="line">            ident &#x3D; self.get_ident(request)</span><br><span class="line">        else:</span><br><span class="line">            ident &#x3D; request.user</span><br><span class="line"></span><br><span class="line">        return self.cache_format % &#123;</span><br><span class="line">            &#39;scope&#39;: self.scope,</span><br><span class="line">            &#39;ident&#39;: ident</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    throttle_classes &#x3D; [TestThrottle, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def throttled(self, request, wait):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        访问次数被限制时，定制错误信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        class Throttled(exceptions.Throttled):</span><br><span class="line">            default_detail &#x3D; &#39;请求被限制.&#39;</span><br><span class="line">            extra_detail_singular &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line">            extra_detail_plural &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line"></span><br><span class="line">        raise Throttled(wait)</span><br></pre></td></tr></table></figure><h4 id="3-3-3-在试图中限制请求频率"><a href="#3-3-3-在试图中限制请求频率" class="headerlink" title="3.3.3 在试图中限制请求频率"></a>3.3.3 在试图中限制请求频率</h4><p>全局配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;request_scope&#39;: &#39;10&#x2F;m&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from rest_framework.throttling import ScopedRateThrottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 继承 ScopedRateThrottle</span><br><span class="line">class TestThrottle(ScopedRateThrottle):</span><br><span class="line"></span><br><span class="line">    def get_cache_key(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Should return a unique cache-key which can be used for throttling.</span><br><span class="line">        Must be overridden.</span><br><span class="line"></span><br><span class="line">        May return &#96;None&#96; if the request should not be throttled.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not request.user:</span><br><span class="line">            ident &#x3D; self.get_ident(request)</span><br><span class="line">        else:</span><br><span class="line">            ident &#x3D; request.user</span><br><span class="line"></span><br><span class="line">        return self.cache_format % &#123;</span><br><span class="line">            &#39;scope&#39;: self.scope,</span><br><span class="line">            &#39;ident&#39;: ident</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    throttle_classes &#x3D; [TestThrottle, ]</span><br><span class="line"></span><br><span class="line">    # 在settings中获取 xxxxxx 对应的频率限制值</span><br><span class="line">    throttle_scope &#x3D; &quot;xxxxxx&quot;</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def throttled(self, request, wait):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        访问次数被限制时，定制错误信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        class Throttled(exceptions.Throttled):</span><br><span class="line">            default_detail &#x3D; &#39;请求被限制.&#39;</span><br><span class="line">            extra_detail_singular &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line">            extra_detail_plural &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line"></span><br><span class="line">        raise Throttled(wait)</span><br></pre></td></tr></table></figure><h4 id="3-3-4-匿名时用IP限制-登录时用Token限制"><a href="#3-3-4-匿名时用IP限制-登录时用Token限制" class="headerlink" title="3.3.4 匿名时用IP限制+登录时用Token限制"></a>3.3.4 匿名时用IP限制+登录时用Token限制</h4><p>全局配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;UNAUTHENTICATED_USER&#39;: None,</span><br><span class="line">    &#39;UNAUTHENTICATED_TOKEN&#39;: None,</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;backend_anon&#39;: &#39;10&#x2F;m&#39;,</span><br><span class="line">        &#39;backend_user&#39;: &#39;20&#x2F;m&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views.s3_throttling import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># !&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from rest_framework.throttling import SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BackendAnonRateThrottle(SimpleRateThrottle):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    匿名用户，根据IP进行限制</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    scope &#x3D; &quot;backend_anon&quot;</span><br><span class="line"></span><br><span class="line">    def get_cache_key(self, request, view):</span><br><span class="line">        # 用户已登录，则跳过 匿名频率限制</span><br><span class="line">        if request.user:</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        return self.cache_format % &#123;</span><br><span class="line">            &#39;scope&#39;: self.scope,</span><br><span class="line">            &#39;ident&#39;: self.get_ident(request)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BackendUserRateThrottle(SimpleRateThrottle):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    登录用户，根据用户token限制</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    scope &#x3D; &quot;backend_user&quot;</span><br><span class="line"></span><br><span class="line">    def get_ident(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        认证成功时：request.user是用户对象；request.auth是token对象</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # return request.auth.token</span><br><span class="line">        return &quot;user_token&quot;</span><br><span class="line"></span><br><span class="line">    def get_cache_key(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        获取缓存key</span><br><span class="line">        :param request:</span><br><span class="line">        :param view:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 未登录用户，则跳过 Token限制</span><br><span class="line">        if not request.user:</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        return self.cache_format % &#123;</span><br><span class="line">            &#39;scope&#39;: self.scope,</span><br><span class="line">            &#39;ident&#39;: self.get_ident(request)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    throttle_classes &#x3D; [BackendAnonRateThrottle, BackendUserRateThrottle, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure><h4 id="3-3-5-全局使用"><a href="#3-3-5-全局使用" class="headerlink" title="3.3.5 全局使用"></a>3.3.5 全局使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_THROTTLE_CLASSES&#39;: [</span><br><span class="line">        &#39;api.utils.throttles.throttles.BackendAnonRateThrottle&#39;,</span><br><span class="line">        &#39;api.utils.throttles.throttles.BackendUserRateThrottle&#39;,</span><br><span class="line">    ],</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;anon&#39;: &#39;10&#x2F;day&#39;,</span><br><span class="line">        &#39;user&#39;: &#39;10&#x2F;day&#39;,</span><br><span class="line">        &#39;backend_anon&#39;: &#39;10&#x2F;m&#39;,</span><br><span class="line">        &#39;backend_user&#39;: &#39;20&#x2F;m&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-版本"><a href="#3-4-版本" class="headerlink" title="3.4 版本"></a>3.4 版本</h3><p>共6个类</p><ol><li>BaseVersioning</li><li>AcceptHeaderVersioning</li><li>URLPathVersioning</li><li>NamespaceVersioning</li><li>HostNameVersioning</li><li>QueryParameterVersioning<br>而且还可以看到BaseVersioning类是其余5个类的父类,并且这其余的5个类,每个类中都有一个determine_version方法,在项目的视图函数中导入其中任意一个类,打印versioning_class<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render,HttpResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from django.views import View</span><br><span class="line">from rest_framework.versioning import QueryParameterVersioning</span><br><span class="line"></span><br><span class="line">class UsersView(APIView):</span><br><span class="line">    versioning_class&#x3D;QueryParameterVersioning</span><br><span class="line"></span><br><span class="line">    def get(self,request,*args,**kwargs):</span><br><span class="line">        print(self.versioning_class)        #打印versioning_class</span><br><span class="line"></span><br><span class="line">        return HttpResponse(&quot;aaaa&quot;)</span><br></pre></td></tr></table></figure>输出结果:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;rest_framework.versioning.QueryParameterVersioning&#39;&gt;</span><br></pre></td></tr></table></figure>所以versioning_class是一个类,并且versioning_class类中有一个determine_version方法</li></ol><h4 id="3-4-1-基于URL的GET传参方式"><a href="#3-4-1-基于URL的GET传参方式" class="headerlink" title="3.4.1 基于URL的GET传参方式"></a>3.4.1 基于URL的GET传参方式</h4><p>如：/users?version=v1<br>全局配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,            # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],   # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;          # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line">from app01.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import QueryParameterVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    versioning_class &#x3D; QueryParameterVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line"></span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure><h4 id="3-4-2-基于URL的正则方式"><a href="#3-4-2-基于URL的正则方式" class="headerlink" title="3.4.2 基于URL的正则方式"></a>3.4.2 基于URL的正则方式</h4><p>如: /v1/users/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,            # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],   # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;          # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^(?P&lt;version&gt;[v1|v2]+)&#x2F;test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import URLPathVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    versioning_class &#x3D; URLPathVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line"></span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure><h4 id="3-4-3-基于accept请求头方式"><a href="#3-4-3-基于accept请求头方式" class="headerlink" title="3.4.3 基于accept请求头方式"></a>3.4.3 基于accept请求头方式</h4><p>如：Accept: application/json; version=1.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,            # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],   # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;          # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># !&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import AcceptHeaderVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    versioning_class &#x3D; AcceptHeaderVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本 HTTP_ACCEPT头</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容,基于Accept请求头方式&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容，基于Accept请求头方式&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容，基于Accept请求头方式&#39;)</span><br></pre></td></tr></table></figure><h4 id="3-4-4-基于主机名方式"><a href="#3-4-4-基于主机名方式" class="headerlink" title="3.4.4 基于主机名方式"></a>3.4.4 基于主机名方式</h4><p>如: v1.example.com</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS &#x3D; [&#39;*&#39;]</span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,  # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],  # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;  # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># !&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import HostNameVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    versioning_class &#x3D; HostNameVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容,基于主机名方式&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容,基于主机名方式&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容,基于主机名方式&#39;)</span><br></pre></td></tr></table></figure><h4 id="3-4-5-基于Django路由系统的namespace"><a href="#3-4-5-基于Django路由系统的namespace" class="headerlink" title="3.4.5 基于Django路由系统的namespace"></a>3.4.5 基于Django路由系统的namespace</h4><p>如: example.com/v1/users/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,  # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],  # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;  # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from app01.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^v1&#x2F;&#39;, ([</span><br><span class="line">                      url(r&#39;test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test1&#39;)</span><br><span class="line">                  ], None, &#39;v1&#39;)),</span><br><span class="line">    url(r&#39;^v2&#x2F;&#39;, ([</span><br><span class="line">                      url(r&#39;test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test2&#39;)</span><br><span class="line">                  ], None, &#39;v2&#39;)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># !&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import NamespaceVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []</span><br><span class="line">    permission_classes &#x3D; []</span><br><span class="line">    versioning_class &#x3D; NamespaceVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test1&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容,基于Django路由系统的namespace&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容,基于Django路由系统的namespace&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容,基于Django路由系统的namespace&#39;)</span><br><span class="line">&#96;&#96;&#96;        </span><br><span class="line">#### 3.4.6 全局应用</span><br></pre></td></tr></table></figure><p>REST_FRAMEWORK = {<br>    ‘DEFAULT_VERSIONING_CLASS’:”rest_framework.versioning.URLPathVersioning”,<br>    ‘DEFAULT_VERSION’: ‘v1’,<br>    ‘ALLOWED_VERSIONS’: [‘v1’, ‘v2’],<br>    ‘VERSION_PARAM’: ‘version’<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#### 3.4.7 自定义版本控制方案</span><br><span class="line">要实现自定义版本控制方案，请继承 BaseVersioning并覆盖 .determine_version 方法。</span><br><span class="line">举个栗子</span><br><span class="line">以下示例使用自定义的 X-API-Version header 来确定所请求的版本</span><br></pre></td></tr></table></figure><p>class XAPIVersionScheme(versioning.BaseVersioning):<br>    def determine_version(self, request, <em>args, *</em>kwargs):<br>        return request.META.get(‘HTTP_X_API_VERSION’, None)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果你的版本控制方案基于请求 URL，则还需要更改版本化 URL 的确定方式。为了做到这一点，你应该重写类的 .reverse()方法。有关示例，请参阅源代码。</span><br><span class="line"></span><br><span class="line">### 3.5 解析器(parser)</span><br><span class="line">根据请求头content-type选择对应的解析器就请求体内容进行处理</span><br><span class="line">#### 3.5.1 仅处理请求头content-type为application&#x2F;json的请求体</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views.s5_parser import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python"><a href="#usr-bin-env-python" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.parsers import JSONParser</p><p>class TestView(APIView):<br>    parser_classes = [JSONParser, ]</p><pre><code>def post(self, request, *args, **kwargs):    print(request.content_type)    # 获取请求的值，并使用对应的JSONParser进行处理    print(request.data)    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值    print(request.POST)    print(request.FILES)    return Response(&apos;POST请求，请求内容: %s&apos; % request.data)def put(self, request, *args, **kwargs):    return Response(&apos;PUT请求，响应内容，解析器&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.5.2 仅处理请求头content-type为application&#x2F;x-www-form-urlencoded的请求体</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.request import Request<br>from rest_framework.parsers import FormParser</p><p>class TestView(APIView):<br>    parser_classes = [FormParser, ]</p><pre><code>def post(self, request, *args, **kwargs):    print(request.content_type)    # 获取请求的值，并使用对应的JSONParser进行处理    print(request.data)    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值    print(request.POST)    print(request.FILES)    return Response(&apos;POST请求，响应内容&apos;)def put(self, request, *args, **kwargs):    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.5.3 仅处理请求头content-type为multipart&#x2F;form-data的请求体</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-1"><a href="#usr-bin-env-python-1" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from django.shortcuts import render<br>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.parsers import MultiPartParser</p><p>class TestView(APIView):<br>    authentication_classes = []<br>    permission_classes = []<br>    parser_classes = [MultiPartParser, ]</p><pre><code>def get(self, request, *args, **kwargs):    return render(request, &apos;test.html&apos;)def post(self, request, *args, **kwargs):    print(request.content_type)    # 获取请求的值，并使用对应的JSONParser进行处理    print(request.data)    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值    print(request.POST)    print(request.FILES)    return Response(&apos;POST请求，响应内容&apos;)def put(self, request, *args, **kwargs):    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模版文件</span><br></pre></td></tr></table></figure><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title><meta name="generator" content="Hexo 4.2.0"><link rel="alternate" href="/atom.xml" title="shuke's Blog" type="application/atom+xml"></head><body><form action="http://127.0.0.1:8000/test/" method="post" enctype="multipart/form-data">    <input type="text" name="user" />    <input type="file" name="img"><pre><code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</code></pre></form></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.5.4 仅上传文件</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>from django.conf.urls import url, includefrom web.views import TestView<p>urlpatterns = [<br>    url(r’test/(?P<filename>[^/]+)’, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-2"><a href="#usr-bin-env-python-2" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-3"><a href="#coding-utf-8-3" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.parsers import FileUploadParser</p><p>class TestView(APIView):<br>    authentication_classes = []<br>    permission_classes = []<br>    parser_classes = [FileUploadParser, ]</p><pre><code>def get(self, request, *args, **kwargs):    return render(request, &apos;test.html&apos;)def post(self, request, filename, *args, **kwargs):    print(filename)    print(request.content_type)    # 获取请求的值，并使用对应的JSONParser进行处理    print(request.data)    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值    print(request.POST)    print(request.FILES)    return Response(&apos;POST请求，响应内容&apos;)def put(self, request, *args, **kwargs):    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模版文件</span><br></pre></td></tr></table></figure><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title></head><body><form action="http://127.0.0.1:8000/test/f1.numbers" method="post" enctype="multipart/form-data">    <input type="text" name="user" />    <input type="file" name="img"><pre><code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</code></pre></form></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#### 3.5.5 同时多个Parser</span><br><span class="line">当同时使用多个parser时，rest framework会根据请求头content-type自动进行比对，并使用对应parser</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>from django.conf.urls import url, includefrom web.views import TestView<p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-3"><a href="#usr-bin-env-python-3" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-4"><a href="#coding-utf-8-4" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.parsers import JSONParser, FormParser, MultiPartParser</p><p>class TestView(APIView):<br>    parser_classes = [JSONParser, FormParser, MultiPartParser, ]</p><pre><code>def post(self, request, *args, **kwargs):    print(request.content_type)    # 获取请求的值，并使用对应的JSONParser进行处理    print(request.data)    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值    print(request.POST)    print(request.FILES)    return Response(&apos;POST请求，响应内容&apos;)def put(self, request, *args, **kwargs):    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 3.5.6 全局应用</span><br></pre></td></tr></table></figure><p>REST_FRAMEWORK = {<br>    ‘DEFAULT_PARSER_CLASSES’:[<br>        ‘rest_framework.parsers.JSONParser’<br>        ‘rest_framework.parsers.FormParser’<br>        ‘rest_framework.parsers.MultiPartParser’<br>    ]</p><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-5"><a href="#coding-utf-8-5" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response</p><p>class TestView(APIView):<br>    def post(self, request, <em>args, *</em>kwargs):<br>        print(request.content_type)</p><pre><code>    # 获取请求的值，并使用对应的JSONParser进行处理    print(request.data)    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值    print(request.POST)    print(request.FILES)    return Response(&apos;POST请求，响应内容&apos;)def put(self, request, *args, **kwargs):    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">⚠️ 个别特殊的值可以通过Django的request对象 request\.\_request 来进行获取</span><br><span class="line"></span><br><span class="line">### 3.6 序列化</span><br><span class="line">序列化用于对用户请求数据进行验证和数据进行序列化</span><br><span class="line">#### 3.6.1 自定义字段</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from app01.views import TestView</p><p>urlpatterns = [<br>    url(r’^test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models</span><br></pre></td></tr></table></figure><p>from django.db import models</p><h1 id="Create-your-models-here"><a href="#Create-your-models-here" class="headerlink" title="Create your models here."></a>Create your models here.</h1><p>from django.db import models</p><p>class UserInfo(models.Model):<br>    user_type_choices = (<br>        (1, ‘普通用户’),<br>        (2, ‘管理员’),<br>        (3, ‘超级管理员’),<br>    )<br>    username = models.CharField(max_length=32)<br>    password = models.CharField(max_length=64)<br>    user_type = models.IntegerField(choices=user_type_choices, default=1)</p><p>class UserToken(models.Model):<br>    user = models.OneToOneField(‘UserInfo’, on_delete=True)<br>    token = models.CharField(max_length=64)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-4"><a href="#usr-bin-env-python-4" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-6"><a href="#coding-utf-8-6" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from . import models</p><p>class PasswordValidator(object):<br>    def <strong>init</strong>(self, base):<br>        self.base = base</p><pre><code>def __call__(self, value):    if value != self.base:        message = &apos;This field must be %s.&apos; % self.base        raise serializers.ValidationError(message)def set_context(self, serializer_field):    &quot;&quot;&quot;    This hook is called by the serializer instance,    prior to the validation call being made.    &quot;&quot;&quot;    # 执行验证之前调用,serializer_fields是当前字段对象    pass</code></pre><p>class UserSerializer(serializers.Serializer):<br>    user_type = serializers.IntegerField()<br>    username = serializers.CharField(min_length=3)<br>    password = serializers.CharField(error_messages={‘required’: ‘密码不能为空’}, validators=[PasswordValidator(‘666’)])</p><p>class TestView(APIView):<br>    authentication_classes = []<br>    permission_classes = []</p><pre><code>def get(self, request, *args, **kwargs):    # 序列化，将数据库查询字段序列化为字典    data_list = models.UserInfo.objects.all()    ser = UserSerializer(instance=data_list, many=True)    # 或    # obj = models.UserInfo.objects.all().first()    # ser = UserSerializer(instance=obj, many=False)    return Response(ser.data)def post(self, request, *args, **kwargs):    # 验证，对请求发来的数据进行验证    ser = UserSerializer(data=request.data)    if ser.is_valid():        print(ser.validated_data)    else:        print(ser.errors)    return Response(&apos;POST请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST验证:</span><br></pre></td></tr></table></figure><p>curl -X POST <br>  <a href="http://127.0.0.1:8001/test/" target="_blank" rel="noopener">http://127.0.0.1:8001/test/</a> <br>  -H ‘Cache-Control: no-cache’ <br>  -H ‘Content-Type: application/json’ <br>  -H ‘Postman-Token: 4ea5d1d1-e3b1-38a3-19f6-25070ace2342’ <br>  -d ‘{<br>        “user_type”: 2,<br>        “username”: “python”,<br>        “password”: “666”<br>    }’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.6.2 基于Model自动生成字段</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views.s6_serializers import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-7"><a href="#coding-utf-8-7" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from .. import models</p><p>class PasswordValidator(object):<br>    def <strong>init</strong>(self, base):<br>        self.base = str(base)</p><pre><code>def __call__(self, value):    if value != self.base:        message = &apos;This field must be %s.&apos; % self.base        raise serializers.ValidationError(message)def set_context(self, serializer_field):    &quot;&quot;&quot;    This hook is called by the serializer instance,    prior to the validation call being made.    &quot;&quot;&quot;    # 执行验证之前调用,serializer_fields是当前字段对象    pass</code></pre><p>class ModelUserSerializer(serializers.ModelSerializer):</p><pre><code>user = serializers.CharField(max_length=32)class Meta:    model = models.UserInfo    fields = &quot;__all__&quot;    # fields = [&apos;user&apos;, &apos;pwd&apos;, &apos;ut&apos;]    depth = 2    extra_kwargs = {&apos;user&apos;: {&apos;min_length&apos;: 6}, &apos;pwd&apos;: {&apos;validators&apos;: [PasswordValidator(666), ]}}    # read_only_fields = [&apos;user&apos;]</code></pre><p>class TestView(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):</p><pre><code>    # 序列化，将数据库查询字段序列化为字典    data_list = models.UserInfo.objects.all()    ser = ModelUserSerializer(instance=data_list, many=True)    # 或    # obj = models.UserInfo.objects.all().first()    # ser = UserSerializer(instance=obj, many=False)    return Response(ser.data)def post(self, request, *args, **kwargs):    # 验证，对请求发来的数据进行验证    print(request.data)    ser = ModelUserSerializer(data=request.data)    if ser.is_valid():        print(ser.validated_data)    else:        print(ser.errors)    return Response(&apos;POST请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.6.3 生成URL</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views.s6_serializers import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>    url(r’detail/(?P<pk>\d+)/‘, TestView.as_view(), name=’detail’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models</span><br></pre></td></tr></table></figure><p>from django.db import models</p><h1 id="Create-your-models-here-1"><a href="#Create-your-models-here-1" class="headerlink" title="Create your models here."></a>Create your models here.</h1><p>from django.db import models</p><p>class UserInfo(models.Model):<br>    user_type_choices = (<br>        (1, ‘普通用户’),<br>        (2, ‘管理员’),<br>        (3, ‘超级管理员’),<br>    )<br>    username = models.CharField(max_length=32)<br>    password = models.CharField(max_length=64)<br>    user_type = models.IntegerField(choices=user_type_choices, default=1)</p><p>class UserToken(models.Model):<br>    user = models.OneToOneField(‘UserInfo’, on_delete=True)<br>    token = models.CharField(max_length=64)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-5"><a href="#usr-bin-env-python-5" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-8"><a href="#coding-utf-8-8" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from . import models</p><p>class PasswordValidator(object):<br>    def <strong>init</strong>(self, base):<br>        self.base = str(base)</p><pre><code>def __call__(self, value):    if value != self.base:        message = &apos;This field must be %s.&apos; % self.base        raise serializers.ValidationError(message)def set_context(self, serializer_field):    &quot;&quot;&quot;    This hook is called by the serializer instance,    prior to the validation call being made.    &quot;&quot;&quot;    # 执行验证之前调用,serializer_fields是当前字段对象    pass</code></pre><p>class ModelUserSerializer(serializers.ModelSerializer):<br>    user_type = serializers.HyperlinkedIdentityField(view_name=’detail’)</p><pre><code>class Meta:    model = models.UserInfo    fields = &quot;__all__&quot;    extra_kwargs = {        &apos;username&apos;: {&apos;min_length&apos;: 6},        &apos;pasword&apos;: {&apos;validators&apos;: [PasswordValidator(666), ]},    }</code></pre><p>class TestView(APIView):<br>    authentication_classes = []<br>    permission_classes = []</p><pre><code>def get(self, request, *args, **kwargs):    # 序列化，将数据库查询字段序列化为字典    data_list = models.UserInfo.objects.all()    ser = ModelUserSerializer(instance=data_list, many=True, context={&apos;request&apos;: request})    # 或    # obj = models.UserInfo.objects.all().first()    # ser = UserSerializer(instance=obj, many=False)    return Response(ser.data)def post(self, request, *args, **kwargs):    # 验证，对请求发来的数据进行验证    print(request.data)    ser = ModelUserSerializer(data=request.data)    if ser.is_valid():        print(ser.validated_data)    else:        print(ser.errors)    return Response(&apos;POST请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请求如下图所示:</span><br><span class="line">![images](https:&#x2F;&#x2F;note.youdao.com&#x2F;yws&#x2F;api&#x2F;personal&#x2F;file&#x2F;WEBe8cf0d66e9af86eaccbbfdc47f098d67?method&#x3D;download&amp;shareKey&#x3D;cff9deb39e5ad27072b3d2ccae7b1307)</span><br><span class="line"></span><br><span class="line">#### 3.6.4 自动生成URL</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from app01.views import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>    url(r’detail/(?P<pk>\d+)/‘, TestView.as_view(), name=’detail-info’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-6"><a href="#usr-bin-env-python-6" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-9"><a href="#coding-utf-8-9" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from . import models</p><p>class PasswordValidator(object):<br>    def <strong>init</strong>(self, base):<br>        self.base = str(base)</p><pre><code>def __call__(self, value):    if value != self.base:        message = &apos;This field must be %s.&apos; % self.base        raise serializers.ValidationError(message)def set_context(self, serializer_field):    &quot;&quot;&quot;    This hook is called by the serializer instance,    prior to the validation call being made.    &quot;&quot;&quot;    # 执行验证之前调用,serializer_fields是当前字段对象    pass</code></pre><p>class ModelUserSerializer(serializers.HyperlinkedModelSerializer):<br>    ll = serializers.HyperlinkedIdentityField(view_name=’detail-info’)<br>    tt = serializers.CharField(required=False)</p><pre><code>class Meta:    model = models.UserInfo    fields = &quot;__all__&quot;    list_serializer_class = serializers.ListSerializer    extra_kwargs = {        &apos;username&apos;: {&apos;min_length&apos;: 6},        &apos;password&apos;: {&apos;validators&apos;: [PasswordValidator(666), ]},        &apos;url&apos;: {&apos;view_name&apos;: &apos;detail-info&apos;},        &apos;ut&apos;: {&apos;view_name&apos;: &apos;detail-info&apos;},    }</code></pre><p>class TestView(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        # # 序列化，将数据库查询字段序列化为字典<br>        data_list = models.UserInfo.objects.all()<br>        ser = ModelUserSerializer(instance=data_list, many=True, context={‘request’: request})<br>        # # 如果Many=True<br>        # # 或<br>        # # obj = models.UserInfo.objects.all().first()<br>        # # ser = UserSerializer(instance=obj, many=False)<br>        return Response(ser.data)</p><pre><code>def post(self, request, *args, **kwargs):    # 验证，对请求发来的数据进行验证    print(request.data)    ser = ModelUserSerializer(data=request.data)    if ser.is_valid():        print(ser.validated_data)    else:        print(ser.errors)    return Response(&apos;POST请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#### 3.7 分页</span><br><span class="line">#### 3.7.1 根据页码进行分页</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from app01.views import UserViewSet</p><p>urlpatterns = [<br>    url(r’test/‘, UserViewSet.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-7"><a href="#usr-bin-env-python-7" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-10"><a href="#coding-utf-8-10" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework import serializers<br>from . import models</p><p>from rest_framework.pagination import PageNumberPagination</p><p>class StandardResultsSetPagination(PageNumberPagination):<br>    # 默认每页显示的数据条数<br>    page_size = 1<br>    # 获取URL参数中设置的每页显示数据条数<br>    page_size_query_param = ‘page_size’</p><pre><code># 获取URL参数中传入的页码keypage_query_param = &apos;page&apos;# 最大支持的每页显示的数据条数max_page_size = 1</code></pre><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class UserViewSet(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        user_list = models.UserInfo.objects.all().order_by(‘-id’)</p><pre><code># 实例化分页对象，获取数据库中的分页数据paginator = StandardResultsSetPagination()page_user_list = paginator.paginate_queryset(user_list, self.request, view=self)# 序列化对象serializer = UserSerializer(page_user_list, many=True)# 生成分页和数据response = paginator.get_paginated_response(serializer.data)return response</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问验证:</span><br></pre></td></tr></table></figure><p><a href="http://127.0.0.1:8001/test/?page=1" target="_blank" rel="noopener">http://127.0.0.1:8001/test/?page=1</a><br><a href="http://127.0.0.1:8001/test/?page=2" target="_blank" rel="noopener">http://127.0.0.1:8001/test/?page=2</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.7.2 位置和个数进行分页</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from app01.views import UserViewSet</p><p>urlpatterns = [<br>    url(r’test/‘, UserViewSet.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-8"><a href="#usr-bin-env-python-8" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-11"><a href="#coding-utf-8-11" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework import serializers<br>from . import models</p><p>from rest_framework.pagination import PageNumberPagination, LimitOffsetPagination</p><p>class StandardResultsSetPagination(LimitOffsetPagination):<br>    # 默认每页显示的数据条数<br>    default_limit = 2<br>    # URL中传入的显示数据条数的参数<br>    limit_query_param = ‘limit’<br>    # URL中传入的数据位置的参数<br>    offset_query_param = ‘offset’<br>    # 最大每页显得条数<br>    max_limit = None</p><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class UserViewSet(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        user_list = models.UserInfo.objects.all().order_by(‘-id’)</p><pre><code># 实例化分页对象，获取数据库中的分页数据paginator = StandardResultsSetPagination()page_user_list = paginator.paginate_queryset(user_list, self.request, view=self)# 序列化对象serializer = UserSerializer(page_user_list, many=True)# 生成分页和数据response = paginator.get_paginated_response(serializer.data)return response</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">验证:</span><br><span class="line">![位置分页](https:&#x2F;&#x2F;note.youdao.com&#x2F;yws&#x2F;api&#x2F;personal&#x2F;file&#x2F;WEBdebc8cfb0c33b1533d1e041ed9925422?method&#x3D;download&amp;shareKey&#x3D;2b1d435332858dbe629d4c3d78b670d8)</span><br><span class="line"></span><br><span class="line">#### 3.7.3 游标分页</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from app01.views import UserViewSet</p><p>urlpatterns = [<br>    url(r’test/‘, UserViewSet.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-9"><a href="#usr-bin-env-python-9" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-12"><a href="#coding-utf-8-12" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework import serializers<br>from . import models</p><p>from rest_framework.pagination import PageNumberPagination, LimitOffsetPagination, CursorPagination</p><p>class StandardResultsSetPagination(CursorPagination):<br>    # URL传入的游标参数<br>    cursor_query_param = ‘cursor’<br>    # 默认每页显示的数据条数<br>    page_size = 10<br>    # URL传入的每页显示条数的参数<br>    page_size_query_param = ‘page_size’<br>    # 每页显示数据最大条数<br>    max_page_size = 1000</p><pre><code># 根据ID从大到小排列ordering = &quot;id&quot;</code></pre><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class UserViewSet(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        user_list = models.UserInfo.objects.all().order_by(‘-id’)</p><pre><code># 实例化分页对象，获取数据库中的分页数据paginator = StandardResultsSetPagination()page_user_list = paginator.paginate_queryset(user_list, self.request, view=self)# 序列化对象serializer = UserSerializer(page_user_list, many=True)# 生成分页和数据response = paginator.get_paginated_response(serializer.data)return response</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 3.8  路由系统</span><br><span class="line">#### 3.8.1 自定义路由</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import s11_render</p><p>urlpatterns = [<br>    url(r’^test/$’, s11_render.TestView.as_view()),<br>    url(r’^test.(?P<format>[a-z0-9]+)$’, s11_render.TestView.as_view()),<br>    url(r’^test/(?P<pk>[^/.]+)/$’, s11_render.TestView.as_view()),<br>    url(r’^test/(?P<pk>[^/.]+).(?P<format>[a-z0-9]+)$’, s11_render.TestView.as_view())<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from .. import models</p><p>class TestView(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        print(kwargs)<br>        print(self.renderer_classes)<br>        return Response(‘…’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.8.2 半自动路由</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import s10_generic</p><p>urlpatterns = [<br>    url(r’^test/$’, s10_generic.UserViewSet.as_view({‘get’: ‘list’, ‘post’: ‘create’})),<br>    url(r’^test/(?P<pk>\d+)/$’, s10_generic.UserViewSet.as_view(<br>        {‘get’: ‘retrieve’, ‘put’: ‘update’, ‘patch’: ‘partial_update’, ‘delete’: ‘destroy’})),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-13"><a href="#coding-utf-8-13" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.viewsets import ModelViewSet<br>from rest_framework import serializers<br>from .. import models</p><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class UserViewSet(ModelViewSet):<br>    queryset = models.UserInfo.objects.all()<br>    serializer_class = UserSerializer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.8.3 全自动路由</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from rest_framework import routers<br>from web.views import s10_generic</p><p>router = routers.DefaultRouter()<br>router.register(r’users’, s10_generic.UserViewSet)</p><p>urlpatterns = [<br>    url(r’^’, include(router.urls)),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>from rest_framework.viewsets import ModelViewSet<br>from rest_framework import serializers<br>from .. import models</p><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class UserViewSet(ModelViewSet):<br>    queryset = models.UserInfo.objects.all()<br>    serializer_class = UserSerializer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### 3.9 试图</span><br><span class="line">#### 3.9.1 GenericViewSet</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views.s7_viewset import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view({‘get’:’list’}), name=’test’),<br>    url(r’detail/(?P<pk>\d+)/‘, TestView.as_view({‘get’:’list’}), name=’xxxx’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-14"><a href="#coding-utf-8-14" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework import viewsets<br>from rest_framework.response import Response</p><p>class TestView(viewsets.GenericViewSet):<br>    def list(self, request, <em>args, *</em>kwargs):<br>        return Response(‘…’)</p><pre><code>def add(self, request, *args, **kwargs):    passdef delete(self, request, *args, **kwargs):    passdef edit(self, request, *args, **kwargs):    pass</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.9.2 ModelViewSet(自定义URL)</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import s10_generic</p><p>urlpatterns = [<br>    url(r’^test/$’, s10_generic.UserViewSet.as_view({‘get’: ‘list’, ‘post’: ‘create’})),<br>    url(r’^test/(?P<pk>\d+)/$’, s10_generic.UserViewSet.as_view(<br>        {‘get’: ‘retrieve’, ‘put’: ‘update’, ‘patch’: ‘partial_update’, ‘delete’: ‘destroy’})),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-15"><a href="#coding-utf-8-15" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.viewsets import ModelViewSet<br>from rest_framework import serializers<br>from .. import models</p><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class UserViewSet(ModelViewSet):<br>    queryset = models.UserInfo.objects.all()<br>    serializer_class = UserSerializer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.9.3 ModelViewSet(rest framework路由)</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from rest_framework import routers<br>from app01 import views</p><p>router = routers.DefaultRouter()<br>router.register(r’users’, views.UserViewSet)<br>router.register(r’groups’, views.GroupViewSet)</p><h1 id="Wire-up-our-API-using-automatic-URL-routing"><a href="#Wire-up-our-API-using-automatic-URL-routing" class="headerlink" title="Wire up our API using automatic URL routing."></a>Wire up our API using automatic URL routing.</h1><h1 id="Additionally-we-include-login-URLs-for-the-browsable-API"><a href="#Additionally-we-include-login-URLs-for-the-browsable-API" class="headerlink" title="Additionally, we include login URLs for the browsable API."></a>Additionally, we include login URLs for the browsable API.</h1><p>urlpatterns = [<br>    url(r’^’, include(router.urls)),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>from rest_framework import viewsets<br>from rest_framework import serializers</p><p>class UserSerializer(serializers.HyperlinkedModelSerializer):<br>    class Meta:<br>        model = models.User<br>        fields = (‘url’, ‘username’, ‘email’, ‘groups’)</p><p>class GroupSerializer(serializers.HyperlinkedModelSerializer):<br>    class Meta:<br>        model = models.Group<br>        fields = (‘url’, ‘name’)</p><p>class UserViewSet(viewsets.ModelViewSet):<br>    “””<br>    API endpoint that allows users to be viewed or edited.<br>    “””<br>    queryset = User.objects.all().order_by(‘-date_joined’)<br>    serializer_class = UserSerializer</p><p>class GroupViewSet(viewsets.ModelViewSet):<br>    “””<br>    API endpoint that allows groups to be viewed or edited.<br>    “””<br>    queryset = Group.objects.all()<br>    serializer_class = GroupSerializer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 3.10 渲染器</span><br><span class="line">根据用户请求URL或用户可接受的类型,筛选出合适的渲染组件</span><br><span class="line">用户请求URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;json</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.json</span><br><span class="line">用户请求头:</span><br><span class="line">- Accept:text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8</span><br><span class="line"></span><br><span class="line">#### 3.10.1 Json</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;json</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.json</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">路由:</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import s11_render</p><p>urlpatterns = [<br>    url(r’^test/$’, s11_render.TestView.as_view()),<br>    url(r’^test.(?P<format>[a-z0-9]+)’, s11_render.TestView.as_view()),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图:</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-16"><a href="#coding-utf-8-16" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers</p><p>from rest_framework.renderers import JSONRenderer</p><p>from .. import models</p><p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class TestView(APIView):<br>    renderer_classes = [JSONRenderer, ]</p><pre><code>def get(self, request, *args, **kwargs):    user_list = models.UserInfo.objects.all()    ser = TestSerializer(instance=user_list, many=True)    return Response(ser.data)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#### 3.10.2 表格</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;admin</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.admin</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">试图:</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-17"><a href="#coding-utf-8-17" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from rest_framework.renderers import AdminRenderer<br>from . import models</p><p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class TestView(APIView):<br>    renderer_classes = [AdminRenderer, ]</p><pre><code>def get(self, request, *args, **kwargs):    user_list = models.UserInfo.objects.all()    ser = TestSerializer(instance=user_list, many=True)    return Response(ser.data)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#### 3.10.3 Form表单</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;form</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.form</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">试图:</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-18"><a href="#coding-utf-8-18" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers</p><p>from rest_framework.renderers import JSONRenderer<br>from rest_framework.renderers import AdminRenderer<br>from rest_framework.renderers import HTMLFormRendere<br>from . import models</p><p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class TestView(APIView):<br>    renderer_classes = [HTMLFormRenderer, ]</p><pre><code>def get(self, request, *args, **kwargs):    user_list = models.UserInfo.objects.all().first()    ser = TestSerializer(instance=user_list, many=False)    return Response(ser.data)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#### 3.10.4 自定义显示模版</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;html</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.html</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import s11_render</p><p>urlpatterns = [<br>    url(r’^test/$’, s11_render.TestView.as_view()),<br>    url(r’^test.(?P<format>[a-z0-9]+)’, s11_render.TestView.as_view()),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-19"><a href="#coding-utf-8-19" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from rest_framework.renderers import TemplateHTMLRenderer<br>from . import models</p><p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class TestView(APIView):<br>    renderer_classes = [TemplateHTMLRenderer, ]</p><pre><code>def get(self, request, *args, **kwargs):    user_list = models.UserInfo.objects.all().first()    ser = TestSerializer(instance=user_list, many=False)    return Response(ser.data, template_name=&apos;user_detail.html&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模版</span><br></pre></td></tr></table></figure><p>$ cat user_detail.html<br><!DOCTYPE html></p><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title></head><body>            </body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#### 3.10.5 浏览器API+JSON</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;api</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.api</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">试图:</span><br></pre></td></tr></table></figure>#!/usr/bin/env python# -*- coding:utf-8 -*-from rest_framework.views import APIViewfrom rest_framework.response import Responsefrom rest_framework import serializersfrom rest_framework.renderers import JSONRendererfrom rest_framework.renderers import BrowsableAPIRendererfrom . import models<p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class CustomBrowsableAPIRenderer(BrowsableAPIRenderer):<br>    def get_default_renderer(self, view):<br>        return JSONRenderer()</p><p>class TestView(APIView):<br>    renderer_classes = [CustomBrowsableAPIRenderer, ]</p><pre><code>def get(self, request, *args, **kwargs):    user_list = models.UserInfo.objects.all().first()    ser = TestSerializer(instance=user_list, many=False)    return Response(ser.data, template_name=&apos;user_detail.html&apos;)</code></pre><pre><code>注意: 如果同时多个存在时,自动根据URL后缀来选择渲染器[原文地址](http://www.cnblogs.com/wupeiqi/articles/7805382.html)</code></pre>]]></content>
    
    <summary type="html">
    
      什么是RESTful API以及Django RestFramework
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django中间件</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:02:39.000Z</published>
    <updated>2020-04-20T06:19:50.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django中间件"><a href="#Django中间件" class="headerlink" title="Django中间件"></a>Django中间件</h2><p>Django1.9版本以后，我们从浏览器发出一个请求 Request，得到一个响应后的内容 HttpResponse ，这个请求传递到 Django的过程如下：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB04655a9c01957e832ef5e4d978b4e24c?method=download&shareKey=8d63de97ad045d5d59f417afb25f7f5a" alt="请求到Django中的处理流程图">  </p><p>也就是说，每一个请求都是先通过中间件中的 process_request 函数，这个函数返回 None 或者 HttpResponse 对象，如果返回前者，继续处理其它中间件，如果返回一个 HttpResponse，就处理中止，返回到网页上。</p><p>中间件（类）的几种方法<br>中间件可以定义的几种方法，分别是：</p><p>process_request(self,request) ： 在处理url请求之前执行</p><p>process_view(self, request, callback, callback_args,<br>callback_kwargs) ： 调用视图之前执行</p><p>process_template_response(self,request,response) ： 只有当views函数中返回的对象中具有render方法，才会直接调用</p><p>process_response(self, request, response) ： 在响应返回浏览器之前调用</p><p>自定义中间件<br>在Django中我们可以自己写一个继承了MiddlewareMixin的类，来实现自定义中间件。通过from django.urls.deprecation import MiddlewareMixin导入MiddlewareMixin。</p><p>为中间件创建一个目录Middle，并在Middle目录下创建middle1.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class middle11(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&quot;中间件1请求&quot;)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&quot;中间件1返回&quot;)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class middle2(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&quot;中间件2请求&quot;)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&quot;中间件2返回&quot;)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class middle3(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&quot;中间件3请求&quot;)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&quot;中间件3返回&quot;)</span><br><span class="line">        return response</span><br></pre></td></tr></table></figure><p>在项目目录下的settings.py文件的MIDDLEWARE中添加如下三行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;Middle.middle1.middle11&#39;,</span><br><span class="line">&#39;Middle.middle1.middle2&#39;,</span><br><span class="line">&#39;Middle.middle1.middle3&#39;,</span><br></pre></td></tr></table></figure><p>当我们在浏览器中访问一个页面的时候在控制台就会看到如下的结果：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB7f08c20201bab55e63606763d5718b3f?method=download&shareKey=a861abec06c2fef7e33e026196e5f453" alt="middleware自定义演示结果">  </p><p>从这里也向我们证实了当一个请求进来的时候，会通过所有的中间件处理，并且当请求获得相应时也会通过中间件去处理。</p><h3 id="中间件应用场景"><a href="#中间件应用场景" class="headerlink" title="中间件应用场景"></a>中间件应用场景</h3><p>由于中间件工作在 视图函数执行前、执行后适合所有的请求/一部分请求做批量处理。</p><p>1、做IP限制<br>放在 中间件类的列表中，阻止某些IP访问了；</p><p>2.URL访问过滤<br>如果用户访问的是login视图（放过）</p><p>如果访问其他视图（需要检测是不是有session已经有了放行，没有返回login），这样就省得在 多个视图函数上写装饰器了！</p><p>3、缓存(CDN)<br>客户端请求来了，中间件去缓存看看有没有数据，有直接返回给用户，没有再去逻辑层 执行视图函数</p><blockquote><p>注意：项目目录下MIDDLEWARE中’django.middleware.csrf.CsrfViewMiddleware’,为用户实现防止跨站请求伪造的功能，在之前我们都是将它注释掉的，因为我们如果不注释掉在表单提交的时候就会报forbidden的错误，但是如果我们又要用到防止跨域请求，又不要报错我们只需要在表单<from>标签中加入<code>{ csrf_token }</code>即可解决这个问题。</p></blockquote><h3 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h3><p>1.利用用中间件，实现让所有页面都必须在进行用户登录后才能访问qin<br>2.中间件统计，某个网页的访问次数。</p><p><a href="https://www.jianshu.com/p/2889eaff70fa" target="_blank" rel="noopener">原文链接</a>  </p>]]></content>
    
    <summary type="html">
    
      Django中间件
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python后端开发面试总结</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:02:06.000Z</published>
    <updated>2020-04-20T06:02:26.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python后端开发面试总结"><a href="#Python后端开发面试总结" class="headerlink" title="Python后端开发面试总结"></a>Python后端开发面试总结</h2><h3 id="1-is和-的区别？"><a href="#1-is和-的区别？" class="headerlink" title="1. is和==的区别？"></a>1. is和==的区别？</h3><p>is判断两个引用是否指向的是同一个变量，即内存id是否相等，==则是调用的<strong>eq</strong>方法，一般是用于判断值是否相等，也可以重写<strong>eq</strong>方法实现想要的效果。</p><h3 id="2-dict与list的查找复杂度？"><a href="#2-dict与list的查找复杂度？" class="headerlink" title="2. dict与list的查找复杂度？"></a>2. dict与list的查找复杂度？</h3><p>dict用hash实现，查找的时间复杂度是O(1)，list则为O(n)。</p><h3 id="3-a-b-c三个装饰器依次装饰函数fun-，装饰器的执行顺序？"><a href="#3-a-b-c三个装饰器依次装饰函数fun-，装饰器的执行顺序？" class="headerlink" title="3. a/b/c三个装饰器依次装饰函数fun()，装饰器的执行顺序？"></a>3. a/b/c三个装饰器依次装饰函数fun()，装饰器的执行顺序？</h3><p>注意装饰器函数本身一般有两层，在装饰的时候外层和内层顺序是相反的，详情可以参考这边文章python 多个装饰器的调用顺序。</p><h3 id="4-如何运行一个字符串？"><a href="#4-如何运行一个字符串？" class="headerlink" title="4. 如何运行一个字符串？"></a>4. 如何运行一个字符串？</h3><p>eval和exec。</p><h2 id="5-Python多线程能否充分利用CPU多核心，为什么？"><a href="#5-Python多线程能否充分利用CPU多核心，为什么？" class="headerlink" title="5. Python多线程能否充分利用CPU多核心，为什么？"></a>5. Python多线程能否充分利用CPU多核心，为什么？</h2><p>这里回答的是GIL相关的东西，可深可浅，自己把握~</p><h3 id="6-什么是上下文管理器？如何实现？"><a href="#6-什么是上下文管理器？如何实现？" class="headerlink" title="6. 什么是上下文管理器？如何实现？"></a>6. 什么是上下文管理器？如何实现？</h3><p>广泛意义上来说，上下文是指程序运行的环境，Python中常见于打开文件或网络连接，其实就是with关键字，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&quot;test.txt&quot;) as file:  </span><br><span class="line">    print(file.read())</span><br></pre></td></tr></table></figure><p>可以确保文件在最后会被关闭，只要对一个对象实现了<strong>enter</strong>和<strong>exit</strong>函数，就可以构造自己的上下文管理器了</p><h3 id="7-同步-异步-阻塞-非阻塞都是什么？"><a href="#7-同步-异步-阻塞-非阻塞都是什么？" class="headerlink" title="7. 同步/异步/阻塞/非阻塞都是什么？"></a>7. 同步/异步/阻塞/非阻塞都是什么？</h3><p>感觉直接解释概念不好解释，这里我回答的思路是举例子，异步说白了就是任务不需要同步进行，比如用爬虫爬取一个数据，然后再保存数据，接下来再去爬另一个数据，这是同步；异步就是爬虫不用等着数据保存好，爬完一个直接去爬另一个，数据保存的事情交给别的逻辑去慢慢处理；阻塞和非阻塞也是基于此的，同步的情况下会阻塞爬虫，爬虫需要等待数据的保存.(非专业解释)</p><h3 id="8-如何判断两个浮点数是否相等？"><a href="#8-如何判断两个浮点数是否相等？" class="headerlink" title="8. 如何判断两个浮点数是否相等？"></a>8. 如何判断两个浮点数是否相等？</h3><p>之前完全没想过这个的问题，我的回答就是按一个差不多的精度去比较，比如到小数点第几位之前都是相等的，就认为两个数相等，或者Math模块里可能有什么方法可以去精确对比，当时是这么回答的，现在查了一下基本也是这个思路，Math模块中有一个isclose函数用来判断两个浮点数的值是否接近或相等.</p><h3 id="9-MySQL的索引一般是怎么实现的？"><a href="#9-MySQL的索引一般是怎么实现的？" class="headerlink" title="9. MySQL的索引一般是怎么实现的？"></a>9. MySQL的索引一般是怎么实现的？</h3><p>B-Tree(一般是B+Tree)和Hash，然后再简单介绍一下。</p><h3 id="10-对于Flask的实现有了解吗？"><a href="#10-对于Flask的实现有了解吗？" class="headerlink" title="10. 对于Flask的实现有了解吗？"></a>10. 对于Flask的实现有了解吗？</h3><p>只知道WSGI，其余的不清楚，暂时还没去深入看Flask的源码。</p><h2 id="Part-二"><a href="#Part-二" class="headerlink" title="Part 二"></a>Part 二</h2><h4 id="1-一个木棍任意截成三段，围成三角形的概率？"><a href="#1-一个木棍任意截成三段，围成三角形的概率？" class="headerlink" title="1. 一个木棍任意截成三段，围成三角形的概率？"></a>1. 一个木棍任意截成三段，围成三角形的概率？</h4><p>咩咩咩？不知道。（回来查了是25%，具体可以自行搜索，反正脱离数学N年是无论如何都想不出来的）。</p><h4 id="2-一个函数RAND7-随机返回1-7，使用它构造一个RAND10-函数随机返回10。"><a href="#2-一个函数RAND7-随机返回1-7，使用它构造一个RAND10-函数随机返回10。" class="headerlink" title="2. 一个函数RAND7()随机返回1~7，使用它构造一个RAND10()函数随机返回10。"></a>2. 一个函数RAND7()随机返回1~7，使用它构造一个RAND10()函数随机返回10。</h4><p>一开始写了个函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def rand10():  </span><br><span class="line">a &#x3D; rand7() + 3&#x2F;10  </span><br><span class="line">b &#x3D; rand7() - 4  </span><br><span class="line">if b &lt; 0:  </span><br><span class="line">b &#x3D; 0  </span><br><span class="line">return a + b</span><br></pre></td></tr></table></figure><p>也是脑袋抽了，想得太简单，这个rand10虽然能返回1~10的随机数，但每个数出现的概率不是1/10，后面时间快到了检查的时候才反应过来。正确的思路是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def rand10():  </span><br><span class="line">while  1:  </span><br><span class="line">       res &#x3D; (rand7()-1)*7+rand7()    \# res等概率随机1~49  </span><br><span class="line">if res &lt; 40: \# 只取出0~39共40个数，每个数出现的概率也是相等的  </span><br><span class="line">return res % 10 \+ 1 \# 随机输出1~10</span><br></pre></td></tr></table></figure><h4 id="3-把一段JAVA代码改成Python，并增加单元测试。"><a href="#3-把一段JAVA代码改成Python，并增加单元测试。" class="headerlink" title="3. 把一段JAVA代码改成Python，并增加单元测试。"></a>3. 把一段JAVA代码改成Python，并增加单元测试。</h4><p>JAVA代码本身很简单，即使没学过也能看懂，改后的Python代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class MyClass:  </span><br><span class="line">__current &#x3D; 0  </span><br><span class="line">def next(self):  </span><br><span class="line">MyClass.__current +&#x3D; 1  </span><br><span class="line">return MyClass.__current</span><br></pre></td></tr></table></figure><p>但是对于单元测试则仅限于听过的地步，需要用到unittest，好像也有别的模块。</p><h4 id="4-给定一个数组，按奇数在前升序，偶数在后降序排列，一行代码实现。"><a href="#4-给定一个数组，按奇数在前升序，偶数在后降序排列，一行代码实现。" class="headerlink" title="4. 给定一个数组，按奇数在前升序，偶数在后降序排列，一行代码实现。"></a>4. 给定一个数组，按奇数在前升序，偶数在后降序排列，一行代码实现。</h4><p>没啥好说的，一行代码必然是列表生成式，假设数组是nums，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(\[n for n in nums if n % 2\]) \+ sorted(\[n for n in nums if  not n % 2\], reverse&#x3D;True)</span><br></pre></td></tr></table></figure><h3 id="5-实现单例。"><a href="#5-实现单例。" class="headerlink" title="5. 实现单例。"></a>5. 实现单例。</h3><p>单例就是说一个class只能有一个instance，实现的方法有很多，例如改写<strong>new</strong>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Singleton(object):  </span><br><span class="line">_instance &#x3D; None  </span><br><span class="line">def \_\_new\_\_(cls, \*args, \*\*kw):  </span><br><span class="line">if  not cls._instance:  </span><br><span class="line">           cls.\_instance &#x3D; super(Singleton, cls).\_\_new__(cls, \*args, \*\*kw)    </span><br><span class="line">return cls._instance</span><br></pre></td></tr></table></figure><h4 id="6-有一个问答平台，每个用户对一个问题最多只能回答一次，同一个问题最多只能对一个答案点赞；1-设计合适的数据库结构；2-写出SQL获取点赞数最多的10个问题；"><a href="#6-有一个问答平台，每个用户对一个问题最多只能回答一次，同一个问题最多只能对一个答案点赞；1-设计合适的数据库结构；2-写出SQL获取点赞数最多的10个问题；" class="headerlink" title="6. 有一个问答平台，每个用户对一个问题最多只能回答一次，同一个问题最多只能对一个答案点赞；1)设计合适的数据库结构；2)写出SQL获取点赞数最多的10个问题；"></a>6. 有一个问答平台，每个用户对一个问题最多只能回答一次，同一个问题最多只能对一个答案点赞；1)设计合适的数据库结构；2)写出SQL获取点赞数最多的10个问题；</h4><p>我平时也就用数据库查数据，在设计数据库上没有深入研究，因此的我答案就简单写了有哪些表，字段分别是什么，至于题中的条件限制，就交由后台的程序逻辑去处理，而不是在数据库设计层面去限制。因为是自己设计的表结构，SQL本身也就不难。</p><h4 id="7-设计一个栈，实现pop-push及max方法，要求能在O-1-时间内取得最大值。"><a href="#7-设计一个栈，实现pop-push及max方法，要求能在O-1-时间内取得最大值。" class="headerlink" title="7. 设计一个栈，实现pop/push及max方法，要求能在O(1)时间内取得最大值。"></a>7. 设计一个栈，实现pop/push及max方法，要求能在O(1)时间内取得最大值。</h4><p>LeetCode原题啊！list怎么能O(1)取得最大值呢，无非是空间换时间，每push一个数就同时记录当前的最大值。</p><h4 id="8-手写快排。"><a href="#8-手写快排。" class="headerlink" title="8. 手写快排。"></a>8. 手写快排。</h4><p>呵呵。</p><h2 id="其他针对简历的提问"><a href="#其他针对简历的提问" class="headerlink" title="其他针对简历的提问"></a>其他针对简历的提问</h2><h4 id="1-你的网站，你觉得如果访问量上去了，最先出现瓶颈问题的点是哪？怎么优化？"><a href="#1-你的网站，你觉得如果访问量上去了，最先出现瓶颈问题的点是哪？怎么优化？" class="headerlink" title="1. 你的网站，你觉得如果访问量上去了，最先出现瓶颈问题的点是哪？怎么优化？"></a>1. 你的网站，你觉得如果访问量上去了，最先出现瓶颈问题的点是哪？怎么优化？</h4><p>我答的是数据库，因为好多不必要或者可以使用缓存的地方也频繁操作数据库，而且是使用的ORM，但之前从哪看到ORM不能确保对应的SQL语句是最优的，因此可以尝试使用原生SQL或者增加Redis缓存。</p><h3 id="2-如果要扩展后台服务器，需要怎么做？"><a href="#2-如果要扩展后台服务器，需要怎么做？" class="headerlink" title="2. 如果要扩展后台服务器，需要怎么做？"></a>2. 如果要扩展后台服务器，需要怎么做？</h3><p>(话说这不是运维的工作么。。。)呃，就是增加服务器啊，然后前面加一层负载均衡，把请求分配给不同的服务器.(那不同的服务器怎么使用你的Session？)再加个Session服务器。</p><h3 id="3-我看你平时刷编程题，有遇到什么有意思的题目吗？"><a href="#3-我看你平时刷编程题，有遇到什么有意思的题目吗？" class="headerlink" title="3. 我看你平时刷编程题，有遇到什么有意思的题目吗？"></a>3. 我看你平时刷编程题，有遇到什么有意思的题目吗？</h3><p>LeetCode才开始刷，就举了两道Codewars上的题目，我也真是傻了，真的举了两道有意思(但自己没做好)的题。</p><p>其他就无非是一些为什么想做后端开发之类的问题了，个人感觉题目大部分也挺简单的，我的表现也算中规中矩吧，但面试官说我要进一步加强基础知识，具体哪方面(数据库、网络协议、还是Python本身)又语焉不详。</p><p><a href="https://mp.weixin.qq.com/s/ULeyIN825L59LF9-CHocKg" target="_blank" rel="noopener">原文地址</a></p>]]></content>
    
    <summary type="html">
    
      Python后端开发面试总结
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Python小技巧和有趣的内置函数</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:01:26.000Z</published>
    <updated>2020-04-20T06:23:43.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python小技巧和有趣的内置函数"><a href="#Python小技巧和有趣的内置函数" class="headerlink" title="Python小技巧和有趣的内置函数"></a>Python小技巧和有趣的内置函数</h2><blockquote><p>一个python小技巧的集合和一些很有用的Python内置函数,这些函数简直是屌爆了，我认为每个 Pythoner 都应该知道这些函数。</p></blockquote><h3 id="1-1-拆箱"><a href="#1-1-拆箱" class="headerlink" title="1.1 拆箱"></a>1.1 拆箱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b, c &#x3D; 1, 2, 3  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 2, 3)  </span><br><span class="line">&gt;&gt;&gt; a, b, c &#x3D; [1, 2, 3]  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 2, 3)  </span><br><span class="line">&gt;&gt;&gt; a, b, c &#x3D; (2 * i + 1  for i in range(3))  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 3, 5)  </span><br><span class="line">&gt;&gt;&gt; a, (b, c), d &#x3D; [1, (2, 3), 4]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; b  </span><br><span class="line">2  </span><br><span class="line">&gt;&gt;&gt; c  </span><br><span class="line">3  </span><br><span class="line">&gt;&gt;&gt; d  </span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="1-2-拆箱变量交换"><a href="#1-2-拆箱变量交换" class="headerlink" title="1.2 拆箱变量交换"></a>1.2 拆箱变量交换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b &#x3D; 1, 2  </span><br><span class="line">&gt;&gt;&gt; a, b &#x3D; b, a  </span><br><span class="line">&gt;&gt;&gt; a, b  </span><br><span class="line">(2, 1)</span><br></pre></td></tr></table></figure><h3 id="1-3-扩展拆箱-只兼容python3"><a href="#1-3-扩展拆箱-只兼容python3" class="headerlink" title="1.3 扩展拆箱(只兼容python3)"></a>1.3 扩展拆箱(只兼容python3)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, *b, c &#x3D; [1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; b  </span><br><span class="line">[2, 3, 4]  </span><br><span class="line">&gt;&gt;&gt; c  </span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="1-4-负数索引"><a href="#1-4-负数索引" class="headerlink" title="1.4 负数索引"></a>1.4 负数索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[-1]  </span><br><span class="line">10  </span><br><span class="line">&gt;&gt;&gt; a[-3]  </span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="1-5-切割列表"><a href="#1-5-切割列表" class="headerlink" title="1.5 切割列表"></a>1.5 切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[2:8]  </span><br><span class="line">[2, 3, 4, 5, 6, 7]</span><br></pre></td></tr></table></figure><h3 id="1-6-负数索引切割列表"><a href="#1-6-负数索引切割列表" class="headerlink" title="1.6 负数索引切割列表"></a>1.6 负数索引切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[-4:-2]  </span><br><span class="line">[7, 8]</span><br></pre></td></tr></table></figure><h3 id="1-7指定步长切割列表"><a href="#1-7指定步长切割列表" class="headerlink" title="1.7指定步长切割列表"></a>1.7指定步长切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::2]  </span><br><span class="line">[0, 2, 4, 6, 8, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::3]  </span><br><span class="line">[0, 3, 6, 9]  </span><br><span class="line">&gt;&gt;&gt; a[2:8:2]  </span><br><span class="line">[2, 4, 6]</span><br></pre></td></tr></table></figure><h3 id="1-8-负数步长切割列表"><a href="#1-8-负数步长切割列表" class="headerlink" title="1.8 负数步长切割列表"></a>1.8 负数步长切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::-1]  </span><br><span class="line">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]  </span><br><span class="line">&gt;&gt;&gt; a[::-2]  </span><br><span class="line">[10, 8, 6, 4, 2, 0]</span><br></pre></td></tr></table></figure><h3 id="1-9-列表切割赋值"><a href="#1-9-列表切割赋值" class="headerlink" title="1.9 列表切割赋值"></a>1.9 列表切割赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[2:3] &#x3D; [0, 0]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 2, 0, 0, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[1:1] &#x3D; [8, 9]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 8, 9, 2, 0, 0, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[1:-1] &#x3D; []  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 5]</span><br></pre></td></tr></table></figure><h3 id="1-10-命名列表切割方式"><a href="#1-10-命名列表切割方式" class="headerlink" title="1.10 命名列表切割方式"></a>1.10 命名列表切割方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; LASTTHREE &#x3D; slice(-3, None)  </span><br><span class="line">&gt;&gt;&gt; LASTTHREE  </span><br><span class="line">slice(-3, None, None)  </span><br><span class="line">&gt;&gt;&gt; a[LASTTHREE]  </span><br><span class="line">[3, 4, 5]</span><br></pre></td></tr></table></figure><h3 id="1-11-列表以及迭代器的压缩和解压缩"><a href="#1-11-列表以及迭代器的压缩和解压缩" class="headerlink" title="1.11 列表以及迭代器的压缩和解压缩"></a>1.11 列表以及迭代器的压缩和解压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]  </span><br><span class="line">&gt;&gt;&gt; b &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]  </span><br><span class="line">&gt;&gt;&gt; z &#x3D; zip(a, b)  </span><br><span class="line">&gt;&gt;&gt; z  </span><br><span class="line">[(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]  </span><br><span class="line">&gt;&gt;&gt; zip(*z)  </span><br><span class="line">[(1, 2, 3), (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)]</span><br></pre></td></tr></table></figure><h3 id="1-12-列表相邻元素压缩器"><a href="#1-12-列表相邻元素压缩器" class="headerlink" title="1.12 列表相邻元素压缩器"></a>1.12 列表相邻元素压缩器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6]  </span><br><span class="line">&gt;&gt;&gt; zip(*([iter(a)] * 2))  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent &#x3D; lambda a, k: zip(*([iter(a)] * k))  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 3)  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 2)  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 1)  </span><br><span class="line">[(1,), (2,), (3,), (4,), (5,), (6,)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; zip(a[::2], a[1::2])  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; zip(a[::3], a[1::3], a[2::3])  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; group_adjacent &#x3D; lambda a, k: zip(*(a[i::k] for i in range(k)))  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 3)  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 2)  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 1)  </span><br><span class="line">[(1,), (2,), (3,), (4,), (5,), (6,)]</span><br></pre></td></tr></table></figure><h3 id="1-13-在列表中用压缩器和迭代器滑动取值窗口"><a href="#1-13-在列表中用压缩器和迭代器滑动取值窗口" class="headerlink" title="1.13 在列表中用压缩器和迭代器滑动取值窗口"></a>1.13 在列表中用压缩器和迭代器滑动取值窗口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def n_grams(a, n):  </span><br><span class="line">... z &#x3D; [iter(a[i:]) for i in range(n)]  </span><br><span class="line">... return zip(*z)  </span><br><span class="line">...  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 3)  </span><br><span class="line">[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 2)  </span><br><span class="line">[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 4)  </span><br><span class="line">[(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)]</span><br></pre></td></tr></table></figure><h3 id="用压缩器反转字典"><a href="#用压缩器反转字典" class="headerlink" title="用压缩器反转字典"></a>用压缩器反转字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;  </span><br><span class="line">&gt;&gt;&gt; m.items()  </span><br><span class="line">[(&#39;a&#39;, 1), (&#39;c&#39;, 3), (&#39;b&#39;, 2), (&#39;d&#39;, 4)]  </span><br><span class="line">&gt;&gt;&gt; zip(m.values(), m.keys())  </span><br><span class="line">[(1, &#39;a&#39;), (3, &#39;c&#39;), (2, &#39;b&#39;), (4, &#39;d&#39;)]  </span><br><span class="line">&gt;&gt;&gt; mi &#x3D; dict(zip(m.values(), m.keys()))  </span><br><span class="line">&gt;&gt;&gt; mi  </span><br><span class="line">&#123;1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-15-列表展开"><a href="#1-15-列表展开" class="headerlink" title="1.15 列表展开"></a>1.15 列表展开</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [[1, 2], [3, 4], [5, 6]]  </span><br><span class="line">&gt;&gt;&gt; list(itertools.chain.from_iterable(a))  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; sum(a, [])  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; [x for l in a for x in l]  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]  </span><br><span class="line">&gt;&gt;&gt; [x for l1 in a for l2 in l1 for x in l2]  </span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, [3, 4], [[5, 6], [7, 8]]]  </span><br><span class="line">&gt;&gt;&gt; flatten &#x3D; lambda x: [y for l in x for y in flatten(l)] if type(x) is list else [x]  </span><br><span class="line">&gt;&gt;&gt; flatten(a)  </span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure><h3 id="1-16-生成器表达式"><a href="#1-16-生成器表达式" class="headerlink" title="1.16 生成器表达式"></a>1.16 生成器表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; g &#x3D; (x ** 2  for x in xrange(10))  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">0  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">4  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">9  </span><br><span class="line">&gt;&gt;&gt; sum(x ** 3  for x in xrange(10))  </span><br><span class="line">2025  </span><br><span class="line">&gt;&gt;&gt; sum(x ** 3  for x in xrange(10) if x % 3 &#x3D;&#x3D; 1)  </span><br><span class="line">408</span><br></pre></td></tr></table></figure><h3 id="1-17-字典推导"><a href="#1-17-字典推导" class="headerlink" title="1.17 字典推导"></a>1.17 字典推导</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: x ** 2  for x in range(5)&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: &#39;A&#39; + str(x) for x in range(10)&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;0: &#39;A0&#39;, 1: &#39;A1&#39;, 2: &#39;A2&#39;, 3: &#39;A3&#39;, 4: &#39;A4&#39;, 5: &#39;A5&#39;, 6: &#39;A6&#39;, 7: &#39;A7&#39;, 8: &#39;A8&#39;, 9: &#39;A9&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-18-用字典推导反转字典"><a href="#1-18-用字典推导反转字典" class="headerlink" title="1.18 用字典推导反转字典"></a>1.18 用字典推导反转字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;&#39;d&#39;: 4, &#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;  </span><br><span class="line">&gt;&gt;&gt; &#123;v: k for k, v in m.items()&#125;  </span><br><span class="line">&#123;1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-19-命名元组"><a href="#1-19-命名元组" class="headerlink" title="1.19 命名元组"></a>1.19 命名元组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Point &#x3D; collections.namedtuple(&#39;Point&#39;, [&#39;x&#39;, &#39;y&#39;])  </span><br><span class="line">&gt;&gt;&gt; p &#x3D; Point(x&#x3D;1.0, y&#x3D;2.0)  </span><br><span class="line">&gt;&gt;&gt; p  </span><br><span class="line">Point(x&#x3D;1.0, y&#x3D;2.0)  </span><br><span class="line">&gt;&gt;&gt; p.x  </span><br><span class="line">1.0  </span><br><span class="line">&gt;&gt;&gt; p.y  </span><br><span class="line">2.0</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://python.jobbole.com/63320/" target="_blank" rel="noopener">更多请查看原文</a>  </p></blockquote><h3 id="函数部分"><a href="#函数部分" class="headerlink" title="函数部分"></a>函数部分</h3><h3 id="all-iterable"><a href="#all-iterable" class="headerlink" title="all(iterable)"></a>all(iterable)</h3><p>如果可迭代的对象(数组，字符串，列表等，下同)中的元素都是true(或者为空)的话返回True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_all &#x3D; True  </span><br><span class="line">for item in iterable:  </span><br><span class="line">if  not item:  </span><br><span class="line">_all &#x3D; False  </span><br><span class="line">break  </span><br><span class="line">if _all:  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><p>更简便的写法是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if all(iterable):  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><h3 id="any-iterable"><a href="#any-iterable" class="headerlink" title="any(iterable)"></a>any(iterable)</h3><p>如果可迭代的对象中任何一个元素为true的话返回True,如果可迭代的对象为空则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_any &#x3D; False  </span><br><span class="line">for item in iterable:  </span><br><span class="line">if item:  </span><br><span class="line">_any &#x3D; True  </span><br><span class="line">break  </span><br><span class="line">if _any:  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><p>更简便的写法是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if any(iterable):  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><h3 id="cmp-x-y"><a href="#cmp-x-y" class="headerlink" title="cmp(x, y)"></a>cmp(x, y)</h3><p>比较两个对象 x 和 y , x &lt; y 的时候返回负数， x ==y 的时候返回 0， x &gt; y 的时候返回正数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def compare(x,y):  </span><br><span class="line">if x &lt; y:  </span><br><span class="line">return -1  </span><br><span class="line">elif x &#x3D;&#x3D; y:  </span><br><span class="line">return  0  </span><br><span class="line">else:  </span><br><span class="line">return  1</span><br></pre></td></tr></table></figure><p>你完全可以使用一句 cmp(x, y) 来替代。</p><h3 id="dict-arg"><a href="#dict-arg" class="headerlink" title="dict([arg])"></a>dict([arg])</h3><p>使用 arg 提供的条目生成一个新的字典。<br>arg 通常是未知的，但是它很方便！比如说，如果我们想把一个含两个元组的列表转换成一个字典，我们可以这么做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l &#x3D; [(&#39;Knights&#39;, &#39;Ni&#39;), (&#39;Monty&#39;, &#39;Python&#39;), (&#39;SPAM&#39;, &#39;SPAAAM&#39;)]  </span><br><span class="line">d &#x3D; dict()  </span><br><span class="line">for tuple in l:  </span><br><span class="line">   d[tuple[0]] &#x3D; tuple[1]  </span><br><span class="line"># &#123;&#39;Knights&#39;: &#39;Ni&#39;, &#39;Monty&#39;: &#39;Python&#39;, &#39;SPAM&#39;: &#39;SPAAAM&#39;&#125;</span><br></pre></td></tr></table></figure><p>或者这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l &#x3D; [(&#39;Knights&#39;, &#39;Ni&#39;), (&#39;Monty&#39;, &#39;Python&#39;), (&#39;SPAM&#39;, &#39;SPAAAM&#39;)]  </span><br><span class="line">d &#x3D; dict(l) # &#123;&#39;Knights&#39;: &#39;Ni&#39;, &#39;Monty&#39;: &#39;Python&#39;, &#39;SPAM&#39;: &#39;SPAAAM&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="enumerate-iterable-start-0"><a href="#enumerate-iterable-start-0" class="headerlink" title="enumerate(iterable [,start=0])"></a>enumerate(iterable [,start=0])</h3><p>我真的是超级喜欢这个!如果你以前写过C语言，那么你可能会这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in range(len(list)):  </span><br><span class="line"># do stuff with list[i], for example, print it  </span><br><span class="line">print i, list[i]</span><br></pre></td></tr></table></figure><p>噢,不用那么麻烦!你可以使用enumerate()来提高可读性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i, item in enumerate(list):  </span><br><span class="line"># so stuff with item, for example print it  </span><br><span class="line">print i, item</span><br></pre></td></tr></table></figure><h3 id="isinstance-object-classinfo"><a href="#isinstance-object-classinfo" class="headerlink" title="isinstance(object, classinfo)"></a>isinstance(object, classinfo)</h3><p>如果 object 参数是 classinfo 参数的一个实例或者子类(直接或者间接)的话返回 True<br>当你想检验一个对象的类型的时候,第一个想到的应该是使用type()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if type(obj) &#x3D;&#x3D; type(dict):  </span><br><span class="line"># do stuff  </span><br><span class="line">elif type(obj) &#x3D;&#x3D; type(list):  </span><br><span class="line"># do other stuff  </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>或者你可以这么写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if isinstance(obj, dict):  </span><br><span class="line"># do stuff  </span><br><span class="line">elif isinstance(obj, list):  </span><br><span class="line"># do other stuff  </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="pow-x-y-z"><a href="#pow-x-y-z" class="headerlink" title="pow(x, y [,z])"></a>pow(x, y [,z])</h3><p>返回 x 的 y 次幂(如果 z 存在的话则以 z 为模)。<br>如果你想计算 x 的 y 次方，以 z 为模，那么你可以这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mod &#x3D; (x ** y) % z</span><br></pre></td></tr></table></figure><p>但是当 x=1234567， y=4567676， z=56 的时候我的电脑足足跑了 64 秒！<br>不要用 ** 和 % 了，使用 pow(x, y, z) 吧！这个例子可以写成 pow(1234567, 4567676, 56) ，只用了 0.034 秒就出了结果！</p><h3 id="zip-iterable"><a href="#zip-iterable" class="headerlink" title="zip([iterable, ])"></a>zip([iterable, ])</h3><p>这个函数返回一个含元组的列表，具体请看例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l1 &#x3D; (&#39;You gotta&#39;, &#39;the&#39;)  </span><br><span class="line">l2 &#x3D; (&#39;love&#39;, &#39;built-in&#39;)  </span><br><span class="line">out &#x3D; []  </span><br><span class="line">if len(l1) &#x3D;&#x3D; len(l2):  </span><br><span class="line">for i in range(len(l1)):  </span><br><span class="line">       out.append((l1[i], l2[i]))  </span><br><span class="line"># out &#x3D; [(&#39;You gotta&#39;, &#39;love&#39;), (&#39;the&#39;, &#39;built-in)]</span><br></pre></td></tr></table></figure><p>或者这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1 &#x3D; [&#39;You gotta&#39;, &#39;the&#39;]  </span><br><span class="line">l2 &#x3D; [&#39;love&#39;, &#39;built-in&#39;]  </span><br><span class="line">out &#x3D; zip(l1, l2) # [(&#39;You gotta&#39;, &#39;love&#39;), (&#39;the&#39;, &#39;built-in)]</span><br></pre></td></tr></table></figure><p>如果你想得到倒序的话加上 * 操作符就可以了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print zip(*out)  </span><br><span class="line"># [(&#39;You gotta&#39;, &#39;the&#39;), (&#39;love&#39;, &#39;built-in&#39;)]</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Python 内置函数很方便，它们很快并且经过了优化，所以它们可能效率更高。<br>我真心认为每个 Python 开发者都应该好好看看内置函数的文档(引言部分)。<br>忘了说了，在 itertools 模块中有很多很不错的函数。</p>]]></content>
    
    <summary type="html">
    
      Python小技巧和有趣的内置函数
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Python小技巧和有趣的内置函数</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:01:26.000Z</published>
    <updated>2020-04-20T06:01:49.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python小技巧和有趣的内置函数"><a href="#Python小技巧和有趣的内置函数" class="headerlink" title="Python小技巧和有趣的内置函数"></a>Python小技巧和有趣的内置函数</h2><blockquote><p>一个python小技巧的集合和一些很有用的Python内置函数,这些函数简直是屌爆了，我认为每个 Pythoner 都应该知道这些函数。</p></blockquote><h3 id="1-1-拆箱"><a href="#1-1-拆箱" class="headerlink" title="1.1 拆箱"></a>1.1 拆箱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b, c &#x3D; 1, 2, 3  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 2, 3)  </span><br><span class="line">&gt;&gt;&gt; a, b, c &#x3D; [1, 2, 3]  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 2, 3)  </span><br><span class="line">&gt;&gt;&gt; a, b, c &#x3D; (2 * i + 1  for i in range(3))  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 3, 5)  </span><br><span class="line">&gt;&gt;&gt; a, (b, c), d &#x3D; [1, (2, 3), 4]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; b  </span><br><span class="line">2  </span><br><span class="line">&gt;&gt;&gt; c  </span><br><span class="line">3  </span><br><span class="line">&gt;&gt;&gt; d  </span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="1-2-拆箱变量交换"><a href="#1-2-拆箱变量交换" class="headerlink" title="1.2 拆箱变量交换"></a>1.2 拆箱变量交换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b &#x3D; 1, 2  </span><br><span class="line">&gt;&gt;&gt; a, b &#x3D; b, a  </span><br><span class="line">&gt;&gt;&gt; a, b  </span><br><span class="line">(2, 1)</span><br></pre></td></tr></table></figure><h3 id="1-3-扩展拆箱-只兼容python3"><a href="#1-3-扩展拆箱-只兼容python3" class="headerlink" title="1.3 扩展拆箱(只兼容python3)"></a>1.3 扩展拆箱(只兼容python3)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, *b, c &#x3D; [1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; b  </span><br><span class="line">[2, 3, 4]  </span><br><span class="line">&gt;&gt;&gt; c  </span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="1-4-负数索引"><a href="#1-4-负数索引" class="headerlink" title="1.4 负数索引"></a>1.4 负数索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[-1]  </span><br><span class="line">10  </span><br><span class="line">&gt;&gt;&gt; a[-3]  </span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="1-5-切割列表"><a href="#1-5-切割列表" class="headerlink" title="1.5 切割列表"></a>1.5 切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[2:8]  </span><br><span class="line">[2, 3, 4, 5, 6, 7]</span><br></pre></td></tr></table></figure><h3 id="1-6-负数索引切割列表"><a href="#1-6-负数索引切割列表" class="headerlink" title="1.6 负数索引切割列表"></a>1.6 负数索引切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[-4:-2]  </span><br><span class="line">[7, 8]</span><br></pre></td></tr></table></figure><h3 id="1-7指定步长切割列表"><a href="#1-7指定步长切割列表" class="headerlink" title="1.7指定步长切割列表"></a>1.7指定步长切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::2]  </span><br><span class="line">[0, 2, 4, 6, 8, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::3]  </span><br><span class="line">[0, 3, 6, 9]  </span><br><span class="line">&gt;&gt;&gt; a[2:8:2]  </span><br><span class="line">[2, 4, 6]</span><br></pre></td></tr></table></figure><h3 id="1-8-负数步长切割列表"><a href="#1-8-负数步长切割列表" class="headerlink" title="1.8 负数步长切割列表"></a>1.8 负数步长切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::-1]  </span><br><span class="line">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]  </span><br><span class="line">&gt;&gt;&gt; a[::-2]  </span><br><span class="line">[10, 8, 6, 4, 2, 0]</span><br></pre></td></tr></table></figure><h3 id="1-9-列表切割赋值"><a href="#1-9-列表切割赋值" class="headerlink" title="1.9 列表切割赋值"></a>1.9 列表切割赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[2:3] &#x3D; [0, 0]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 2, 0, 0, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[1:1] &#x3D; [8, 9]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 8, 9, 2, 0, 0, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[1:-1] &#x3D; []  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 5]</span><br></pre></td></tr></table></figure><h3 id="1-10-命名列表切割方式"><a href="#1-10-命名列表切割方式" class="headerlink" title="1.10 命名列表切割方式"></a>1.10 命名列表切割方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; LASTTHREE &#x3D; slice(-3, None)  </span><br><span class="line">&gt;&gt;&gt; LASTTHREE  </span><br><span class="line">slice(-3, None, None)  </span><br><span class="line">&gt;&gt;&gt; a[LASTTHREE]  </span><br><span class="line">[3, 4, 5]</span><br></pre></td></tr></table></figure><h3 id="1-11-列表以及迭代器的压缩和解压缩"><a href="#1-11-列表以及迭代器的压缩和解压缩" class="headerlink" title="1.11 列表以及迭代器的压缩和解压缩"></a>1.11 列表以及迭代器的压缩和解压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]  </span><br><span class="line">&gt;&gt;&gt; b &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]  </span><br><span class="line">&gt;&gt;&gt; z &#x3D; zip(a, b)  </span><br><span class="line">&gt;&gt;&gt; z  </span><br><span class="line">[(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]  </span><br><span class="line">&gt;&gt;&gt; zip(*z)  </span><br><span class="line">[(1, 2, 3), (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)]</span><br></pre></td></tr></table></figure><h3 id="1-12-列表相邻元素压缩器"><a href="#1-12-列表相邻元素压缩器" class="headerlink" title="1.12 列表相邻元素压缩器"></a>1.12 列表相邻元素压缩器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6]  </span><br><span class="line">&gt;&gt;&gt; zip(*([iter(a)] * 2))  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent &#x3D; lambda a, k: zip(*([iter(a)] * k))  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 3)  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 2)  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 1)  </span><br><span class="line">[(1,), (2,), (3,), (4,), (5,), (6,)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; zip(a[::2], a[1::2])  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; zip(a[::3], a[1::3], a[2::3])  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; group_adjacent &#x3D; lambda a, k: zip(*(a[i::k] for i in range(k)))  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 3)  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 2)  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 1)  </span><br><span class="line">[(1,), (2,), (3,), (4,), (5,), (6,)]</span><br></pre></td></tr></table></figure><h3 id="1-13-在列表中用压缩器和迭代器滑动取值窗口"><a href="#1-13-在列表中用压缩器和迭代器滑动取值窗口" class="headerlink" title="1.13 在列表中用压缩器和迭代器滑动取值窗口"></a>1.13 在列表中用压缩器和迭代器滑动取值窗口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def n_grams(a, n):  </span><br><span class="line">... z &#x3D; [iter(a[i:]) for i in range(n)]  </span><br><span class="line">... return zip(*z)  </span><br><span class="line">...  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 3)  </span><br><span class="line">[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 2)  </span><br><span class="line">[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 4)  </span><br><span class="line">[(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)]</span><br></pre></td></tr></table></figure><h3 id="用压缩器反转字典"><a href="#用压缩器反转字典" class="headerlink" title="用压缩器反转字典"></a>用压缩器反转字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;  </span><br><span class="line">&gt;&gt;&gt; m.items()  </span><br><span class="line">[(&#39;a&#39;, 1), (&#39;c&#39;, 3), (&#39;b&#39;, 2), (&#39;d&#39;, 4)]  </span><br><span class="line">&gt;&gt;&gt; zip(m.values(), m.keys())  </span><br><span class="line">[(1, &#39;a&#39;), (3, &#39;c&#39;), (2, &#39;b&#39;), (4, &#39;d&#39;)]  </span><br><span class="line">&gt;&gt;&gt; mi &#x3D; dict(zip(m.values(), m.keys()))  </span><br><span class="line">&gt;&gt;&gt; mi  </span><br><span class="line">&#123;1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-15-列表展开"><a href="#1-15-列表展开" class="headerlink" title="1.15 列表展开"></a>1.15 列表展开</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [[1, 2], [3, 4], [5, 6]]  </span><br><span class="line">&gt;&gt;&gt; list(itertools.chain.from_iterable(a))  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; sum(a, [])  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; [x for l in a for x in l]  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]  </span><br><span class="line">&gt;&gt;&gt; [x for l1 in a for l2 in l1 for x in l2]  </span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, [3, 4], [[5, 6], [7, 8]]]  </span><br><span class="line">&gt;&gt;&gt; flatten &#x3D; lambda x: [y for l in x for y in flatten(l)] if type(x) is list else [x]  </span><br><span class="line">&gt;&gt;&gt; flatten(a)  </span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure><h3 id="1-16-生成器表达式"><a href="#1-16-生成器表达式" class="headerlink" title="1.16 生成器表达式"></a>1.16 生成器表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; g &#x3D; (x ** 2  for x in xrange(10))  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">0  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">4  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">9  </span><br><span class="line">&gt;&gt;&gt; sum(x ** 3  for x in xrange(10))  </span><br><span class="line">2025  </span><br><span class="line">&gt;&gt;&gt; sum(x ** 3  for x in xrange(10) if x % 3 &#x3D;&#x3D; 1)  </span><br><span class="line">408</span><br></pre></td></tr></table></figure><h3 id="1-17-字典推导"><a href="#1-17-字典推导" class="headerlink" title="1.17 字典推导"></a>1.17 字典推导</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: x ** 2  for x in range(5)&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: &#39;A&#39; + str(x) for x in range(10)&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;0: &#39;A0&#39;, 1: &#39;A1&#39;, 2: &#39;A2&#39;, 3: &#39;A3&#39;, 4: &#39;A4&#39;, 5: &#39;A5&#39;, 6: &#39;A6&#39;, 7: &#39;A7&#39;, 8: &#39;A8&#39;, 9: &#39;A9&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-18-用字典推导反转字典"><a href="#1-18-用字典推导反转字典" class="headerlink" title="1.18 用字典推导反转字典"></a>1.18 用字典推导反转字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;&#39;d&#39;: 4, &#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;  </span><br><span class="line">&gt;&gt;&gt; &#123;v: k for k, v in m.items()&#125;  </span><br><span class="line">&#123;1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-19-命名元组"><a href="#1-19-命名元组" class="headerlink" title="1.19 命名元组"></a>1.19 命名元组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Point &#x3D; collections.namedtuple(&#39;Point&#39;, [&#39;x&#39;, &#39;y&#39;])  </span><br><span class="line">&gt;&gt;&gt; p &#x3D; Point(x&#x3D;1.0, y&#x3D;2.0)  </span><br><span class="line">&gt;&gt;&gt; p  </span><br><span class="line">Point(x&#x3D;1.0, y&#x3D;2.0)  </span><br><span class="line">&gt;&gt;&gt; p.x  </span><br><span class="line">1.0  </span><br><span class="line">&gt;&gt;&gt; p.y  </span><br><span class="line">2.0</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://python.jobbole.com/63320/" target="_blank" rel="noopener">更多请查看原文</a>  </p></blockquote><h3 id="函数部分"><a href="#函数部分" class="headerlink" title="函数部分"></a>函数部分</h3><h3 id="all-iterable"><a href="#all-iterable" class="headerlink" title="all(iterable)"></a>all(iterable)</h3><p>如果可迭代的对象(数组，字符串，列表等，下同)中的元素都是true(或者为空)的话返回True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_all &#x3D; True  </span><br><span class="line">for item in iterable:  </span><br><span class="line">if  not item:  </span><br><span class="line">_all &#x3D; False  </span><br><span class="line">break  </span><br><span class="line">if _all:  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><p>更简便的写法是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if all(iterable):  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><h3 id="any-iterable"><a href="#any-iterable" class="headerlink" title="any(iterable)"></a>any(iterable)</h3><p>如果可迭代的对象中任何一个元素为true的话返回True,如果可迭代的对象为空则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_any &#x3D; False  </span><br><span class="line">for item in iterable:  </span><br><span class="line">if item:  </span><br><span class="line">_any &#x3D; True  </span><br><span class="line">break  </span><br><span class="line">if _any:  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><p>更简便的写法是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if any(iterable):  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><h3 id="cmp-x-y"><a href="#cmp-x-y" class="headerlink" title="cmp(x, y)"></a>cmp(x, y)</h3><p>比较两个对象 x 和 y , x &lt; y 的时候返回负数， x ==y 的时候返回 0， x &gt; y 的时候返回正数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def compare(x,y):  </span><br><span class="line">if x &lt; y:  </span><br><span class="line">return -1  </span><br><span class="line">elif x &#x3D;&#x3D; y:  </span><br><span class="line">return  0  </span><br><span class="line">else:  </span><br><span class="line">return  1</span><br></pre></td></tr></table></figure><p>你完全可以使用一句 cmp(x, y) 来替代。</p><h3 id="dict-arg"><a href="#dict-arg" class="headerlink" title="dict([arg])"></a>dict([arg])</h3><p>使用 arg 提供的条目生成一个新的字典。<br>arg 通常是未知的，但是它很方便！比如说，如果我们想把一个含两个元组的列表转换成一个字典，我们可以这么做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l &#x3D; [(&#39;Knights&#39;, &#39;Ni&#39;), (&#39;Monty&#39;, &#39;Python&#39;), (&#39;SPAM&#39;, &#39;SPAAAM&#39;)]  </span><br><span class="line">d &#x3D; dict()  </span><br><span class="line">for tuple in l:  </span><br><span class="line">   d[tuple[0]] &#x3D; tuple[1]  </span><br><span class="line"># &#123;&#39;Knights&#39;: &#39;Ni&#39;, &#39;Monty&#39;: &#39;Python&#39;, &#39;SPAM&#39;: &#39;SPAAAM&#39;&#125;</span><br></pre></td></tr></table></figure><p>或者这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l &#x3D; [(&#39;Knights&#39;, &#39;Ni&#39;), (&#39;Monty&#39;, &#39;Python&#39;), (&#39;SPAM&#39;, &#39;SPAAAM&#39;)]  </span><br><span class="line">d &#x3D; dict(l) # &#123;&#39;Knights&#39;: &#39;Ni&#39;, &#39;Monty&#39;: &#39;Python&#39;, &#39;SPAM&#39;: &#39;SPAAAM&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="enumerate-iterable-start-0"><a href="#enumerate-iterable-start-0" class="headerlink" title="enumerate(iterable [,start=0])"></a>enumerate(iterable [,start=0])</h3><p>我真的是超级喜欢这个!如果你以前写过C语言，那么你可能会这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in range(len(list)):  </span><br><span class="line"># do stuff with list[i], for example, print it  </span><br><span class="line">print i, list[i]</span><br></pre></td></tr></table></figure><p>噢,不用那么麻烦!你可以使用enumerate()来提高可读性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i, item in enumerate(list):  </span><br><span class="line"># so stuff with item, for example print it  </span><br><span class="line">print i, item</span><br></pre></td></tr></table></figure><h3 id="isinstance-object-classinfo"><a href="#isinstance-object-classinfo" class="headerlink" title="isinstance(object, classinfo)"></a>isinstance(object, classinfo)</h3><p>如果 object 参数是 classinfo 参数的一个实例或者子类(直接或者间接)的话返回 True<br>当你想检验一个对象的类型的时候,第一个想到的应该是使用type()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if type(obj) &#x3D;&#x3D; type(dict):  </span><br><span class="line"># do stuff  </span><br><span class="line">elif type(obj) &#x3D;&#x3D; type(list):  </span><br><span class="line"># do other stuff  </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>或者你可以这么写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if isinstance(obj, dict):  </span><br><span class="line"># do stuff  </span><br><span class="line">elif isinstance(obj, list):  </span><br><span class="line"># do other stuff  </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="pow-x-y-z"><a href="#pow-x-y-z" class="headerlink" title="pow(x, y [,z])"></a>pow(x, y [,z])</h3><p>返回 x 的 y 次幂(如果 z 存在的话则以 z 为模)。<br>如果你想计算 x 的 y 次方，以 z 为模，那么你可以这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mod &#x3D; (x ** y) % z</span><br></pre></td></tr></table></figure><p>但是当 x=1234567， y=4567676， z=56 的时候我的电脑足足跑了 64 秒！<br>不要用 ** 和 % 了，使用 pow(x, y, z) 吧！这个例子可以写成 pow(1234567, 4567676, 56) ，只用了 0.034 秒就出了结果！</p><h3 id="zip-iterable"><a href="#zip-iterable" class="headerlink" title="zip([iterable, ])"></a>zip([iterable, ])</h3><p>这个函数返回一个含元组的列表，具体请看例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l1 &#x3D; (&#39;You gotta&#39;, &#39;the&#39;)  </span><br><span class="line">l2 &#x3D; (&#39;love&#39;, &#39;built-in&#39;)  </span><br><span class="line">out &#x3D; []  </span><br><span class="line">if len(l1) &#x3D;&#x3D; len(l2):  </span><br><span class="line">for i in range(len(l1)):  </span><br><span class="line">       out.append((l1[i], l2[i]))  </span><br><span class="line"># out &#x3D; [(&#39;You gotta&#39;, &#39;love&#39;), (&#39;the&#39;, &#39;built-in)]</span><br></pre></td></tr></table></figure><p>或者这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1 &#x3D; [&#39;You gotta&#39;, &#39;the&#39;]  </span><br><span class="line">l2 &#x3D; [&#39;love&#39;, &#39;built-in&#39;]  </span><br><span class="line">out &#x3D; zip(l1, l2) # [(&#39;You gotta&#39;, &#39;love&#39;), (&#39;the&#39;, &#39;built-in)]</span><br></pre></td></tr></table></figure><p>如果你想得到倒序的话加上 * 操作符就可以了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print zip(*out)  </span><br><span class="line"># [(&#39;You gotta&#39;, &#39;the&#39;), (&#39;love&#39;, &#39;built-in&#39;)]</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Python 内置函数很方便，它们很快并且经过了优化，所以它们可能效率更高。<br>我真心认为每个 Python 开发者都应该好好看看内置函数的文档(引言部分)。<br>忘了说了，在 itertools 模块中有很多很不错的函数。</p>]]></content>
    
    <summary type="html">
    
      Python小技巧和有趣的内置函数
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署Django+Vue前后端分离的项目</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:00:48.000Z</published>
    <updated>2020-04-20T06:01:07.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker部署Django-Vue前后端分离的项目"><a href="#Docker部署Django-Vue前后端分离的项目" class="headerlink" title="Docker部署Django+Vue前后端分离的项目"></a>Docker部署Django+Vue前后端分离的项目</h2><blockquote><p>本文主要介绍使用Docker环境部署一个Django Rest和Vue结合的前后端分离项目.</p></blockquote><h3 id="前端Vue"><a href="#前端Vue" class="headerlink" title="前端Vue"></a>前端Vue</h3><h4 id="使用Makefile编译打包"><a href="#使用Makefile编译打包" class="headerlink" title="使用Makefile编译打包"></a>使用Makefile编译打包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># cmdb-frontend makefile</span><br><span class="line">#</span><br><span class="line">SHELL :&#x3D; &#x2F;bin&#x2F;bash</span><br><span class="line">PATH  :&#x3D; node_modules&#x2F;.bin:$(PATH)</span><br><span class="line"></span><br><span class="line">NOW :&#x3D; $(shell date +&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">PROJECT :&#x3D; cmdb-frontend</span><br><span class="line">PKG_NAME :&#x3D; $(PROJECT).tar.gz</span><br><span class="line"></span><br><span class="line"># Docker</span><br><span class="line">REGISTRY :&#x3D; wcr.shuke.net</span><br><span class="line">NAME :&#x3D; devops&#x2F;$(PROJECT)</span><br><span class="line">TAG :&#x3D; v$(shell date +&quot;%Y%m%d&quot;)</span><br><span class="line">IMG :&#x3D; $(REGISTRY)&#x2F;$(NAME):$(TAG)</span><br><span class="line"></span><br><span class="line"># update helm values.yaml</span><br><span class="line">CONTENT :&#x3D; $(subst TAG,$(TAG),&#39;9 s&#x2F;.*&#x2F;  tag\: TAG&#x2F;g&#39;)</span><br><span class="line"></span><br><span class="line">all : install pkg build-img</span><br><span class="line">.PHONY: all</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">@echo -e &quot;\033[32m$(NOW): Build $&#123;PROJECT&#125; project\033[0m&quot;</span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line">pkg:</span><br><span class="line">@echo -e &quot;\033[32m$(NOW): start packing\033[0m&quot;</span><br><span class="line">tar zcf $(PKG_NAME) dist&#x2F;*</span><br><span class="line"></span><br><span class="line">build-img:</span><br><span class="line">@echo -e &quot;\033[32m$(NOW): Start build image...\033[0m&quot;</span><br><span class="line">cp -Ra dist nginx&#x2F;</span><br><span class="line">docker build -t $(IMG) nginx</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">@echo -e &quot;\033[32m$(NOW): clean...\033[0m&quot;</span><br><span class="line">-rm -rf $(PKG_NAME) dist nginx&#x2F;dist</span><br><span class="line">-docker rmi $(IMG)</span><br></pre></td></tr></table></figure><p>⚠️ 注: 在项目的根目录下执行<code>make all</code>命令进行编译打包操作以及生成docker镜像.</p><h4 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># cat cmdb.shuke.net.conf</span><br><span class="line">upstream cmdb-backend &#123;</span><br><span class="line">    server web:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name cmdb.shuke.net;</span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            try_files $uri $uri&#x2F; &#x2F;index.html @fallback;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        location @fallback &#123;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass    http:&#x2F;&#x2F;cmdb-backend;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚠️ 注: 需将nginx配置文件复制到Dokcer镜像中覆盖默认的配置文件</p><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># CMDB Frontend Nginx Dockerfile</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">FROM wcr.shuke.net&#x2F;base&#x2F;nginx:1.14.2</span><br><span class="line"></span><br><span class="line">LABEL maintainer&#x3D;&quot;shu_ke163@163.com&quot;</span><br><span class="line"></span><br><span class="line">COPY dist &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</span><br><span class="line"></span><br><span class="line">COPY cmdb.shuke.net.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;etc&#x2F;nginx</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure><p>⚠️ 注: 此处的nginx镜像可以使用Docker Hub官方的镜像也可以自定义.</p><h3 id="后端Django"><a href="#后端Django" class="headerlink" title="后端Django"></a>后端Django</h3><h4 id="Dockerfile-1"><a href="#Dockerfile-1" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># Django CMDB</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">FROM python:3</span><br><span class="line">ENV PYTHONUNBUFFERED 1</span><br><span class="line">RUN mkdir &#x2F;code</span><br><span class="line">WORKDIR &#x2F;code</span><br><span class="line">ADD requirements.txt &#x2F;code&#x2F;</span><br><span class="line">RUN pip install  --no-cache-dir -r requirements.txt</span><br><span class="line">ADD . &#x2F;code&#x2F;</span><br><span class="line">EXPOSE 8000</span><br><span class="line">CMD [&quot;python&quot;, &quot;.&#x2F;manage.py runserver 0.0.0.0:8000&quot;]</span><br></pre></td></tr></table></figure><p>⚠️ 注: 将Dockerfile放入Django的项目根节点目录下,用于构建后端容器</p><h4 id="docker-compose-yml-文件"><a href="#docker-compose-yml-文件" class="headerlink" title="docker-compose.yml 文件"></a>docker-compose.yml 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:4</span><br><span class="line">    container_name: cmdb-redis</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:5.6</span><br><span class="line">    container_name: cmdb-mysql</span><br><span class="line">    volumes:</span><br><span class="line">      - ~&#x2F;data&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: admin123</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3307:3306&quot;</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    image: cmdb-backend:v1.0.0</span><br><span class="line">    container_name: cmdb-backend</span><br><span class="line">    command: python3 manage.py runserver 0.0.0.0:8000</span><br><span class="line">    volumes:</span><br><span class="line">      - .:&#x2F;code</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8000:8000&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">      - db</span><br><span class="line">    links:</span><br><span class="line">      - redis</span><br><span class="line">      - db</span><br><span class="line">  nginx:</span><br><span class="line">   # 前端Vue项目Dockerfile所在目录 </span><br><span class="line">    build: ..&#x2F;cmdb-frontend&#x2F;nginx&#x2F;</span><br><span class="line">    image: cmdb-frontend:v1.0.0</span><br><span class="line">    container_name: cmdb-nginx</span><br><span class="line">    ports:</span><br><span class="line">      - 9000:80</span><br><span class="line">    depends_on:</span><br><span class="line">      - web</span><br><span class="line">    links:</span><br><span class="line">      - web</span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure><p>⚠️ 注: 使用docker-compose 进行管理项目的所有依赖,包括redis/mysql/django/nginx容器,控制整个项目所依赖的所有容器的生命周期,使用<code>docker-compose up -d</code>命令拉取或生成镜像并启动项目依赖的所有容器</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">1. docker-compose build web   构建后端Django项目容器</span><br><span class="line">2. docker-compose build nginx 构建前端Vue项目容器</span><br><span class="line">3. docker-compose up 前台启动项目</span><br><span class="line">4. docker-compose up 后台启动项目</span><br><span class="line">5. docker-compose images 查看项目所有镜像</span><br><span class="line">6. docker-compose ps 查看项目所有容器</span><br><span class="line">7. docker-compose logs -f [service name] 如:web&#x2F;nginx  查看容器log信息</span><br><span class="line">8. docker-compose config 查看docker-compose.yml文件内容并校验</span><br><span class="line">9. $ docker-compose port nginx 80   # 查看服务的端口映射</span><br><span class="line">0.0.0.0:9000</span><br><span class="line">10. docker-compose stop db 停止单个容器</span><br><span class="line">11. docker-compose start db 启动单个容器</span><br><span class="line">12. docker-compose restart db 重启单个容器</span><br><span class="line">13. docker-compose start   启动所有容器</span><br><span class="line">14. docker-compose stop  停止所有容器</span><br><span class="line">15. docker-compose restart  重启所有容器</span><br><span class="line">16. docker-compose rm  删除所有已停止的容器</span><br><span class="line"></span><br><span class="line"># 以下是所有的docker-compose一些命令参数</span><br><span class="line">Commands:</span><br><span class="line">  build              Build or rebuild services</span><br><span class="line">  bundle             Generate a Docker bundle from the Compose file</span><br><span class="line">  config             Validate and view the Compose file</span><br><span class="line">  create             Create services</span><br><span class="line">  down               Stop and remove containers, networks, images, and volumes</span><br><span class="line">  events             Receive real time events from containers</span><br><span class="line">  exec               Execute a command in a running container</span><br><span class="line">  help               Get help on a command</span><br><span class="line">  images             List images</span><br><span class="line">  kill               Kill containers</span><br><span class="line">  logs               View output from containers</span><br><span class="line">  pause              Pause services</span><br><span class="line">  port               Print the public port for a port binding</span><br><span class="line">  ps                 List containers</span><br><span class="line">  pull               Pull service images</span><br><span class="line">  push               Push service images</span><br><span class="line">  restart            Restart services</span><br><span class="line">  rm                 Remove stopped containers</span><br><span class="line">  run                Run a one-off command</span><br><span class="line">  scale              Set number of containers for a service</span><br><span class="line">  start              Start services</span><br><span class="line">  stop               Stop services</span><br><span class="line">  top                Display the running processes</span><br><span class="line">  unpause            Unpause services</span><br><span class="line">  up                 Create and start containers</span><br><span class="line">  version            Show the Docker-Compose version information</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Docker部署Django+Vue前后端分离的项目
    
    </summary>
    
    
      <category term="Docker" scheme="https://shuke163.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://shuke163.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Django 找回密码</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:00:13.000Z</published>
    <updated>2020-04-20T06:00:30.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django-找回密码"><a href="#Django-找回密码" class="headerlink" title="Django 找回密码"></a>Django 找回密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line">from django.contrib.auth.hashers import make_password</span><br><span class="line"></span><br><span class="line">def findpassword(request):</span><br><span class="line">    button &#x3D; &quot;获取验证码&quot;</span><br><span class="line">    new_password &#x3D; False</span><br><span class="line">    </span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">        username &#x3D; request.POST.get(&quot;username&quot;,&#39;root&#39;)</span><br><span class="line">        VerificationCode &#x3D; request.POST.get(&quot;VerificationCode&quot;,&quot;&quot;)</span><br><span class="line">        password&#x3D; request.POST.get(&quot;password&quot;,&quot;&quot;)</span><br><span class="line">        user &#x3D; User.objects.filter(username&#x3D;username)</span><br><span class="line">        if not user:</span><br><span class="line">            tips &#x3D; f&quot;用户&#123;username&#125;不存在&quot;</span><br><span class="line">        else:</span><br><span class="line">            if not request.session.get(&quot;VerificationCode&quot;,&quot;&quot;):</span><br><span class="line">                button &#x3D; &quot;重置密码&quot;</span><br><span class="line">                tips &#x3D; &quot;验证码已发送&quot;</span><br><span class="line">                new_password &#x3D; True</span><br><span class="line">                VerificationCode &#x3D; str(random.randint(1000,9999))</span><br><span class="line">                request.session[&quot;VerificationCode&quot;] &#x3D; VerificationCode</span><br><span class="line">                user[0].email_user(&quot;找回密码&quot;,VerificationCode)</span><br><span class="line">            elif verificationCode &#x3D;&#x3D; request.session.get(&quot;verificationCode&quot;):</span><br><span class="line">                dj_ps &#x3D; make_password(password,None,&quot;pbkdf2_sha256&quot;)</span><br><span class="line">                user[0].password &#x3D; dj_ps</span><br><span class="line">                user[0].save()</span><br><span class="line">                del request.session[&quot;VerificationCode&quot;]</span><br><span class="line">                tips &#x3D; &quot;密码已重置&quot;</span><br><span class="line">            else</span><br><span class="line">               tips &#x3D; &quot;验证码错误，请重新获取&quot;</span><br><span class="line">               new_password &#x3D; False</span><br><span class="line">               def request.session[&quot;VerificationCode&quot;]</span><br><span class="line">      return render(request,&quot;user.html&quot;,locals())</span><br></pre></td></tr></table></figure><h3 id="用户model的实现"><a href="#用户model的实现" class="headerlink" title="用户model的实现"></a>用户model的实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># models.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth.models import AbstractUser</span><br><span class="line"></span><br><span class="line">class MyUser(AbstractUser):</span><br><span class="line">    qq &#x3D; models.ChardField(&quot;QQ 号码&quot;, max_length&#x3D;16)</span><br><span class="line">    weChat &#x3D; models.ChardField(&quot;微信&quot;, max_length&#x3D;100)</span><br><span class="line">    mobile &#x3D; models.ChardField(&quot;手机号码&quot;, max_length&#x3D;11)</span><br><span class="line">    </span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.username</span><br></pre></td></tr></table></figure><h2 id="扩展MyUser-Admin-信息"><a href="#扩展MyUser-Admin-信息" class="headerlink" title="扩展MyUser Admin 信息"></a>扩展MyUser Admin 信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from .models import MyUser</span><br><span class="line">from django.contrib.auth.admin import UserAdmin</span><br><span class="line">from django.utils.translation import gettext_lazy as _</span><br><span class="line"></span><br><span class="line">@admin.register(MyUser)</span><br><span class="line">class MyUserAdmin(UserAdmin):</span><br><span class="line">    list_display &#x3D; [&quot;uername&quot;,&quot;email&quot;,&quot;mobile&quot;,&quot;qq&quot;,&quot;weChat&quot;]</span><br><span class="line">    fieldsets &#x3D; list(&quot;UserAdmin.fielsets&quot;)</span><br><span class="line">    fieldsets[1] &#x3D; (_(&quot;Personal info&quot;),&#123;&quot;fields&quot;: (&quot;first_name&quot;,&quot;last_name&quot;,&quot;email&quot;,&quot;mobile&quot;,&quot;qq&quot;,&quot;weChat&quot;))&#125;)</span><br></pre></td></tr></table></figure><h2 id="Admin后台app设置"><a href="#Admin后台app设置" class="headerlink" title="Admin后台app设置"></a>Admin后台app设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># __init__.py</span><br><span class="line"></span><br><span class="line">from django.apps import AppConfig</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">## 修改app在admin后台显示名称</span><br><span class="line">## default_app_config的值来自apps.py类名</span><br><span class="line"></span><br><span class="line">default_app_config &#x3D; &quot;user.IndexConfig&quot;</span><br><span class="line"></span><br><span class="line"># 获取当前app的命名</span><br><span class="line">def get_current_app_name(_file):</span><br><span class="line">    return os.path.split(os.path.dirname(_file_)[-1])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 重写类 IndexConfig</span><br><span class="line">class IndexConfig(AppConfig):</span><br><span class="line">    name &#x3D; get_current_app_name(__file__)</span><br><span class="line">    verbose_name &#x3D; &quot;用户管理&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Django 找回密码
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django 数据类型</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T05:59:20.000Z</published>
    <updated>2020-04-20T05:59:53.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django-数据类型"><a href="#Django-数据类型" class="headerlink" title="Django 数据类型"></a>Django 数据类型</h2><table><thead><tr><th>表字段</th><th>说明</th></tr></thead><tbody><tr><td>models.Auto.Field</td><td>默认会生成一个名为ID的字段并为int类型</td></tr><tr><td>models.CharField</td><td>字符串类型</td></tr><tr><td>models.BooleanField</td><td>布尔类型</td></tr><tr><td>models.ComaSeparatedIntegerField</td><td>用逗号分隔的整数类型</td></tr><tr><td>models.DateField</td><td>日期(date)类型</td></tr><tr><td>models.DateTimeFile</td><td>日期(datetime)类型</td></tr><tr><td>models.Decimal</td><td>十进制小数类型</td></tr><tr><td>models.EmailField</td><td>字符串类型(正则表达式邮箱)</td></tr><tr><td>models.FloatField</td><td>浮点类型</td></tr><tr><td>models.IntegerField</td><td>整数类型</td></tr><tr><td>models.BigIntegerField</td><td>长整数类型</td></tr><tr><td>models.IPAddressField</td><td>字符串类型(正则表达式)</td></tr><tr><td>models.GenericIPAddressField</td><td>字符串类型，参数protocal可以是: both,IPv4和IPv6，验证IP地址</td></tr><tr><td>models.NullBooleanField</td><td>允许为空的布尔类型</td></tr><tr><td>models.PositiveIntegerField</td><td>正整数的整数类型</td></tr><tr><td>models.PositiveSmallIntegerField</td><td>小正整数类型</td></tr><tr><td>models.SlugField</td><td>包含字母/数字/下划线和连字符的字符串，常用语URL</td></tr><tr><td>models.SmallIntergerField</td><td>小整数类型，取值范围是(-32,768~+32,767)</td></tr><tr><td>models.TextField</td><td>长文本类型</td></tr><tr><td>models.Timefiled</td><td>时间类型，显示时分秒</td></tr><tr><td>models.URLField</td><td>字符串，地址为正则表达式</td></tr><tr><td>models.BinaryField</td><td>二进制数据类型</td></tr></tbody></table><h3 id="表字段参数设置"><a href="#表字段参数设置" class="headerlink" title="表字段参数设置"></a>表字段参数设置</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>Null</td><td>如为True,字段是否可以为空</td></tr><tr><td>Blank</td><td>如为True， 设置在Admin后台站点管理中添加数据时可以允许为空值</td></tr><tr><td>Default</td><td>设置为默认值</td></tr><tr><td>primary_key</td><td>如为True，将字段设置为主键</td></tr><tr><td>db_column</td><td>设置数据库中的字段名称</td></tr><tr><td>Unique</td><td>如为True,将自督办设置成唯一属性，默认为False</td></tr><tr><td>db_index</td><td>如为True，将字段添加数据库索引</td></tr><tr><td>verbose_name</td><td>在Admin站点管理设置字段的显示名称</td></tr><tr><td>related_name</td><td>关联对象反向饮用描述符，用于多表查询，可解决一个数据表有2个外键同时指向另一个数据表而出现重名的问题</td></tr></tbody></table><h3 id="django常用的内置函数"><a href="#django常用的内置函数" class="headerlink" title="django常用的内置函数"></a>django常用的内置函数</h3><table><thead><tr><th>内置函数</th><th>说明</th></tr></thead><tbody><tr><td>authenticate</td><td>验证用户是否存在，必选参数为<code>username</code>和<code>password</code>，只能用于模型User</td></tr><tr><td>create_user</td><td>创建新的用户信息，必选参数为<code>username</code>,只能用于模型User</td></tr><tr><td>set_password</td><td>修改用户密码，必选参数为<code>password</code>，只能用于模型User</td></tr><tr><td>login/logout</td><td>用户的的登陆和注销，只能用于模型User</td></tr><tr><td>make_password</td><td>密码加密处理，必选参数为<code>password</code>，可脱离模型User单独使用</td></tr><tr><td>check_password</td><td>校验加密前后的密码是否相同，可脱离模型User单独使用</td></tr><tr><td>email_user</td><td>发送邮件，只用用于模型User</td></tr><tr><td>send_mail</td><td>发送邮件</td></tr><tr><td>send_mass_mail</td><td>批量发送邮件</td></tr><tr><td>EmailMutilAlternatives</td><td>发送自定义内容格式的邮件</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      Django 数据类型
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>世界上最小的Django项目示例</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T05:58:22.000Z</published>
    <updated>2020-04-20T05:58:51.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-世界上最小的Django项目示例"><a href="#一-世界上最小的Django项目示例" class="headerlink" title="一. 世界上最小的Django项目示例"></a>一. 世界上最小的Django项目示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># hello.py</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line">DEBUG &#x3D; os.environ.get(&quot;DEBUG&quot;,&quot;on&quot;) &#x3D;&#x3D; &quot;on&quot;</span><br><span class="line">SECRET_KEY &#x3D; os.environ.get(&quot;SECRET_KEY&quot;,&quot;&#123;&#123; secret_key &#125;&#125;&quot;)</span><br><span class="line">ALLOWED_HOSTS &#x3D; os.environ.get(&quot;ALLOWED_HOST&quot;,&quot;localhost&quot;).split(&quot;,&quot;)</span><br><span class="line"></span><br><span class="line">settings.configure(</span><br><span class="line">    DEBUG&#x3D;DEBUG,</span><br><span class="line">    SECRET_KEY&#x3D;SECRET_KEY,</span><br><span class="line">    ALLOWED_HOSTS&#x3D;ALLOWED_HOSTS,</span><br><span class="line">    ROOT_URLCONF&#x3D;__name__,</span><br><span class="line">    MIDDLEWARE_CLASSES&#x3D;(</span><br><span class="line">        &#39;django.middleware.common.CommonMiddleware&#39;,</span><br><span class="line">        &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</span><br><span class="line">        &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    return HttpResponse(&#39;Heello World&#39;)</span><br><span class="line">    </span><br><span class="line">urlpatters &#x3D; (</span><br><span class="line">    url(r&#39;^$&#39;,index),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">if __name &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    from django.core.management import execute_from_command_line</span><br><span class="line">    execute_from_command_line(sys.argv)</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python hello.py runserver</span><br></pre></td></tr></table></figure><h2 id="二-使用gunincorn运行python服务"><a href="#二-使用gunincorn运行python服务" class="headerlink" title="二. 使用gunincorn运行python服务"></a>二. 使用gunincorn运行python服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># cat hello.py</span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.core.wsgi import get_wsgi_application</span><br><span class="line">from django.http import Httpresponse</span><br><span class="line"></span><br><span class="line">application &#x3D; get_wsgi_application()</span><br><span class="line"></span><br><span class="line">if __name &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">   from django.core.management import execute_from_command_line</span><br><span class="line">   execute_from_command_line(sys.argv)</span><br></pre></td></tr></table></figure><h3 id="安装gunicorn并运行"><a href="#安装gunicorn并运行" class="headerlink" title="安装gunicorn并运行"></a>安装gunicorn并运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># pip install gunicorn</span><br><span class="line"># gunicorn hello --log-file&#x3D;-</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      世界上最小的Django项目示例
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django序列化</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T05:56:25.000Z</published>
    <updated>2020-04-20T05:58:02.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django序列化"><a href="#Django序列化" class="headerlink" title="Django序列化"></a>Django序列化</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>序列化的model中含choice字段信息存在的问题，status会显示数字而非状态相关的文本，通过在<code>serializers.py</code>文件中添加另一个<code>status_display</code>字段类显示状态文本，便可以解决该问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from rest——framework import serializers</span><br><span class="line">from .models import Sprint,Task</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">class TaskSerializer(serializers.ModelSerializer):</span><br><span class="line">   status_display &#x3D; serializers.SerializerMethodField()</span><br><span class="line">   </span><br><span class="line">   class Meta:</span><br><span class="line">       model &#x3D; Task</span><br><span class="line">       fields &#x3D; (&quot;id&quot;,&quot;name&quot;,&quot;description&quot;,&quot;sprint&quot;,&quot;status&quot;,&quot;status_display&quot;,&quot;order&quot;,&quot;assignred&quot;,&quot;started&quot;,&quot;due&quot;,&quot;completed&quot;,)</span><br><span class="line">       </span><br><span class="line">   def get_status_display(self,obj):</span><br><span class="line">       return obj.get_status_display()</span><br></pre></td></tr></table></figure><ul><li>status_display 是一个只读字段，返回序列化器中<code>get_status_display</code>中方法的值,该方法的语法格式为<code>get</code> + 下划线 + 字段名称组成，如上所示，<code>get_status_display</code></li></ul><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><blockquote><p>序列化遇到的第二个问题是: <code>assigned</code>是一个指向<code>User</code>模型中的外键,这里显示的是用户的主键，然而我们的URL结构期望通过用户名来引用用户，我们在<code>serializers</code>中使用<code>SlugRelatedField</code>来解决这个问题       </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class TaskSerializer(serializers.ModelSerializer):</span><br><span class="line">    assigned &#x3D; serializers.SlugRelatedField(</span><br><span class="line">        slug_field&#x3D;User.USERNAME_FIELD, required&#x3D;False, allow_null&#x3D;true,</span><br><span class="line">        queryset&#x3D;user.objects.all()</span><br><span class="line">    )</span><br><span class="line">    status_display &#x3D; serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Task</span><br><span class="line">        fields &#x3D; (</span><br><span class="line">            &quot;id&quot;, &quot;name&quot;, &quot;description&quot;, &quot;sprint&quot;, &quot;status&quot;, &quot;status_display&quot;, &quot;order&quot;, &quot;assigned&quot;, &quot;started&quot;, &quot;due&quot;,</span><br><span class="line">            &quot;completed&quot;)</span><br><span class="line"></span><br><span class="line">    def get_status_display(self, obj):</span><br><span class="line">        return obj.get_status_display()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Django序列化
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
</feed>
