<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shuke&#39;s Blog</title>
  
  <subtitle>技术 管理 生活 格局 人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuke163.github.io/"/>
  <updated>2021-11-30T07:20:32.614Z</updated>
  <id>https://shuke163.github.io/</id>
  
  <author>
    <name>shuke</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx相关知识点</title>
    <link href="https://shuke163.github.io/2021/11/30/Nginx-301-302/"/>
    <id>https://shuke163.github.io/2021/11/30/Nginx-301-302/</id>
    <published>2021-11-30T06:52:56.000Z</published>
    <updated>2021-11-30T07:20:32.614Z</updated>
    
    <content type="html"><![CDATA[<div align="center">    取腰间明珠弹山雀</div><h3 id="什么是301永久重定向"><a href="#什么是301永久重定向" class="headerlink" title="什么是301永久重定向?"></a>什么是301永久重定向?</h3><p>301跳转也叫301重定向，也叫301跳转，也叫301永久重定向，是网站建设过程中的一个功能。一般用于2个域名同时指向同一个网站。一般来说，利用跳转，对网站的排名没有影响，但不会转移全部权重，只能说把损失降到最低。</p><h3 id="什么是302临时重定向？"><a href="#什么是302临时重定向？" class="headerlink" title="什么是302临时重定向？"></a>什么是302临时重定向？</h3><p>302跳转就网址重定向的一种，它区别于301跳转，301是网址永久重定向，302则是网址的临时定向。302转向或者302重定向（302 redirect）指的是当浏览器要求一个网页的时候，主机所返回的状态码。302状态码的意义是暂时转向到另外一个网址。</p><p>所以当我们在做页面跳转的时分必定要正视，利用的不能够是302重定向，而是301重定向。</p><p>server {<br>    listen 80;<br>    server_name <a href="http://www.shuke.com" target="_blank" rel="noopener">www.shuke.com</a>;<br>    rewrite ^/(.*) <a href="http://shuke.edu.com" target="_blank" rel="noopener">http://shuke.edu.com</a> permanent; # 301<br>    access_log off;<br>}</p><p>server {<br>    listen 80;<br>    server_name <a href="http://www.shuke.com" target="_blank" rel="noopener">www.shuke.com</a>;<br>    rewrite ^/(.*) <a href="http://shuke.edu.com" target="_blank" rel="noopener">http://shuke.edu.com</a> redirect; # 302<br>    access_log off;<br>}</p><p>last - 基本使用这个flag<br>break - 使用这个flag，禁止rewrit，不在继续匹配<br>redirect - 返回临时重定向的HTTP状态码302<br>permanent - 返回永久重定向的HTTP状态码301</p><p>NGINX的重定向用到了NGINX的HttpRewriteModule</p><p>NGINX的重定向IF条件判断<br>在server和location中可以使用NGINX的IF条件判断，条件可以为以下几种:<br>正则表达式</p><ul><li><del>为区分大小写匹配  !</del>为区分大小写不匹配</li><li><del>*为不区分大小写匹配  !</del>为不区分大小写不匹配</li></ul><p>if ($http_user_agent ~ MSIE) {<br>    rewrite ^(.*)$ /nginx-ie/$1 break;<br>}</p><p>条件和目录判断<br>-f和!-f为判断文件是否存在<br>-d和!-d为判断是否存在文件<br>-e和!-e为判断是否存在文件或目录<br>-x和!-x为判断是否有执行权限</p><p>判断文件或目录不存在的时候进行重定向操作<br>if (!-e $request_filename) {<br>    proxy_pass <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a>;<br>}<br>return</p><p>设置NGINX防盗链<br>location ~* .(gif|jpg|png|swf|flv) {<br>    valid_referers none blocked <a href="http://www.test.com" target="_blank" rel="noopener">www.test.com</a> <a href="http://www.shuke01.com" target="_blank" rel="noopener">www.shuke01.com</a>;<br>    if ($valiad_referers) {<br>        return 404;<br>    }<br>}</p><h3 id="NGINX-常见负载均衡"><a href="#NGINX-常见负载均衡" class="headerlink" title="NGINX 常见负载均衡"></a>NGINX 常见负载均衡</h3><ul><li>轮训 默认模式</li><li>weight 权重方式</li><li>ip_hash 依据IP分配方式</li><li>least_conn 最少连接数</li><li>fair(第三方) 响应时间方式</li><li>url_hash(第三方) 依据URL分配方式</li></ul>]]></content>
    
    <summary type="html">
    
      Nginx相关知识点
    
    </summary>
    
    
      <category term="WEB" scheme="https://shuke163.github.io/categories/WEB/"/>
    
    
      <category term="WEB" scheme="https://shuke163.github.io/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>pykube for k8s</title>
    <link href="https://shuke163.github.io/2021/02/27/pykube-for-k8s/"/>
    <id>https://shuke163.github.io/2021/02/27/pykube-for-k8s/</id>
    <published>2021-02-27T10:08:53.000Z</published>
    <updated>2021-02-27T10:23:42.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-python-client-library-for-kubenetes"><a href="#A-python-client-library-for-kubenetes" class="headerlink" title="A python client library for kubenetes"></a>A python client library for kubenetes</h2><h3 id="install-pykube"><a href="#install-pykube" class="headerlink" title="install pykube"></a>install pykube</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pykube</span><br></pre></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>Query for all pods in a custom namespaces</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import pykube</span><br><span class="line"></span><br><span class="line">api &#x3D; pykube.HTTPClient(pykube.KubeConfig.from_file(&quot;&#x2F;Users&#x2F;shuke&#x2F;.kube&#x2F;config&quot;))</span><br><span class="line">pods &#x3D; pykube.Pod.objects(api).filter(namespace&#x3D;&quot;kube-system&quot;)</span><br><span class="line">ready_pods &#x3D; filter(operator.attrgetter(&quot;ready&quot;), pods)</span><br><span class="line"></span><br><span class="line">for item in pods:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"># output:</span><br><span class="line">coredns-66bff467f8-82256</span><br><span class="line">coredns-66bff467f8-b49t6</span><br><span class="line">etcd-minikube</span><br><span class="line">kube-apiserver-minikube</span><br><span class="line">kube-controller-manager-minikube</span><br><span class="line">kube-proxy-j2pdv</span><br><span class="line">kube-scheduler-minikube</span><br><span class="line">my-rc-6978k</span><br><span class="line">my-rc-kvhhg</span><br><span class="line">my-rc-qn2zv</span><br><span class="line">my-rc01-5lwlr</span><br><span class="line">my-rc01-9hfvs</span><br><span class="line">my-rc01-w5qhb</span><br><span class="line">vault-0</span><br><span class="line">vault-agent-injector-5487bc5b57-m44l5</span><br></pre></td></tr></table></figure><h3 id="Create-a-ReplicationController"><a href="#Create-a-ReplicationController" class="headerlink" title="Create a ReplicationController:"></a>Create a ReplicationController:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import operator</span><br><span class="line">import pykube</span><br><span class="line"></span><br><span class="line">api &#x3D; pykube.HTTPClient(pykube.KubeConfig.from_file(&quot;&#x2F;Users&#x2F;shuke&#x2F;.kube&#x2F;config&quot;))</span><br><span class="line"></span><br><span class="line">obj &#x3D; &#123;</span><br><span class="line">    &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">    &quot;kind&quot;: &quot;ReplicationController&quot;,</span><br><span class="line">    &quot;metadata&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;my-rc&quot;,</span><br><span class="line">        &quot;namespace&quot;: &quot;kube-system&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;spec&quot;: &#123;</span><br><span class="line">        &quot;replicas&quot;: 3,</span><br><span class="line">        &quot;selector&quot;: &#123;</span><br><span class="line">            &quot;app&quot;: &quot;nginx&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;template&quot;: &#123;</span><br><span class="line">            &quot;metadata&quot;: &#123;</span><br><span class="line">                &quot;labels&quot;: &#123;</span><br><span class="line">                    &quot;app&quot;: &quot;nginx&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;spec&quot;: &#123;</span><br><span class="line">                &quot;containers&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;name&quot;: &quot;nginx&quot;,</span><br><span class="line">                        &quot;image&quot;: &quot;nginx&quot;,</span><br><span class="line">                        &quot;ports&quot;: [</span><br><span class="line">                            &#123;&quot;containerPort&quot;: 80&#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ret &#x3D; pykube.ReplicationController(api, obj).create()</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"># output:</span><br><span class="line">(base) ➜ k get rc</span><br><span class="line">NAME      DESIRED   CURRENT   READY   AGE</span><br><span class="line">my-rc     3         3         0       16m</span><br></pre></td></tr></table></figure><h3 id="Delete-ReplicationController"><a href="#Delete-ReplicationController" class="headerlink" title="Delete ReplicationController:"></a>Delete ReplicationController:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">obj &#x3D; &#123;</span><br><span class="line">    &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">    &quot;kind&quot;: &quot;ReplicationController&quot;,</span><br><span class="line">    &quot;metadata&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;my-rc&quot;,</span><br><span class="line">        &quot;namespace&quot;: &quot;kube-system&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">pykube.ReplicationController(api, obj).delete()</span><br></pre></td></tr></table></figure><h3 id="Check-server-version"><a href="#Check-server-version" class="headerlink" title="Check server version:"></a>Check server version:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import operator</span><br><span class="line">import pykube</span><br><span class="line"></span><br><span class="line">api &#x3D; pykube.HTTPClient(pykube.KubeConfig.from_file(&quot;&#x2F;Users&#x2F;shuke&#x2F;.kube&#x2F;config&quot;))</span><br><span class="line"></span><br><span class="line">print(api.version)</span><br><span class="line"></span><br><span class="line"># output:</span><br><span class="line">(base) ➜  python version.py</span><br><span class="line">(&#39;1&#39;, &#39;18&#39;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      pykube for k8s
    
    </summary>
    
    
      <category term="pykube" scheme="https://shuke163.github.io/categories/pykube/"/>
    
    
      <category term="python" scheme="https://shuke163.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python常用极简代码</title>
    <link href="https://shuke163.github.io/2020/07/26/python%E5%B8%B8%E7%94%A8%E6%9E%81%E7%AE%80%E4%BB%A3%E7%A0%81/"/>
    <id>https://shuke163.github.io/2020/07/26/python%E5%B8%B8%E7%94%A8%E6%9E%81%E7%AE%80%E4%BB%A3%E7%A0%81/</id>
    <published>2020-07-26T05:33:15.000Z</published>
    <updated>2020-07-26T09:34:45.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-重复元素判定"><a href="#1-重复元素判定" class="headerlink" title="1. 重复元素判定"></a>1. 重复元素判定</h2><p>以下方法可以检查给定列表是不是存在重复元素，它会使用 set() 函数来移除所有重复元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">def all_unique(lst):</span><br><span class="line">    return len(lst) &#x3D;&#x3D; len(set(lst))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x &#x3D; [1, 1, 2, 3, 4, 5, 6, 4, 3, 2]</span><br><span class="line">y &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">print(all_unique(x))  # False</span><br><span class="line">print(all_unique(y))  # True</span><br></pre></td></tr></table></figure><h2 id="字符元素组成判定"><a href="#字符元素组成判定" class="headerlink" title="字符元素组成判定"></a>字符元素组成判定</h2><p>检查两个字符串的组成元素是不是一样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from collections import Counter</span><br><span class="line"></span><br><span class="line">def anagram(first, second):</span><br><span class="line">    return Counter(first) &#x3D;&#x3D; Counter(second)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(anagram(&quot;abcd3&quot;, &quot;3acbd&quot;))  # True</span><br></pre></td></tr></table></figure><h2 id="内存占用"><a href="#内存占用" class="headerlink" title="内存占用"></a>内存占用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">variable &#x3D; 30</span><br><span class="line">print(sys.getsizeof(variable))  # 28</span><br></pre></td></tr></table></figure><h2 id="字节占用"><a href="#字节占用" class="headerlink" title="字节占用"></a>字节占用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def byte_size(string):</span><br><span class="line">    return (len(string.encode(&quot;utf-8&quot;)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(byte_size(&#39;&#39;))  # 0</span><br><span class="line">print(byte_size(&quot;Hello World&quot;))  # 11</span><br></pre></td></tr></table></figure><h2 id="打印N次字符串"><a href="#打印N次字符串" class="headerlink" title="打印N次字符串"></a>打印N次字符串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D; 5</span><br><span class="line">s &#x3D; &quot;HHHHHH &quot;</span><br><span class="line">print(s * n)  # HHHHHH HHHHHH HHHHHH HHHHHH HHHHHH</span><br></pre></td></tr></table></figure><h2 id="大写第一个字母"><a href="#大写第一个字母" class="headerlink" title="大写第一个字母"></a>大写第一个字母</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s &#x3D; &quot;this is my blog&quot;</span><br><span class="line">print(s.title())  # This Is My Blog</span><br></pre></td></tr></table></figure><h2 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from math import ceil</span><br><span class="line"></span><br><span class="line">def chunk(lst, size):</span><br><span class="line">    return list(</span><br><span class="line">        map(lambda x: lst[x * size:x * size + size],</span><br><span class="line">            list(range(0, ceil(len(lst) &#x2F; size)))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret &#x3D; chunk([1, 2, 3, 4, 5], 2)</span><br><span class="line">print(ret)  # [[1, 2], [3, 4], [5]]</span><br></pre></td></tr></table></figure><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>这个方法可以将布尔型的值去掉，例如（False，None，0，””），它使用 filter() 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def compact(lst):</span><br><span class="line">    return list(filter(bool, lst))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(compact([0, 1, False, 2, &quot;&quot;, 3, &quot;a&quot;, &quot;s&quot;, 34]))  # [1, 2, 3, &#39;a&#39;, &#39;s&#39;, 34]</span><br></pre></td></tr></table></figure><h2 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array &#x3D; [[&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;], [&quot;e&quot;, &quot;f&quot;]]</span><br><span class="line">transposed &#x3D; zip(*array)</span><br><span class="line">print(list(transposed))  # [(&#39;a&#39;, &#39;c&#39;, &#39;e&#39;), (&#39;b&#39;, &#39;d&#39;, &#39;f&#39;)]</span><br></pre></td></tr></table></figure><h2 id="链式对比"><a href="#链式对比" class="headerlink" title="链式对比"></a>链式对比</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; 3</span><br><span class="line">print(2 &lt; a &lt; 8)  # True</span><br><span class="line">print(1 &#x3D;&#x3D; a &lt; 2)  # False</span><br></pre></td></tr></table></figure><h2 id="逗号连接"><a href="#逗号连接" class="headerlink" title="逗号连接"></a>逗号连接</h2><p>下面的代码可以将列表连接成单个字符串，且每一个元素间的分隔方式设置为了逗号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hobbies &#x3D; [&quot;basketball&quot;, &quot;football&quot;, &quot;swimming&quot;]</span><br><span class="line">print(&quot;My hobbies are: &quot; + &quot;, &quot;.join(hobbies))  # My hobbies are: basketball, football, swimming</span><br></pre></td></tr></table></figure><h2 id="首字母小写"><a href="#首字母小写" class="headerlink" title="首字母小写"></a>首字母小写</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def decapitalize(str):</span><br><span class="line">    return str[:1].lower() + str[1:]</span><br><span class="line"></span><br><span class="line">print(decapitalize(&quot;FooBar&quot;))  # fooBar</span><br></pre></td></tr></table></figure><h2 id="展开列表"><a href="#展开列表" class="headerlink" title="展开列表"></a>展开列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def spread(arg):</span><br><span class="line">     ret &#x3D; []</span><br><span class="line">     for i in arg:</span><br><span class="line">         if isinstance(i, list):</span><br><span class="line">             ret.extend(i)</span><br><span class="line">     else:</span><br><span class="line">         ret.append(i)</span><br><span class="line">     return ret</span><br><span class="line"></span><br><span class="line">def deep_flatten(lst):</span><br><span class="line">    result &#x3D; []</span><br><span class="line"></span><br><span class="line">    result.extend(</span><br><span class="line">        spread(list(map(lambda x: deep_flatten(x) if type(x) &#x3D;&#x3D; list else x, lst))))</span><br><span class="line">    return result</span><br><span class="line">print(deep_flatten([[1], [2], [[3], 4], 5]))  # [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><h2 id="列表的差集"><a href="#列表的差集" class="headerlink" title="列表的差集"></a>列表的差集</h2><p>该方法将返回第一个列表的元素，其不在第二个列表内。如果同时要反馈第二个列表独有的元素，还需要加一句 set_b.difference(set_a)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def difference(a, b):</span><br><span class="line">    set_a &#x3D; set(a)</span><br><span class="line">    set_b &#x3D; set(b)</span><br><span class="line">    comparison &#x3D; set_a.difference(set_b)</span><br><span class="line">    return list(comparison)</span><br><span class="line"></span><br><span class="line">print(difference([1, 2, 3], [1, 2, 4]))  # [3]</span><br></pre></td></tr></table></figure><h2 id="如下方法首先会应用一个给定的函数，然后再返回应用函数后结果有差别的列表元素。"><a href="#如下方法首先会应用一个给定的函数，然后再返回应用函数后结果有差别的列表元素。" class="headerlink" title="如下方法首先会应用一个给定的函数，然后再返回应用函数后结果有差别的列表元素。"></a>如下方法首先会应用一个给定的函数，然后再返回应用函数后结果有差别的列表元素。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from math import floor</span><br><span class="line"></span><br><span class="line">def difference_by(a, b, fn):</span><br><span class="line">    b &#x3D; set(map(fn, b))</span><br><span class="line">    return [item for item in a if fn(item) not in b]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(difference_by([2.1, 1.2], [2.3, 3.4], floor))  # [1.2]</span><br><span class="line">print(difference_by([&#123;&#39;x&#39;: 2&#125;, &#123;&#39;x&#39;: 1&#125;], [&#123;&#39;x&#39;: 1&#125;], lambda v: v[&#39;x&#39;]))  # [&#123;&#39;x&#39;: 2&#125;]</span><br></pre></td></tr></table></figure><h2 id="链式函数调用"><a href="#链式函数调用" class="headerlink" title="链式函数调用"></a>链式函数调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def add(a, b):</span><br><span class="line">    return a + b</span><br><span class="line"></span><br><span class="line">def subtract(a, b):</span><br><span class="line">    return a - b</span><br><span class="line"></span><br><span class="line">a, b &#x3D; 4, 5</span><br><span class="line">print((subtract if a &gt; b else add)(a, b))  # 9</span><br></pre></td></tr></table></figure><h2 id="检查重复项"><a href="#检查重复项" class="headerlink" title="检查重复项"></a>检查重复项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def has_duplicates(lst):</span><br><span class="line">    return len(lst) !&#x3D; len(set(lst))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x &#x3D; [1, 2, 3, 4, 5, 5]</span><br><span class="line">y &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">print(has_duplicates(x))  # True</span><br><span class="line">print(has_duplicates(y))  # False</span><br></pre></td></tr></table></figure><h2 id="合并两个字典"><a href="#合并两个字典" class="headerlink" title="合并两个字典"></a>合并两个字典</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def megre_two_dicts(a, b):</span><br><span class="line">    c &#x3D; a.copy()</span><br><span class="line">    c.update(b)</span><br><span class="line">    return c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a &#x3D; &#123;&#39;x&#39;: 1, &#39;y&#39;: 2&#125;</span><br><span class="line">b &#x3D; &#123;&#39;y&#39;: 3, &#39;z&#39;: 4&#125;</span><br><span class="line">print(megre_two_dicts(a, b))  # &#123;&#39;x&#39;: 1, &#39;y&#39;: 3, &#39;z&#39;: 4&#125;</span><br><span class="line"></span><br><span class="line">def merge_dictionaries(a, b):</span><br><span class="line">    return &#123;**a, **b&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a &#x3D; &#123;&#39;x&#39;: 1, &#39;y&#39;: 2&#125;</span><br><span class="line">b &#x3D; &#123;&#39;y&#39;: 3, &#39;z&#39;: 4&#125;</span><br><span class="line">print(merge_dictionaries(a, b))  # &#123;&#39;x&#39;: 1, &#39;y&#39;: 3, &#39;z&#39;: 4&#125;</span><br></pre></td></tr></table></figure><h2 id="将两个列表转化为字典"><a href="#将两个列表转化为字典" class="headerlink" title="将两个列表转化为字典"></a>将两个列表转化为字典</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def to_dictionary(keys, values):</span><br><span class="line">    return dict(zip(keys, values))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keys &#x3D; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line">values &#x3D; [2, 3, 4]</span><br><span class="line">print(to_dictionary(keys, values))  # &#123;&#39;a&#39;: 2, &#39;b&#39;: 3, &#39;c&#39;: 4&#125;</span><br></pre></td></tr></table></figure><h2 id="使用枚举"><a href="#使用枚举" class="headerlink" title="使用枚举"></a>使用枚举</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list &#x3D; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class="line">for index, element in enumerate(list):</span><br><span class="line">    print(&quot;Value&quot;, element, &quot;Index &quot;, index, )</span><br><span class="line"></span><br><span class="line"># Value a Index  0</span><br><span class="line"># Value b Index  1</span><br><span class="line"># Value c Index  2</span><br><span class="line"># Value d Index  3</span><br></pre></td></tr></table></figure><h2 id="执行时间"><a href="#执行时间" class="headerlink" title="执行时间"></a>执行时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">start_time &#x3D; time.time()</span><br><span class="line">a &#x3D; 1</span><br><span class="line">b &#x3D; 2</span><br><span class="line">c &#x3D; a + b</span><br><span class="line">print(c)  # 3</span><br><span class="line">end_time &#x3D; time.time()</span><br><span class="line">total_time &#x3D; end_time - start_time</span><br><span class="line">print(&quot;Time: &quot;, total_time)</span><br><span class="line"># Time:  2.6226043701171875e-06</span><br></pre></td></tr></table></figure><h2 id="Try-else"><a href="#Try-else" class="headerlink" title="Try else"></a>Try else</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    2 * 3</span><br><span class="line">except TypeError:</span><br><span class="line">    print(&quot;An exception was raised&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;Thand God, no exceptions were raised.&quot;)</span><br><span class="line"></span><br><span class="line"># Thand God, no exceptions were raised.</span><br></pre></td></tr></table></figure><h2 id="元素频率"><a href="#元素频率" class="headerlink" title="元素频率"></a>元素频率</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def mode_frequent(list):</span><br><span class="line">    return max(set(list), key&#x3D;list.count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list &#x3D; [1, 2, 3, 12, 4, 5, 6, 7, 23, 4, 5, 2]</span><br><span class="line">print(mode_frequent(list))  # 2</span><br></pre></td></tr></table></figure><h2 id="回文序列"><a href="#回文序列" class="headerlink" title="回文序列"></a>回文序列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def palindrome(string):</span><br><span class="line">    from re import sub</span><br><span class="line">    s &#x3D; sub(&#39;[\W_]&#39;, &#39;&#39;, string.lower())</span><br><span class="line">    return s &#x3D;&#x3D; s[::-1]</span><br><span class="line"></span><br><span class="line">print(palindrome(&#39;taco cat&#39;))  # True</span><br></pre></td></tr></table></figure><h2 id="不使用-if-else-的计算子"><a href="#不使用-if-else-的计算子" class="headerlink" title="不使用 if-else 的计算子"></a>不使用 if-else 的计算子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import operator</span><br><span class="line"></span><br><span class="line">action &#x3D; &#123;</span><br><span class="line">    &quot;+&quot;: operator.add,</span><br><span class="line">    &quot;-&quot;: operator.sub,</span><br><span class="line">    &quot;&#x2F;&quot;: operator.truediv,</span><br><span class="line">    &quot;*&quot;: operator.mul,</span><br><span class="line">    &quot;**&quot;: pow</span><br><span class="line">&#125;</span><br><span class="line">print(action[&#39;-&#39;](50, 25))  # 25</span><br></pre></td></tr></table></figure><h2 id="Shuffle"><a href="#Shuffle" class="headerlink" title="Shuffle"></a>Shuffle</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from copy import deepcopy</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def shuffle(lst):</span><br><span class="line">    temp_lst &#x3D; deepcopy(lst)</span><br><span class="line">    m &#x3D; len(temp_lst)</span><br><span class="line">    while (m):</span><br><span class="line">        m -&#x3D; 1</span><br><span class="line">    i &#x3D; randint(0, m)</span><br><span class="line">    temp_lst[m], temp_lst[i] &#x3D; temp_lst[i], temp_lst[m]</span><br><span class="line">    return temp_lst</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo &#x3D; [1, 2, 3]</span><br><span class="line">print(shuffle(foo))  # [1,2,3]</span><br></pre></td></tr></table></figure><h2 id="展开列表-1"><a href="#展开列表-1" class="headerlink" title="展开列表"></a>展开列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def spread(arg):</span><br><span class="line">     ret &#x3D; []</span><br><span class="line">     for i in arg:</span><br><span class="line">         if isinstance(i, list):</span><br><span class="line">             ret.extend(i)</span><br><span class="line">         else:</span><br><span class="line">             ret.append(i)</span><br><span class="line">     return ret</span><br><span class="line"># print(spread([1, 2, 3, [4, 5, 6], [7], 8, 9]))</span><br></pre></td></tr></table></figure><h2 id="字典默认值"><a href="#字典默认值" class="headerlink" title="字典默认值"></a>字典默认值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d &#x3D; &#123;&quot;a&quot;: 1, &quot;b&quot;: 2&#125;</span><br><span class="line">print(d.get(&quot;c&quot;, 3))     # 3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python常用极简代码
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>go interface</title>
    <link href="https://shuke163.github.io/2020/07/03/go-interface/"/>
    <id>https://shuke163.github.io/2020/07/03/go-interface/</id>
    <published>2020-07-03T10:20:41.000Z</published>
    <updated>2020-07-03T10:34:46.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type 接口名 interface &#123;</span><br><span class="line">    方法名1(参数1, 参数2...)(返回值1, 返回值2...)</span><br><span class="line">    方法名2(参数1, 参数2...)(返回值1, 返回值2...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 接口类型</span><br><span class="line">type speaker interface &#123;</span><br><span class="line">speak() &#x2F;&#x2F; 只要实现了speak方法的变量都是speaker类型</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type cat struct &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type dog struct &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type car interface &#123;</span><br><span class="line">runCar()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type falali struct &#123;</span><br><span class="line">brand string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (f falali) runCar() &#123;</span><br><span class="line">fmt.Printf(&quot;%s速度70迈~\n&quot;, f.brand)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type baoshijie struct &#123;</span><br><span class="line">brand string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (f baoshijie) runCar() &#123;</span><br><span class="line">fmt.Printf(&quot;%s速度700迈~\n&quot;, f.brand)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func drive(c car) &#123;</span><br><span class="line">c.runCar()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (c cat) speak() &#123;</span><br><span class="line">fmt.Println(&quot;喵喵喵...&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (d dog) speak() &#123;</span><br><span class="line">fmt.Println(&quot;汪汪汪...&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func run(x speaker) &#123;</span><br><span class="line">&#x2F;&#x2F; 接收一个参数，传进来什么，就run什么</span><br><span class="line">x.speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在编程中会遇到以下场景: 我不关心一个变量是什么类型，只关心调用它的方法</span><br><span class="line">func main() &#123;</span><br><span class="line">var c1 cat</span><br><span class="line">var d1 dog</span><br><span class="line"></span><br><span class="line">run(c1)</span><br><span class="line">run(d1)</span><br><span class="line"></span><br><span class="line">var f falali</span><br><span class="line">var b baoshijie</span><br><span class="line">drive(f)</span><br><span class="line">drive(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      go interface
    
    </summary>
    
    
      <category term="GO" scheme="https://shuke163.github.io/categories/GO/"/>
    
    
      <category term="GO" scheme="https://shuke163.github.io/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>zerorpc框架尝鲜</title>
    <link href="https://shuke163.github.io/2020/07/03/zerorpc%E6%A1%86%E6%9E%B6%E5%B0%9D%E9%B2%9C/"/>
    <id>https://shuke163.github.io/2020/07/03/zerorpc%E6%A1%86%E6%9E%B6%E5%B0%9D%E9%B2%9C/</id>
    <published>2020-07-03T01:24:04.000Z</published>
    <updated>2020-07-03T01:32:06.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install zerorpc</span><br></pre></td></tr></table></figure><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line">import zerorpc</span><br><span class="line"></span><br><span class="line">class  HelloRPC(object):</span><br><span class="line">    def hello(self, name):</span><br><span class="line">        print(f&quot;Hello &#123;name&#125;&quot;)</span><br><span class="line">        return f&quot;Hello, &#123;name&#125;&quot;</span><br><span class="line"></span><br><span class="line">s &#x3D; zerorpc.Server(HelloRPC())</span><br><span class="line">s.bind(&quot;tcp:&#x2F;&#x2F;0.0.0.0:4000&quot;)</span><br><span class="line">s.run(</span><br></pre></td></tr></table></figure><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env bash</span><br><span class="line"></span><br><span class="line">import zerorpc</span><br><span class="line"></span><br><span class="line">c &#x3D; zerorpc.Client()</span><br><span class="line">c.connect(&quot;tcp:&#x2F;&#x2F;127.0.0.1:4000&quot;)</span><br><span class="line">print(c.hello(&quot;RPC&quot;))</span><br></pre></td></tr></table></figure><h3 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  contrib zerorpc tcp:&#x2F;&#x2F;127.0.0.1:4000 hello RPC</span><br><span class="line">connecting to &quot;tcp:&#x2F;&#x2F;127.0.0.1:4000&quot;</span><br><span class="line">&#39;Hello, RPC&#39;</span><br></pre></td></tr></table></figure><h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[zerorpc](http:&#x2F;&#x2F;www.zerorpc.io)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      zerorpc框架尝鲜
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Go函数版本和面向对象版本实现学生管理系统</title>
    <link href="https://shuke163.github.io/2020/07/01/Go%E5%87%BD%E6%95%B0%E7%89%88%E6%9C%AC%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%88%E6%9C%AC%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://shuke163.github.io/2020/07/01/Go%E5%87%BD%E6%95%B0%E7%89%88%E6%9C%AC%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%89%88%E6%9C%AC%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-07-01T12:20:29.000Z</published>
    <updated>2020-07-01T12:21:44.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go函数版本和面向对象版本实现学生管理系统"><a href="#Go函数版本和面向对象版本实现学生管理系统" class="headerlink" title="Go函数版本和面向对象版本实现学生管理系统"></a>Go函数版本和面向对象版本实现学生管理系统</h2><h3 id="函数版本实现"><a href="#函数版本实现" class="headerlink" title="函数版本实现"></a>函数版本实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">id   <span class="keyword">int64</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">allStudent <span class="keyword">map</span>[<span class="keyword">int64</span>]*student <span class="comment">// 变量声明</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newStudent</span><span class="params">(id <span class="keyword">int64</span>, name <span class="keyword">string</span>)</span> *<span class="title">student</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;student&#123;name: name, id: id,&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印所有的学生</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showStudent</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> allStudent &#123;</span><br><span class="line">fmt.Printf(<span class="string">"学号: %d, 姓名: %s"</span>, k, v.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addStudent</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 向allStudent中添加一个新的学生</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">id   <span class="keyword">int64</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line">fmt.Print(<span class="string">"请输入学生学号: "</span>)</span><br><span class="line">fmt.Scanln(&amp;id)</span><br><span class="line">fmt.Print(<span class="string">"请输入学生姓名: "</span>)</span><br><span class="line">fmt.Scanln(&amp;name)</span><br><span class="line"></span><br><span class="line">stu := newStudent(id, name)</span><br><span class="line">allStudent[id] = stu</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">delStudent</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">deleteID <span class="keyword">int64</span></span><br><span class="line">)</span><br><span class="line">fmt.Print(<span class="string">"请输入需要删除的学生ID: "</span>)</span><br><span class="line">fmt.Scanln(&amp;deleteID)</span><br><span class="line"><span class="built_in">delete</span>(allStudent, deleteID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">allStudent = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int64</span>]*student, <span class="number">48</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 1. 打印菜单</span></span><br><span class="line">fmt.Println(<span class="string">"欢迎光临学生管理系统!"</span>)</span><br><span class="line">fmt.Println(<span class="string">`</span></span><br><span class="line"><span class="string">1. 查看所有学生</span></span><br><span class="line"><span class="string">2. 新增学生</span></span><br><span class="line"><span class="string">3. 删除学生</span></span><br><span class="line"><span class="string">4. 退出 </span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">fmt.Print(<span class="string">"请输入你要干啥: "</span>)</span><br><span class="line"><span class="keyword">var</span> choice <span class="keyword">int</span></span><br><span class="line">fmt.Scanln(&amp;choice)</span><br><span class="line">fmt.Printf(<span class="string">"你选择了%d ...\n"</span>, choice)</span><br><span class="line"><span class="keyword">switch</span> choice &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">showStudent()</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">addStudent()</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">delStudent()</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">os.Exit(<span class="number">127</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"end..."</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面向对象版本实现"><a href="#面向对象版本实现" class="headerlink" title="面向对象版本实现"></a>面向对象版本实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 面向对象版本</span></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">id   <span class="keyword">int64</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">allStudent <span class="keyword">map</span>[<span class="keyword">int64</span>]*student</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newStudent</span><span class="params">(id <span class="keyword">int64</span>, name <span class="keyword">string</span>)</span> *<span class="title">student</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;student&#123;id: id, name: name&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s student)</span> <span class="title">showAllStudent</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> allStudent &#123;</span><br><span class="line">fmt.Printf(<span class="string">"学号: %d, 姓名: %s\n"</span>, k, v.name)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"学生总数: %d\n"</span>, <span class="built_in">len</span>(allStudent))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s student)</span> <span class="title">addStudent</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">id   <span class="keyword">int64</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line">fmt.Print(<span class="string">"请输入学号: "</span>)</span><br><span class="line">fmt.Scanln(&amp;id)</span><br><span class="line">fmt.Print(<span class="string">"请输入学生姓名: "</span>)</span><br><span class="line">fmt.Scanln(&amp;name)</span><br><span class="line">stu := newStudent(id, name)</span><br><span class="line">allStudent[id] = stu</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s student)</span> <span class="title">delStudent</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">deleteId <span class="keyword">int64</span></span><br><span class="line">)</span><br><span class="line">fmt.Print(<span class="string">"请输入需要删除的学生学号: "</span>)</span><br><span class="line">fmt.Scanln(&amp;deleteId)</span><br><span class="line"><span class="built_in">delete</span>(allStudent, deleteId)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">allStudent = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int64</span>]*student, <span class="number">48</span>)</span><br><span class="line">s := <span class="built_in">new</span>(student)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"欢迎光临学生管理系统!"</span>)</span><br><span class="line">fmt.Println(<span class="string">`</span></span><br><span class="line"><span class="string">1. 查看所有学生</span></span><br><span class="line"><span class="string">2. 新增学生</span></span><br><span class="line"><span class="string">3. 删除学生</span></span><br><span class="line"><span class="string">4. 退出</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">fmt.Print(<span class="string">"请输入您的选择: "</span>)</span><br><span class="line"><span class="keyword">var</span> choice <span class="keyword">int</span></span><br><span class="line">fmt.Scanln(&amp;choice)</span><br><span class="line"><span class="keyword">switch</span> choice &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">s.showAllStudent()</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">s.addStudent()</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">s.delStudent()</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">os.Exit(<span class="number">127</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">"end..."</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Go函数版本和面向对象版本实现学生管理系统
    
    </summary>
    
    
      <category term="GO" scheme="https://shuke163.github.io/categories/GO/"/>
    
    
      <category term="Go" scheme="https://shuke163.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go函数</title>
    <link href="https://shuke163.github.io/2020/06/27/Go%E5%87%BD%E6%95%B0/"/>
    <id>https://shuke163.github.io/2020/06/27/Go%E5%87%BD%E6%95%B0/</id>
    <published>2020-06-27T08:19:12.000Z</published>
    <updated>2020-06-27T08:21:48.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go-函数和闭包示例"><a href="#Go-函数和闭包示例" class="headerlink" title="Go 函数和闭包示例"></a>Go 函数和闭包示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func shuke163(name string) &#123;</span><br><span class="line">fmt.Println(&quot;Hello, &quot;, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 函数作为参数</span><br><span class="line">func lixiang(f func(string), name string) string &#123;</span><br><span class="line">f(name)</span><br><span class="line">return name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func zhaofengfeng() func(int, int) int &#123;</span><br><span class="line">return func(x, y int) int &#123;</span><br><span class="line">return x + y</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 函数作为返回值</span><br><span class="line">func jack() func(a, b int) int &#123;</span><br><span class="line">return func(a, b int) int &#123;</span><br><span class="line">return a + b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 闭包</span><br><span class="line">func bipkg(f func(string), name string) func() &#123;</span><br><span class="line">return func() &#123;</span><br><span class="line">f(name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func printFunc(f func()) &#123;</span><br><span class="line">f()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func ftest1() &#123;</span><br><span class="line">&#x2F;&#x2F; 函数即将结束的时候执行</span><br><span class="line">defer func() &#123;</span><br><span class="line">err :&#x3D; recover() &#x2F;&#x2F; 获取当前执行的panic的一些相关信息</span><br><span class="line">fmt.Println(&quot;放手去吧!&quot;)</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;()</span><br><span class="line">panic(&quot;犯了不可原谅的错误!&quot;)</span><br><span class="line">fmt.Println(&quot;This is ftest1&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func ftest2() &#123;</span><br><span class="line">fmt.Println(&quot;This is ftest2&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; fmt包 打印使用</span><br><span class="line">func main() &#123;</span><br><span class="line">ret :&#x3D; lixiang(shuke163, &quot;shuke11111&quot;)</span><br><span class="line">fmt.Println(ret) &#x2F;&#x2F; Hello,  shuke11111</span><br><span class="line"></span><br><span class="line">r :&#x3D; zhaofengfeng()</span><br><span class="line">sum :&#x3D; r(10, 20)</span><br><span class="line">fmt.Printf(&quot;%d\n&quot;, sum) &#x2F;&#x2F; 30</span><br><span class="line"></span><br><span class="line">j :&#x3D; jack()</span><br><span class="line">sum1 :&#x3D; j(10, 200)</span><br><span class="line">fmt.Println(sum1) &#x2F;&#x2F; 210</span><br><span class="line"></span><br><span class="line">result :&#x3D; bipkg(shuke163, &quot;shuke&quot;)</span><br><span class="line">printFunc(result) &#x2F;&#x2F; Hello,  shuke</span><br><span class="line"></span><br><span class="line">ftest1()</span><br><span class="line">ftest2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Go函数
    
    </summary>
    
    
      <category term="Go" scheme="https://shuke163.github.io/categories/Go/"/>
    
    
      <category term="Go" scheme="https://shuke163.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go闭包</title>
    <link href="https://shuke163.github.io/2020/06/26/Go%E9%97%AD%E5%8C%85/"/>
    <id>https://shuke163.github.io/2020/06/26/Go%E9%97%AD%E5%8C%85/</id>
    <published>2020-06-26T15:48:03.000Z</published>
    <updated>2020-06-26T15:50:19.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go闭包"><a href="#Go闭包" class="headerlink" title="Go闭包"></a>Go闭包</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makesuffix</span><span class="params">(suffix <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(name, suffix) &#123;</span><br><span class="line"><span class="keyword">return</span> name + suffix</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字 函数名(参数)(返回值)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(base <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span>)</span> &#123;</span><br><span class="line">add := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">base += i</span><br><span class="line"><span class="keyword">return</span> base</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sub := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">base -= i</span><br><span class="line"><span class="keyword">return</span> base</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> add, sub <span class="comment">// 返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">jpgFunc := makesuffix(<span class="string">".jpg"</span>)</span><br><span class="line">txtFunc := makesuffix(<span class="string">".txt"</span>)</span><br><span class="line">fmt.Println(jpgFunc(<span class="string">"test"</span>))</span><br><span class="line">fmt.Println(jpgFunc(<span class="string">"hello.jpg"</span>))</span><br><span class="line">fmt.Println(txtFunc(<span class="string">"test.txt"</span>))</span><br><span class="line"></span><br><span class="line">f1, f2 := calc(<span class="number">10</span>)</span><br><span class="line">fmt.Println(f1(<span class="number">1</span>), f2(<span class="number">2</span>)) <span class="comment">// 11 9</span></span><br><span class="line">fmt.Println(f1(<span class="number">1</span>), f2(<span class="number">2</span>)) <span class="comment">// 10 8</span></span><br><span class="line">fmt.Println(f1(<span class="number">3</span>), f2(<span class="number">4</span>)) <span class="comment">// 11 7</span></span><br><span class="line">fmt.Println(f1(<span class="number">5</span>), f2(<span class="number">6</span>)) <span class="comment">// 12 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Go闭包
    
    </summary>
    
    
      <category term="Go" scheme="https://shuke163.github.io/categories/Go/"/>
    
    
      <category term="Go" scheme="https://shuke163.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Terraform之申请AWS的EC2</title>
    <link href="https://shuke163.github.io/2020/06/24/Terraform%E4%B9%8B%E7%94%B3%E8%AF%B7AWS%E7%9A%84EC2/"/>
    <id>https://shuke163.github.io/2020/06/24/Terraform%E4%B9%8B%E7%94%B3%E8%AF%B7AWS%E7%9A%84EC2/</id>
    <published>2020-06-24T13:57:00.000Z</published>
    <updated>2020-06-24T14:08:46.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Terraform之申请AWS的EC2"><a href="#Terraform之申请AWS的EC2" class="headerlink" title="Terraform之申请AWS的EC2"></a>Terraform之申请AWS的EC2</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── cloud_init.sh  # 开机执行脚本 </span><br><span class="line">├── instance.tf    # 申请资源的主机</span><br><span class="line">├── main.tf        # 主配置文件</span><br><span class="line">├── output.tf      # 输出变量</span><br><span class="line">├── start.sh       # terraform 命令 </span><br><span class="line">└── variables.tf   # 输入变量</span><br></pre></td></tr></table></figure><h3 id="variables-tf"><a href="#variables-tf" class="headerlink" title="variables.tf"></a>variables.tf</h3><p>输入变量 一个AWS 账号的基础信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">variable &quot;region&quot; &#123;</span><br><span class="line">  type        &#x3D; string</span><br><span class="line">  description &#x3D; &quot;请输入创建的region&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;region_az&quot; &#123;</span><br><span class="line">  type        &#x3D; string</span><br><span class="line">  description &#x3D; &quot;请输入创建资源所在的AZ&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;instance_type&quot; &#123;</span><br><span class="line">  type        &#x3D; string</span><br><span class="line">  default     &#x3D; &quot;t3.nano&quot;</span><br><span class="line">  #default     &#x3D; &quot;m5.large&quot;</span><br><span class="line">  description &#x3D; &quot;请输入创建的实例类型&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;tag_name&quot; &#123;</span><br><span class="line">  type        &#x3D; string</span><br><span class="line">  description &#x3D; &quot;请输入机器的名字&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;tag_project&quot; &#123;</span><br><span class="line">  type        &#x3D; string</span><br><span class="line">  description &#x3D; &quot;请输入计费的tag标签&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;storage_number&quot; &#123;</span><br><span class="line">  type        &#x3D; string</span><br><span class="line">  default     &#x3D; 1</span><br><span class="line">  description &#x3D; &quot;请输入要创建的硬盘数量&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;key_name&quot; &#123;</span><br><span class="line">  type        &#x3D; string</span><br><span class="line">  default     &#x3D; &quot;xxx&quot;</span><br><span class="line">  description &#x3D; &quot;请输入连接服务器使用的ssh名字&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;iams&quot; &#123;</span><br><span class="line">  type    &#x3D; map</span><br><span class="line">  default &#x3D; &#123;</span><br><span class="line">    &quot;us-east-2&quot; &#x3D; &quot;ami-xxx&quot;</span><br><span class="line">    &quot;ap-northeast-1&quot; &#x3D; &quot;ami-xxx&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;vpcs&quot; &#123;</span><br><span class="line">  type    &#x3D; map</span><br><span class="line">  default &#x3D; &#123;</span><br><span class="line">    &quot;us-east-2&quot; &#x3D; &quot;vpc-xxx&quot;</span><br><span class="line">    &quot;ap-northeast-1&quot; &#x3D; &quot;vpc-xxx&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;subnetes&quot; &#123;</span><br><span class="line">  type    &#x3D; map</span><br><span class="line">  default &#x3D; &#123;</span><br><span class="line">    &quot;us-east-2a&quot; &#x3D; &quot;subnet-xxx&quot;</span><br><span class="line">    &quot;us-east-2b&quot; &#x3D; &quot;subnet-xxx&quot;</span><br><span class="line">    &quot;us-east-2c&quot; &#x3D; &quot;subnet-xxx&quot;</span><br><span class="line">    &quot;ap-northeast-1a&quot; &#x3D; &quot;subnet-xxx&quot;</span><br><span class="line">    &quot;ap-northeast-1c&quot; &#x3D; &quot;subnet-xxx&quot;</span><br><span class="line">    &quot;ap-northeast-1d&quot; &#x3D; &quot;subnet-xxx&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;storage_dev&quot; &#123;</span><br><span class="line">  type    &#x3D; map</span><br><span class="line">  default &#x3D; &#123;</span><br><span class="line">    &quot;0&quot; &#x3D; &quot;&#x2F;dev&#x2F;sdh&quot;</span><br><span class="line">    &quot;1&quot; &#x3D; &quot;&#x2F;dev&#x2F;sdi&quot;</span><br><span class="line">    &quot;2&quot; &#x3D; &quot;&#x2F;dev&#x2F;sdj&quot;</span><br><span class="line">    &quot;3&quot; &#x3D; &quot;&#x2F;dev&#x2F;sdk&quot;</span><br><span class="line">    &quot;4&quot; &#x3D; &quot;&#x2F;dev&#x2F;sdl&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-tf"><a href="#main-tf" class="headerlink" title="main.tf"></a>main.tf</h2><p>主配置文件,声明使用的认证信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">  region                  &#x3D; var.region</span><br><span class="line">  shared_credentials_file &#x3D; &quot;&#x2F;opt&#x2F;terraform&#x2F;aws&#x2F;.creds&#x2F;xxxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="instance-tf"><a href="#instance-tf" class="headerlink" title="instance.tf"></a>instance.tf</h2><p>实例配置文件, 声明需要在<code>AWS</code>上创建的资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_instance&quot; &quot;this_ec2&quot; &#123;</span><br><span class="line">  ami               &#x3D; var.iams[var.region]</span><br><span class="line">  instance_type     &#x3D; var.instance_type</span><br><span class="line">  subnet_id         &#x3D; var.subnetes[var.region_az]</span><br><span class="line">  availability_zone &#x3D; var.region_az</span><br><span class="line">  key_name          &#x3D; var.key_name</span><br><span class="line">  user_data &#x3D; &quot;$&#123;file(&quot;cloud_init.sh&quot;)&#125;&quot;</span><br><span class="line">  tags &#x3D; &#123;</span><br><span class="line">    Name    &#x3D; var.tag_name</span><br><span class="line">    Project &#x3D; var.tag_project </span><br><span class="line">  &#125;</span><br><span class="line">  volume_tags &#x3D; &#123;</span><br><span class="line">    Name    &#x3D; var.tag_name</span><br><span class="line">    Project &#x3D; var.tag_project</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resource &quot;aws_ebs_volume&quot; &quot;this_ebs&quot; &#123;</span><br><span class="line">  count &#x3D; var.storage_number</span><br><span class="line"></span><br><span class="line">  availability_zone &#x3D; var.region_az</span><br><span class="line">  size              &#x3D; 10</span><br><span class="line">  tags &#x3D; &#123;</span><br><span class="line">    Name &#x3D; &quot;$&#123;var.tag_name&#125;-disk-$&#123;count.index&#125;&quot;</span><br><span class="line">    Project &#x3D; var.tag_project</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_volume_attachment&quot; &quot;instance_att_sdb&quot; &#123;</span><br><span class="line">  count &#x3D; var.storage_number</span><br><span class="line"></span><br><span class="line">  device_name &#x3D; var.storage_dev[count.index]</span><br><span class="line">  instance_id &#x3D; &quot;$&#123;aws_instance.this_ec2.id&#125;&quot;</span><br><span class="line">  volume_id   &#x3D; &quot;$&#123;aws_ebs_volume.this_ebs[count.index].id&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_eip&quot; &quot;this_elb&quot; &#123;</span><br><span class="line">  instance &#x3D; &quot;$&#123;aws_instance.this_ec2.id&#125;&quot;</span><br><span class="line">  vpc      &#x3D; true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="output-tf"><a href="#output-tf" class="headerlink" title="output.tf"></a>output.tf</h3><p>输出的参数，后面自动添加<code>cmdb</code>、<code>jumpserver</code> 等工具使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">output &quot;tag_name&quot; &#123;</span><br><span class="line">  value &#x3D; var.tag_name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &quot;instance_ip_addr&quot; &#123;</span><br><span class="line">  value       &#x3D; aws_instance.this_ec2.private_ip</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &quot;instance_eip&quot; &#123;</span><br><span class="line">  value       &#x3D; aws_instance.this_ec2.public_ip</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply -var&#x3D;&quot;region&#x3D;us-east-2&quot; -var&#x3D;&quot;region_az&#x3D;us-east-2a&quot; -var&#x3D;&quot;instance_type&#x3D;m5.large&quot; -var&#x3D;&quot;tag_name&#x3D;test&quot; -var&#x3D;&quot;tag_project&#x3D;test&quot; -var&#x3D;&quot;storage_number&#x3D;2&quot;</span><br></pre></td></tr></table></figure><p>参数说明：<br>region: EC2 所在的region<br>region-az: EC2 所在的AZ<br>instance_type: EC2 的实例类型<br>tag_name: EC2 的tag Key=Name<br>tag_project: EC2 的tag Key=Project<br>storage_number: EC2 附加的硬盘，最多附加五块</p><p>```</p><p>开始拆一下<br>instance.tf<br>这里面有四个动作，申请EC2,申请EBS，EC2与EBS绑定，申请EIP与EC2 绑定。好像没啥好说的，写完之后发现好简单。每个方法在官网后面有个output，可以通过定义的方法名.output 的值取到输出的值</p><p>emm.. 没啥好讲的，就是这么简单，tf 的难点在于规划，如何把账户，秘钥，配置，脚本，做好规划。这个需要折腾一下。</p>]]></content>
    
    <summary type="html">
    
      Terraform之申请AWS的EC2
    
    </summary>
    
    
      <category term="infra" scheme="https://shuke163.github.io/categories/infra/"/>
    
    
      <category term="infra" scheme="https://shuke163.github.io/tags/infra/"/>
    
  </entry>
  
  <entry>
    <title>Go语言之函数示例</title>
    <link href="https://shuke163.github.io/2020/06/22/Go%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B/"/>
    <id>https://shuke163.github.io/2020/06/22/Go%E8%AF%AD%E8%A8%80%E4%B9%8B%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B/</id>
    <published>2020-06-22T11:53:41.000Z</published>
    <updated>2020-06-22T11:58:04.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言中函数的一些示例"><a href="#Go语言中函数的一些示例" class="headerlink" title="Go语言中函数的一些示例"></a>Go语言中函数的一些示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Go语言中函数的return不是原子操作，在底层是分为2步来进行执行的</span><br><span class="line">&#x2F;&#x2F; 第一步: 返回值赋值</span><br><span class="line">&#x2F;&#x2F; 第二步: 真正的RET分会</span><br><span class="line">&#x2F;&#x2F; 函数中如果存在defer，那么defer执行的时机是在第一步和第二步之间</span><br><span class="line">func sum(x, y int) (ret int) &#123;</span><br><span class="line">return x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func f10() int &#123;</span><br><span class="line">x :&#x3D; 5</span><br><span class="line">defer func() &#123; &#x2F;&#x2F; 匿名函数</span><br><span class="line">x++ &#x2F;&#x2F; 修改的是x不是返回值</span><br><span class="line">&#125;()</span><br><span class="line">return x &#x2F;&#x2F; 先返回</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func f11() (x int) &#123;</span><br><span class="line">defer func() &#123;</span><br><span class="line">x++</span><br><span class="line">&#125;()</span><br><span class="line">return 5 &#x2F;&#x2F; 返回值&#x3D;x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func f12() (y int) &#123;</span><br><span class="line">x :&#x3D; 5</span><br><span class="line">defer func() &#123;</span><br><span class="line">x++</span><br><span class="line">&#125;()</span><br><span class="line">return x &#x2F;&#x2F; 返回值 &#x3D; y &#x3D; x &#x3D; 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func f13() (x int) &#123;</span><br><span class="line">defer func(x int) &#123;</span><br><span class="line">x++ &#x2F;&#x2F; 改变的是函数中的副本</span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;(x)</span><br><span class="line">return 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 没有返回值</span><br><span class="line">func f2() &#123;</span><br><span class="line">fmt.Println(&quot;f2&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 没有参数，但有返回值</span><br><span class="line">func f3() int &#123;</span><br><span class="line">return 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func f4(x int, y int) (ret int) &#123;</span><br><span class="line">ret &#x3D; x + y</span><br><span class="line">return &#x2F;&#x2F; 使用命名返回值return后可以省略</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 返回值可以命名，也可以不命名</span><br><span class="line"></span><br><span class="line">func f5() (int, string) &#123;</span><br><span class="line">return 10, &quot;shuke&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 参数的类型简写</span><br><span class="line">func f6(x, y int) int &#123;</span><br><span class="line">return x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 参数的类型简写，当参数中连续多个参数的类型一致时，我们可以将非最后一个参数的类型省略</span><br><span class="line">func f7(x, y, z int, m, n string, i, j bool) int &#123;</span><br><span class="line">return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可变长参数</span><br><span class="line">&#x2F;&#x2F; 可变长参数中连续多个参数的类型一致时，我们可以将非最后一个参数的类型省略</span><br><span class="line">func f8(x int, y ...int) &#123;</span><br><span class="line">fmt.Println(x)</span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Go语言中支持多个返回值</span><br><span class="line">func f9(x, y int) (sum int, sub int) &#123;</span><br><span class="line">sum &#x3D; x + y</span><br><span class="line">sub &#x3D; x - y</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; defer</span><br><span class="line">&#x2F;&#x2F; defer多用于函数结束之前释放资源(文件句柄&#x2F;socket连接&#x2F;数据库连接等)</span><br><span class="line">func deferDemo() &#123;</span><br><span class="line">fmt.Println(&quot;start&quot;)</span><br><span class="line">defer fmt.Println(&quot;heiheihei&quot;) &#x2F;&#x2F; defer把它后面的语句延迟到函数即将返回的时候再执行</span><br><span class="line">defer fmt.Println(&quot;hahaha&quot;)    &#x2F;&#x2F; 一个函数中可以有多个defer语句</span><br><span class="line">defer fmt.Println(&quot;biubiubiu&quot;) &#x2F;&#x2F; 多个defer语句按照先进后出&#x2F;后进先出的顺序延迟执行</span><br><span class="line">fmt.Println(&quot;end&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">r :&#x3D; sum(1, 2)</span><br><span class="line">fmt.Println(r)</span><br><span class="line">fmt.Println(f4(2, 3))</span><br><span class="line"></span><br><span class="line">_, n :&#x3D; f5()</span><br><span class="line">fmt.Println(n)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 数组类型(Array)</span><br><span class="line">var ages [30]int</span><br><span class="line">var names [30]string</span><br><span class="line">fmt.Println(ages, names)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在一个命名的函数中不能够在声明一个命名函数</span><br><span class="line">sum, sub :&#x3D; f9(10, 12)</span><br><span class="line">fmt.Println(sum, sub) &#x2F;&#x2F; 22 -2</span><br><span class="line"></span><br><span class="line">deferDemo() &#x2F;&#x2F; defer 延迟执行</span><br><span class="line">&#x2F;*</span><br><span class="line">start</span><br><span class="line">end</span><br><span class="line">heiheihei</span><br><span class="line">*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Go语言之函数示例
    
    </summary>
    
    
      <category term="GO" scheme="https://shuke163.github.io/categories/GO/"/>
    
    
      <category term="GO" scheme="https://shuke163.github.io/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>Go语言标准库flag基本使用</title>
    <link href="https://shuke163.github.io/2020/06/22/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93flag%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://shuke163.github.io/2020/06/22/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93flag%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-06-22T07:34:22.000Z</published>
    <updated>2020-06-22T11:52:09.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言标准库flag基本使用"><a href="#Go语言标准库flag基本使用" class="headerlink" title="Go语言标准库flag基本使用"></a>Go语言标准库flag基本使用</h2><h3 id="Go语言内置的flag包实现了命令行参数的解析，flag包使得开发命令行工具更为简单。"><a href="#Go语言内置的flag包实现了命令行参数的解析，flag包使得开发命令行工具更为简单。" class="headerlink" title="Go语言内置的flag包实现了命令行参数的解析，flag包使得开发命令行工具更为简单。"></a>Go语言内置的<code>flag</code>包实现了命令行参数的解析，<code>flag</code>包使得开发命令行工具更为简单。</h3><h3 id="os-Args"><a href="#os-Args" class="headerlink" title="os.Args"></a>os.Args</h3><p>如果只是简单的想要获取命令行参数，可以像下面的代码示例一样使用<code>os.Args</code>来获取命令行参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">for</span> index, arg := <span class="keyword">range</span> os.Args &#123;</span><br><span class="line">fmt.Println(index, arg)</span><br><span class="line">fmt.Printf(<span class="string">"args[%d]=%v\n"</span>, index, arg)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ go run osArgs.go name shuke</span></span><br><span class="line"><span class="comment">0 /var/folders/6v/nkxqpbk544g1w7qcd2__5w_h0000gn/T/go-build171479563/b001/exe/osArgs</span></span><br><span class="line"><span class="comment">args[0]=/var/folders/6v/nkxqpbk544g1w7qcd2__5w_h0000gn/T/go-build171479563/b001/exe/osArgs</span></span><br><span class="line"><span class="comment">1 name</span></span><br><span class="line"><span class="comment">args[1]=name</span></span><br><span class="line"><span class="comment">2 shuke</span></span><br><span class="line"><span class="comment">args[2]=shuke</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>os.Args</code>是一个用来存储命令行参数的字符切片，它的第一个元素是执行文件的名称。</p><h3 id="flag包基本使用"><a href="#flag包基本使用" class="headerlink" title="flag包基本使用"></a>flag包基本使用</h3><p>下面主要介绍flag包的常用函数和基本使用，更详细的内容请查看<a href="https://studygolang.com/pkgdoc" target="_blank" rel="noopener">官方文档</a></p><h3 id="1-导入flag包"><a href="#1-导入flag包" class="headerlink" title="1. 导入flag包"></a>1. 导入flag包</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flag</span><br></pre></td></tr></table></figure><h3 id="1-1-flag参数类型"><a href="#1-1-flag参数类型" class="headerlink" title="1.1 flag参数类型"></a>1.1 flag参数类型</h3><blockquote><p>  flag包支持的命令行参数类型有<code>bool</code>, <code>int</code>, <code>string</code>,<code>int64</code>,<code>uint</code>,<code>uint64</code>,<code>float</code>,<code>float64</code>,<code>duration</code></p></blockquote><table><thead><tr><th>flag参数</th><th>有效值</th></tr></thead><tbody><tr><td>字符串flag</td><td>合法字符串</td></tr><tr><td>整数flag</td><td>1234，0664，0x1234等类型，也可以是负数</td></tr><tr><td>浮点数flag</td><td>合法的浮点数</td></tr><tr><td>bool类型flag</td><td>1，0，t,f,T,F,true,TRUE,FALSE,True,False</td></tr><tr><td>时间段flag</td><td>任何合法的时间段字符串。如”300ms”、”-1.5h”、”2h45m”。<br/>合法的单位有”ns”、”us” /“µs”、”ms”、”s”、”m”、”h”。</td></tr></tbody></table><h3 id="1-2-定义命令行flag参数"><a href="#1-2-定义命令行flag参数" class="headerlink" title="1.2 定义命令行flag参数"></a>1.2 定义命令行flag参数</h3><p>有一下两种常用的定义命令行<code>flag</code>参数的方法</p><blockquote><p>  Flag.Type()</p></blockquote><p>基本格式如下:</p><p><code>flag.Type(flag名，默认值，帮助信息)</code>*Type 例如我们要定义姓名，年龄，婚否三个命令行参数，我们可以按如下方式定义:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name := flag.String(<span class="string">"name"</span>, <span class="string">"zhangsan"</span>, <span class="string">"姓名"</span>)</span><br><span class="line">age := flag.Int(<span class="string">"age"</span>, <span class="number">18</span>, <span class="string">"年龄"</span>)</span><br><span class="line">married := flag.Bool(<span class="string">"married"</span>, flase, <span class="string">"婚否"</span>)</span><br><span class="line">delay := flag.Duration(<span class="string">"d"</span>, <span class="number">0</span>, <span class="string">"时间间隔"</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是,此时<code>name</code>,<code>age</code>,<code>married</code>,<code>delay</code>均为对应类型的指针</p><blockquote><p>  Flag.TypeVar()</p></blockquote><p>基本格式如下: <code>flag.TypeVar(Type指针，flag名，默认值，帮助信息)</code>例如我们要定义姓名，年龄，婚否三个命令行参数，我们可以按如下方式定义:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> married <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">var</span> delay time.Duration</span><br><span class="line">flag.StringVar(&amp;name, <span class="string">"name"</span>, <span class="string">"张三"</span>, <span class="string">"姓名"</span>)</span><br><span class="line">flag.IntVar(&amp;age, <span class="string">"age"</span>, <span class="number">18</span>, <span class="string">"年龄"</span>)</span><br><span class="line">flag.BoolVar(&amp;married, <span class="string">"married"</span>, <span class="literal">false</span>, <span class="string">"婚否"</span>)</span><br><span class="line">flag.Duration(&amp;delay, <span class="string">"d"</span>, <span class="number">0</span>, <span class="string">"时间间隔"</span>)</span><br></pre></td></tr></table></figure><h3 id="flag-Parse"><a href="#flag-Parse" class="headerlink" title="flag.Parse()"></a>flag.Parse()</h3><p>通过以上两种方法定义好命令行<code>flag</code>参数后，需要通过调用<code>flag.Parse()</code>来对命令行参数进行解析。</p><p>支持的命令行参数格式有以下几种：</p><ul><li>flag xxx    (使用空格，一个 -符号)</li><li>–flag xxx (使用空格，两个 – 符号)</li><li>-flag=xxx (使用等号，一个-符号)</li><li>–flag=xxx (使用等号，两个-符号)</li></ul><p>其中，布尔类型的参数必须使用等号的方式指定</p><p>Flag解析在第一个非flag参数(单个“-”不是flag参数)之前停止，或者在终止符’-‘之后停止</p><h2 id="flag其他函数"><a href="#flag其他函数" class="headerlink" title="flag其他函数"></a>flag其他函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag.Args()<span class="comment">//返回命令行参数后的其他参数，以[]string类型</span></span><br><span class="line">flag.NArg()<span class="comment">// 返回命令行参数后的其他参数</span></span><br><span class="line">flag.NFlag() <span class="comment">// 返回使用的命令行参数个数</span></span><br></pre></td></tr></table></figure><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><blockquote><p>  定义</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">for</span> index, arg := <span class="keyword">range</span> os.Args &#123;</span><br><span class="line">fmt.Println(index, arg)</span><br><span class="line">fmt.Printf(<span class="string">"args[%d]=%v\n"</span>, index, arg)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ go run osArgs.go name shuke</span></span><br><span class="line"><span class="comment">0 /var/folders/6v/nkxqpbk544g1w7qcd2__5w_h0000gn/T/go-build171479563/b001/exe/osArgs</span></span><br><span class="line"><span class="comment">args[0]=/var/folders/6v/nkxqpbk544g1w7qcd2__5w_h0000gn/T/go-build171479563/b001/exe/osArgs</span></span><br><span class="line"><span class="comment">1 name</span></span><br><span class="line"><span class="comment">args[1]=name</span></span><br><span class="line"><span class="comment">2 shuke</span></span><br><span class="line"><span class="comment">args[2]=shuke</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> married <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">var</span> delay time.Duration</span><br><span class="line">flag.StringVar(&amp;name, <span class="string">"name"</span>, <span class="string">"张三"</span>, <span class="string">"姓名"</span>)</span><br><span class="line">flag.IntVar(&amp;age, <span class="string">"age"</span>, <span class="number">18</span>, <span class="string">"年龄"</span>)</span><br><span class="line">flag.BoolVar(&amp;married, <span class="string">"married"</span>, <span class="literal">false</span>, <span class="string">"婚否"</span>)</span><br><span class="line">flag.DurationVar(&amp;delay, <span class="string">"d"</span>, <span class="number">0</span>, <span class="string">"延迟加载的时间间隔"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析的命令行参数</span></span><br><span class="line">flag.Parse()</span><br><span class="line">fmt.Println(name, age, married, delay)</span><br><span class="line"><span class="comment">// 返回命令行参数后的其他参数</span></span><br><span class="line">fmt.Println(flag.Args())</span><br><span class="line"><span class="comment">// 返回命令行参数后的其他参数个数</span></span><br><span class="line">fmt.Println(flag.NArg())</span><br><span class="line"><span class="comment">// 返回使用的命令行参数个数</span></span><br><span class="line">fmt.Println(flag.NFlag())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>张三 18 false 0s<br>[]<br>0<br>0<br>​```</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;   使用</span><br><span class="line"></span><br><span class="line">命令行参数使用提示:</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;go</span><br><span class="line">(base) ➜  LearGo go build osArgs.go </span><br><span class="line"></span><br><span class="line">LearGo .&#x2F;osArgs -help</span><br><span class="line">0 .&#x2F;osArgs</span><br><span class="line">args[0]&#x3D;.&#x2F;osArgs</span><br><span class="line">1 -help</span><br><span class="line">args[1]&#x3D;-help</span><br><span class="line">Usage of .&#x2F;osArgs:</span><br><span class="line">  -age int</span><br><span class="line">        年龄 (default 18)</span><br><span class="line">  -d duration</span><br><span class="line">        延迟加载的时间间隔</span><br><span class="line">  -married</span><br><span class="line">        婚否</span><br><span class="line">  -name string</span><br><span class="line">        姓名 (default &quot;张三&quot;)</span><br></pre></td></tr></table></figure><p>正常使用命令行<code>flag</code>参数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  LearGo ./osArgs -name shke --age <span class="number">19</span> -married=<span class="literal">false</span> -d=<span class="number">1</span>h30m</span><br><span class="line">shke <span class="number">19</span> <span class="literal">false</span> <span class="number">1</span>h30m0s</span><br><span class="line">[]</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>使用非<code>flag</code>命令行参数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  LearGo ./osArgs a b c d                                    </span><br><span class="line">张三 <span class="number">18</span> <span class="literal">false</span> <span class="number">0</span>s</span><br><span class="line">[a b c d]</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Go语言标准库flag基本使用
    
    </summary>
    
    
      <category term="GO" scheme="https://shuke163.github.io/categories/GO/"/>
    
    
      <category term="GO" scheme="https://shuke163.github.io/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>Go语言数据类型</title>
    <link href="https://shuke163.github.io/2020/06/20/Go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://shuke163.github.io/2020/06/20/Go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-06-19T16:07:04.000Z</published>
    <updated>2020-06-20T09:00:40.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言数据类型"><a href="#Go语言数据类型" class="headerlink" title="Go语言数据类型"></a>Go语言数据类型</h2><h3 id="1-1-整形与字符串之间的转换"><a href="#1-1-整形与字符串之间的转换" class="headerlink" title="1.1 整形与字符串之间的转换"></a>1.1 整形与字符串之间的转换</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同类型之间可以进行相加</span></span><br><span class="line"><span class="keyword">var</span> v1 <span class="keyword">int8</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> v2 <span class="keyword">int16</span> = <span class="number">8</span></span><br><span class="line">v3 := <span class="keyword">int16</span>(v1) + v2</span><br><span class="line">fmt.Println(v3)</span><br><span class="line">fmt.Println(v3, reflect.TypeOf(v3))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整形与字符串之间的转换</span></span><br><span class="line">v5 := <span class="number">19</span></span><br><span class="line"><span class="keyword">var</span> v4 <span class="keyword">int</span> = <span class="number">19</span></span><br><span class="line">res := strconv.Itoa(v5)</span><br><span class="line">fmt.Println(v4, reflect.TypeOf(res))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转换为整形</span></span><br><span class="line">v6 := <span class="string">"shuke"</span></span><br><span class="line">result, err := strconv.Atoi(v6)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"转换成功!"</span>, result)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"转换失败!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2常见数学运算"><a href="#1-2常见数学运算" class="headerlink" title="1.2常见数学运算"></a>1.2常见数学运算</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(math.Abs(<span class="number">-10</span>))                 <span class="comment">// 取绝对值</span></span><br><span class="line">fmt.Println(math.Floor(<span class="number">3.14</span>))              <span class="comment">// 向下取整</span></span><br><span class="line">fmt.Println(math.Ceil(<span class="number">3.14</span>))               <span class="comment">// 向下取整</span></span><br><span class="line">fmt.Println(math.Round(<span class="number">3.34789</span>))           <span class="comment">// 就近取整</span></span><br><span class="line">fmt.Println(math.Round(<span class="number">3.34789</span>*<span class="number">100</span>) / <span class="number">100</span>) <span class="comment">// 保留小数点后两位</span></span><br><span class="line">fmt.Println(math.Mod(<span class="number">11</span>, <span class="number">3</span>))               <span class="comment">// 取余数， 同 11 % 3</span></span><br><span class="line">fmt.Println(math.Pow(<span class="number">2</span>, <span class="number">5</span>))                <span class="comment">// 计算次方,如 2 的5次方</span></span><br><span class="line">fmt.Println(math.Pow10(<span class="number">2</span>))                 <span class="comment">// 计算10次方,如 2 的10次方</span></span><br><span class="line">fmt.Println(math.Max(<span class="number">1</span>, <span class="number">2</span>))                <span class="comment">// 两个值， 取较大值</span></span><br><span class="line">fmt.Println(math.Min(<span class="number">1</span>, <span class="number">2</span>))                <span class="comment">// 两个值， 取较小值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3.35</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="1-3-指针"><a href="#1-3-指针" class="headerlink" title="1.3 指针"></a>1.3 指针</h3><blockquote><p>  nil 使用new关键字进行变量声明</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个变量</span></span><br><span class="line"><span class="keyword">var</span> v1 <span class="keyword">int</span></span><br><span class="line">v1 = <span class="number">99</span></span><br><span class="line">v2 := <span class="number">88</span></span><br><span class="line">fmt.Println(v1, v2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针</span></span><br><span class="line"><span class="keyword">var</span> v3 *<span class="keyword">int</span>   <span class="comment">// &lt;nil&gt;</span></span><br><span class="line">v4 := <span class="built_in">new</span>(<span class="keyword">int</span>)  <span class="comment">// 0xc00001c0d0 -&gt; 初始值为0</span></span><br><span class="line">fmt.Println(v3, v4)</span><br></pre></td></tr></table></figure><ul><li>new关键字创建内存并进行内部数据的初始化，并返回一个指针类型。</li><li>nil nil在<code>go</code>语言中表示空值。</li></ul><h3 id="1-4-超大整形"><a href="#1-4-超大整形" class="headerlink" title="1.4 超大整形"></a>1.4 超大整形</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 big.Int</span><br><span class="line"><span class="comment">// 在超大整形的对象中写入一些值</span></span><br><span class="line">s1.SetInt64(<span class="number">2020</span>)</span><br><span class="line">s1.SetString(<span class="string">"9082173189999999999999"</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(s1)</span><br><span class="line"></span><br><span class="line">s3 := <span class="built_in">new</span>(big.Int) <span class="comment">// 初始化一块内存地址</span></span><br><span class="line">s3.SetInt64(<span class="number">2022</span>)</span><br><span class="line">fmt.Println(s3)</span><br><span class="line">使用<span class="built_in">new</span>初始化方式效率更好，直接开辟内存空间。</span><br></pre></td></tr></table></figure><ul><li><p>超大整形相加</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超大整形值相加</span></span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line">n1 := <span class="built_in">new</span>(big.Int)</span><br><span class="line">n1.SetInt64(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">n2 := <span class="built_in">new</span>(big.Int)</span><br><span class="line">n2.SetInt64(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">res := <span class="built_in">new</span>(big.Int)</span><br><span class="line">res.Add(n1, n2)</span><br><span class="line">fmt.Println(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二:</span></span><br><span class="line">n1 := big.NewInt(<span class="number">10</span>)</span><br><span class="line">n2 := big.NewInt(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">res := <span class="built_in">new</span>(big.Int)</span><br><span class="line"><span class="comment">// 加</span></span><br><span class="line">res.Add(n1, n2)</span><br><span class="line"><span class="comment">// 减</span></span><br><span class="line">res.Sub(n1, n2)</span><br><span class="line"><span class="comment">// 乘</span></span><br><span class="line">res.Mul(n1, n2)</span><br><span class="line"><span class="comment">// 除</span></span><br><span class="line">res.Div(n1, n2)</span><br><span class="line"></span><br><span class="line">fmt.Println(res)</span><br><span class="line"></span><br><span class="line">fmt.Println(res.Int64(), res.String()) <span class="comment">// 转成int和string</span></span><br></pre></td></tr></table></figure></li><li><p>超大整形相加示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   h1 := <span class="built_in">new</span>(big.Int)</span><br><span class="line">h1.SetString(<span class="string">"918293481248912748231747823"</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">h2 := <span class="built_in">new</span>(big.Int)</span><br><span class="line">h2.SetString(<span class="string">"1203129834124782374892"</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">result := <span class="built_in">new</span>(big.Int)</span><br><span class="line">result.Add(h1, n2)</span><br><span class="line">fmt.Println(result.String())</span><br><span class="line"><span class="comment">// 918293481248912748231747843</span></span><br></pre></td></tr></table></figure></li><li><p>注意点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">h1 :&#x3D; new(big.Int)</span><br><span class="line">h1.SetString(&quot;918293481248912748231747823&quot;, 10)</span><br><span class="line"></span><br><span class="line">h2 :&#x3D; new(big.Int)</span><br><span class="line">h2.SetString(&quot;1203129834124782374892&quot;, 10)</span><br><span class="line"></span><br><span class="line">result :&#x3D; new(big.Int)</span><br><span class="line">result.Add(h1, n2)</span><br><span class="line">fmt.Println(result.String())</span><br><span class="line">&#x2F;&#x2F; 918293481248912748231747843</span><br></pre></td></tr></table></figure></li></ul><h3 id="索引切片"><a href="#索引切片" class="headerlink" title="索引切片"></a>索引切片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">name :&#x3D; &quot;shuke&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 索引获取字节</span><br><span class="line">v1 :&#x3D; name[0]</span><br><span class="line">fmt.Println(v1) &#x2F;&#x2F; 115</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取切片区间字节</span><br><span class="line">v2 :&#x3D; name[0:3]</span><br><span class="line">fmt.Println(v2) &#x2F;&#x2F; shu</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 循环所有字符</span><br><span class="line">for index, item :&#x3D; range name &#123;</span><br><span class="line">fmt.Println(index, item, string(item))</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">0 115 s</span><br><span class="line">1 104 h</span><br><span class="line">2 117 u</span><br><span class="line">3 107 k</span><br><span class="line">4 101 e</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F; 获取字节</span><br><span class="line">for i :&#x3D; 0; i &lt; len(name); i++ &#123;</span><br><span class="line">fmt.Println(i, name[i])</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">0 115</span><br><span class="line">1 104</span><br><span class="line">2 117</span><br><span class="line">3 107</span><br><span class="line">4 101</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 转成rune集合</span><br><span class="line">dataList :&#x3D; []rune(name)</span><br><span class="line">fmt.Println(dataList[0], string(dataList[0])) &#x2F;&#x2F; 145 s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">name1 :&#x3D; [2]string&#123;&quot;shuke&quot;, &quot;jack&quot;&#125;</span><br><span class="line">name2 :&#x3D; name1</span><br><span class="line">name1[0] &#x3D; &quot;eric&quot;</span><br><span class="line">fmt.Println(name1, name2)</span><br><span class="line">&#x2F;&#x2F; [eric jack] [shuke jack]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 数组嵌套 [ [0,0,0],[1,1,1] ]</span><br><span class="line">var nesData [3][2]int</span><br><span class="line">fmt.Println(nesData)&#x2F;&#x2F; [[0 0] [0 0] [0 0]]</span><br><span class="line">nesData[0] &#x3D; [2]int&#123;0,1&#125;</span><br><span class="line">nesData[1] &#x3D; [2]int&#123;2,3&#125;</span><br><span class="line">nesData[2] &#x3D; [2]int&#123;4,5&#125;</span><br><span class="line">nesData[1][1] &#x3D; 999</span><br><span class="line">fmt.Println(nesData)&#x2F;&#x2F; [[0 1] [2 999] [4 5]]</span><br><span class="line"></span><br><span class="line">nesData &quot;&#x3D; [2][3]int&#123;[3]int&#123;1,2,3&#125;, [3]int&#123;44,55,66&#125;&#125;</span><br><span class="line">fmt.Println(nesData)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Go语言数据类型
    
    </summary>
    
    
      <category term="GO" scheme="https://shuke163.github.io/categories/GO/"/>
    
    
      <category term="GO" scheme="https://shuke163.github.io/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>How to Automate Jenkins job configurations as code</title>
    <link href="https://shuke163.github.io/2020/06/08/How-to-Automate-Jenkins-job-configurations-as-code/"/>
    <id>https://shuke163.github.io/2020/06/08/How-to-Automate-Jenkins-job-configurations-as-code/</id>
    <published>2020-06-08T09:06:37.000Z</published>
    <updated>2020-06-08T09:35:52.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Automatically-generating-Jenkins-jobs-Step-by-step-guide"><a href="#Automatically-generating-Jenkins-jobs-Step-by-step-guide" class="headerlink" title="Automatically generating Jenkins jobs: Step-by-step guide"></a>Automatically generating Jenkins jobs: Step-by-step guide</h2><ol><li><p>pip install virtualenv</p></li><li><p>virtualenv .venv</p></li><li><p>source .venv/bin/activate</p></li><li><p>pip install jenkins-job-builder</p></li><li><p>mkdir jenkins-job-auto-create ; cd jenkins-job-auto-create</p></li><li><p>vim jenkins_jobs.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[jenkins]</span><br><span class="line">user&#x3D;shuke</span><br><span class="line">password&#x3D;aslongas</span><br><span class="line">url&#x3D;http:&#x2F;&#x2F;jenkins.shuke.com:8080</span><br><span class="line"></span><br><span class="line">[job_builder]</span><br><span class="line">ignore_cache&#x3D;True</span><br><span class="line">keep_descriptions&#x3D;False</span><br><span class="line">include_path&#x3D;.</span><br><span class="line">recursive&#x3D;False</span><br><span class="line">allow_duplicates&#x3D;False</span><br></pre></td></tr></table></figure></li><li><p>vim project_pipeline_test01.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  jenkins_jobs cat project_pipeline_test01.yaml</span><br><span class="line">- job:</span><br><span class="line">    name: Jenkins-auto-config</span><br><span class="line">    project-type: pipeline</span><br><span class="line">    dsl: |</span><br><span class="line">      @Library(&#39;CIPipelineUtilities&#39;) _</span><br><span class="line">      testSuite &#123;</span><br><span class="line">          envName&#x3D;&quot;BTS_EU&quot;</span><br><span class="line">          suiteName&#x3D;&quot;MonitorTest&quot;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li><p>jenkins-jobs –conf jenkins_jobs.ini update project_pipeline_test01.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  jenkins_jobs jenkins-jobs --conf jenkins_jobs.ini update project_pipeline_test01.yaml</span><br><span class="line">INFO:jenkins_jobs.cli.subcommand.update:Updating jobs in [&#39;project_pipeline_test01.yaml&#39;] ([])</span><br><span class="line">INFO:jenkins_jobs.builder:Number of jobs generated:  1</span><br><span class="line">INFO:jenkins_jobs.builder:Reconfiguring jenkins job Jenkins-auto-config</span><br><span class="line">INFO:jenkins_jobs.cli.subcommand.update:Number of jobs updated: 1</span><br><span class="line">INFO:jenkins_jobs.builder:Number of views generated:  0</span><br><span class="line">INFO:jenkins_jobs.cli.subcommand.update:Number of views updated: 0</span><br></pre></td></tr></table></figure></li><li><p>Jenkins job created automatic</p></li><li><p>folder-jobs.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- job-template:</span><br><span class="line">    name: &#39;folder-&#123;name&#125;&#39;</span><br><span class="line">    project-type: folder</span><br><span class="line"></span><br><span class="line">- project:</span><br><span class="line">    name: devops</span><br><span class="line">    jobs:</span><br><span class="line">    - &#39;folder-&#123;name&#125;&#39;</span><br></pre></td></tr></table></figure></li><li><p>create folder-jobs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  jenkins_jobs jenkins-jobs --conf jenkins_jobs.ini update folder-jobs.yaml</span><br><span class="line">INFO:jenkins_jobs.cli.subcommand.update:Updating jobs in [&#39;folder-jobs.yaml&#39;] ([])</span><br><span class="line">INFO:jenkins_jobs.builder:Number of jobs generated:  1</span><br><span class="line">INFO:jenkins_jobs.builder:Reconfiguring jenkins job folder-devops</span><br><span class="line">INFO:jenkins_jobs.cli.subcommand.update:Number of jobs updated: 1</span><br><span class="line">INFO:jenkins_jobs.builder:Number of views generated:  0</span><br><span class="line">INFO:jenkins_jobs.cli.subcommand.update:Number of views updated: 0</span><br></pre></td></tr></table></figure></li><li><p>install<br><a href="https://jenkins-autojobs.readthedocs.io/en/latest/" target="_blank" rel="noopener">jenkins-autojobs</a></p></li><li><p>Quck start Guide<br><a href="https://docs.openstack.org/infra/jenkins-job-builder/quick-start.html#use-case-3-working-with-json-job-definitions" target="_blank" rel="noopener">Quck Start</a><br><a href="https://docs.openstack.org/infra/jenkins-job-builder/definition.html#default-values-for-template-variables" target="_blank" rel="noopener">Job Definitions</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      How to Automate Jenkins job configurations as code
    
    </summary>
    
    
      <category term="DevOps" scheme="https://shuke163.github.io/categories/DevOps/"/>
    
    
      <category term="DevOps" scheme="https://shuke163.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>python httpx lib</title>
    <link href="https://shuke163.github.io/2020/06/06/python-httpx-lib/"/>
    <id>https://shuke163.github.io/2020/06/06/python-httpx-lib/</id>
    <published>2020-06-06T04:03:19.000Z</published>
    <updated>2020-06-06T05:35:51.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导入httpx"><a href="#导入httpx" class="headerlink" title="导入httpx"></a>导入<code>httpx</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [25]: import httpx</span><br></pre></td></tr></table></figure><p>获取一个网页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [26]: r &#x3D; httpx.get(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;)</span><br><span class="line"></span><br><span class="line">In [27]: r</span><br><span class="line">Out[27]: &lt;Response [200 OK]&gt;</span><br></pre></td></tr></table></figure><p>同样,发送<code>HTTP POST</code>请求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [28]: r &#x3D; httpx.post(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;, data&#x3D;&#123;&quot;key&quot;: &quot;value&quot;&#125;)</span><br><span class="line"></span><br><span class="line">In [29]: r</span><br><span class="line">Out[29]: &lt;Response [200 OK]&gt;</span><br></pre></td></tr></table></figure><p>PUT,DELETE,HEAD和OPTIONS请求都遵循相同的方式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [35]: r &#x3D; httpx.put(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;put&quot;, data&#x3D;&#123;&quot;key&quot;: &quot;value&quot;&#125;)</span><br><span class="line"></span><br><span class="line">In [36]: r &#x3D; httpx.delete(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;delete&quot;)</span><br><span class="line"></span><br><span class="line">In [37]: r &#x3D; httpx.head(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;)</span><br><span class="line"></span><br><span class="line">In [38]: r &#x3D; httpx.options(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;)</span><br></pre></td></tr></table></figure><h2 id="在URL中传递参数"><a href="#在URL中传递参数" class="headerlink" title="在URL中传递参数"></a>在<code>URL</code>中传递参数</h2><ol><li>在请求URL中传递查询参数,请使用<code>params</code>关键字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [41]: r &#x3D; httpx.get(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;, params&#x3D;params)</span><br><span class="line"></span><br><span class="line">In [42]: r</span><br><span class="line">Out[42]: &lt;Response [200 OK]&gt;</span><br><span class="line"></span><br><span class="line"># 检查发出请求结果的&#96;URL&#96;</span><br><span class="line">In [43]: r.url</span><br><span class="line">Out[43]: URL(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;get?key1&#x3D;value2&amp;key2&#x3D;value2&#39;)</span><br></pre></td></tr></table></figure></li><li>将项目列表作为值传递<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [44]: params &#x3D; &#123;&quot;key1&quot;: &quot;value2&quot;, &quot;key2&quot;: [&quot;value2&quot;, &quot;value3&quot;]&#125;</span><br><span class="line"></span><br><span class="line">In [45]: r &#x3D; httpx.get(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;, params&#x3D;params)</span><br><span class="line"></span><br><span class="line">In [46]: r.url</span><br><span class="line">Out[46]: URL(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;get?key1&#x3D;value2&amp;key2&#x3D;value2&amp;key2&#x3D;value3&#39;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="响应内容"><a href="#响应内容" class="headerlink" title="响应内容"></a>响应内容</h2><p>HTTPX将自动处理响应内容解码为<code>Unicode</code>文本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [52]: r &#x3D; httpx.get(&quot;https:&#x2F;&#x2F;www.example.org&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line">In [53]: r.text</span><br><span class="line">Out[53]: &#39;&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Example Domain&lt;&#x2F;title&gt;\n\n    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;\n    &lt;meta http-equiv&#x3D;&quot;Content-type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot; &#x2F;&gt;\n    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;\n    body &#123;\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\n        \n    &#125;\n    div &#123;\n        width: 600px;\n        margin: 5em auto;\n        padding: 2em;\n        background-color: #fdfdff;\n        border-radius: 0.5em;\n        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\n    &#125;\n    a:link, a:visited &#123;\n        color: #38488f;\n        text-decoration: none;\n    &#125;\n    @media (max-width: 700px) &#123;\n        div &#123;\n            margin: 0 auto;\n            width: auto;\n        &#125;\n    &#125;\n    &lt;&#x2F;style&gt;    \n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n&lt;div&gt;\n    &lt;h1&gt;Example Domain&lt;&#x2F;h1&gt;\n    &lt;p&gt;This domain is for use in illustrative examples in documents. You may use this\n    domain in literature without prior coordination or asking for permission.&lt;&#x2F;p&gt;\n    &lt;p&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.iana.org&#x2F;domains&#x2F;example&quot;&gt;More information...&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;\n&lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n&#39;</span><br><span class="line"></span><br><span class="line"># 解码</span><br><span class="line">In [54]: r.encoding</span><br><span class="line">Out[54]: &#39;UTF-8&#39;</span><br><span class="line"></span><br><span class="line"># 设置需要使用的编码</span><br><span class="line">In [55]: r.encoding &#x3D; &quot;ISO-8859-1&quot;</span><br><span class="line"></span><br><span class="line">In [56]: print(r.headers, r.http_version, r.url, r.status_code)</span><br><span class="line">Headers(&#123;&#39;content-encoding&#39;: &#39;gzip&#39;, &#39;age&#39;: &#39;532553&#39;, &#39;cache-control&#39;: &#39;max-age&#x3D;604800&#39;, &#39;content-type&#39;: &#39;text&#x2F;html; charset&#x3D;UTF-8&#39;, &#39;date&#39;: &#39;Sat, 06 Jun 2020 04:22:26 GMT&#39;, &#39;etag&#39;: &#39;&quot;3147526947+gzip&quot;&#39;, &#39;expires&#39;: &#39;Sat, 13 Jun 2020 04:22:26 GMT&#39;, &#39;last-modified&#39;: &#39;Thu, 17 Oct 2019 07:18:26 GMT&#39;, &#39;server&#39;: &#39;ECS (oxr&#x2F;830C)&#39;, &#39;vary&#39;: &#39;Accept-Encoding&#39;, &#39;x-cache&#39;: &#39;HIT&#39;, &#39;content-length&#39;: &#39;648&#39;&#125;) HTTP&#x2F;1.1 https:&#x2F;&#x2F;www.example.org&#x2F; 200</span><br></pre></td></tr></table></figure><h2 id="返回JSON响应内容"><a href="#返回JSON响应内容" class="headerlink" title="返回JSON响应内容"></a>返回JSON响应内容</h2><p>通常, Web API 响应将被编码为JSON</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [59]: r &#x3D; httpx.get(&quot;https:&#x2F;&#x2F;api.github.com&#x2F;events&quot;)</span><br><span class="line">In [60]: r.json()</span><br></pre></td></tr></table></figure><h2 id="自定义header"><a href="#自定义header" class="headerlink" title="自定义header"></a>自定义<code>header</code></h2><p>要在传出请求中包含其他标头,请使用<code>header</code>关键字参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [60]: url &#x3D; &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;headers&#39;</span><br><span class="line"></span><br><span class="line">In [61]: headers &#x3D; &#123;&quot;user-agent&quot;: &quot;my-app&#x2F;0.0.1&quot;&#125;</span><br><span class="line"></span><br><span class="line">In [62]: r &#x3D; httpx.get(url, headers&#x3D;headers)</span><br></pre></td></tr></table></figure><h2 id="发送表单数据"><a href="#发送表单数据" class="headerlink" title="发送表单数据"></a>发送表单数据</h2><p>某些类型的HTTP请求,如<code>POST|PUT</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [64]: data &#x3D; &#123;&quot;key1&quot;:&quot;value1&quot;, &quot;key1&quot;: &quot;value2&quot;&#125;</span><br><span class="line"></span><br><span class="line">In [65]: r &#x3D; httpx.post(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;, data&#x3D;data)</span><br><span class="line"></span><br><span class="line">In [66]: print(r.text)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;data&quot;: &quot;&quot;,</span><br><span class="line">  &quot;files&quot;: &#123;&#125;,</span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;key1&quot;: &quot;value2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Content-Length&quot;: &quot;11&quot;,</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-httpx&#x2F;0.12.1&quot;,</span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5edb1e61-86ac64e4f9f165244f4dbd68&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;json&quot;: null,</span><br><span class="line">  &quot;origin&quot;: &quot;114.113.113.186&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;https:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表单编码的数据还可以包括给定键的多个值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">In [72]: data &#x3D; &#123;&quot;userList&quot;: [&quot;shuke&quot;, &quot;jack&quot;]&#125;</span><br><span class="line"></span><br><span class="line">In [73]: r &#x3D; httpx.post(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;, data&#x3D;data)</span><br><span class="line"></span><br><span class="line">In [74]: print(r.text)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;data&quot;: &quot;&quot;,</span><br><span class="line">  &quot;files&quot;: &#123;&#125;,</span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;userList&quot;: [</span><br><span class="line">      &quot;shuke&quot;,</span><br><span class="line">      &quot;jack&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Content-Length&quot;: &quot;28&quot;,</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-httpx&#x2F;0.12.1&quot;,</span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5edb1fc2-33761faf662f0b832cb806bb&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;json&quot;: null,</span><br><span class="line">  &quot;origin&quot;: &quot;114.113.113.186&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;https:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送分段文件上传<br>使用HTTP分段编码上传文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [76]: files &#x3D; &#123;&quot;upload-file&quot;: open(&quot;&#x2F;Users&#x2F;shuke&#x2F;Work&#x2F;pha&#x2F;docker-compose.yml&quot;, &quot;rb&quot;)&#125;</span><br><span class="line"></span><br><span class="line">In [77]: r &#x3D; httpx.post(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;, files&#x3D;files)</span><br><span class="line"></span><br><span class="line">In [78]: print(r.text)</span><br></pre></td></tr></table></figure><p>发送JSON编码数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [79]: data &#x3D; &#123;&quot;integer&quot;: 123, &quot;boolean&quot;: True, &quot;list&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]&#125;</span><br><span class="line"></span><br><span class="line">In [80]: r &#x3D; httpx.post(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;, json&#x3D;data)</span><br><span class="line"></span><br><span class="line">In [81]: print(r.text)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;data&quot;: &quot;&#123;\&quot;integer\&quot;: 123, \&quot;boolean\&quot;: true, \&quot;list\&quot;: [\&quot;a\&quot;, \&quot;b\&quot;, \&quot;c\&quot;]&#125;&quot;,</span><br><span class="line">  &quot;files&quot;: &#123;&#125;,</span><br><span class="line">  &quot;form&quot;: &#123;&#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Content-Length&quot;: &quot;58&quot;,</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application&#x2F;json&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-httpx&#x2F;0.12.1&quot;,</span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5edb217c-cd09ef8caa55514051957eb8&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;json&quot;: &#123;</span><br><span class="line">    &quot;boolean&quot;: true,</span><br><span class="line">    &quot;integer&quot;: 123,</span><br><span class="line">    &quot;list&quot;: [</span><br><span class="line">      &quot;a&quot;,</span><br><span class="line">      &quot;b&quot;,</span><br><span class="line">      &quot;c&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;origin&quot;: &quot;114.113.113.186&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;https:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><p>检查响应的<code>HTTP</code>状态码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [82]: r &#x3D; httpx.get(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;)</span><br><span class="line"></span><br><span class="line">In [83]: r.status_code</span><br><span class="line">Out[83]: 200</span><br></pre></td></tr></table></figure><p>HTTPX还包括一个简单的快捷方式,用于通过其文本短语访问状态代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [84]: r.status_code &#x3D;&#x3D; httpx.codes.OK</span><br><span class="line">Out[84]: True</span><br></pre></td></tr></table></figure><p>针对任何客户端或服务器错误响应(4xx或5xx状态代码) 引发异常:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [85]: not_found &#x3D; httpx.get(&quot;https:&#x2F;&#x2F;httpbin.org&#x2F;status&#x2F;404&quot;)</span><br><span class="line"></span><br><span class="line">In [86]: not_found.status_code</span><br><span class="line">Out[86]: 404</span><br><span class="line"></span><br><span class="line">In [87]: not_found.rasise_for_status()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-87-c7b57e835640&gt; in &lt;module&gt;</span><br><span class="line">----&gt; 1 not_found.rasise_for_status()</span><br><span class="line"></span><br><span class="line">AttributeError: &#39;Response&#39; object has no attribute &#39;rasise_for_status&#39;</span><br></pre></td></tr></table></figure><h2 id="响应Headers"><a href="#响应Headers" class="headerlink" title="响应Headers"></a>响应Headers</h2><p>响应标头可作为类似于字典的接口使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [88]: r.headers</span><br><span class="line">Out[88]: Headers(&#123;&#39;date&#39;: &#39;Sat, 06 Jun 2020 04:56:56 GMT&#39;, &#39;content-type&#39;: &#39;application&#x2F;json&#39;, &#39;content-length&#39;: &#39;306&#39;, &#39;connection&#39;: &#39;keep-alive&#39;, &#39;server&#39;: &#39;gunicorn&#x2F;19.9.0&#39;, &#39;access-control-allow-origin&#39;: &#39;*&#39;, &#39;access-control-allow-credentials&#39;: &#39;true&#39;&#125;)</span><br></pre></td></tr></table></figure><h2 id="该Headers数据类型是不区分大小写的，所以你可以使用任何资本"><a href="#该Headers数据类型是不区分大小写的，所以你可以使用任何资本" class="headerlink" title="该Headers数据类型是不区分大小写的，所以你可以使用任何资本"></a>该<code>Headers</code>数据类型是不区分大小写的，所以你可以使用任何资本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [89]: r.headers[&quot;Content-Type&quot;]</span><br><span class="line">Out[89]: &#39;application&#x2F;json&#39;</span><br><span class="line"></span><br><span class="line">In [90]: r.headers.get(&quot;content-type&quot;)</span><br><span class="line">Out[90]: &#39;application&#x2F;json&#39;</span><br></pre></td></tr></table></figure><h2 id="流响应"><a href="#流响应" class="headerlink" title="流响应"></a>流响应</h2><blockquote><p>可以流式传输响应的二进制内容</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [91]: with httpx.stream(&quot;GET&quot;, &quot;https:&#x2F;&#x2F;www.example.com&quot;) as r:</span><br><span class="line">    ...:     for data in r.iter_bytes():</span><br><span class="line">    ...:         print(data)</span><br></pre></td></tr></table></figure><p>或文字…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [93]: with httpx.stream(&quot;GET&quot;, &quot;https:&#x2F;&#x2F;www.example.com&quot;) as r:</span><br><span class="line">    ...:     for text in r.iter_text():</span><br><span class="line">    ...:         print(text)</span><br></pre></td></tr></table></figure><p>或逐行流文本…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [96]: with httpx.stream(&quot;GET&quot;, &quot;https:&#x2F;&#x2F;www.example.com&quot;) as r:</span><br><span class="line">    ...:     for text in r.iter_lines():</span><br><span class="line">    ...:         print(text)</span><br></pre></td></tr></table></figure><h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>可以轻松访问响应中设置的任何cookie:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [97]: r &#x3D; httpx.get(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;cookies&#x2F;set?chocolate&#x3D;chip&quot;, allow_redirects&#x3D;False)</span><br><span class="line"></span><br><span class="line">In [98]: r.cookies[&quot;chocolate&quot;]</span><br><span class="line">Out[98]: &#39;chip&#39;</span><br></pre></td></tr></table></figure><p>如果需要将<code>Cookies</code>包含在外发请求中,请使用<code>cookies</code>参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [99]: cookies &#x3D; &#123;&quot;peanut&quot;: &quot;butter&quot;&#125;</span><br><span class="line"></span><br><span class="line">In [100]: r &#x3D; httpx.get(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;cookies&quot;, cookies&#x3D;cookies)</span><br><span class="line"></span><br><span class="line">In [101]: r.json()</span><br><span class="line">Out[101]: &#123;&#39;cookies&#39;: &#123;&#39;peanut&#39;: &#39;butter&#39;&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>Cookies</code> 按 域访问设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [102]: cookies &#x3D; httpx.Cookies()</span><br><span class="line"></span><br><span class="line">In [103]: cookies.set(&#39;cookie_on_domain&#39;, &#39;hello, there!&#39;, domain&#x3D;&#39;httpbin.org&#39;)</span><br><span class="line"></span><br><span class="line">In [104]: cookies.set(&#39;cookies_off_domain&#39;, &#39;nope&#39;, domain&#x3D;&quot;example.org&quot;)</span><br><span class="line"></span><br><span class="line">In [105]: r &#x3D; httpx.get(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;cookies&quot;, cookies&#x3D;cookies)</span><br><span class="line"></span><br><span class="line">In [106]: r.json()</span><br><span class="line">Out[106]: &#123;&#39;cookies&#39;: &#123;&#39;cookie_on_domain&#39;: &#39;hello, there!&#39;&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>URL</code> 重定向和历史<br>默认情况下,HTTPX将对重定向执行除<code>HEAD</code>请求之外的任何操作。<br><code>history</code>响应的属性可用于检查所有后续重定向,它包含遵循他们的顺序的所有重定向响应的列表<br><code>GITHUB</code>将所有<code>HTTP</code>请求重定向到<code>HTTPS</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [107]: r &#x3D; httpx.get(&quot;http:&#x2F;&#x2F;github.com&quot;)</span><br><span class="line"></span><br><span class="line">In [108]: r.url</span><br><span class="line">Out[108]: URL(&#39;https:&#x2F;&#x2F;github.com&#39;)</span><br><span class="line"></span><br><span class="line">In [109]: r.status_code</span><br><span class="line">Out[109]: 200</span><br><span class="line"></span><br><span class="line">In [110]: r.history</span><br><span class="line">Out[110]: []</span><br></pre></td></tr></table></figure><p>您可以使用allow_redirects参数修改默认的重定向处理:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [113]: r &#x3D; httpx.head(&#39;http:&#x2F;&#x2F;github.com&#x2F;&#39;, allow_redirects&#x3D;True)</span><br><span class="line"></span><br><span class="line">In [114]: r.url</span><br><span class="line">Out[114]: URL(&#39;https:&#x2F;&#x2F;github.com&#x2F;&#39;)</span><br></pre></td></tr></table></figure><h2 id="认证方式"><a href="#认证方式" class="headerlink" title="认证方式"></a>认证方式</h2><ol><li><p>HTTPX支持基本和摘要HTTP身份验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [122]: httpx.get(&quot;https:&#x2F;&#x2F;example.com&quot;, auth&#x3D;(&quot;my_user&quot;, &quot;password123&quot;))</span><br><span class="line">     ...:</span><br><span class="line">Out[122]: &lt;Response [200 OK]&gt;</span><br></pre></td></tr></table></figure></li><li><p>摘要式身份验证的凭据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [123]: auth &#x3D; httpx.DigestAuth(&quot;my_user&quot;, &quot;password123&quot;)</span><br><span class="line"></span><br><span class="line">In [124]: httpx.get(&quot;https:&#x2F;&#x2F;example.com&quot;, auth&#x3D;auth)</span><br><span class="line">Out[124]: &lt;Response [200 OK]&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      python httpx lib
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell cat EOF 中变量引用</title>
    <link href="https://shuke163.github.io/2020/05/30/Linux-Shell-cat-EOF-%E4%B8%AD%E5%8F%98%E9%87%8F%E5%BC%95%E7%94%A8/"/>
    <id>https://shuke163.github.io/2020/05/30/Linux-Shell-cat-EOF-%E4%B8%AD%E5%8F%98%E9%87%8F%E5%BC%95%E7%94%A8/</id>
    <published>2020-05-30T13:38:18.000Z</published>
    <updated>2020-05-30T13:46:26.771Z</updated>
    
    <content type="html"><![CDATA[<p>cat输出多行文本到文件的方法很常用，如何在里面引用变量呢？看下面的代码:<br>设置环境变量<code>LDAP_SERVER_URI</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LDAP_SERVER_URI&#x3D;&quot;ldaps:&#x2F;&#x2F;tldap.shuke.com&quot;</span><br></pre></td></tr></table></figure><p><code>cat-eof.sh</code>文件内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env bash</span><br><span class="line">cat &lt;&lt;EOF &gt; .&#x2F;test.yml</span><br><span class="line">123</span><br><span class="line">shuke</span><br><span class="line">example: $&#123;LDAP_SERVER_URI&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>查看文件内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  &#x2F;tmp bash cat-eof.sh</span><br><span class="line">➜  &#x2F;tmp cat test.yml</span><br><span class="line">123</span><br><span class="line">shuke</span><br><span class="line">example: ldaps:&#x2F;&#x2F;tldap.shuke.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Linux Shell cat EOF 中变量引用
    
    </summary>
    
    
      <category term="LINUX" scheme="https://shuke163.github.io/categories/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://shuke163.github.io/tags/LINUX/"/>
    
  </entry>
  
  <entry>
    <title>GitOps for k8s</title>
    <link href="https://shuke163.github.io/2020/05/28/GitOps-for-k8s/"/>
    <id>https://shuke163.github.io/2020/05/28/GitOps-for-k8s/</id>
    <published>2020-05-28T01:42:56.000Z</published>
    <updated>2020-05-28T01:43:45.303Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/ptcccaFY55wBKdeNqpu8cw" target="_blank" rel="noopener">gitops for k8s</a></p>]]></content>
    
    <summary type="html">
    
      GitOps for k8s
    
    </summary>
    
    
      <category term="k8s" scheme="https://shuke163.github.io/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://shuke163.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>DevOps工具主题整理</title>
    <link href="https://shuke163.github.io/2020/05/22/DevOps%E5%B7%A5%E5%85%B7%E4%B8%BB%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>https://shuke163.github.io/2020/05/22/DevOps%E5%B7%A5%E5%85%B7%E4%B8%BB%E9%A2%98%E6%95%B4%E7%90%86/</id>
    <published>2020-05-22T03:53:30.000Z</published>
    <updated>2020-07-05T02:41:32.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DevOps解释"><a href="#DevOps解释" class="headerlink" title="DevOps解释"></a>DevOps解释</h2><p>DevOps –传统上是由 development(开发) 和 operations(运维) 组成 。DevOps的目的是：“减少从系统更改到投入生产之间的时间，同时确保高质量”。</p><img src="DevOps工具主题整理/DevOps.svg">]]></content>
    
    <summary type="html">
    
      DevOps工具主题整理
    
    </summary>
    
    
      <category term="DevOps" scheme="https://shuke163.github.io/categories/DevOps/"/>
    
    
      <category term="DevOps" scheme="https://shuke163.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>python轻量级框架</title>
    <link href="https://shuke163.github.io/2020/05/05/python%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A1%86%E6%9E%B6/"/>
    <id>https://shuke163.github.io/2020/05/05/python%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A1%86%E6%9E%B6/</id>
    <published>2020-05-04T18:06:57.000Z</published>
    <updated>2020-05-04T19:08:01.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Responder框架"><a href="#Responder框架" class="headerlink" title="Responder框架"></a>Responder框架</h2><blockquote><p>responder是@kennethreitz新开发的一个项目， 是一个基于 Python 的 HTTP 服务框架. 底层用了 Starlette 的框架, Starlette 是一款轻量级的 ASGI 框架/工具包， 可以用 Starlette 构建高性能的异步 IO 服务.</p></blockquote><p>示例代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">@version: v0.1</span><br><span class="line">@Author: shu_ke163@163.com</span><br><span class="line">@Description: file content</span><br><span class="line">@Date: 2020-05-05 01:04:37</span><br><span class="line">@LastEditors: shuke</span><br><span class="line">@LastEditTime: 2020-05-05 02:07:37</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">import time</span><br><span class="line">import graphene</span><br><span class="line">import responder</span><br><span class="line"></span><br><span class="line">api &#x3D; responder.API()</span><br><span class="line"></span><br><span class="line">@api.route(&quot;&#x2F;&#123;greeting&#125;&quot;)</span><br><span class="line">async def greet_world(req, resp, *, greeting):</span><br><span class="line">    resp.text &#x3D; f&quot;&#123;greeting&#125;, world&quot;</span><br><span class="line"></span><br><span class="line">@api.route(&quot;&#x2F;&quot;)</span><br><span class="line">def hello(req, resp):</span><br><span class="line"></span><br><span class="line">    # 作为后台任务执行</span><br><span class="line">    @api.background.task</span><br><span class="line">    def sleep(s&#x3D;10):</span><br><span class="line">        time.sleep(s)</span><br><span class="line">        print(&quot;slept!&quot;)</span><br><span class="line"></span><br><span class="line">    sleep()</span><br><span class="line">    resp.content &#x3D; &quot;processing&quot;</span><br><span class="line"></span><br><span class="line">class Query(graphene.ObjectType):</span><br><span class="line">    hello &#x3D; graphene.String(name&#x3D;graphene.String(default_value&#x3D;&quot;stranger&quot;))</span><br><span class="line"></span><br><span class="line">    def resolve_hello(self, info, name):</span><br><span class="line">        return f&quot;Hello &#123;name&#125;&quot;</span><br><span class="line"></span><br><span class="line">schema &#x3D; graphene.Schema(query&#x3D;Query)</span><br><span class="line">view &#x3D; responder.ext.GraphQLView(api&#x3D;api, schema&#x3D;schema)</span><br><span class="line"></span><br><span class="line">api.add_route(&quot;&#x2F;graph&quot;, view)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    api.run()</span><br></pre></td></tr></table></figure><p><a href="https://responder.kennethreitz.org/en/latest/tour.html" target="_blank" rel="noopener">官方示例文档</a></p><h2 id="Starlette"><a href="#Starlette" class="headerlink" title="Starlette"></a>Starlette</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">@version: v0.1</span><br><span class="line">@Author: shu_ke163@163.com</span><br><span class="line">@Description: file content</span><br><span class="line">@Date: 2020-05-05 02:16:32</span><br><span class="line">@LastEditors: shuke</span><br><span class="line">@LastEditTime: 2020-05-05 02:22:39</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">from starlette.applications import Starlette</span><br><span class="line">from starlette.responses import JSONResponse</span><br><span class="line">from starlette.routing import Route</span><br><span class="line"></span><br><span class="line">async def homepage(request):</span><br><span class="line">    return JSONResponse(&#123;&quot;hello&quot;: &quot;shuke&#39;s world&quot;&#125;)</span><br><span class="line"></span><br><span class="line">routes &#x3D; [</span><br><span class="line">    Route(&quot;&#x2F;&quot;, endpoint&#x3D;homepage)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">app &#x3D; Starlette(debug&#x3D;True, routes&#x3D;routes)</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  uvicorn example:app --reload</span><br></pre></td></tr></table></figure><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜ http http:&#x2F;&#x2F;127.0.0.1:8000</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">content-length: 25</span><br><span class="line">content-type: application&#x2F;json</span><br><span class="line">date: Mon, 04 May 2020 18:27:23 GMT</span><br><span class="line">server: uvicorn</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;hello&quot;: &quot;shuke&#39;s world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.starlette.io/" target="_blank" rel="noopener">官方文档</a></p><h2 id="FastAPI"><a href="#FastAPI" class="headerlink" title="FastAPI"></a>FastAPI</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">@version: v0.1</span><br><span class="line">@Author: shu_ke163@163.com</span><br><span class="line">@Description: file content</span><br><span class="line">@Date: 2020-05-05 01:04:37</span><br><span class="line">@LastEditors: shuke</span><br><span class="line">@LastEditTime: 2020-05-05 02:48:43</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">from fastapi import FastAPI</span><br><span class="line"></span><br><span class="line">app &#x3D; FastAPI()</span><br><span class="line"></span><br><span class="line">@app.get(&quot;&#x2F;&quot;)</span><br><span class="line">async def read_root():</span><br><span class="line">    return &#123;&quot;hello&quot;: &quot;world!&quot;&#125;</span><br><span class="line"></span><br><span class="line">@app.get(&quot;&#x2F;items&#x2F;&#123;item_id&#125;&quot;)</span><br><span class="line">async def read_item(item_id: int, q: str &#x3D; None) -&gt; dict:</span><br><span class="line">    return &#123;&quot;item_id&quot;: item_id, &quot;q&quot;: q&#125;</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">(base) ➜  learn uvicorn main:app --reload</span><br></pre></td></tr></table></figure><h2 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  http http:&#x2F;&#x2F;127.0.0.1:8000</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">content-length: 18</span><br><span class="line">content-type: application&#x2F;json</span><br><span class="line">date: Mon, 04 May 2020 18:52:08 GMT</span><br><span class="line">server: uvicorn</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;hello&quot;: &quot;world!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(base) ➜  http http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;items&#x2F;5\?q\&#x3D;shuke</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">content-length: 25</span><br><span class="line">content-type: application&#x2F;json</span><br><span class="line">date: Mon, 04 May 2020 18:55:40 GMT</span><br><span class="line">server: uvicorn</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;item_id&quot;: 5,</span><br><span class="line">    &quot;q&quot;: &quot;shuke&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="api-docs"><a href="#api-docs" class="headerlink" title="api docs"></a>api docs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;docs</span><br></pre></td></tr></table></figure><h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;learnku.com&#x2F;python&#x2F;t&#x2F;38942</span><br><span class="line">https:&#x2F;&#x2F;fastapi.tiangolo.com&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python轻量级框架
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Python上下文管理器</title>
    <link href="https://shuke163.github.io/2020/05/03/Python%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>https://shuke163.github.io/2020/05/03/Python%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/</id>
    <published>2020-05-03T03:30:05.000Z</published>
    <updated>2020-05-03T03:32:21.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="有趣的python上下文管理器"><a href="#有趣的python上下文管理器" class="headerlink" title="有趣的python上下文管理器"></a>有趣的<code>python</code>上下文管理器</h2><p><a href="https://mp.weixin.qq.com/s/h0YYmehLuO8QF5Ry7b7fiQ" target="_blank" rel="noopener">原文链接</a><br><a href="https://mp.weixin.qq.com/s/rPFL7KXwD8Bof60lewqTMA" target="_blank" rel="noopener">文章</a></p>]]></content>
    
    <summary type="html">
    
      Python上下文管理器
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>EditorConfig使用介绍</title>
    <link href="https://shuke163.github.io/2020/05/03/EditorConfig%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>https://shuke163.github.io/2020/05/03/EditorConfig%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-05-03T03:08:41.000Z</published>
    <updated>2020-05-03T03:09:10.952Z</updated>
    
    <content type="html"><![CDATA[<p>在github看到很多项目根目录都有 .editorconfig 文件，所以去了解一下。</p><p>这个文件是 EditorConfig 用来统一不同编辑器的代码风格的配置。</p><p>各种IDE的风格自然不一样，通过这样一个配置文件定义的标准统一风格，比如缩进用x个空格。再有就是多人一起协同开发一个项目，editorconfig 能起到很好的效果。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># EditorConfig: http:&#x2F;&#x2F;editorconfig.org&#x2F;</span><br><span class="line"></span><br><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 4</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">trim_trailing_whitespace &#x3D; true</span><br><span class="line">insert_final_newline &#x3D; true</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace &#x3D; false</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      EditorConfig使用介绍
    
    </summary>
    
    
      <category term="IDE" scheme="https://shuke163.github.io/categories/IDE/"/>
    
    
      <category term="IDE" scheme="https://shuke163.github.io/tags/IDE/"/>
    
  </entry>
  
</feed>
