<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shuke&#39;s Blog</title>
  
  <subtitle>技术 管理 生活 格局 人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuke163.github.io/"/>
  <updated>2020-04-20T06:21:46.078Z</updated>
  <id>https://shuke163.github.io/</id>
  
  <author>
    <name>shuke</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django基于RBAC的权限组件</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:11:34.000Z</published>
    <updated>2020-04-20T06:21:46.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django基于RBAC的权限组件"><a href="#Django基于RBAC的权限组件" class="headerlink" title="Django基于RBAC的权限组件"></a>Django基于RBAC的权限组件</h1><hr><h3 id="RBAC前奏"><a href="#RBAC前奏" class="headerlink" title="RBAC前奏"></a>RBAC前奏</h3><ol><li><p>RBAC概念<br>RBAC（Role-Based Access Control，基于角色的访问控制），就是用户通过角色与权限进行关联。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。在这种模型中，用户与角色之间，角色与权限之间，一般者是多对多的关系。</p></li><li><p>扩展</p><ul><li>角色是什么？可以理解为一定数量的权限的集合，权限的载体。例如：一个论坛系统，“超级管理员”、“版主”都是角色。版主可管理版内的帖子、可管理版内的用户等，这些是权限。要给某个用户授予这些权限，不需要直接将权限授予用户，可将“版主”这个角色赋予该用户。 </li><li>当用户的数量非常大时，要给系统每个用户逐一授权（授角色），是件非常烦琐的事情。这时，就需要给用户分组，每个用户组内有多个用户。除了可给用户授权外，还可以给用户组授权。这样一来，用户拥有的所有权限，就是用户个人拥有的权限与该用户所在用户组拥有的权限之和。</li><li>在应用系统中，权限表现成什么？对功能模块的操作，对上传文件的删改，菜单的访问，甚至页面上某个按钮、某个图片的可见性控制，都可属于权限的范畴。有些权限设计，会把功能操作作为一类，而把文件、菜单、页面元素等作为另一类，这样构成“用户-角色-权限-资源”的授权模型。而在做数据表建模时，可把功能操作和资源统一管理，也就是都直接与权限表进行关联，这样可能更具便捷性和易扩展性。</li><li>请留意权限表中有一列“权限类型”，我们根据它的取值来区分是哪一类权限，如“MENU”表示菜单的访问权限、“OPERATION”表示功能模块的操作权限、“FILE”表示文件的修改权限、“ELEMENT”表示页面元素的可见性控制等。</li><li>这样设计的好处有二。其一，不需要区分哪些是权限操作，哪些是资源，（实际上，有时候也不好区分，如菜单，把它理解为资源呢还是功能模块权限呢？）。其二，方便扩展，当系统要对新的东西进行权限控制时，我只需要建立一个新的关联表“权限XX关联表”，并确定这类权限的权限类型字符串。</li><li>这里要注意的是，权限表与权限菜单关联表、权限菜单关联表与菜单表都是一对一的关系。（文件、页面权限点、功能操作等同理）。也就是每添加一个菜单，就得同时往这三个表中各插入一条记录。这样，可以不需要权限菜单关联表，让权限表与菜单表直接关联，此时，须在权限表中新增一列用来保存菜单的ID，权限表通过“权限类型”和这个ID来区分是种类型下的哪条记录。</li><li>随着系统的日益庞大，为了方便管理，可引入角色组对角色进行分类管理，跟用户组不同，角色组不参与授权。例如：某电网系统的权限管理模块中，角色就是挂在区局下，而区局在这里可当作角色组，它不参于权限分配。另外，为方便上面各主表自身的管理与查找，可采用树型结构，如菜单树、功能树等，当然这些可不需要参于权限分配。</li></ul></li><li><p>基于rbac的实现<br><a href="https://github.com/shonenada/flask-rbac" target="_blank" rel="noopener">flask-rbac</a><br><a href="https://pypi.python.org/pypi/simple-rbac/0.1.1" target="_blank" rel="noopener">simple-rbac</a></p></br></li></ol><h3 id="知识点储备"><a href="#知识点储备" class="headerlink" title="知识点储备"></a>知识点储备</h3><ol><li>Django ORM<br>常用的orm方法，all,values,values_list等<br>from models import User</li></ol><ul><li>all<br>models.User.objects.all(),返回值为queryset类型，形如：[obj,obj,obj]</li><li>values<br>models.User.objects.values(‘id’,’username’,’password’),返回值为queryset类型，形如：[{‘id’:1,’username’:’shuke’,’password’:’123456’}]</li><li>values_list<br>models.User.objects.values_list(‘id’,’username’,’password’),返回值为queryset类型，形如: [(1,’shuke’,’123456’),(2,’mary’,’123456’)]</li></ul><ol start="2"><li>一对多及多对多</li></ol><ul><li>一对多（FK常用操作）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">class A(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line"></span><br><span class="line">class B(models.Model):</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line">    fk &#x3D; models.ForeignKey(to&#x3D;&quot;A&quot;)</span><br><span class="line"># 跨表操作</span><br><span class="line">a. all()</span><br><span class="line">b_list &#x3D; models.B.objects.all()</span><br><span class="line">for item in b_list:</span><br><span class="line">    item.id</span><br><span class="line">    item.name</span><br><span class="line">    item.fk_id</span><br><span class="line">    item.fk</span><br><span class="line">    item.fk.name</span><br><span class="line">    item.fk.id</span><br><span class="line">b. values()</span><br><span class="line">b_list &#x3D; models.B.objects.values(&#39;id&#39;,&#39;name&#39;,&#39;fk_id&#39;,&#39;fk__name&#39;)</span><br><span class="line">for item in b_list:</span><br><span class="line">    item[&#39;id&#39;]</span><br><span class="line">    item[&#39;name&#39;]</span><br><span class="line">    item[&#39;fk_id&#39;]</span><br><span class="line">    item[&#39;fk__name&#39;]</span><br><span class="line">c. values_list()</span><br><span class="line">b_list &#x3D; models.B.objects.values_list(&#39;id&#39;,&#39;name&#39;,&#39;fk_id&#39;,&#39;fk__name&#39;)</span><br><span class="line">for item in b_list:</span><br><span class="line">    item[0]  # id</span><br><span class="line">    item[1]  # name</span><br><span class="line">    item[2]  # fk_id</span><br><span class="line">    item[3]  # fk__name</span><br><span class="line">d. 查找名称是&quot;Jack&quot;的用户所有B表中的数据</span><br><span class="line">models.B.objects.filter(fk__name&#x3D;&quot;Jack&quot;).all()</span><br></pre></td></tr></table></figure></li><li>多对多(ManyToMany)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">class A(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line"></span><br><span class="line">class B(models.Model):</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line">    m2m &#x3D; models.ManyToMany(to&#x3D;&quot;A&quot;)</span><br><span class="line">PS: 自动会生成第3张表</span><br><span class="line">a. 在A和B表中各插入2条数据</span><br><span class="line">models.A.objects.create(name&#x3D;&quot;Jack&quot;)</span><br><span class="line">models.A.objects.create(name&#x3D;&quot;Mary&quot;)</span><br><span class="line"></span><br><span class="line">models.A.objects.create(title&#x3D;&quot;IT&quot;)</span><br><span class="line">models.A.objects.create(title&#x3D;&quot;CTO&quot;)</span><br><span class="line"></span><br><span class="line">b. CTO和[&#39;Jack&#39;,&#39;Mary&#39;]创建关系</span><br><span class="line">obj &#x3D; models.B.objects.get(title&#x3D;&quot;CTO&quot;)</span><br><span class="line">obj.m2m.add(1)   # 此处可以写id也可以写关联的A表中的obj</span><br><span class="line">obj.m2m.add(2)</span><br><span class="line"></span><br><span class="line">c. 查找CTO的关联的人</span><br><span class="line">obj &#x3D; models.B.objects.get(title&#x3D;&quot;CTO&quot;)</span><br><span class="line">obj.m2m.all()    # 得到一个QuerySet列表，内容为A表中的对象</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>中间件<br>中间件其实就是一个类，包含2个方法,形如:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class MiddleWare:</span><br><span class="line">    # 所有的resquest请求都需要经过该方法,且该方法返回值为None时，继续请求下一个中间件</span><br><span class="line">    def process_request(self,request):</span><br><span class="line">        pass</span><br><span class="line">    def process_response(self,request,response):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure></li></ol><p><em>注: 中间件编写完成后需要在settings文件中进行注册使用，注册时注意中间件顺序</em></p><ol start="4"><li>Session与Cookie的区别</li></ol><ul><li>由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。</li><li>思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。</li><li>Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。</li><li>总结：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</li></ul><ol start="5"><li>正则模块re<br>re.match()方法<br>决定RE是否在字符串刚开始的位置匹配,返回_sre.SRE_Match对象，如果不能匹配返回None。<br>注：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符’$’<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">re.match(pattern, string, flags&#x3D;0)</span><br><span class="line"></span><br><span class="line">print(re.match(&#39;com&#39;,&#39;comwww.runcomoob&#39;).group())</span><br><span class="line">print(re.match(&#39;com&#39;,&#39;Comwww.runcomoob&#39;,re.I).group())</span><br><span class="line">执行结果如下：</span><br><span class="line">com</span><br><span class="line">com</span><br></pre></td></tr></table></figure></li></ol><hr></br><h3 id="RBAC实现"><a href="#RBAC实现" class="headerlink" title="RBAC实现"></a>RBAC实现</h3><h4 id="开发RBAC流程"><a href="#开发RBAC流程" class="headerlink" title="开发RBAC流程"></a>开发RBAC流程</h4><ol><li>表结构设计</li><li>Django Admin录入数据</li><li>用户登陆<ul><li>获取角色</li><li>获取权限</li><li>对权限URL进行去重</li></ul></li><li>生成权限结构信息，写入session中<br>{<br> 1: {<pre><code>&apos;urls&apos;: [&apos;/userinfo/&apos;, &apos;/userinfo/add/&apos;, &apos;/userinfo/(\\d+)/delete/&apos;, &apos;/userinfo/(\\d+)/change/&apos;],&apos;codes&apos;: [&apos;list&apos;, &apos;add&apos;, &apos;del&apos;, &apos;edit&apos;]</code></pre> },<br> 2: {<pre><code>&apos;urls&apos;: [&apos;/order/&apos;, &apos;/order/add/&apos;, &apos;/order/(\\d+)/delete/&apos;, &apos;/order/(\\d+)/change/&apos;],&apos;codes&apos;: [&apos;list&apos;, &apos;add&apos;, &apos;del&apos;, &apos;edit&apos;]</code></pre> }<br>}</li><li>注册中间件<ul><li>白名单</li><li>获取当前访问url: request.path_info</li><li>session中获取权限，进行权限访问验证</li></ul></li><li>自动生成菜单功能<ul><li>采用自定义tag方式实现(inclusion_tag)</li><li>作为模板使用{ menu_html request }方式导入html文件中使用</li></ul></li><li>通过Django Admin后台进行管理及维护工作 </br></li></ol><h4 id="Django-ORM表结构设计"><a href="#Django-ORM表结构设计" class="headerlink" title="Django ORM表结构设计"></a>Django ORM表结构设计</h4><p><strong>5个类6张表</strong></p><ol><li>菜单表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Menu(models.Models):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    菜单表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32,verbose_name&#x3D;&#39;菜单标题&#39;)</span><br><span class="line">    </span><br><span class="line">     # django admin后台显示用</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;菜单表&quot;</span><br><span class="line">    # 重写__str__方法，实例化后的对象将以字符串的形式展示，但实际是一个obj,所以，请不要相信你的眼睛，必要时使用type(arg)进行验证</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br></pre></td></tr></table></figure></li><li>权限组表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Group(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    权限组</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    caption &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;组名称&quot;)</span><br><span class="line">    menu &#x3D; models.ForeignKey(to&#x3D;&quot;Menu&quot;, default&#x3D;1, blank&#x3D;True, verbose_name&#x3D;&quot;关联的菜单&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;权限组&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.caption</span><br></pre></td></tr></table></figure></li><li>权限表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Permission(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    权限表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;标题&quot;)</span><br><span class="line">    url &#x3D; models.CharField(max_length&#x3D;128, verbose_name&#x3D;&quot;含正则的URL&quot;)</span><br><span class="line">    # menu_gp为null说明是title为菜单项</span><br><span class="line">    menu_gp &#x3D; models.ForeignKey(to&#x3D;&quot;Permission&quot;, null&#x3D;True, blank&#x3D;True, verbose_name&#x3D;&quot;默认选中的组内权限ID&quot;, related_name&#x3D;&quot;pm&quot;)</span><br><span class="line">    code &#x3D; models.CharField(max_length&#x3D;16, verbose_name&#x3D;&quot;权限码&quot;)</span><br><span class="line">    group &#x3D; models.ForeignKey(to&#x3D;&quot;Group&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;所属组&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;权限表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br></pre></td></tr></table></figure></li><li>用户表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class User(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;用户名&quot;)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;64, verbose_name&#x3D;&quot;密码&quot;)</span><br><span class="line">    email &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;邮箱&quot;)</span><br><span class="line">    roles &#x3D; models.ManyToManyField(to&#x3D;&quot;Role&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;用户关联的角色&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;用户表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.username</span><br></pre></td></tr></table></figure></li><li>角色表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Role(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    角色表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;角色名称&quot;)</span><br><span class="line">    permissions &#x3D; models.ManyToManyField(to&#x3D;&quot;Permission&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;角色关联的权限&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;角色表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br></pre></td></tr></table></figure></li><li>附加</li></ol><ul><li>创建数据库表结构信息</li><li>创建超级用户</li><li>在admin.py中注册models类</li><li>登陆admin管理后台添加数据，进行管理</li></ul></br><h3 id="settings中添加配置项"><a href="#settings中添加配置项" class="headerlink" title="settings中添加配置项"></a>settings中添加配置项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在文件末尾添加配置信息</span><br><span class="line"></span><br><span class="line">vim projectname&#x2F;settings.py</span><br><span class="line"># ########################### 权限管理相关 ###########################3</span><br><span class="line">PERMISSION_MENU_KEY &#x3D; &quot;asdkjalsdf9uajsdf&quot;</span><br><span class="line">PERMISSION_URL_DICT_KEY &#x3D; &quot;iujmsufnsdflsdkf&quot;</span><br><span class="line"></span><br><span class="line">VALID_URL&#x3D; [</span><br><span class="line">    &#39;^&#x2F;login&#x2F;&#39;,</span><br><span class="line">    &quot;^&#x2F;admin*&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="初始化权限信息"><a href="#初始化权限信息" class="headerlink" title="初始化权限信息"></a>初始化权限信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#cat rbac&#x2F;service&#x2F;init_permission.py</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line">def init_permission(request,user):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户权限信息初始化，获取当前用户所有权限信息，并保存到Session中</span><br><span class="line">    此处的request以及user参数均为对象，user为登陆成功时在数据库中查询到的user对象</span><br><span class="line">    :param request:</span><br><span class="line">    :param user:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 去空去重</span><br><span class="line">    permission_list &#x3D; user.roles.filter(permissions__id__isnull&#x3D;False).values(</span><br><span class="line">        &#39;permissions__id&#39;,</span><br><span class="line">        &#39;permissions__title&#39;,                # 用户列表</span><br><span class="line">        &#39;permissions__url&#39;,</span><br><span class="line">        &#39;permissions__code&#39;,</span><br><span class="line">        &#39;permissions__menu_gp_id&#39;,           # 组内菜单ID，Null表示是菜单</span><br><span class="line">        &#39;permissions__group_id&#39;,             # 权限的组ID</span><br><span class="line">        &#39;permissions__group__menu_id&#39;,       # 当前权限所在组的菜单ID</span><br><span class="line">        &#39;permissions__group__menu__title&#39;,   # 当前权限所在组的菜单名称</span><br><span class="line">    ).distinct()</span><br><span class="line">    </span><br><span class="line">    # 菜单相关配置，在inclusion_tag中使用</span><br><span class="line">    menu_permission_list&#x3D; []</span><br><span class="line">    for item in permission_list:</span><br><span class="line">        tpl &#x3D; &#123;</span><br><span class="line">            &#39;id&#39;: item[&#39;permissions__id&#39;],</span><br><span class="line">            &#39;title&#39;: item[&#39;permissions__title&#39;],</span><br><span class="line">            &#39;url&#39;: item[&#39;permissions__url&#39;],</span><br><span class="line">            &#39;menu_gp_id&#39;: item[&#39;permissions_menu_gp_id&#39;],</span><br><span class="line">            &#39;menu_id&#39;: item[&#39;permissions__group__menu_id&#39;],</span><br><span class="line">            &#39;menu_title&#39;: item[&#39;permissions__group__menu__title&#39;] </span><br><span class="line">        &#125;</span><br><span class="line">        menu_permission_list.append(tpl)</span><br><span class="line">        request.session[settings.PERMISSION_MENU_KEY] &#x3D; menu_permission_list</span><br><span class="line">        # 形如</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;host&#x2F;&quot;,&quot;menu_title&quot;: &quot;主机管理&quot;,&quot;title&quot;: &quot;主机列表&quot;,&quot;id&quot;: 1,&quot;menu_gp_id&quot;: null,&quot;menu_id&quot;: 1&#125;,</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;host&#x2F;add&#x2F;&quot;,&quot;menu_title&quot;: &quot;主机管理&quot;,&quot;title&quot;: &quot;添加主机&quot;,&quot;id&quot;: 2,&quot;menu_gp_id&quot;: 1,&quot;menu_id&quot;: 1&#125;,</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;host&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,&quot;menu_title&quot;: &quot;主机管理&quot;,&quot;title&quot;: &quot;删除主机&quot;,&quot;id&quot;: 3,&quot;menu_gp_id&quot;: 1,&quot;menu_id&quot;: 1&#125;,</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;host&#x2F;(\\d+)&#x2F;change&#x2F;&quot;,&quot;menu_title&quot;: &quot;主机管理&quot;,&quot;title&quot;: &quot;修改主机&quot;,&quot;id&quot;: 4,&quot;menu_gp_id&quot;: 1,&quot;menu_id&quot;: 1&#125;</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;userinfo&#x2F;&quot;,&quot;menu_title&quot;: &quot;用户管理&quot;,&quot;title&quot;: &quot;用户列表&quot;,&quot;id&quot;: 5,&quot;menu_gp_id&quot;: null,&quot;menu_id&quot;: 2&#125;,</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;userinfo&#x2F;add&#x2F;&quot;,&quot;menu_title&quot;: &quot;用户管理&quot;,&quot;title&quot;: &quot;添加用户&quot;,&quot;id&quot;: 6,&quot;menu_gp_id&quot;: 5,&quot;menu_id&quot;: 2&#125;,</span><br><span class="line">        ......</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    # 权限相关，中间件使用</span><br><span class="line">    permission_dict &#x3D; &#123;&#125;</span><br><span class="line">    for item in permission_list:</span><br><span class="line">        group_id &#x3D; item[&#39;permissions__group_id&#39;]</span><br><span class="line">        code &#x3D; item[&#39;permissions__code&#39;]</span><br><span class="line">        url &#x3D; item[&#39;permissions__url&#39;]</span><br><span class="line">        if group_id in permission_dict:</span><br><span class="line">            permission_dict[group_id][&#39;codes&#39;].append(code)</span><br><span class="line">            permission_dict[group_id][&#39;urls&#39;].append(url)</span><br><span class="line">        else:</span><br><span class="line">            permission_dict[group_id] &#x3D; &#123;&quot;codes&quot;: [code, ], &quot;urls&quot;: [url, ]&#125;</span><br><span class="line">    request.session[settings.PERMISSION_URL_DICT_KEY] &#x3D; permission_dict</span><br><span class="line">    # 形如</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;1&quot;: &#123;</span><br><span class="line">            &quot;codes&quot;: [&quot;list&quot;,&quot;add&quot;,&quot;delete&quot;,&quot;edit&quot;],</span><br><span class="line">            &quot;urls&quot;: [&quot;&#x2F;host&#x2F;&quot;,&quot;&#x2F;host&#x2F;add&#x2F;&quot;,&quot;&#x2F;host&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,&quot;&#x2F;host&#x2F;(\\d+)&#x2F;change&#x2F;&quot;]</span><br><span class="line">         &#125;,</span><br><span class="line">        &quot;2&quot;: &#123;</span><br><span class="line">            &quot;codes&quot;: [&quot;list&quot;,&quot;add&quot;,&quot;delete&quot;,&quot;change&quot;],</span><br><span class="line">            &quot;urls&quot;: [&quot;&#x2F;userinfo&#x2F;&quot;,&quot;&#x2F;userinfo&#x2F;add&#x2F;&quot;,&quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,&quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;change&#x2F;&quot;]</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p><em>注: 用户登陆成功后进行初始化权限信息,在处理用户权限时需要进行数据去重</em></p><h3 id="菜单List及权限Dict格式如下所示："><a href="#菜单List及权限Dict格式如下所示：" class="headerlink" title="菜单List及权限Dict格式如下所示："></a>菜单List及权限Dict格式如下所示：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"># 菜单List request.session[settings.PERMISSION_MENU_KEY]</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;host&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;主机列表&quot;,</span><br><span class="line">        &quot;id&quot;: 1,</span><br><span class="line">        &quot;menu_gp_id&quot;: null,</span><br><span class="line">        &quot;menu_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;host&#x2F;add&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;添加主机&quot;,</span><br><span class="line">        &quot;id&quot;: 2,</span><br><span class="line">        &quot;menu_gp_id&quot;: 1,</span><br><span class="line">        &quot;menu_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;host&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;删除主机&quot;,</span><br><span class="line">        &quot;id&quot;: 3,</span><br><span class="line">        &quot;menu_gp_id&quot;: 1,</span><br><span class="line">        &quot;menu_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;host&#x2F;(\\d+)&#x2F;change&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;修改主机&quot;,</span><br><span class="line">        &quot;id&quot;: 4,</span><br><span class="line">        &quot;menu_gp_id&quot;: 1,</span><br><span class="line">        &quot;menu_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;用户列表&quot;,</span><br><span class="line">        &quot;id&quot;: 5,</span><br><span class="line">        &quot;menu_gp_id&quot;: null,</span><br><span class="line">        &quot;menu_id&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;add&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;添加用户&quot;,</span><br><span class="line">        &quot;id&quot;: 6,</span><br><span class="line">        &quot;menu_gp_id&quot;: 5,</span><br><span class="line">        &quot;menu_id&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;删除用户&quot;,</span><br><span class="line">        &quot;id&quot;: 7,</span><br><span class="line">        &quot;menu_gp_id&quot;: 5,</span><br><span class="line">        &quot;menu_id&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;change&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;修改用户&quot;,</span><br><span class="line">        &quot;id&quot;: 8,</span><br><span class="line">        &quot;menu_gp_id&quot;: 5,</span><br><span class="line">        &quot;menu_id&quot;: 2</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 权限Dict request.session[settings.PERMISSION_URL_DICT_KEY]</span><br><span class="line">&#123;</span><br><span class="line">    &quot;1&quot;: &#123;</span><br><span class="line">        &quot;codes&quot;: [</span><br><span class="line">            &quot;list&quot;,</span><br><span class="line">            &quot;add&quot;,</span><br><span class="line">            &quot;delete&quot;,</span><br><span class="line">            &quot;edit&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;urls&quot;: [</span><br><span class="line">            &quot;&#x2F;host&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;host&#x2F;add&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;host&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;host&#x2F;(\\d+)&#x2F;change&#x2F;&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;2&quot;: &#123;</span><br><span class="line">        &quot;codes&quot;: [</span><br><span class="line">            &quot;list&quot;,</span><br><span class="line">            &quot;add&quot;,</span><br><span class="line">            &quot;delete&quot;,</span><br><span class="line">            &quot;change&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;urls&quot;: [</span><br><span class="line">            &quot;&#x2F;userinfo&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;userinfo&#x2F;add&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;change&#x2F;&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">cat rbac&#x2F;middleware&#x2F;rbac.py</span><br><span class="line"></span><br><span class="line">from django.shortcuts import redirect,HttpResponse</span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line"># 在后续版本中可能会被废弃，故在此直接引入</span><br><span class="line">#from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">class MiddlewareMixin(object):</span><br><span class="line">    def __init__(self, get_response&#x3D;None):</span><br><span class="line">        self.get_response &#x3D; get_response</span><br><span class="line">        super(MiddlewareMixin, self).__init__()</span><br><span class="line"></span><br><span class="line">    def __call__(self, request):</span><br><span class="line">        response &#x3D; None</span><br><span class="line">        if hasattr(self, &#39;process_request&#39;):</span><br><span class="line">            response &#x3D; self.process_request(request)</span><br><span class="line">        if not response:</span><br><span class="line">            response &#x3D; self.get_response(request)</span><br><span class="line">        if hasattr(self, &#39;process_response&#39;):</span><br><span class="line">            response &#x3D; self.process_response(request, response)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line">class RbacMiddleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self,request):</span><br><span class="line">        # 1. 当前请求URL</span><br><span class="line">        current_request_url &#x3D; request.path_info</span><br><span class="line"></span><br><span class="line">        # 2. 处理白名单,如login及admin页面需开放访问权限，根据实际情况而定</span><br><span class="line">        for url in settings.VALID_URL_LIST:</span><br><span class="line">            if re.match(url,current_request_url):</span><br><span class="line">                return None</span><br><span class="line"></span><br><span class="line">        # 3. 获取session中保存的权限信息</span><br><span class="line">        permission_dict &#x3D; request.session.get(settings.PERMISSION_MENU_LIST)</span><br><span class="line">        if not permission_dict:</span><br><span class="line">            # 登陆页面</span><br><span class="line">            return redirect(settings.RBAC_LOGIN_URL)</span><br><span class="line"></span><br><span class="line">        flag &#x3D; False</span><br><span class="line">        for group_id, values in permission_dict.items():</span><br><span class="line">            for url in values[&#39;urls&#39;]:</span><br><span class="line">                regex &#x3D; settings.URL_FORMAT.format(url)</span><br><span class="line">                if re.match(regex, current_request_url):</span><br><span class="line">                    flag &#x3D; True</span><br><span class="line">                    break</span><br><span class="line">            if flag:</span><br><span class="line">                break</span><br><span class="line">        if not flag:</span><br><span class="line">            # 无权访问页面，可以直接redirect</span><br><span class="line">            return HttpResponse(&#39;无权访问&#39;)</span><br></pre></td></tr></table></figure></br><h4 id="自动生成菜单template-tags"><a href="#自动生成菜单template-tags" class="headerlink" title="自动生成菜单template tags"></a>自动生成菜单template tags</h4><ol><li>template tags部分<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2017&#x2F;11&#x2F;20</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line">from django.template import Library</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">register &#x3D; Library()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@register.inclusion_tag(&#39;menu.html&#39;)</span><br><span class="line">def menu_html(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    获取session中的菜单信息，匹配当前URL，生成菜单</span><br><span class="line">    :param request: 请求的requst对象</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    menu_list &#x3D; request.session.get(settings.PERMISSION_MENU_KEY)</span><br><span class="line">    # 当前请求URL</span><br><span class="line">    current_url &#x3D; request.path_info</span><br><span class="line"></span><br><span class="line">    menu_dict &#x3D; &#123;&#125;</span><br><span class="line">    # menu_gp_id为空则是菜单</span><br><span class="line">    for item in menu_list:</span><br><span class="line">        if not item[&#39;menu_gp_id&#39;]:</span><br><span class="line">            menu_dict[item[&#39;id&#39;]] &#x3D; item</span><br><span class="line"></span><br><span class="line">    for item in menu_list:</span><br><span class="line">        regax &#x3D; &quot;^&#123;0&#125;$&quot;.format(item[&#39;url&#39;])</span><br><span class="line">        if re.match(regax, current_url):</span><br><span class="line">            menu_gp_id &#x3D; item[&#39;menu_gp_id&#39;]</span><br><span class="line">            if menu_gp_id:</span><br><span class="line">                menu_dict[menu_gp_id][&#39;active&#39;] &#x3D; True</span><br><span class="line">            else:</span><br><span class="line">                menu_dict[item[&#39;id&#39;]][&#39;active&#39;] &#x3D; True</span><br><span class="line"></span><br><span class="line">    result &#x3D; &#123;&#125;</span><br><span class="line">    for item in menu_dict.values():</span><br><span class="line">        active &#x3D; item.get(&#39;active&#39;)</span><br><span class="line">        menu_id &#x3D; item[&#39;menu_id&#39;]</span><br><span class="line">        if menu_id in result:</span><br><span class="line">            result[menu_id][&#39;children&#39;].append(&#123;&#39;title&#39;: item[&#39;title&#39;], &#39;url&#39;: item[&#39;url&#39;], &#39;active&#39;: active&#125;)</span><br><span class="line">            if active:</span><br><span class="line">                result[menu_id][&#39;active&#39;] &#x3D; True</span><br><span class="line">        else:</span><br><span class="line">            result[menu_id] &#x3D; &#123;</span><br><span class="line">                &#39;menu_id&#39;: item[&#39;menu_id&#39;],</span><br><span class="line">                &#39;menu_title&#39;: item[&#39;menu_title&#39;],</span><br><span class="line">                &#39;active&#39;: active,</span><br><span class="line">                &#39;children&#39;: [</span><br><span class="line">                    &#123;&#39;title&#39;: item[&#39;title&#39;], &#39;url&#39;: item[&#39;url&#39;], &#39;active&#39;: active&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">    print(json.dumps(result, indent&#x3D;4, ensure_ascii&#x3D;False))</span><br><span class="line">    return &#123;&#39;menu_dict&#39;: result&#125;</span><br></pre></td></tr></table></figure></li><li>生成的菜单树格式如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;1&quot;: &#123;</span><br><span class="line">        &quot;children&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;url&quot;: &quot;&#x2F;host&#x2F;&quot;,</span><br><span class="line">                &quot;active&quot;: null,</span><br><span class="line">                &quot;title&quot;: &quot;主机列表&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;menu_id&quot;: 1,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;active&quot;: null</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;2&quot;: &#123;</span><br><span class="line">        &quot;children&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;&quot;,</span><br><span class="line">                &quot;active&quot;: null,</span><br><span class="line">                &quot;title&quot;: &quot;用户列表&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;menu_id&quot;: 2,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;active&quot;: null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>menu_tpl.html部分<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for k,item in menu_dict.items %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;item&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;item-title&quot;&gt; &#123;&#123; item.menu_title &#125;&#125; &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% if item.active %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;item-permission&quot;&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;item-permission hide&quot;&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">            &#123;% for v in item.children %&#125;</span><br><span class="line">                &#123;% if v.active %&#125;</span><br><span class="line">                    &lt;a href&#x3D;&quot;&#123;&#123; v.url &#125;&#125;&quot; class&#x3D;&quot;active&quot;&gt;&#123;&#123; v.title &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    &lt;a href&#x3D;&quot;&#123;&#123; v.url &#125;&#125;&quot;&gt;&#123;&#123; v.title &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li>HTML部分使用tags<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 上文中的menu_html函数依赖request参数，此处需要传入</span><br><span class="line">&#123; load rbac &#125;</span><br><span class="line">&#123; menu_html request &#125;</span><br></pre></td></tr></table></figure></li></ol><p><em>注: 自定义tags只支持传入1个参数</em><br></br></p><h4 id="注册中间件使用"><a href="#注册中间件使用" class="headerlink" title="注册中间件使用"></a>注册中间件使用</h4><p>project/settings.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE &#x3D; [</span><br><span class="line">    &#39;django.middleware.security.SecurityMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.common.CommonMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,</span><br><span class="line">    &#39;rbac.middleware.rbac.RbacMiddleware&#39;,</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h4><p>在Django Admin中维护rbac的权限系统并使用<br></br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，基于role实现的rbac组件基本开发完成，在Django中作为app引入在settings文件中注册后就可以生效使用了,engoy it!</p>]]></content>
    
    <summary type="html">
    
      Django基于RBAC的权限组件
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django基于Admin原理实现的CURD组件</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:10:38.000Z</published>
    <updated>2020-04-20T06:11:00.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django基于Admin原理实现的CURD组件"><a href="#Django基于Admin原理实现的CURD组件" class="headerlink" title="Django基于Admin原理实现的CURD组件"></a>Django基于Admin原理实现的CURD组件</h1><hr></br><h2 id="Django管理后台admin"><a href="#Django管理后台admin" class="headerlink" title="Django管理后台admin"></a>Django管理后台admin</h2><p>常用共29个功能: <a href="http://www.cnblogs.com/wupeiqi/articles/7444717.html" target="_blank" rel="noopener">参考</a></p><ol><li>在项目的app中的admin.py文件中注册models类，示例如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"># cat app_name&#x2F;admin.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.contrib.admin import ModelAdmin</span><br><span class="line">from . import models</span><br><span class="line">from django.shortcuts import HttpResponse</span><br><span class="line">from django.forms import ModelForm</span><br><span class="line">from django.forms import fields</span><br><span class="line">from django.forms import widgets</span><br><span class="line"></span><br><span class="line"># 用户表,自定义admin后台错误信息提示</span><br><span class="line">class UserModelForm(ModelForm):</span><br><span class="line">    others &#x3D; fields.CharField()</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; models.UserInfo</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br><span class="line">        error_messages &#x3D; &#123;</span><br><span class="line">            &#39;name&#39;:&#123;&#39;required&#39;:&#39;用户名不能问空&#39;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">class UserInfoModelAdmin(ModelAdmin):</span><br><span class="line">    # 使用自定义的form表单验证功能</span><br><span class="line">    form &#x3D; UserModelForm</span><br><span class="line"></span><br><span class="line">    # 1.定义列表页面，显示列数据</span><br><span class="line">    list_display &#x3D; [&#39;name&#39;,&#39;pwd&#39;,&#39;email&#39;]</span><br><span class="line"></span><br><span class="line">    def email(self, obj):</span><br><span class="line">        return obj.name + obj.pwd</span><br><span class="line"></span><br><span class="line">    email.empty_value_display &#x3D; &quot;默认为空时显示的值&quot;</span><br><span class="line"></span><br><span class="line">    # 2.定义列表页面，列可以进行点击进入编辑页面</span><br><span class="line">    list_display_links &#x3D; [&#39;pwd&#39;]</span><br><span class="line">    </span><br><span class="line">    # 3.定义列表页面，快速搜索</span><br><span class="line">    list_filter &#x3D; [&#39;ut&#39;]</span><br><span class="line">    </span><br><span class="line">    # 4.定义列表页面，分页功能</span><br><span class="line">    list_per_page &#x3D; 10</span><br><span class="line">    </span><br><span class="line">    # 5. 列是否可编辑</span><br><span class="line">    list_editable &#x3D; [&#39;name&#39;]</span><br><span class="line"></span><br><span class="line">    # 6. 查询列</span><br><span class="line">    search_fields &#x3D; [&#39;name&#39;,&#39;pwd&#39;]</span><br><span class="line"></span><br><span class="line">    # 7. 是否在页面顶端显示保存按钮</span><br><span class="line">    # save_on_top &#x3D; True</span><br><span class="line"></span><br><span class="line">    # 8. 下拉选项的批量操作，类似于批量删除功能</span><br><span class="line">    def func(self, request, queryset):</span><br><span class="line">        print(self, request, queryset)</span><br><span class="line">        id_list &#x3D; request.POST.getlist(&#39;_selected_action&#39;)</span><br><span class="line">        # models.UserInfo.objects.filter(id__in&#x3D;id_list).delete()</span><br><span class="line"></span><br><span class="line">    func.short_description &#x3D; &quot;批量初始化&quot;</span><br><span class="line"></span><br><span class="line">    actions &#x3D; [func, ]</span><br><span class="line"></span><br><span class="line">    # 9. 列表页面使用模板文件</span><br><span class="line">    change_list_template &#x3D; [&#39;xxx.html&#39;]</span><br><span class="line">    </span><br><span class="line">    # raw_id_fields &#x3D; [&#39;ut&#39;,]</span><br><span class="line">    # fields &#x3D; [&#39;name&#39;]</span><br><span class="line">    # exclude &#x3D; [&#39;name&#39;,]</span><br><span class="line">    </span><br><span class="line">    # 10. 分类展示</span><br><span class="line">    # fieldsets &#x3D; (</span><br><span class="line">    #     (&#39;基本数据&#39;, &#123;</span><br><span class="line">    #         &#39;fields&#39;: (&#39;name&#39;,)</span><br><span class="line">    #     &#125;),</span><br><span class="line">    #     (&#39;其他&#39;, &#123;</span><br><span class="line">    #         &#39;classes&#39;: (&#39;collapse&#39;, &#39;wide&#39;, &#39;extrapretty&#39;),  # &#39;collapse&#39;,&#39;wide&#39;, &#39;extrapretty&#39;</span><br><span class="line">    #         &#39;fields&#39;: (&#39;pwd&#39;, &#39;ut&#39;),</span><br><span class="line">    #     &#125;),</span><br><span class="line">    # )</span><br><span class="line"></span><br><span class="line">    # 11.快速过滤</span><br><span class="line">    # filter_vertical &#x3D; (&quot;roles&quot;,)</span><br><span class="line">    filter_horizontal &#x3D; (&quot;roles&quot;,)</span><br><span class="line">    </span><br><span class="line">    # 12. 排序</span><br><span class="line">    ordering &#x3D; [&#39;-id&#39;]</span><br><span class="line"></span><br><span class="line"># 注册使用自定义的UserInfoModelAdmin类的页面展示规则</span><br><span class="line">admin.site.register(models.UserInfo,UserInfoModelAdmin)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2. 用户类型表(基于ModelAdmin类)</span><br><span class="line">class UserTypeModelAdmin(ModelAdmin):</span><br><span class="line">    list_display &#x3D; [&#39;title&#39;]</span><br><span class="line">    </span><br><span class="line">admin.site.register(models.UserType,UserTypeModelAdmin)</span><br></pre></td></tr></table></figure></li></ol><p><em>注: 默认使用ModelAdmin类进行后台操作，可以定义自己的calss，通过继承ModelAdmin类实现定制页面展示功能</em><br>2. Django自带Admin原理<br>2.1 每注册一个model类，Django内部会生成4个对应的增删改查URL，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">URL:</span><br><span class="line">    &#x2F;admin&#x2F;app_name&#x2F;model_name&#x2F;</span><br><span class="line">    &#x2F;admin&#x2F;app_name&#x2F;model_name&#x2F;add&#x2F;</span><br><span class="line">    &#x2F;admin&#x2F;app_name&#x2F;model_name&#x2F;1&#x2F;change&#x2F;</span><br><span class="line">    &#x2F;admin&#x2F;app_name&#x2F;model_name&#x2F;1&#x2F;delete&#x2F;</span><br><span class="line">    例：&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;</span><br></pre></td></tr></table></figure><p>2.2 内部实现机制</p><ul><li>在app下面的admin.py文件中注册models类;</li><li>Django程序在启动时会循环所有app下面的admin文件中注册的models类，为每个models类生成对应的增删改查4个URL;</li><li>每个注册的model类会封装一个用于处理当前类所对应的URL的view对象,用于处理CURD操作，默认为ModelAdmin类对象;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. self.model&#x3D;models.UserInfo</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;                obj1.changelist_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;add&#x2F;            obj1.add_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;(\d+)&#x2F;delete&#x2F;   obj1.delete_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;(\d+)&#x2F;change&#x2F;   obj1.change_view</span><br><span class="line"></span><br><span class="line">2. self.model&#x3D;models.UserType</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;usertype&#x2F;                obj2.changelist_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;usertype&#x2F;add&#x2F;            obj2.add_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;usertype&#x2F;(\d+)&#x2F;delete&#x2F;   obj2.delete_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;usertype&#x2F;(\d+)&#x2F;change&#x2F;   obj2.change_view</span><br></pre></td></tr></table></figure></br></li></ul><h2 id="自定义实现CURD类似Admin功能"><a href="#自定义实现CURD类似Admin功能" class="headerlink" title="自定义实现CURD类似Admin功能"></a>自定义实现CURD类似Admin功能</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>了解django启动时执行的启动文件顺序</li><li>制作启动文件</li><li>settings.py配置文件中注册启动文件使全局生效</li><li>实现组件CURD业务逻辑</li><li>主要参考Django Admin的实现，利用单利模式和include原理实现路由分发</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><em>假设组件app名称为: arya</em></p><ol><li>Django程序启动顺序<br>在程序启动时，django会根据配置项INSTALLED_APPS中注册的启动文件，遍历每个App下面对应的注册启动文件,在arya组件下面的app.py文件中实现ready方法激活启动文件,如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># arya&#x2F;app.py</span><br><span class="line"></span><br><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line">class AryaConfig(AppConfig):</span><br><span class="line">    name &#x3D; &#39;arya&#39;</span><br><span class="line"></span><br><span class="line">    # Django启动时自动扫描所有app下面的arya模块</span><br><span class="line">    def ready(self):</span><br><span class="line">        from django.utils.module_loading import autodiscover_modules</span><br><span class="line">        autodiscover_modules(&#39;arya&#39;)</span><br></pre></td></tr></table></figure></li><li>在项目的setting.py文件中配置，激活组件，使全局生效，此时Django启动时，在完全启动前，便会扫描所有app下面的arya.py文件并加载生效<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    &#39;arya.apps.AryaConfig&#39;,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>核心代码逻辑实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"># cat arya&#x2F;seevice&#x2F;v1.py</span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.shortcuts import render, HttpResponse, redirect</span><br><span class="line"></span><br><span class="line">class AryaConfig(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    每个models类的URL对应处理的View实现</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, model_class, site):</span><br><span class="line">        self.model_class &#x3D; model_class</span><br><span class="line">        # View对象</span><br><span class="line">        self.site &#x3D; site</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def urls(self):</span><br><span class="line">        partterns &#x3D; [</span><br><span class="line">            url(r&#39;^$&#39;, self.changelist_view),</span><br><span class="line">            url(r&#39;^add&#x2F;&#39;, self.add_view),</span><br><span class="line">            url(r&#39;^(\d+)&#x2F;change&#x2F;$&#39;, self.change_view),</span><br><span class="line">            url(r&#39;^(\d+)&#x2F;delete&#x2F;$&#39;, self.delete_view)</span><br><span class="line">        ]</span><br><span class="line">        return partterns</span><br><span class="line"></span><br><span class="line">    def changelist_view(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        列表试图</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # return HttpResponse(&quot;列表页面&quot;)</span><br><span class="line">        return render(request, &#39;arya&#x2F;changelist.html&#39;)</span><br><span class="line"></span><br><span class="line">    def add_view(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        添加试图</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return HttpResponse(&quot;添加试图&quot;)</span><br><span class="line"></span><br><span class="line">    def change_view(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        修改试图</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return HttpResponse(&quot;修改试图&quot;)</span><br><span class="line"></span><br><span class="line">    def delete_view(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        删除试图</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return HttpResponse(&quot;删除试图&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AryaSite(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    实现类似于admin.site.register()功能</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    # 存放所有的models类及对应处理UTRL的的view对象</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self._registry &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    def register(self, class_name, config_class):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        注册方法,封装对象</span><br><span class="line">        self._registry &#x3D; &#123;</span><br><span class="line">            module.UserInfo: obj1,  # obj1 &#x3D; AryaConfig(models.UserInfo,site),</span><br><span class="line">            module.UserType: obj2,  # obj2 &#x3D; AryaConfig(models.UserType,site),</span><br><span class="line">        &#125;</span><br><span class="line">        :param class_name: models类</span><br><span class="line">        :param config_class: 对应的View类(AryaConfig)</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self._registry[class_name] &#x3D; config_class(class_name, self)</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def urls(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        处理子路由</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        partterns &#x3D; [</span><br><span class="line">            url(r&#39;^login&#x2F;$&#39;, self.login),</span><br><span class="line">            url(r&#39;^logout&#x2F;$&#39;, self.logout),</span><br><span class="line">        ]</span><br><span class="line">        # 循环self._registry属性里面的每一个元素，key为models类，value为URLS对应处理的类obj对象</span><br><span class="line">        for model_class, arya_config_obj in self._registry.items():</span><br><span class="line">            # 分别为app名称和models的类名称</span><br><span class="line">            print(&quot;*&quot; * 50)</span><br><span class="line">            print(model_class._meta.app_label, model_class._meta.model_name)</span><br><span class="line">            app_model_name_urls &#x3D; r&#39;^&#123;0&#125;&#x2F;&#123;1&#125;&#x2F;&#39;.format(model_class._meta.app_label, model_class._meta.model_name)</span><br><span class="line">            # arya_config_obj.urls self._registry字典中存放的values对象obj下面的urls方法</span><br><span class="line">            pt &#x3D; url(app_model_name_urls, (arya_config_obj.urls, None, None))</span><br><span class="line">            partterns.append(pt)</span><br><span class="line">        # 3元组</span><br><span class="line">        return partterns, None, None</span><br><span class="line"></span><br><span class="line">    def login(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        登陆</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return redirect(&#39;login&#39;)</span><br><span class="line"></span><br><span class="line">    def logout(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        退出</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return redirect(&#39;login&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 实例化，利用单例模式</span><br><span class="line">site &#x3D; AryaSite()</span><br></pre></td></tr></table></figure></br></li></ol><h3 id="引入arya组件并使用"><a href="#引入arya组件并使用" class="headerlink" title="引入arya组件并使用"></a>引入arya组件并使用</h3><ol><li><p>创建app，引入arya组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建多个app，并在每个app下面创建arya.py文件，用于实现CURD操作</span><br><span class="line">django startapp app01</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>在app01下面创建models模型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># cat app01&#x2F;models.py</span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class UserType(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户类型表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;用户类型&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;用户类型表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Role(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    角色表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    caption &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;角色名&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;角色表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.caption</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserInfo(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;用户名&quot;)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;64, verbose_name&#x3D;&quot;密码&quot;)</span><br><span class="line">    email &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;邮箱&quot;)</span><br><span class="line">    ut &#x3D; models.ForeignKey(to&#x3D;&quot;UserType&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;用户类型&quot;)</span><br><span class="line">    roles &#x3D; models.ManyToManyField(to&#x3D;&quot;Role&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;所属角色&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;用户表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.username</span><br></pre></td></tr></table></figure></li><li><p>生成表结构并制作部分展示数据，可以直接在表中添加，也可以通过admin后台进行添加</p></li><li><p>在app01中的arya.py文件中注册models类并自定义实现展示UI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># cat app01&#x2F;arya.py</span><br><span class="line"></span><br><span class="line">from arya.service import v1</span><br><span class="line">from . import models</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># 自定义属性控制UI展示</span><br><span class="line">class UserInfoConfig(v1.AryaConfig):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    自定义用户信息UI</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    list_display &#x3D; [&#39;username&#39;, &#39;ut&#39;, &#39;roles&#39;, &#39;email&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserTypeConfig(v1.AryaConfig):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    自定义用户类型UI</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    list_display &#x3D; [&#39;title&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class RoleConfig(v1.AryaConfig):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    自定义角色UI</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    list_display &#x3D; [&#39;caption&#39;]</span><br><span class="line"></span><br><span class="line"># 注册models</span><br><span class="line">v1.site.register(models.UserInfo, UserInfoConfig)</span><br><span class="line">v1.site.register(models.UserType, UserTypeConfig)</span><br><span class="line">v1.site.register(models.Role, RoleConfig)</span><br></pre></td></tr></table></figure></li><li><p>在项目中应用arya组件，使URL生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#cat project_name&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from arya.service import v1</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line"># url的第二个参数返回类型为([],None,None)的元组,源码见include方法</span><br><span class="line"># 此处的login和logut也可以使用arya&#x2F;service&#x2F;v1.py文件中定义的路由，示例为自己实现</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    # 此处会生成对应的多个URL子路由</span><br><span class="line">    url(r&#39;^arya&#x2F;&#39;, v1.site.urls),</span><br><span class="line">    url(r&#39;^index&#x2F;$&#39;, views.index, name&#x3D;&quot;index&quot;),</span><br><span class="line">    url(r&#39;^login&#x2F;$&#39;, views.login, name&#x3D;&quot;login&quot;),</span><br><span class="line">    url(r&#39;^logout&#x2F;$&#39;, views.logout, name&#x3D;&quot;logout&quot;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>路由试图处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># cat project_name&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.shortcuts import render, redirect</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line">def login(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    登陆</span><br><span class="line">    :param request:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">        return render(request, &#39;login.html&#39;)</span><br><span class="line">    else:</span><br><span class="line">        username &#x3D; request.POST.get(&#39;username&#39;)</span><br><span class="line">        password &#x3D; request.POST.get(&#39;password&#39;)</span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;username, password&#x3D;password).first()</span><br><span class="line">        if obj:</span><br><span class="line">            request.session[&#39;userinfo&#39;] &#x3D; &#123;&#39;username&#39;: obj.username, &#39;is_login&#39;: True&#125;</span><br><span class="line">            return redirect(&#39;index&#39;)</span><br><span class="line">        return render(request, &#39;login.html&#39;, &#123;&#39;msg&#39;: &#39;用户名或密码错误&#39;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def logout(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    退出</span><br><span class="line">    :param request:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">        return redirect(&#39;login&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    首页</span><br><span class="line">    :param request:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">        return render(request, &#39;index.html&#39;)</span><br></pre></td></tr></table></figure></li><li><p>项目URL<br>此时在项目的路由中已经存在对应增删改查的4个URL，如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># app_nmae 应用名</span><br><span class="line"># models_name models类名小写</span><br><span class="line">arya&#x2F;app_name&#x2F;models_name&#x2F;</span><br><span class="line">arya&#x2F;app_name&#x2F;models_name&#x2F;add&#x2F;</span><br><span class="line">arya&#x2F;app_name&#x2F;models_name&#x2F;(\d+)&#x2F;change&#x2F;</span><br><span class="line">arya&#x2F;app_name&#x2F;models_name&#x2F;(\d+)&#x2F;delete&#x2F;</span><br><span class="line"># 在该示例中为: </span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;arya&#x2F;app01&#x2F;userinfo&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;arya&#x2F;app01&#x2F;userinfo&#x2F;add&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;arya&#x2F;app01&#x2F;userinfo&#x2F;()</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li><li><p>扩展<br>在每个app下面的arya.py文件中继承arya组件中的service.v1.AryaConfig类，自己内部实现处理URL的view以及定制化操作</p></br>  </li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  至此，自定义实现的类似Django admin组件基本开发完成，能够满足models模型数据的CURD操作。在Django中作为app引入CustAdmin组件，然后在settings文件中注册后就<br>可以生效使用了,engoy it!</p><p><a href="https://github.com/shuke163/CustAdmin" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      Django基于Admin原理实现的CURD组件
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django 聚合</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:09:59.000Z</published>
    <updated>2020-04-20T06:10:24.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-聚合"><a href="#Django-聚合" class="headerlink" title="Django 聚合"></a>Django 聚合</h1><hr><ol><li>在查询集上生成聚合(aggregate)<br>aggregate()是QuerySet 的一个终止子句，意思是说，它返回一个包含一些键值对的字典。键的名称是聚合值的标识符，值是计算出来的聚合值。键的名称是按照字段和聚合函数的名称自动生成出来的。如果你想要为聚合值指定一个名称，可以向聚合子句提供它。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Book.objects.aggregate(average_price&#x3D;Avg(&#39;price&#39;))</span><br><span class="line">&#123;&#39;average_price&#39;: 34.35&#125;</span><br></pre></td></tr></table></figure></li><li>为查询集的每一项生成聚合(annotate)<br>逐个对象的汇总结果可以由annotate()子句生成。当annotate()子句被指定之后，QuerySet中的每个对象都会被注上特定的值。<br>这些注解的语法都和aggregate()子句所使用的相同。annotate()的每个参数都描述了将要被计算的聚合。比如，给图书添加作者数量的注解：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Build an annotated queryset</span><br><span class="line">&gt;&gt;&gt; from django.db.models import Count</span><br><span class="line">&gt;&gt;&gt; q &#x3D; Book.objects.annotate(Count(&#39;authors&#39;))</span><br><span class="line"># Interrogate the first object in the queryset</span><br><span class="line">&gt;&gt;&gt; q[0]</span><br><span class="line">&lt;Book: The Definitive Guide to Django&gt;</span><br><span class="line">&gt;&gt;&gt; q[0].authors__count</span><br><span class="line">2</span><br><span class="line"># Interrogate the second object in the queryset</span><br><span class="line">&gt;&gt;&gt; q[1]</span><br><span class="line">&lt;Book: Practical Django Projects&gt;</span><br><span class="line">&gt;&gt;&gt; q[1].authors__count</span><br><span class="line">1</span><br></pre></td></tr></table></figure>和使用 aggregate()一样，注解的名称也根据聚合函数的名称和聚合字段的名称得到的。你可以在指定注解时，为默认名称提供一个别名：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; q &#x3D; Book.objects.annotate(num_authors&#x3D;Count(&#39;authors&#39;))</span><br><span class="line">&gt;&gt;&gt; q[0].num_authors</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; q[1].num_authors</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>与 aggregate() 不同的是， annotate() 不是一个终止子句。annotate()子句的返回结果是一个查询集 (QuerySet)；这个 QuerySet可以用任何QuerySet方法进行修改，包括 filter(), order_by(), 甚至是再次应用annotate()。</p><p><a href="http://python.usyiyi.cn/documents/django_182/topics/db/aggregation.html" target="_blank" rel="noopener">Django 聚合</a></p>]]></content>
    
    <summary type="html">
    
      Django 聚合
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django 自定义分页实现</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:09:17.000Z</published>
    <updated>2020-04-20T06:09:42.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django-自定义分页实现"><a href="#Django-自定义分页实现" class="headerlink" title="Django 自定义分页实现"></a>Django 自定义分页实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2017&#x2F;9&#x2F;9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Page(object):</span><br><span class="line">    def __init__(self, current_page, all_count, base_url, per_page&#x3D;10, pager_page_count&#x3D;11):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :param current_page: 当前页</span><br><span class="line">        :param all_count: 数据总条数</span><br><span class="line">        :param base_url: 分页的url</span><br><span class="line">        :param per_page: 每页显示的数据条数</span><br><span class="line">        :param pager_page_count: 每页显示的页码数量</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.current_page &#x3D; current_page</span><br><span class="line">        self.per_page &#x3D; per_page</span><br><span class="line">        self.all_count &#x3D; all_count</span><br><span class="line">        self.base_url &#x3D; base_url</span><br><span class="line">        self.pager_page_count &#x3D; pager_page_count</span><br><span class="line">        pager_count, b &#x3D; divmod(all_count, per_page)</span><br><span class="line">        if b !&#x3D; 0:</span><br><span class="line">            pager_count +&#x3D; 1</span><br><span class="line">        self.pager_count &#x3D; pager_count</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def start(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        数据库获取值的起始索引位置</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return (self.current_page - 1) * self.per_page</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def end(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        数据库获取值的结束索引位置</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.current_page * self.per_page</span><br><span class="line"></span><br><span class="line">    def page_html(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        渲染的HTML页码</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 页码</span><br><span class="line">        pager_page_count &#x3D; self.pager_page_count</span><br><span class="line">        half_pager_page_count &#x3D; int(pager_page_count &#x2F; 2)</span><br><span class="line"></span><br><span class="line">        if self.pager_count &lt; self.pager_page_count:</span><br><span class="line">            pager_start &#x3D; 1</span><br><span class="line">            pager_end &#x3D; self.pager_count</span><br><span class="line">        else:</span><br><span class="line">            # 数据较多，页码超过11，最少110条</span><br><span class="line">            if self.current_page &lt;&#x3D; half_pager_page_count:</span><br><span class="line">                pager_start &#x3D; 1</span><br><span class="line">                pager_end &#x3D; pager_page_count</span><br><span class="line">            else:</span><br><span class="line">                if (self.current_page + half_pager_page_count) &gt; self.pager_count:</span><br><span class="line">                    pager_start &#x3D; self.pager_count - pager_page_count + 1</span><br><span class="line">                    pager_end &#x3D; self.pager_count</span><br><span class="line">                else:</span><br><span class="line">                    pager_start &#x3D; self.current_page - half_pager_page_count</span><br><span class="line">                    pager_end &#x3D; self.current_page + half_pager_page_count</span><br><span class="line">        page_list &#x3D; []</span><br><span class="line">        if self.current_page &lt;&#x3D; 1:</span><br><span class="line">            # prev &#x3D; &#39;&lt;a href&#x3D;&quot;#&quot;&gt;上一页&lt;&#x2F;a&gt;&#39;</span><br><span class="line">            prev &#x3D; &#39;&lt;li class&#x3D;&quot;disabled&quot;&gt;&lt;a href&#x3D;&quot;#&quot; aria-label&#x3D;&quot;Previous&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;laquo;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">        else:</span><br><span class="line">            # prev &#x3D; &#39;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;上一页&lt;&#x2F;a&gt;&#39; % (self.base_url, self.current_page - 1,)</span><br><span class="line">            prev &#x3D; &#39;&lt;li&gt;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot; aria-label&#x3D;&quot;Previous&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;laquo;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39; % \</span><br><span class="line">                   (self.base_url, self.current_page - 1)</span><br><span class="line">        page_list.append(prev)</span><br><span class="line">        for i in range(pager_start, pager_end + 1):</span><br><span class="line">            if self.current_page &#x3D;&#x3D; i:</span><br><span class="line">                # tpl &#x3D; &#39;&lt;a class&#x3D;&quot;active&quot; href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;%s&lt;&#x2F;a&gt;&#39; % (self.base_url, i, i)</span><br><span class="line">                tpl &#x3D; &#39;&lt;li class&#x3D;&quot;active&quot;&gt;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;%s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39; % (self.base_url, i, i)</span><br><span class="line">            else:</span><br><span class="line">                # tpl &#x3D; &#39;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;%s&lt;&#x2F;a&gt;&#39; % (self.base_url, i, i)</span><br><span class="line">                tpl &#x3D; &#39;&lt;li&gt;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;%s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39; % (self.base_url, i, i)</span><br><span class="line">            page_list.append(tpl)</span><br><span class="line"></span><br><span class="line">        if self.current_page &gt;&#x3D; self.pager_count:</span><br><span class="line">            # nex &#x3D; &#39;&lt;a href&#x3D;&quot;#&quot;&gt;下一页&lt;&#x2F;a&gt;&#39;</span><br><span class="line">            nex &#x3D; &#39;&lt;li class&#x3D;&quot;disabled&quot;&gt;&lt;a href&#x3D;&quot;#&quot; aria-label&#x3D;&quot;Next&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;raquo;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">        else:</span><br><span class="line">            # nex &#x3D; &#39;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;下一页&lt;&#x2F;a&gt;&#39; % (self.base_url, self.current_page + 1,)</span><br><span class="line">            nex &#x3D; &#39;&lt;li&gt;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot; aria-label&#x3D;&quot;Next&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;raquo;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39; % \</span><br><span class="line">                  (self.base_url, self.current_page + 1)</span><br><span class="line">        page_list.append(nex)</span><br><span class="line">        page_str &#x3D; &quot;&quot;.join(page_list)</span><br><span class="line">        return page_str</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Django 自定义分页实现
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>日期格式转换</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:08:30.000Z</published>
    <updated>2020-04-20T06:08:53.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日期格式转换"><a href="#日期格式转换" class="headerlink" title="日期格式转换"></a>日期格式转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2017&#x2F;9&#x2F;11</span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line">from datetime import date</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">class JsonCustomEncoder(json.JSONEncoder):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    处理datetime格式数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def default(self, field):</span><br><span class="line">        if isinstance(field, datetime):</span><br><span class="line">            return field.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)</span><br><span class="line">        elif isinstance(field, date):</span><br><span class="line">            return field.strftime(&#39;%Y-%m-%d&#39;)</span><br><span class="line">        else:</span><br><span class="line">            return json.JSONEncoder.default(self, field)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      日期格式转换
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>如何禁用自动命名的Django迁移</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:06:52.000Z</published>
    <updated>2020-04-20T06:07:10.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何禁用自动命名的Django迁移"><a href="#如何禁用自动命名的Django迁移" class="headerlink" title="如何禁用自动命名的Django迁移"></a>如何禁用自动命名的Django迁移</h2><blockquote><p>本文主要介绍如何在<code>Django</code>执行<code>makemigrations</code>时完成文件的命名</p></blockquote><p>当你运行Django的manage.py makemigrations时，它将根据迁移的内容为迁移生成一个名称。例如，如果你是在添加单个字段，它会将迁移命名为0002_mymodel_myfield.py。但是，当你的迁移中包含不止一步操作时，它将使用一个简单的‘auto’和当前日期+时间进行命名，例如，0002_auto_20200113_1837.py。你可以为makemigrations提供-n/–name参数，但是开发人员经常会忘记这一点。</p><p>命名是编程中一个众所周知的难题。管理这些具有自动名称的迁移会很困难: 如果不打开它们，你就无法分辨哪个是哪个，而且如果它们是在同一天生成的，它们就会有相同的名称，那你就可能会混淆它们。</p><p>这在以下情况中会非常令人头疼:</p><ul><li>变基分支</li><li>挖掘历史记录</li><li>部署到生产环境</li></ul><p>在最坏的情况下，运行错误的迁移可能会导致数据丢失!<br>我们还很容易忘记修改迁移名称和提交，因为Django不会提示你输入一个更好的名称。我们可以通过一些自动化措施来防范这种情况!</p><p>让我们来看看实现这一点的三种技术。</p><ol><li><strong>重写makemigrations以要求提供 -n/–name</strong><br>这个方法使用了重写内置管理命令的技术，这与我在文章《让Django测试总是重新构建数据库(如果它存在的话)》中使用的技术相同。</li></ol><p>在你的项目的“核心”应用程序中添加一个新的makemigrations命令(例如:myapp/management/commands/makemigrations.py)，内容如下:</p>]]></content>
    
    <summary type="html">
    
      如何禁用自动命名的Django迁移
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>什么是RESTful API以及Django RestFramework</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:04:45.000Z</published>
    <updated>2020-04-20T06:05:11.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-什么是RESTful-API以及Django-RestFramework"><a href="#一-什么是RESTful-API以及Django-RestFramework" class="headerlink" title="一. 什么是RESTful API以及Django RestFramework"></a>一. 什么是RESTful API以及Django RestFramework</h2><h3 id="1-协议"><a href="#1-协议" class="headerlink" title="1. 协议"></a>1. 协议</h3><p>API与用户的通信协议，总是使用HTTPS协议。</p><h3 id="2-域名"><a href="#2-域名" class="headerlink" title="2. 域名"></a>2. 域名</h3><ul><li>应该尽量将API部署在专用域名之下(存在跨域问题): <a href="https://api.example.com" target="_blank" rel="noopener">https://api.example.com</a></li><li>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下: <a href="https://example.org/api/" target="_blank" rel="noopener">https://example.org/api/</a></li></ul><h3 id="3-版本"><a href="#3-版本" class="headerlink" title="3. 版本"></a>3. 版本</h3><p>应该将API的版本号放入URL: <a href="https://api.example.com/v1/" target="_blank" rel="noopener">https://api.example.com/v1/</a><br>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。<a href="https://developer.github.com/v3/media/#request-specific-version" target="_blank" rel="noopener">GitHub Developer Guide</a>采用这种做法,跨域时会引发多次请求</p><h3 id="4-路径-Endpoint"><a href="#4-路径-Endpoint" class="headerlink" title="4. 路径(Endpoint)"></a>4. 路径(Endpoint)</h3><p>路径又称”终点”（endpoint），表示API的具体网址。<br>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。<br>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.example.com&#x2F;v1&#x2F;zoos</span><br><span class="line">https:&#x2F;&#x2F;api.example.com&#x2F;v1&#x2F;animals</span><br><span class="line">https:&#x2F;&#x2F;api.example.com&#x2F;v1&#x2F;employees</span><br></pre></td></tr></table></figure><h3 id="5-HTTP动词"><a href="#5-HTTP动词" class="headerlink" title="5. HTTP动词"></a>5. HTTP动词</h3><p>对于资源的具体操作类型，由HTTP动词表示。<br>常用的HTTP动词有下面五个(括号里是对应的SQL命令)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET（SELECT）：从服务器取出资源（一项或多项）</span><br><span class="line">POST（CREATE）：在服务器新建一个资源</span><br><span class="line">PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）</span><br><span class="line">PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）</span><br><span class="line">DELETE（DELETE）：从服务器删除资源</span><br></pre></td></tr></table></figure><p>还有两个不常用的HTTP动词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HEAD：获取资源的元数据</span><br><span class="line">OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的</span><br></pre></td></tr></table></figure><p>下面是一些栗子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;zoos：列出所有动物园</span><br><span class="line">POST &#x2F;zoos：新建一个动物园</span><br><span class="line">GET &#x2F;zoos&#x2F;ID：获取某个指定动物园的信息</span><br><span class="line">PUT &#x2F;zoos&#x2F;ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="line">PATCH &#x2F;zoos&#x2F;ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="line">DELETE &#x2F;zoos&#x2F;ID：删除某个动物园</span><br><span class="line">GET &#x2F;zoos&#x2F;ID&#x2F;animals：列出某个指定动物园的所有动物</span><br><span class="line">DELETE &#x2F;zoos&#x2F;ID&#x2F;animals&#x2F;ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure><h3 id="6-过滤信息-Filtering"><a href="#6-过滤信息-Filtering" class="headerlink" title="6. 过滤信息(Filtering)"></a>6. 过滤信息(Filtering)</h3><p>如果记录数量很多,服务器不可能都将它们返回给用户.API应该提供参数,过滤返回结果<br>常见的参数形式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?limit&#x3D;10：指定返回记录的数量</span><br><span class="line">?offset&#x3D;10：指定返回记录的开始位置。</span><br><span class="line">?page&#x3D;2&amp;per_page&#x3D;100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby&#x3D;name&amp;order&#x3D;asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id&#x3D;1：指定筛选条件</span><br></pre></td></tr></table></figure><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p><h3 id="7-状态码-Status-Codes"><a href="#7-状态码-Status-Codes" class="headerlink" title="7. 状态码(Status Codes)"></a>7. 状态码(Status Codes)</h3><p>服务器向用户返回的状态码和提示信息，常见的有以下一些(方括号中是该状态码对应的HTTP动词)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST&#x2F;PUT&#x2F;PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST&#x2F;PUT&#x2F;PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST&#x2F;PUT&#x2F;PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功</span><br></pre></td></tr></table></figure><p>注意: 状态码的完全列表参见<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">这里</a></p><h3 id="8-错误处理-Error-handling"><a href="#8-错误处理-Error-handling" class="headerlink" title="8. 错误处理(Error handling)"></a>8. 错误处理(Error handling)</h3><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    error: &quot;Invalid API key&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-返回结果"><a href="#9-返回结果" class="headerlink" title="9. 返回结果"></a>9. 返回结果</h3><p>针对不同操作，服务器向用户返回的结果应该符合以下规范</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;collection：返回资源对象的列表（数组）</span><br><span class="line">GET &#x2F;collection&#x2F;resource：返回单个资源对象</span><br><span class="line">POST &#x2F;collection：返回新生成的资源对象</span><br><span class="line">PUT &#x2F;collection&#x2F;resource：返回完整的资源对象</span><br><span class="line">PATCH &#x2F;collection&#x2F;resource：返回完整的资源对象</span><br><span class="line">DELETE &#x2F;collection&#x2F;resource：返回一个空文档</span><br></pre></td></tr></table></figure><h3 id="10-Hypermedia-API"><a href="#10-Hypermedia-API" class="headerlink" title="10. Hypermedia API"></a>10. Hypermedia API</h3><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。<br>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;link&quot;: &#123;</span><br><span class="line">  &quot;rel&quot;:   &quot;collection https:&#x2F;&#x2F;www.example.com&#x2F;zoos&quot;,</span><br><span class="line">  &quot;href&quot;:  &quot;https:&#x2F;&#x2F;api.example.com&#x2F;zoos&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;List of zoos&quot;,</span><br><span class="line">  &quot;type&quot;:  &quot;application&#x2F;vnd.yourformat+json&quot;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。<br>Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问api.github.com会得到一个所有可用API的网址列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;current_user_url&quot;: &quot;https:&#x2F;&#x2F;api.github.com&#x2F;user&quot;,</span><br><span class="line">  &quot;authorizations_url&quot;: &quot;https:&#x2F;&#x2F;api.github.com&#x2F;authorizations&quot;,</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看到，如果想获取当前用户的信息，应该去访问\api.github.com/user，然后就得到了下面结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;message&quot;: &quot;Requires authentication&quot;,</span><br><span class="line">  &quot;documentation_url&quot;: &quot;https:&#x2F;&#x2F;developer.github.com&#x2F;v3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码表示，服务器给出了提示信息，以及文档的网址</p><h3 id="11-其他"><a href="#11-其他" class="headerlink" title="11. 其他"></a>11. 其他</h3><ul><li>API的身份认证应该使用<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">OAuth 2.0</a>框架。</li><li>服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</li></ul><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南 - 阮一峰的网络日志</a><br><a href="https://github.com/aisuhua/restful-api-design-references" target="_blank" rel="noopener">GitHub - aisuhua/restful-api-design-references: RESTful API 设计参考文献列表</a>  </p><h2 id="二-基于Django的实现"><a href="#二-基于Django的实现" class="headerlink" title="二. 基于Django的实现"></a>二. 基于Django的实现</h2><h3 id="2-1-路由系统"><a href="#2-1-路由系统" class="headerlink" title="2.1 路由系统"></a>2.1 路由系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from app01 import views</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^users&#39;, views.UserView.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-2-CBV试图"><a href="#2-2-CBV试图" class="headerlink" title="2.2 CBV试图"></a>2.2 CBV试图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class UserView(View):</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        result &#x3D; &#123;&quot;status&quot;: True, &quot;data&quot;: &quot;This is a get request&quot;, &quot;msg&quot;: None, &quot;code&quot;: 2000&#125;</span><br><span class="line">        return JsonResponse(result, status&#x3D;200)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        result &#x3D; &#123;&quot;status&quot;: True, &quot;data&quot;: &quot;This is a post request&quot;, &quot;msg&quot;: None, &quot;code&quot;: 2000&#125;</span><br><span class="line">        return JsonResponse(result, status&#x3D;200)</span><br></pre></td></tr></table></figure><h2 id="三-基于Django-Rest-Framework-框架实现"><a href="#三-基于Django-Rest-Framework-框架实现" class="headerlink" title="三. 基于Django Rest Framework 框架实现"></a>三. 基于Django Rest Framework 框架实现</h2><h3 id="3-1-基本流程"><a href="#3-1-基本流程" class="headerlink" title="3.1 基本流程"></a>3.1 基本流程</h3><p>路由:URL.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^index&#39;, views.IndexView.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图: views.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">class IndexView(APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    请求到来之后，都要执行dispatch方法，dispatch方法根据请求方式不同触发反射 get&#x2F;post&#x2F;put 等方法</span><br><span class="line">    注意：APIView中的dispatch方法有好多好多的功能</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        return super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure><p>⚠️ : 以上是Django rest framework框架基本流程,重要的功能是在APIView的dispatch中触发,也是框架的源码入口</p><h3 id="3-2-认证和授权"><a href="#3-2-认证和授权" class="headerlink" title="3.2 认证和授权"></a>3.2 认证和授权</h3><h4 id="3-2-1-基于token的验证"><a href="#3-2-1-基于token的验证" class="headerlink" title="3.2.1 基于token的验证"></a>3.2.1 基于token的验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat models.py </span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class UserInfo(models.Model):</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;64)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserToken(models.Model):</span><br><span class="line">    user &#x3D; models.OneToOneField(&#39;UserInfo&#39;, on_delete&#x3D;True)</span><br><span class="line">    token &#x3D; models.CharField(max_length&#x3D;64)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ cat views.py</span><br><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from app01 import models</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line">class AuthView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []    # 登录认证接口覆盖默认的toekn认证类</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        response &#x3D; &#123;&#39;code&#39;: 1000&#125;</span><br><span class="line">        user &#x3D; request.data.get(&#39;username&#39;)</span><br><span class="line">        pwd &#x3D; request.data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;user, password&#x3D;pwd).first()</span><br><span class="line">        if not obj:</span><br><span class="line">            response[&#39;code&#39;] &#x3D; 1001</span><br><span class="line">            response[&#39;msg&#39;] &#x3D; &#39;用户或密码错误&#39;</span><br><span class="line">            return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            response[&#39;token&#39;] &#x3D; token</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">        return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return HttpResponse(&#39;user.get: %s&#39; % request.user)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&#39;user.post&#39;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;auth.py</span><br><span class="line"></span><br><span class="line">from rest_framework.authentication import BaseAuthentication</span><br><span class="line">from rest_framework.exceptions import AuthenticationFailed</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line">class TokenAuthtication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        (user,auth) 表示认证成功,并将元组分别赋值给request.user&#x2F;request.auth</span><br><span class="line">        :raise AuthenticationFailed(&#39;认证失败&#39;)  表示认证失败</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        token &#x3D; request.query_params.get(&#39;token&#39;)</span><br><span class="line">        if not token:</span><br><span class="line">            raise AuthenticationFailed(&quot;用户Token未携带&quot;)</span><br><span class="line"></span><br><span class="line">        token_obj &#x3D; models.UserToken.objects.filter(token&#x3D;token).first()</span><br><span class="line">        if not token_obj:</span><br><span class="line">            raise AuthenticationFailed(&quot;Token已失效或错误&quot;)</span><br><span class="line">        return (token_obj.user.username, token_obj)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat settings.py</span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: [&#39;app01.utils.auth.TokenAuthtication&#39;, ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证:</p><ol><li>首先在数据库中构造请求登录的用户名密码</li><li>构造数据获取token信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST \</span><br><span class="line">&gt;   http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;auth&#x2F; \</span><br><span class="line">&gt;   -H &#39;Cache-Control: no-cache&#39; \</span><br><span class="line">&gt;   -H &#39;Content-Type: application&#x2F;json&#39; \</span><br><span class="line">&gt;   -H &#39;Postman-Token: 8439ce0a-94ff-3970-c8c2-4c6bc200bb4f&#39; \</span><br><span class="line">&gt;   -d &#39;&#123;&quot;username&quot;: &quot;eric&quot;,&quot;password&quot;:&quot;123&quot;&#125;&#39;</span><br><span class="line">返回:</span><br><span class="line">&#123;&quot;code&quot;: 1000, &quot;token&quot;: &quot;4c90f696-008b-4e30-86fa-4b00b6fc9237&quot;&#125;</span><br></pre></td></tr></table></figure></li><li>携带token访问user接口,获取用户信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &#39;http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;user&#x2F;?token&#x3D;4c90f696-008b-4e30-86fa-4b00b6fc9237&#39; \</span><br><span class="line">&gt;   -H &#39;Cache-Control: no-cache&#39; \</span><br><span class="line">&gt;   -H &#39;Postman-Token: 1b4125ad-7ad1-1cca-70fd-6a00cca16d96&#39;</span><br><span class="line">返回:</span><br><span class="line">user.get: eric</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-2-2-基于请求头认证"><a href="#3-2-2-基于请求头认证" class="headerlink" title="3.2.2 基于请求头认证"></a>3.2.2 基于请求头认证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;auth.py</span><br><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;6&#x2F;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from rest_framework.authentication import BaseAuthentication</span><br><span class="line">from rest_framework.exceptions import AuthenticationFailed</span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line">class HeaderAuthentication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        用户认证，如果验证成功后返回元组： (用户,用户Token)</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">            None,表示跳过该验证；</span><br><span class="line">                如果跳过了所有认证，默认用户和Token和使用配置文件进行设置</span><br><span class="line">                self._authenticator &#x3D; None</span><br><span class="line">                if api_settings.UNAUTHENTICATED_USER:</span><br><span class="line">                    self.user &#x3D; api_settings.UNAUTHENTICATED_USER()</span><br><span class="line">                else:</span><br><span class="line">                    self.user &#x3D; None</span><br><span class="line"></span><br><span class="line">                if api_settings.UNAUTHENTICATED_TOKEN:</span><br><span class="line">                    self.auth &#x3D; api_settings.UNAUTHENTICATED_TOKEN()</span><br><span class="line">                else:</span><br><span class="line">                    self.auth &#x3D; None</span><br><span class="line">            (user,token)表示验证通过并设置用户名和Token；</span><br><span class="line">            AuthenticationFailed异常</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        import base64</span><br><span class="line">        import uuid</span><br><span class="line">        auth &#x3D; request.META.get(&#39;HTTP_AUTHORIZATION&#39;, b&#39;&#39;)</span><br><span class="line">        if auth:</span><br><span class="line">            auth &#x3D; auth.encode(&#39;utf-8&#39;)</span><br><span class="line">        auth &#x3D; auth.split()</span><br><span class="line">        if not auth or auth[0].lower() !&#x3D; b&#39;basic&#39;:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        if len(auth) !&#x3D; 2:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        username, part, password &#x3D; base64.b64decode(auth[1]).decode(&#39;utf-8&#39;).partition(&#39;:&#39;)</span><br><span class="line">        try:</span><br><span class="line">            obj &#x3D; models.UserInfo.objects.filter(username&#x3D;username, password&#x3D;password).first()</span><br><span class="line">            if not obj:</span><br><span class="line">                raise exceptions.AuthenticationFailed(&#39;用户名或密码错误&#39;)</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            token_obj, status &#x3D; models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            return (token_obj.user.username, token_obj)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line"></span><br><span class="line">    def authenticate_header(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Return a string to be used as the value of the &#96;WWW-Authenticate&#96;</span><br><span class="line">        header in a &#96;401 Unauthenticated&#96; response, or &#96;None&#96; if the</span><br><span class="line">        authentication scheme should return &#96;403 Permission Denied&#96; responses.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return &#39;Basic realm&#x3D;api&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ cat views.py</span><br><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from app01.utils.auth import HeaderAuthentication</span><br><span class="line">from app01 import models</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AuthView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        response &#x3D; &#123;&#39;code&#39;: 1000&#125;</span><br><span class="line">        user &#x3D; request.data.get(&#39;username&#39;)</span><br><span class="line">        pwd &#x3D; request.data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;user, password&#x3D;pwd).first()</span><br><span class="line">        if not obj:</span><br><span class="line">            response[&#39;code&#39;] &#x3D; 1001</span><br><span class="line">            response[&#39;msg&#39;] &#x3D; &#39;用户或密码错误&#39;</span><br><span class="line">            return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            response[&#39;token&#39;] &#x3D; token</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">        return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    authentication_classes &#x3D; [HeaderAuthentication, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return HttpResponse(&#39;user.get: %s,token: %s&#39; % (request.user, request.auth))</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&#39;user.post&#39;)</span><br></pre></td></tr></table></figure><p>验证:</p><ol><li>首先在数据库中构造请求登录的用户名密码</li><li>构造数据获取token信息,建议使用postman进行构造测试<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET \</span><br><span class="line">  http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;user&#x2F; \</span><br><span class="line">  -H &#39;Authorization: Basic c2h1a2U6MTIz&#39; \</span><br><span class="line">  -H &#39;Cache-Control: no-cache&#39; \</span><br><span class="line">  -H &#39;Postman-Token: ba3f99ce-da6a-7e5f-3e0b-3c79129ecca1&#39;</span><br><span class="line">返回:</span><br><span class="line">user.get: shuke,token: 2d3af34a-1598-4d5a-af56-7f29a706a26e</span><br></pre></td></tr></table></figure><h4 id="3-2-3-多个认证规则"><a href="#3-2-3-多个认证规则" class="headerlink" title="3.2.3 多个认证规则"></a>3.2.3 多个认证规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;auth.py</span><br><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;6&#x2F;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from rest_framework.authentication import BaseAuthentication</span><br><span class="line">from rest_framework.exceptions import AuthenticationFailed</span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TokenAuthtication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        (user,auth) 表示认证成功,并将元组分别赋值给request.user&#x2F;request.auth</span><br><span class="line">        :raise AuthenticationFailed(&#39;认证失败&#39;)  表示认证失败</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        token &#x3D; request.query_params.get(&#39;token&#39;)</span><br><span class="line">        if not token:</span><br><span class="line">            raise AuthenticationFailed(&quot;用户Token未携带&quot;)</span><br><span class="line"></span><br><span class="line">        token_obj &#x3D; models.UserToken.objects.filter(token&#x3D;token).first()</span><br><span class="line">        if not token_obj:</span><br><span class="line">            raise AuthenticationFailed(&quot;Token已失效或错误&quot;)</span><br><span class="line">        return (token_obj.user.username, token_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HeaderAuthentication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        用户认证，如果验证成功后返回元组： (用户,用户Token)</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">            None,表示跳过该验证；</span><br><span class="line">                如果跳过了所有认证，默认用户和Token和使用配置文件进行设置</span><br><span class="line">                self._authenticator &#x3D; None</span><br><span class="line">                if api_settings.UNAUTHENTICATED_USER:</span><br><span class="line">                    self.user &#x3D; api_settings.UNAUTHENTICATED_USER()</span><br><span class="line">                else:</span><br><span class="line">                    self.user &#x3D; None</span><br><span class="line"></span><br><span class="line">                if api_settings.UNAUTHENTICATED_TOKEN:</span><br><span class="line">                    self.auth &#x3D; api_settings.UNAUTHENTICATED_TOKEN()</span><br><span class="line">                else:</span><br><span class="line">                    self.auth &#x3D; None</span><br><span class="line">            (user,token)表示验证通过并设置用户名和Token；</span><br><span class="line">            AuthenticationFailed异常</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        import base64</span><br><span class="line">        import uuid</span><br><span class="line">        auth &#x3D; request.META.get(&#39;HTTP_AUTHORIZATION&#39;, b&#39;&#39;)</span><br><span class="line">        if auth:</span><br><span class="line">            auth &#x3D; auth.encode(&#39;utf-8&#39;)</span><br><span class="line">        auth &#x3D; auth.split()</span><br><span class="line">        if not auth or auth[0].lower() !&#x3D; b&#39;basic&#39;:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        if len(auth) !&#x3D; 2:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        username, part, password &#x3D; base64.b64decode(auth[1]).decode(&#39;utf-8&#39;).partition(&#39;:&#39;)</span><br><span class="line">        try:</span><br><span class="line">            obj &#x3D; models.UserInfo.objects.filter(username&#x3D;username, password&#x3D;password).first()</span><br><span class="line">            if not obj:</span><br><span class="line">                raise exceptions.AuthenticationFailed(&#39;用户名或密码错误&#39;)</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            token_obj, status &#x3D; models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            return (token_obj.user.username, token_obj)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line"></span><br><span class="line">    def authenticate_header(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Return a string to be used as the value of the &#96;WWW-Authenticate&#96;</span><br><span class="line">        header in a &#96;401 Unauthenticated&#96; response, or &#96;None&#96; if the</span><br><span class="line">        authentication scheme should return &#96;403 Permission Denied&#96; responses.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return &#39;Basic realm&#x3D;api&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ cat views.py</span><br><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from app01.utils.auth import HeaderAuthentication, TokenAuthtication</span><br><span class="line">from app01 import models</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AuthView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        response &#x3D; &#123;&#39;code&#39;: 1000&#125;</span><br><span class="line">        user &#x3D; request.data.get(&#39;username&#39;)</span><br><span class="line">        pwd &#x3D; request.data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;user, password&#x3D;pwd).first()</span><br><span class="line">        if not obj:</span><br><span class="line">            response[&#39;code&#39;] &#x3D; 1001</span><br><span class="line">            response[&#39;msg&#39;] &#x3D; &#39;用户或密码错误&#39;</span><br><span class="line">            return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            response[&#39;token&#39;] &#x3D; token</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">        return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    authentication_classes &#x3D; [HeaderAuthentication, TokenAuthtication]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return HttpResponse(&#39;user.get: %s,token: %s&#39; % (request.user, request.auth))</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&#39;user.post&#39;)</span><br></pre></td></tr></table></figure>验证:</li><li>首先在数据库中构造请求登录的用户名密码</li><li>构造数据获取token信息,建议使用postman进行构造测试<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET \</span><br><span class="line">  http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;user&#x2F; \</span><br><span class="line">  -H &#39;Authorization: Basic c2h1a2U6MTIz&#39; \</span><br><span class="line">  -H &#39;Cache-Control: no-cache&#39; \</span><br><span class="line">  -H &#39;Postman-Token: f91805b7-c742-b713-0010-c75cdbfbb24a&#39;</span><br><span class="line">返回:</span><br><span class="line">user.get: shuke,token: 9c3ca96a-ac03-4207-aaec-20433bae6058</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-2-4-认证和权限"><a href="#3-2-4-认证和权限" class="headerlink" title="3.2.4 认证和权限"></a>3.2.4 认证和权限</h4><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>model</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserInfo(models.Model):</span><br><span class="line">    user_type_choices &#x3D; (</span><br><span class="line">        (1, &#39;普通用户&#39;),</span><br><span class="line">        (2, &#39;管理员&#39;),</span><br><span class="line">        (3, &#39;超级管理员&#39;),</span><br><span class="line">    )</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;64)</span><br><span class="line">    user_type &#x3D; models.IntegerField(choices&#x3D;user_type_choices, default&#x3D;1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserToken(models.Model):</span><br><span class="line">    user &#x3D; models.OneToOneField(&#39;UserInfo&#39;, on_delete&#x3D;True)</span><br><span class="line">    token &#x3D; models.CharField(max_length&#x3D;64)</span><br></pre></td></tr></table></figure><p>认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;auth.py</span><br><span class="line"></span><br><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;6&#x2F;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from rest_framework.authentication import BaseAuthentication</span><br><span class="line">from rest_framework.exceptions import AuthenticationFailed</span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TokenAuthtication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        (user,auth) 表示认证成功,并将元组分别赋值给request.user&#x2F;request.auth</span><br><span class="line">        :raise AuthenticationFailed(&#39;认证失败&#39;)  表示认证失败</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        token &#x3D; request.query_params.get(&#39;token&#39;)</span><br><span class="line">        if not token:</span><br><span class="line">            raise AuthenticationFailed(&quot;用户Token未携带&quot;)</span><br><span class="line"></span><br><span class="line">        token_obj &#x3D; models.UserToken.objects.filter(token&#x3D;token).first()</span><br><span class="line">        if not token_obj:</span><br><span class="line">            raise AuthenticationFailed(&quot;Token已失效或错误&quot;)</span><br><span class="line">        return (token_obj.user.username, token_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HeaderAuthentication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        用户认证，如果验证成功后返回元组： (用户,用户Token)</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">            None,表示跳过该验证；</span><br><span class="line">                如果跳过了所有认证，默认用户和Token和使用配置文件进行设置</span><br><span class="line">                self._authenticator &#x3D; None</span><br><span class="line">                if api_settings.UNAUTHENTICATED_USER:</span><br><span class="line">                    self.user &#x3D; api_settings.UNAUTHENTICATED_USER()</span><br><span class="line">                else:</span><br><span class="line">                    self.user &#x3D; None</span><br><span class="line"></span><br><span class="line">                if api_settings.UNAUTHENTICATED_TOKEN:</span><br><span class="line">                    self.auth &#x3D; api_settings.UNAUTHENTICATED_TOKEN()</span><br><span class="line">                else:</span><br><span class="line">                    self.auth &#x3D; None</span><br><span class="line">            (user,token)表示验证通过并设置用户名和Token；</span><br><span class="line">            AuthenticationFailed异常</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        import base64</span><br><span class="line">        import uuid</span><br><span class="line">        auth &#x3D; request.META.get(&#39;HTTP_AUTHORIZATION&#39;, b&#39;&#39;)</span><br><span class="line">        if auth:</span><br><span class="line">            auth &#x3D; auth.encode(&#39;utf-8&#39;)</span><br><span class="line">        auth &#x3D; auth.split()</span><br><span class="line">        if not auth or auth[0].lower() !&#x3D; b&#39;basic&#39;:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        if len(auth) !&#x3D; 2:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        username, part, password &#x3D; base64.b64decode(auth[1]).decode(&#39;utf-8&#39;).partition(&#39;:&#39;)</span><br><span class="line">        try:</span><br><span class="line">            obj &#x3D; models.UserInfo.objects.filter(username&#x3D;username, password&#x3D;password).first()</span><br><span class="line">            if not obj:</span><br><span class="line">                raise exceptions.AuthenticationFailed(&#39;用户名或密码错误&#39;)</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            token_obj, status &#x3D; models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            return (token_obj.user.username, token_obj)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line"></span><br><span class="line">    def authenticate_header(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Return a string to be used as the value of the &#96;WWW-Authenticate&#96;</span><br><span class="line">        header in a &#96;401 Unauthenticated&#96; response, or &#96;None&#96; if the</span><br><span class="line">        authentication scheme should return &#96;403 Permission Denied&#96; responses.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return &#39;Basic realm&#x3D;api&#39;</span><br></pre></td></tr></table></figure><p>权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;permission.py</span><br><span class="line"></span><br><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;6&#x2F;3</span><br><span class="line">from rest_framework.permissions import BasePermission</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserPermission(BasePermission):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    权限验证</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def has_permission(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        判断是否有权限访问当前请求</span><br><span class="line">        Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.</span><br><span class="line">        :param request:</span><br><span class="line">        :param view:</span><br><span class="line">        :return: True有权限；False无权限</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        user_type_id &#x3D; request.auth.user.user_type</span><br><span class="line">        if user_type_id &gt; 0:</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    # GenericAPIView中get_object时调用</span><br><span class="line">    def has_object_permission(self, request, view, obj):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        视图继承GenericAPIView，并在其中使用get_object时获取对象时，触发单独对象权限验证</span><br><span class="line">        Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.</span><br><span class="line">        :param request:</span><br><span class="line">        :param view:</span><br><span class="line">        :param obj:</span><br><span class="line">        :return: True有权限；False无权限</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        user_type_id &#x3D; request.auth.user.user_type</span><br><span class="line">        if user_type_id &gt; 0:</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ManagerPermission(BasePermission):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    视图继承GenericAPIView，并在其中使用get_object时获取对象时，触发单独对象权限验证</span><br><span class="line">    Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.</span><br><span class="line">    :param request:</span><br><span class="line">    :param view:</span><br><span class="line">    :param obj:</span><br><span class="line">    :return: True有权限；False无权限</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def has_permission(self, request, view):</span><br><span class="line">        user_type_id &#x3D; request.auth.user.user_type</span><br><span class="line">        if user_type_id &gt; 1:</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    # GenericAPIView中get_object时调用</span><br><span class="line">    def has_object_permission(self, request, view, obj):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        视图继承GenericAPIView，并在其中使用get_object时获取对象时，触发单独对象权限验证</span><br><span class="line">        Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.</span><br><span class="line">        :param request:</span><br><span class="line">        :param view:</span><br><span class="line">        :param obj:</span><br><span class="line">        :return: True有权限；False无权限</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        user_type_id &#x3D; request.auth.user.user_type</span><br><span class="line">        if user_type_id &gt; 1:</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure><p>试图函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from app01.utils.auth import HeaderAuthentication, TokenAuthtication</span><br><span class="line">from app01.utils.permission import UserPermission, ManagerPermission</span><br><span class="line">from app01 import models</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AuthView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        response &#x3D; &#123;&#39;code&#39;: 1000&#125;</span><br><span class="line">        user &#x3D; request.data.get(&#39;username&#39;)</span><br><span class="line">        pwd &#x3D; request.data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;user, password&#x3D;pwd).first()</span><br><span class="line">        if not obj:</span><br><span class="line">            response[&#39;code&#39;] &#x3D; 1001</span><br><span class="line">            response[&#39;msg&#39;] &#x3D; &#39;用户或密码错误&#39;</span><br><span class="line">            return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            response[&#39;token&#39;] &#x3D; token</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">        return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    # 认证的动作是由request.user触发</span><br><span class="line">    authentication_classes &#x3D; [HeaderAuthentication, TokenAuthtication]</span><br><span class="line"></span><br><span class="line">    # 循环执行所有的权限,当前试图只允许管理员以上权限访问</span><br><span class="line">    permission_classes &#x3D; [ManagerPermission, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return HttpResponse(&#39;user.get: %s,token: %s&#39; % (request.user, request.auth))</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&#39;user.post&#39;)</span><br></pre></td></tr></table></figure><p>验证:<br><img src="https://note.youdao.com/yws/api/personal/file/WEB9df3ae98ed15b4c4725de0cc826fabe9?method=download&shareKey=f430295de0aa74cb2fa4f45b94d245ec" alt="无访问权限"><br><img src="https://note.youdao.com/yws/api/personal/file/WEBfa5e5818486654600b9b0563e7d4c262?method=download&shareKey=a547b0c96cdd95d95323c1fdbb9b2294" alt="有访问权限"></p><p>全局应用权限<br>上述操作中均是对单独视图进行特殊配置，如果想要对全局进行配置，则需要再配置文件中写入即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;UNAUTHENTICATED_USER&#39;: None,</span><br><span class="line">    &#39;UNAUTHENTICATED_TOKEN&#39;: None,</span><br><span class="line">    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: [&#39;app01.utils.auth.HeaderAuthentication&#39;, ],</span><br><span class="line">    &quot;DEFAULT_PERMISSION_CLASSES&quot;: [</span><br><span class="line">        &quot;app01.utils.permission.ManagerPermission&quot;,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ cat views.py</span><br><span class="line"></span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure><h3 id="3-3-用户访问次数-频率限制"><a href="#3-3-用户访问次数-频率限制" class="headerlink" title="3.3 用户访问次数/频率限制"></a>3.3 用户访问次数/频率限制</h3><h4 id="3-3-1-基于用户IP访问限制频率"><a href="#3-3-1-基于用户IP访问限制频率" class="headerlink" title="3.3.1 基于用户IP访问限制频率"></a>3.3.1 基于用户IP访问限制频率</h4><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import time</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from rest_framework.throttling import BaseThrottle</span><br><span class="line">from rest_framework.settings import api_settings</span><br><span class="line"></span><br><span class="line"># 保存访问记录</span><br><span class="line">RECORD &#x3D; &#123;</span><br><span class="line">    &#39;用户IP&#39;: [12312139, 12312135, 12312133, ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestThrottle(BaseThrottle):</span><br><span class="line">    ctime &#x3D; time.time</span><br><span class="line"></span><br><span class="line">    def get_ident(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        根据用户IP和代理IP，当做请求者的唯一IP</span><br><span class="line">        Identify the machine making the request by parsing HTTP_X_FORWARDED_FOR</span><br><span class="line">        if present and number of proxies is &gt; 0. If not use all of</span><br><span class="line">        HTTP_X_FORWARDED_FOR if it is available, if not use REMOTE_ADDR.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        xff &#x3D; request.META.get(&#39;HTTP_X_FORWARDED_FOR&#39;)</span><br><span class="line">        remote_addr &#x3D; request.META.get(&#39;REMOTE_ADDR&#39;)</span><br><span class="line">        num_proxies &#x3D; api_settings.NUM_PROXIES</span><br><span class="line"></span><br><span class="line">        if num_proxies is not None:</span><br><span class="line">            if num_proxies &#x3D;&#x3D; 0 or xff is None:</span><br><span class="line">                return remote_addr</span><br><span class="line">            addrs &#x3D; xff.split(&#39;,&#39;)</span><br><span class="line">            client_addr &#x3D; addrs[-min(num_proxies, len(addrs))]</span><br><span class="line">            return client_addr.strip()</span><br><span class="line"></span><br><span class="line">        return &#39;&#39;.join(xff.split()) if xff else remote_addr</span><br><span class="line"></span><br><span class="line">    def allow_request(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        是否仍然在允许范围内</span><br><span class="line">        Return &#96;True&#96; if the request should be allowed, &#96;False&#96; otherwise.</span><br><span class="line">        :param request: </span><br><span class="line">        :param view: </span><br><span class="line">        :return: True，表示可以通过；False表示已超过限制，不允许访问</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 获取用户唯一标识（如：IP）</span><br><span class="line"></span><br><span class="line">        # 允许一分钟访问10次</span><br><span class="line">        num_request &#x3D; 10</span><br><span class="line">        time_request &#x3D; 60</span><br><span class="line"></span><br><span class="line">        now &#x3D; self.ctime()</span><br><span class="line">        ident &#x3D; self.get_ident(request)</span><br><span class="line">        self.ident &#x3D; ident</span><br><span class="line">        if ident not in RECORD:</span><br><span class="line">            RECORD[ident] &#x3D; [now, ]</span><br><span class="line">            return True</span><br><span class="line">        history &#x3D; RECORD[ident]</span><br><span class="line">        while history and history[-1] &lt;&#x3D; now - time_request:</span><br><span class="line">            history.pop()</span><br><span class="line">        if len(history) &lt; num_request:</span><br><span class="line">            history.insert(0, now)</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">    def wait(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        多少秒后可以允许继续访问</span><br><span class="line">        Optionally, return a recommended number of seconds to wait before</span><br><span class="line">        the next request.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        last_time &#x3D; RECORD[self.ident][0]</span><br><span class="line">        now &#x3D; self.ctime()</span><br><span class="line">        return int(60 + last_time - now)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    throttle_classes &#x3D; [TestThrottle, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def throttled(self, request, wait):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        访问次数被限制时，定制错误信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        class Throttled(exceptions.Throttled):</span><br><span class="line">            default_detail &#x3D; &#39;请求被限制.&#39;</span><br><span class="line">            extra_detail_singular &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line">            extra_detail_plural &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line">            </span><br><span class="line">        raise Throttled(wait)</span><br></pre></td></tr></table></figure><h4 id="3-3-2-基于用户IP控制访问频率-利用Django缓存"><a href="#3-3-2-基于用户IP控制访问频率-利用Django缓存" class="headerlink" title="3.3.2 基于用户IP控制访问频率(利用Django缓存)"></a>3.3.2 基于用户IP控制访问频率(利用Django缓存)</h4><p>全局配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;test_scope&#39;: &#39;10&#x2F;m&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from rest_framework.throttling import SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestThrottle(SimpleRateThrottle):</span><br><span class="line"></span><br><span class="line">    # 配置文件定义的显示频率的Key</span><br><span class="line">    scope &#x3D; &quot;test_scope&quot;</span><br><span class="line"></span><br><span class="line">    def get_cache_key(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Should return a unique cache-key which can be used for throttling.</span><br><span class="line">        Must be overridden.</span><br><span class="line"></span><br><span class="line">        May return &#96;None&#96; if the request should not be throttled.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not request.user:</span><br><span class="line">            ident &#x3D; self.get_ident(request)</span><br><span class="line">        else:</span><br><span class="line">            ident &#x3D; request.user</span><br><span class="line"></span><br><span class="line">        return self.cache_format % &#123;</span><br><span class="line">            &#39;scope&#39;: self.scope,</span><br><span class="line">            &#39;ident&#39;: ident</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    throttle_classes &#x3D; [TestThrottle, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def throttled(self, request, wait):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        访问次数被限制时，定制错误信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        class Throttled(exceptions.Throttled):</span><br><span class="line">            default_detail &#x3D; &#39;请求被限制.&#39;</span><br><span class="line">            extra_detail_singular &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line">            extra_detail_plural &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line"></span><br><span class="line">        raise Throttled(wait)</span><br></pre></td></tr></table></figure><h4 id="3-3-3-在试图中限制请求频率"><a href="#3-3-3-在试图中限制请求频率" class="headerlink" title="3.3.3 在试图中限制请求频率"></a>3.3.3 在试图中限制请求频率</h4><p>全局配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;request_scope&#39;: &#39;10&#x2F;m&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from rest_framework.throttling import ScopedRateThrottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 继承 ScopedRateThrottle</span><br><span class="line">class TestThrottle(ScopedRateThrottle):</span><br><span class="line"></span><br><span class="line">    def get_cache_key(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Should return a unique cache-key which can be used for throttling.</span><br><span class="line">        Must be overridden.</span><br><span class="line"></span><br><span class="line">        May return &#96;None&#96; if the request should not be throttled.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not request.user:</span><br><span class="line">            ident &#x3D; self.get_ident(request)</span><br><span class="line">        else:</span><br><span class="line">            ident &#x3D; request.user</span><br><span class="line"></span><br><span class="line">        return self.cache_format % &#123;</span><br><span class="line">            &#39;scope&#39;: self.scope,</span><br><span class="line">            &#39;ident&#39;: ident</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    throttle_classes &#x3D; [TestThrottle, ]</span><br><span class="line"></span><br><span class="line">    # 在settings中获取 xxxxxx 对应的频率限制值</span><br><span class="line">    throttle_scope &#x3D; &quot;xxxxxx&quot;</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def throttled(self, request, wait):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        访问次数被限制时，定制错误信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        class Throttled(exceptions.Throttled):</span><br><span class="line">            default_detail &#x3D; &#39;请求被限制.&#39;</span><br><span class="line">            extra_detail_singular &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line">            extra_detail_plural &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line"></span><br><span class="line">        raise Throttled(wait)</span><br></pre></td></tr></table></figure><h4 id="3-3-4-匿名时用IP限制-登录时用Token限制"><a href="#3-3-4-匿名时用IP限制-登录时用Token限制" class="headerlink" title="3.3.4 匿名时用IP限制+登录时用Token限制"></a>3.3.4 匿名时用IP限制+登录时用Token限制</h4><p>全局配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;UNAUTHENTICATED_USER&#39;: None,</span><br><span class="line">    &#39;UNAUTHENTICATED_TOKEN&#39;: None,</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;backend_anon&#39;: &#39;10&#x2F;m&#39;,</span><br><span class="line">        &#39;backend_user&#39;: &#39;20&#x2F;m&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views.s3_throttling import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># !&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from rest_framework.throttling import SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BackendAnonRateThrottle(SimpleRateThrottle):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    匿名用户，根据IP进行限制</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    scope &#x3D; &quot;backend_anon&quot;</span><br><span class="line"></span><br><span class="line">    def get_cache_key(self, request, view):</span><br><span class="line">        # 用户已登录，则跳过 匿名频率限制</span><br><span class="line">        if request.user:</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        return self.cache_format % &#123;</span><br><span class="line">            &#39;scope&#39;: self.scope,</span><br><span class="line">            &#39;ident&#39;: self.get_ident(request)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BackendUserRateThrottle(SimpleRateThrottle):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    登录用户，根据用户token限制</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    scope &#x3D; &quot;backend_user&quot;</span><br><span class="line"></span><br><span class="line">    def get_ident(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        认证成功时：request.user是用户对象；request.auth是token对象</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # return request.auth.token</span><br><span class="line">        return &quot;user_token&quot;</span><br><span class="line"></span><br><span class="line">    def get_cache_key(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        获取缓存key</span><br><span class="line">        :param request:</span><br><span class="line">        :param view:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 未登录用户，则跳过 Token限制</span><br><span class="line">        if not request.user:</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        return self.cache_format % &#123;</span><br><span class="line">            &#39;scope&#39;: self.scope,</span><br><span class="line">            &#39;ident&#39;: self.get_ident(request)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    throttle_classes &#x3D; [BackendAnonRateThrottle, BackendUserRateThrottle, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure><h4 id="3-3-5-全局使用"><a href="#3-3-5-全局使用" class="headerlink" title="3.3.5 全局使用"></a>3.3.5 全局使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_THROTTLE_CLASSES&#39;: [</span><br><span class="line">        &#39;api.utils.throttles.throttles.BackendAnonRateThrottle&#39;,</span><br><span class="line">        &#39;api.utils.throttles.throttles.BackendUserRateThrottle&#39;,</span><br><span class="line">    ],</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;anon&#39;: &#39;10&#x2F;day&#39;,</span><br><span class="line">        &#39;user&#39;: &#39;10&#x2F;day&#39;,</span><br><span class="line">        &#39;backend_anon&#39;: &#39;10&#x2F;m&#39;,</span><br><span class="line">        &#39;backend_user&#39;: &#39;20&#x2F;m&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-版本"><a href="#3-4-版本" class="headerlink" title="3.4 版本"></a>3.4 版本</h3><p>共6个类</p><ol><li>BaseVersioning</li><li>AcceptHeaderVersioning</li><li>URLPathVersioning</li><li>NamespaceVersioning</li><li>HostNameVersioning</li><li>QueryParameterVersioning<br>而且还可以看到BaseVersioning类是其余5个类的父类,并且这其余的5个类,每个类中都有一个determine_version方法,在项目的视图函数中导入其中任意一个类,打印versioning_class<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render,HttpResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from django.views import View</span><br><span class="line">from rest_framework.versioning import QueryParameterVersioning</span><br><span class="line"></span><br><span class="line">class UsersView(APIView):</span><br><span class="line">    versioning_class&#x3D;QueryParameterVersioning</span><br><span class="line"></span><br><span class="line">    def get(self,request,*args,**kwargs):</span><br><span class="line">        print(self.versioning_class)        #打印versioning_class</span><br><span class="line"></span><br><span class="line">        return HttpResponse(&quot;aaaa&quot;)</span><br></pre></td></tr></table></figure>输出结果:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;rest_framework.versioning.QueryParameterVersioning&#39;&gt;</span><br></pre></td></tr></table></figure>所以versioning_class是一个类,并且versioning_class类中有一个determine_version方法</li></ol><h4 id="3-4-1-基于URL的GET传参方式"><a href="#3-4-1-基于URL的GET传参方式" class="headerlink" title="3.4.1 基于URL的GET传参方式"></a>3.4.1 基于URL的GET传参方式</h4><p>如：/users?version=v1<br>全局配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,            # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],   # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;          # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line">from app01.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import QueryParameterVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    versioning_class &#x3D; QueryParameterVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line"></span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure><h4 id="3-4-2-基于URL的正则方式"><a href="#3-4-2-基于URL的正则方式" class="headerlink" title="3.4.2 基于URL的正则方式"></a>3.4.2 基于URL的正则方式</h4><p>如: /v1/users/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,            # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],   # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;          # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^(?P&lt;version&gt;[v1|v2]+)&#x2F;test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import URLPathVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    versioning_class &#x3D; URLPathVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line"></span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure><h4 id="3-4-3-基于accept请求头方式"><a href="#3-4-3-基于accept请求头方式" class="headerlink" title="3.4.3 基于accept请求头方式"></a>3.4.3 基于accept请求头方式</h4><p>如：Accept: application/json; version=1.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,            # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],   # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;          # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># !&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import AcceptHeaderVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    versioning_class &#x3D; AcceptHeaderVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本 HTTP_ACCEPT头</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容,基于Accept请求头方式&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容，基于Accept请求头方式&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容，基于Accept请求头方式&#39;)</span><br></pre></td></tr></table></figure><h4 id="3-4-4-基于主机名方式"><a href="#3-4-4-基于主机名方式" class="headerlink" title="3.4.4 基于主机名方式"></a>3.4.4 基于主机名方式</h4><p>如: v1.example.com</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS &#x3D; [&#39;*&#39;]</span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,  # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],  # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;  # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># !&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import HostNameVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    versioning_class &#x3D; HostNameVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容,基于主机名方式&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容,基于主机名方式&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容,基于主机名方式&#39;)</span><br></pre></td></tr></table></figure><h4 id="3-4-5-基于Django路由系统的namespace"><a href="#3-4-5-基于Django路由系统的namespace" class="headerlink" title="3.4.5 基于Django路由系统的namespace"></a>3.4.5 基于Django路由系统的namespace</h4><p>如: example.com/v1/users/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,  # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],  # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;  # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from app01.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^v1&#x2F;&#39;, ([</span><br><span class="line">                      url(r&#39;test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test1&#39;)</span><br><span class="line">                  ], None, &#39;v1&#39;)),</span><br><span class="line">    url(r&#39;^v2&#x2F;&#39;, ([</span><br><span class="line">                      url(r&#39;test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test2&#39;)</span><br><span class="line">                  ], None, &#39;v2&#39;)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>试图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># !&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import NamespaceVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []</span><br><span class="line">    permission_classes &#x3D; []</span><br><span class="line">    versioning_class &#x3D; NamespaceVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test1&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容,基于Django路由系统的namespace&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容,基于Django路由系统的namespace&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容,基于Django路由系统的namespace&#39;)</span><br><span class="line">&#96;&#96;&#96;        </span><br><span class="line">#### 3.4.6 全局应用</span><br></pre></td></tr></table></figure><p>REST_FRAMEWORK = {<br>    ‘DEFAULT_VERSIONING_CLASS’:”rest_framework.versioning.URLPathVersioning”,<br>    ‘DEFAULT_VERSION’: ‘v1’,<br>    ‘ALLOWED_VERSIONS’: [‘v1’, ‘v2’],<br>    ‘VERSION_PARAM’: ‘version’<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#### 3.4.7 自定义版本控制方案</span><br><span class="line">要实现自定义版本控制方案，请继承 BaseVersioning并覆盖 .determine_version 方法。</span><br><span class="line">举个栗子</span><br><span class="line">以下示例使用自定义的 X-API-Version header 来确定所请求的版本</span><br></pre></td></tr></table></figure><p>class XAPIVersionScheme(versioning.BaseVersioning):<br>    def determine_version(self, request, <em>args, *</em>kwargs):<br>        return request.META.get(‘HTTP_X_API_VERSION’, None)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果你的版本控制方案基于请求 URL，则还需要更改版本化 URL 的确定方式。为了做到这一点，你应该重写类的 .reverse()方法。有关示例，请参阅源代码。</span><br><span class="line"></span><br><span class="line">### 3.5 解析器(parser)</span><br><span class="line">根据请求头content-type选择对应的解析器就请求体内容进行处理</span><br><span class="line">#### 3.5.1 仅处理请求头content-type为application&#x2F;json的请求体</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views.s5_parser import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python"><a href="#usr-bin-env-python" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.parsers import JSONParser</p><p>class TestView(APIView):<br>    parser_classes = [JSONParser, ]</p><pre><code>def post(self, request, *args, **kwargs):    print(request.content_type)    # 获取请求的值，并使用对应的JSONParser进行处理    print(request.data)    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值    print(request.POST)    print(request.FILES)    return Response(&apos;POST请求，请求内容: %s&apos; % request.data)def put(self, request, *args, **kwargs):    return Response(&apos;PUT请求，响应内容，解析器&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.5.2 仅处理请求头content-type为application&#x2F;x-www-form-urlencoded的请求体</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.request import Request<br>from rest_framework.parsers import FormParser</p><p>class TestView(APIView):<br>    parser_classes = [FormParser, ]</p><pre><code>def post(self, request, *args, **kwargs):    print(request.content_type)    # 获取请求的值，并使用对应的JSONParser进行处理    print(request.data)    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值    print(request.POST)    print(request.FILES)    return Response(&apos;POST请求，响应内容&apos;)def put(self, request, *args, **kwargs):    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.5.3 仅处理请求头content-type为multipart&#x2F;form-data的请求体</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-1"><a href="#usr-bin-env-python-1" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from django.shortcuts import render<br>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.parsers import MultiPartParser</p><p>class TestView(APIView):<br>    authentication_classes = []<br>    permission_classes = []<br>    parser_classes = [MultiPartParser, ]</p><pre><code>def get(self, request, *args, **kwargs):    return render(request, &apos;test.html&apos;)def post(self, request, *args, **kwargs):    print(request.content_type)    # 获取请求的值，并使用对应的JSONParser进行处理    print(request.data)    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值    print(request.POST)    print(request.FILES)    return Response(&apos;POST请求，响应内容&apos;)def put(self, request, *args, **kwargs):    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模版文件</span><br></pre></td></tr></table></figure><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title><meta name="generator" content="Hexo 4.2.0"><link rel="alternate" href="/atom.xml" title="shuke's Blog" type="application/atom+xml"></head><body><form action="http://127.0.0.1:8000/test/" method="post" enctype="multipart/form-data">    <input type="text" name="user" />    <input type="file" name="img"><pre><code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</code></pre></form></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.5.4 仅上传文件</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>from django.conf.urls import url, includefrom web.views import TestView<p>urlpatterns = [<br>    url(r’test/(?P<filename>[^/]+)’, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-2"><a href="#usr-bin-env-python-2" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-3"><a href="#coding-utf-8-3" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.parsers import FileUploadParser</p><p>class TestView(APIView):<br>    authentication_classes = []<br>    permission_classes = []<br>    parser_classes = [FileUploadParser, ]</p><pre><code>def get(self, request, *args, **kwargs):    return render(request, &apos;test.html&apos;)def post(self, request, filename, *args, **kwargs):    print(filename)    print(request.content_type)    # 获取请求的值，并使用对应的JSONParser进行处理    print(request.data)    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值    print(request.POST)    print(request.FILES)    return Response(&apos;POST请求，响应内容&apos;)def put(self, request, *args, **kwargs):    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模版文件</span><br></pre></td></tr></table></figure><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title></head><body><form action="http://127.0.0.1:8000/test/f1.numbers" method="post" enctype="multipart/form-data">    <input type="text" name="user" />    <input type="file" name="img"><pre><code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</code></pre></form></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#### 3.5.5 同时多个Parser</span><br><span class="line">当同时使用多个parser时，rest framework会根据请求头content-type自动进行比对，并使用对应parser</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>from django.conf.urls import url, includefrom web.views import TestView<p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-3"><a href="#usr-bin-env-python-3" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-4"><a href="#coding-utf-8-4" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.parsers import JSONParser, FormParser, MultiPartParser</p><p>class TestView(APIView):<br>    parser_classes = [JSONParser, FormParser, MultiPartParser, ]</p><pre><code>def post(self, request, *args, **kwargs):    print(request.content_type)    # 获取请求的值，并使用对应的JSONParser进行处理    print(request.data)    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值    print(request.POST)    print(request.FILES)    return Response(&apos;POST请求，响应内容&apos;)def put(self, request, *args, **kwargs):    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 3.5.6 全局应用</span><br></pre></td></tr></table></figure><p>REST_FRAMEWORK = {<br>    ‘DEFAULT_PARSER_CLASSES’:[<br>        ‘rest_framework.parsers.JSONParser’<br>        ‘rest_framework.parsers.FormParser’<br>        ‘rest_framework.parsers.MultiPartParser’<br>    ]</p><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-5"><a href="#coding-utf-8-5" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response</p><p>class TestView(APIView):<br>    def post(self, request, <em>args, *</em>kwargs):<br>        print(request.content_type)</p><pre><code>    # 获取请求的值，并使用对应的JSONParser进行处理    print(request.data)    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值    print(request.POST)    print(request.FILES)    return Response(&apos;POST请求，响应内容&apos;)def put(self, request, *args, **kwargs):    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">⚠️ 个别特殊的值可以通过Django的request对象 request\.\_request 来进行获取</span><br><span class="line"></span><br><span class="line">### 3.6 序列化</span><br><span class="line">序列化用于对用户请求数据进行验证和数据进行序列化</span><br><span class="line">#### 3.6.1 自定义字段</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from app01.views import TestView</p><p>urlpatterns = [<br>    url(r’^test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models</span><br></pre></td></tr></table></figure><p>from django.db import models</p><h1 id="Create-your-models-here"><a href="#Create-your-models-here" class="headerlink" title="Create your models here."></a>Create your models here.</h1><p>from django.db import models</p><p>class UserInfo(models.Model):<br>    user_type_choices = (<br>        (1, ‘普通用户’),<br>        (2, ‘管理员’),<br>        (3, ‘超级管理员’),<br>    )<br>    username = models.CharField(max_length=32)<br>    password = models.CharField(max_length=64)<br>    user_type = models.IntegerField(choices=user_type_choices, default=1)</p><p>class UserToken(models.Model):<br>    user = models.OneToOneField(‘UserInfo’, on_delete=True)<br>    token = models.CharField(max_length=64)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-4"><a href="#usr-bin-env-python-4" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-6"><a href="#coding-utf-8-6" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from . import models</p><p>class PasswordValidator(object):<br>    def <strong>init</strong>(self, base):<br>        self.base = base</p><pre><code>def __call__(self, value):    if value != self.base:        message = &apos;This field must be %s.&apos; % self.base        raise serializers.ValidationError(message)def set_context(self, serializer_field):    &quot;&quot;&quot;    This hook is called by the serializer instance,    prior to the validation call being made.    &quot;&quot;&quot;    # 执行验证之前调用,serializer_fields是当前字段对象    pass</code></pre><p>class UserSerializer(serializers.Serializer):<br>    user_type = serializers.IntegerField()<br>    username = serializers.CharField(min_length=3)<br>    password = serializers.CharField(error_messages={‘required’: ‘密码不能为空’}, validators=[PasswordValidator(‘666’)])</p><p>class TestView(APIView):<br>    authentication_classes = []<br>    permission_classes = []</p><pre><code>def get(self, request, *args, **kwargs):    # 序列化，将数据库查询字段序列化为字典    data_list = models.UserInfo.objects.all()    ser = UserSerializer(instance=data_list, many=True)    # 或    # obj = models.UserInfo.objects.all().first()    # ser = UserSerializer(instance=obj, many=False)    return Response(ser.data)def post(self, request, *args, **kwargs):    # 验证，对请求发来的数据进行验证    ser = UserSerializer(data=request.data)    if ser.is_valid():        print(ser.validated_data)    else:        print(ser.errors)    return Response(&apos;POST请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST验证:</span><br></pre></td></tr></table></figure><p>curl -X POST <br>  <a href="http://127.0.0.1:8001/test/" target="_blank" rel="noopener">http://127.0.0.1:8001/test/</a> <br>  -H ‘Cache-Control: no-cache’ <br>  -H ‘Content-Type: application/json’ <br>  -H ‘Postman-Token: 4ea5d1d1-e3b1-38a3-19f6-25070ace2342’ <br>  -d ‘{<br>        “user_type”: 2,<br>        “username”: “python”,<br>        “password”: “666”<br>    }’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.6.2 基于Model自动生成字段</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views.s6_serializers import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-7"><a href="#coding-utf-8-7" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from .. import models</p><p>class PasswordValidator(object):<br>    def <strong>init</strong>(self, base):<br>        self.base = str(base)</p><pre><code>def __call__(self, value):    if value != self.base:        message = &apos;This field must be %s.&apos; % self.base        raise serializers.ValidationError(message)def set_context(self, serializer_field):    &quot;&quot;&quot;    This hook is called by the serializer instance,    prior to the validation call being made.    &quot;&quot;&quot;    # 执行验证之前调用,serializer_fields是当前字段对象    pass</code></pre><p>class ModelUserSerializer(serializers.ModelSerializer):</p><pre><code>user = serializers.CharField(max_length=32)class Meta:    model = models.UserInfo    fields = &quot;__all__&quot;    # fields = [&apos;user&apos;, &apos;pwd&apos;, &apos;ut&apos;]    depth = 2    extra_kwargs = {&apos;user&apos;: {&apos;min_length&apos;: 6}, &apos;pwd&apos;: {&apos;validators&apos;: [PasswordValidator(666), ]}}    # read_only_fields = [&apos;user&apos;]</code></pre><p>class TestView(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):</p><pre><code>    # 序列化，将数据库查询字段序列化为字典    data_list = models.UserInfo.objects.all()    ser = ModelUserSerializer(instance=data_list, many=True)    # 或    # obj = models.UserInfo.objects.all().first()    # ser = UserSerializer(instance=obj, many=False)    return Response(ser.data)def post(self, request, *args, **kwargs):    # 验证，对请求发来的数据进行验证    print(request.data)    ser = ModelUserSerializer(data=request.data)    if ser.is_valid():        print(ser.validated_data)    else:        print(ser.errors)    return Response(&apos;POST请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.6.3 生成URL</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views.s6_serializers import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>    url(r’detail/(?P<pk>\d+)/‘, TestView.as_view(), name=’detail’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models</span><br></pre></td></tr></table></figure><p>from django.db import models</p><h1 id="Create-your-models-here-1"><a href="#Create-your-models-here-1" class="headerlink" title="Create your models here."></a>Create your models here.</h1><p>from django.db import models</p><p>class UserInfo(models.Model):<br>    user_type_choices = (<br>        (1, ‘普通用户’),<br>        (2, ‘管理员’),<br>        (3, ‘超级管理员’),<br>    )<br>    username = models.CharField(max_length=32)<br>    password = models.CharField(max_length=64)<br>    user_type = models.IntegerField(choices=user_type_choices, default=1)</p><p>class UserToken(models.Model):<br>    user = models.OneToOneField(‘UserInfo’, on_delete=True)<br>    token = models.CharField(max_length=64)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-5"><a href="#usr-bin-env-python-5" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-8"><a href="#coding-utf-8-8" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from . import models</p><p>class PasswordValidator(object):<br>    def <strong>init</strong>(self, base):<br>        self.base = str(base)</p><pre><code>def __call__(self, value):    if value != self.base:        message = &apos;This field must be %s.&apos; % self.base        raise serializers.ValidationError(message)def set_context(self, serializer_field):    &quot;&quot;&quot;    This hook is called by the serializer instance,    prior to the validation call being made.    &quot;&quot;&quot;    # 执行验证之前调用,serializer_fields是当前字段对象    pass</code></pre><p>class ModelUserSerializer(serializers.ModelSerializer):<br>    user_type = serializers.HyperlinkedIdentityField(view_name=’detail’)</p><pre><code>class Meta:    model = models.UserInfo    fields = &quot;__all__&quot;    extra_kwargs = {        &apos;username&apos;: {&apos;min_length&apos;: 6},        &apos;pasword&apos;: {&apos;validators&apos;: [PasswordValidator(666), ]},    }</code></pre><p>class TestView(APIView):<br>    authentication_classes = []<br>    permission_classes = []</p><pre><code>def get(self, request, *args, **kwargs):    # 序列化，将数据库查询字段序列化为字典    data_list = models.UserInfo.objects.all()    ser = ModelUserSerializer(instance=data_list, many=True, context={&apos;request&apos;: request})    # 或    # obj = models.UserInfo.objects.all().first()    # ser = UserSerializer(instance=obj, many=False)    return Response(ser.data)def post(self, request, *args, **kwargs):    # 验证，对请求发来的数据进行验证    print(request.data)    ser = ModelUserSerializer(data=request.data)    if ser.is_valid():        print(ser.validated_data)    else:        print(ser.errors)    return Response(&apos;POST请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请求如下图所示:</span><br><span class="line">![images](https:&#x2F;&#x2F;note.youdao.com&#x2F;yws&#x2F;api&#x2F;personal&#x2F;file&#x2F;WEBe8cf0d66e9af86eaccbbfdc47f098d67?method&#x3D;download&amp;shareKey&#x3D;cff9deb39e5ad27072b3d2ccae7b1307)</span><br><span class="line"></span><br><span class="line">#### 3.6.4 自动生成URL</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from app01.views import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>    url(r’detail/(?P<pk>\d+)/‘, TestView.as_view(), name=’detail-info’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-6"><a href="#usr-bin-env-python-6" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-9"><a href="#coding-utf-8-9" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from . import models</p><p>class PasswordValidator(object):<br>    def <strong>init</strong>(self, base):<br>        self.base = str(base)</p><pre><code>def __call__(self, value):    if value != self.base:        message = &apos;This field must be %s.&apos; % self.base        raise serializers.ValidationError(message)def set_context(self, serializer_field):    &quot;&quot;&quot;    This hook is called by the serializer instance,    prior to the validation call being made.    &quot;&quot;&quot;    # 执行验证之前调用,serializer_fields是当前字段对象    pass</code></pre><p>class ModelUserSerializer(serializers.HyperlinkedModelSerializer):<br>    ll = serializers.HyperlinkedIdentityField(view_name=’detail-info’)<br>    tt = serializers.CharField(required=False)</p><pre><code>class Meta:    model = models.UserInfo    fields = &quot;__all__&quot;    list_serializer_class = serializers.ListSerializer    extra_kwargs = {        &apos;username&apos;: {&apos;min_length&apos;: 6},        &apos;password&apos;: {&apos;validators&apos;: [PasswordValidator(666), ]},        &apos;url&apos;: {&apos;view_name&apos;: &apos;detail-info&apos;},        &apos;ut&apos;: {&apos;view_name&apos;: &apos;detail-info&apos;},    }</code></pre><p>class TestView(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        # # 序列化，将数据库查询字段序列化为字典<br>        data_list = models.UserInfo.objects.all()<br>        ser = ModelUserSerializer(instance=data_list, many=True, context={‘request’: request})<br>        # # 如果Many=True<br>        # # 或<br>        # # obj = models.UserInfo.objects.all().first()<br>        # # ser = UserSerializer(instance=obj, many=False)<br>        return Response(ser.data)</p><pre><code>def post(self, request, *args, **kwargs):    # 验证，对请求发来的数据进行验证    print(request.data)    ser = ModelUserSerializer(data=request.data)    if ser.is_valid():        print(ser.validated_data)    else:        print(ser.errors)    return Response(&apos;POST请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#### 3.7 分页</span><br><span class="line">#### 3.7.1 根据页码进行分页</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from app01.views import UserViewSet</p><p>urlpatterns = [<br>    url(r’test/‘, UserViewSet.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-7"><a href="#usr-bin-env-python-7" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-10"><a href="#coding-utf-8-10" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework import serializers<br>from . import models</p><p>from rest_framework.pagination import PageNumberPagination</p><p>class StandardResultsSetPagination(PageNumberPagination):<br>    # 默认每页显示的数据条数<br>    page_size = 1<br>    # 获取URL参数中设置的每页显示数据条数<br>    page_size_query_param = ‘page_size’</p><pre><code># 获取URL参数中传入的页码keypage_query_param = &apos;page&apos;# 最大支持的每页显示的数据条数max_page_size = 1</code></pre><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class UserViewSet(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        user_list = models.UserInfo.objects.all().order_by(‘-id’)</p><pre><code># 实例化分页对象，获取数据库中的分页数据paginator = StandardResultsSetPagination()page_user_list = paginator.paginate_queryset(user_list, self.request, view=self)# 序列化对象serializer = UserSerializer(page_user_list, many=True)# 生成分页和数据response = paginator.get_paginated_response(serializer.data)return response</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问验证:</span><br></pre></td></tr></table></figure><p><a href="http://127.0.0.1:8001/test/?page=1" target="_blank" rel="noopener">http://127.0.0.1:8001/test/?page=1</a><br><a href="http://127.0.0.1:8001/test/?page=2" target="_blank" rel="noopener">http://127.0.0.1:8001/test/?page=2</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.7.2 位置和个数进行分页</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from app01.views import UserViewSet</p><p>urlpatterns = [<br>    url(r’test/‘, UserViewSet.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-8"><a href="#usr-bin-env-python-8" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-11"><a href="#coding-utf-8-11" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework import serializers<br>from . import models</p><p>from rest_framework.pagination import PageNumberPagination, LimitOffsetPagination</p><p>class StandardResultsSetPagination(LimitOffsetPagination):<br>    # 默认每页显示的数据条数<br>    default_limit = 2<br>    # URL中传入的显示数据条数的参数<br>    limit_query_param = ‘limit’<br>    # URL中传入的数据位置的参数<br>    offset_query_param = ‘offset’<br>    # 最大每页显得条数<br>    max_limit = None</p><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class UserViewSet(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        user_list = models.UserInfo.objects.all().order_by(‘-id’)</p><pre><code># 实例化分页对象，获取数据库中的分页数据paginator = StandardResultsSetPagination()page_user_list = paginator.paginate_queryset(user_list, self.request, view=self)# 序列化对象serializer = UserSerializer(page_user_list, many=True)# 生成分页和数据response = paginator.get_paginated_response(serializer.data)return response</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">验证:</span><br><span class="line">![位置分页](https:&#x2F;&#x2F;note.youdao.com&#x2F;yws&#x2F;api&#x2F;personal&#x2F;file&#x2F;WEBdebc8cfb0c33b1533d1e041ed9925422?method&#x3D;download&amp;shareKey&#x3D;2b1d435332858dbe629d4c3d78b670d8)</span><br><span class="line"></span><br><span class="line">#### 3.7.3 游标分页</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from app01.views import UserViewSet</p><p>urlpatterns = [<br>    url(r’test/‘, UserViewSet.as_view(), name=’test’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><h1 id="usr-bin-env-python-9"><a href="#usr-bin-env-python-9" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-12"><a href="#coding-utf-8-12" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework import serializers<br>from . import models</p><p>from rest_framework.pagination import PageNumberPagination, LimitOffsetPagination, CursorPagination</p><p>class StandardResultsSetPagination(CursorPagination):<br>    # URL传入的游标参数<br>    cursor_query_param = ‘cursor’<br>    # 默认每页显示的数据条数<br>    page_size = 10<br>    # URL传入的每页显示条数的参数<br>    page_size_query_param = ‘page_size’<br>    # 每页显示数据最大条数<br>    max_page_size = 1000</p><pre><code># 根据ID从大到小排列ordering = &quot;id&quot;</code></pre><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class UserViewSet(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        user_list = models.UserInfo.objects.all().order_by(‘-id’)</p><pre><code># 实例化分页对象，获取数据库中的分页数据paginator = StandardResultsSetPagination()page_user_list = paginator.paginate_queryset(user_list, self.request, view=self)# 序列化对象serializer = UserSerializer(page_user_list, many=True)# 生成分页和数据response = paginator.get_paginated_response(serializer.data)return response</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 3.8  路由系统</span><br><span class="line">#### 3.8.1 自定义路由</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import s11_render</p><p>urlpatterns = [<br>    url(r’^test/$’, s11_render.TestView.as_view()),<br>    url(r’^test.(?P<format>[a-z0-9]+)$’, s11_render.TestView.as_view()),<br>    url(r’^test/(?P<pk>[^/.]+)/$’, s11_render.TestView.as_view()),<br>    url(r’^test/(?P<pk>[^/.]+).(?P<format>[a-z0-9]+)$’, s11_render.TestView.as_view())<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from .. import models</p><p>class TestView(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        print(kwargs)<br>        print(self.renderer_classes)<br>        return Response(‘…’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.8.2 半自动路由</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import s10_generic</p><p>urlpatterns = [<br>    url(r’^test/$’, s10_generic.UserViewSet.as_view({‘get’: ‘list’, ‘post’: ‘create’})),<br>    url(r’^test/(?P<pk>\d+)/$’, s10_generic.UserViewSet.as_view(<br>        {‘get’: ‘retrieve’, ‘put’: ‘update’, ‘patch’: ‘partial_update’, ‘delete’: ‘destroy’})),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-13"><a href="#coding-utf-8-13" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.viewsets import ModelViewSet<br>from rest_framework import serializers<br>from .. import models</p><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class UserViewSet(ModelViewSet):<br>    queryset = models.UserInfo.objects.all()<br>    serializer_class = UserSerializer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.8.3 全自动路由</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from rest_framework import routers<br>from web.views import s10_generic</p><p>router = routers.DefaultRouter()<br>router.register(r’users’, s10_generic.UserViewSet)</p><p>urlpatterns = [<br>    url(r’^’, include(router.urls)),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>from rest_framework.viewsets import ModelViewSet<br>from rest_framework import serializers<br>from .. import models</p><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class UserViewSet(ModelViewSet):<br>    queryset = models.UserInfo.objects.all()<br>    serializer_class = UserSerializer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### 3.9 试图</span><br><span class="line">#### 3.9.1 GenericViewSet</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views.s7_viewset import TestView</p><p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view({‘get’:’list’}), name=’test’),<br>    url(r’detail/(?P<pk>\d+)/‘, TestView.as_view({‘get’:’list’}), name=’xxxx’),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-14"><a href="#coding-utf-8-14" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework import viewsets<br>from rest_framework.response import Response</p><p>class TestView(viewsets.GenericViewSet):<br>    def list(self, request, <em>args, *</em>kwargs):<br>        return Response(‘…’)</p><pre><code>def add(self, request, *args, **kwargs):    passdef delete(self, request, *args, **kwargs):    passdef edit(self, request, *args, **kwargs):    pass</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.9.2 ModelViewSet(自定义URL)</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import s10_generic</p><p>urlpatterns = [<br>    url(r’^test/$’, s10_generic.UserViewSet.as_view({‘get’: ‘list’, ‘post’: ‘create’})),<br>    url(r’^test/(?P<pk>\d+)/$’, s10_generic.UserViewSet.as_view(<br>        {‘get’: ‘retrieve’, ‘put’: ‘update’, ‘patch’: ‘partial_update’, ‘delete’: ‘destroy’})),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-15"><a href="#coding-utf-8-15" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.viewsets import ModelViewSet<br>from rest_framework import serializers<br>from .. import models</p><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class UserViewSet(ModelViewSet):<br>    queryset = models.UserInfo.objects.all()<br>    serializer_class = UserSerializer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 3.9.3 ModelViewSet(rest framework路由)</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from rest_framework import routers<br>from app01 import views</p><p>router = routers.DefaultRouter()<br>router.register(r’users’, views.UserViewSet)<br>router.register(r’groups’, views.GroupViewSet)</p><h1 id="Wire-up-our-API-using-automatic-URL-routing"><a href="#Wire-up-our-API-using-automatic-URL-routing" class="headerlink" title="Wire up our API using automatic URL routing."></a>Wire up our API using automatic URL routing.</h1><h1 id="Additionally-we-include-login-URLs-for-the-browsable-API"><a href="#Additionally-we-include-login-URLs-for-the-browsable-API" class="headerlink" title="Additionally, we include login URLs for the browsable API."></a>Additionally, we include login URLs for the browsable API.</h1><p>urlpatterns = [<br>    url(r’^’, include(router.urls)),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>from rest_framework import viewsets<br>from rest_framework import serializers</p><p>class UserSerializer(serializers.HyperlinkedModelSerializer):<br>    class Meta:<br>        model = models.User<br>        fields = (‘url’, ‘username’, ‘email’, ‘groups’)</p><p>class GroupSerializer(serializers.HyperlinkedModelSerializer):<br>    class Meta:<br>        model = models.Group<br>        fields = (‘url’, ‘name’)</p><p>class UserViewSet(viewsets.ModelViewSet):<br>    “””<br>    API endpoint that allows users to be viewed or edited.<br>    “””<br>    queryset = User.objects.all().order_by(‘-date_joined’)<br>    serializer_class = UserSerializer</p><p>class GroupViewSet(viewsets.ModelViewSet):<br>    “””<br>    API endpoint that allows groups to be viewed or edited.<br>    “””<br>    queryset = Group.objects.all()<br>    serializer_class = GroupSerializer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 3.10 渲染器</span><br><span class="line">根据用户请求URL或用户可接受的类型,筛选出合适的渲染组件</span><br><span class="line">用户请求URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;json</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.json</span><br><span class="line">用户请求头:</span><br><span class="line">- Accept:text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8</span><br><span class="line"></span><br><span class="line">#### 3.10.1 Json</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;json</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.json</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">路由:</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import s11_render</p><p>urlpatterns = [<br>    url(r’^test/$’, s11_render.TestView.as_view()),<br>    url(r’^test.(?P<format>[a-z0-9]+)’, s11_render.TestView.as_view()),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图:</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-16"><a href="#coding-utf-8-16" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers</p><p>from rest_framework.renderers import JSONRenderer</p><p>from .. import models</p><p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class TestView(APIView):<br>    renderer_classes = [JSONRenderer, ]</p><pre><code>def get(self, request, *args, **kwargs):    user_list = models.UserInfo.objects.all()    ser = TestSerializer(instance=user_list, many=True)    return Response(ser.data)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#### 3.10.2 表格</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;admin</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.admin</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">试图:</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-17"><a href="#coding-utf-8-17" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from rest_framework.renderers import AdminRenderer<br>from . import models</p><p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class TestView(APIView):<br>    renderer_classes = [AdminRenderer, ]</p><pre><code>def get(self, request, *args, **kwargs):    user_list = models.UserInfo.objects.all()    ser = TestSerializer(instance=user_list, many=True)    return Response(ser.data)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#### 3.10.3 Form表单</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;form</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.form</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">试图:</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-18"><a href="#coding-utf-8-18" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers</p><p>from rest_framework.renderers import JSONRenderer<br>from rest_framework.renderers import AdminRenderer<br>from rest_framework.renderers import HTMLFormRendere<br>from . import models</p><p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class TestView(APIView):<br>    renderer_classes = [HTMLFormRenderer, ]</p><pre><code>def get(self, request, *args, **kwargs):    user_list = models.UserInfo.objects.all().first()    ser = TestSerializer(instance=user_list, many=False)    return Response(ser.data)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#### 3.10.4 自定义显示模版</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;html</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.html</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">路由</span><br></pre></td></tr></table></figure><p>from django.conf.urls import url, include<br>from web.views import s11_render</p><p>urlpatterns = [<br>    url(r’^test/$’, s11_render.TestView.as_view()),<br>    url(r’^test.(?P<format>[a-z0-9]+)’, s11_render.TestView.as_view()),<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure><p>#!/usr/bin/env python</p><h1 id="coding-utf-8-19"><a href="#coding-utf-8-19" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from rest_framework.renderers import TemplateHTMLRenderer<br>from . import models</p><p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class TestView(APIView):<br>    renderer_classes = [TemplateHTMLRenderer, ]</p><pre><code>def get(self, request, *args, **kwargs):    user_list = models.UserInfo.objects.all().first()    ser = TestSerializer(instance=user_list, many=False)    return Response(ser.data, template_name=&apos;user_detail.html&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模版</span><br></pre></td></tr></table></figure><p>$ cat user_detail.html<br><!DOCTYPE html></p><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title></head><body>            </body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#### 3.10.5 浏览器API+JSON</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;api</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.api</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">试图:</span><br></pre></td></tr></table></figure>#!/usr/bin/env python# -*- coding:utf-8 -*-from rest_framework.views import APIViewfrom rest_framework.response import Responsefrom rest_framework import serializersfrom rest_framework.renderers import JSONRendererfrom rest_framework.renderers import BrowsableAPIRendererfrom . import models<p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p><p>class CustomBrowsableAPIRenderer(BrowsableAPIRenderer):<br>    def get_default_renderer(self, view):<br>        return JSONRenderer()</p><p>class TestView(APIView):<br>    renderer_classes = [CustomBrowsableAPIRenderer, ]</p><pre><code>def get(self, request, *args, **kwargs):    user_list = models.UserInfo.objects.all().first()    ser = TestSerializer(instance=user_list, many=False)    return Response(ser.data, template_name=&apos;user_detail.html&apos;)</code></pre><pre><code>注意: 如果同时多个存在时,自动根据URL后缀来选择渲染器[原文地址](http://www.cnblogs.com/wupeiqi/articles/7805382.html)</code></pre>]]></content>
    
    <summary type="html">
    
      什么是RESTful API以及Django RestFramework
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django中间件</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:02:39.000Z</published>
    <updated>2020-04-20T06:19:50.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django中间件"><a href="#Django中间件" class="headerlink" title="Django中间件"></a>Django中间件</h2><p>Django1.9版本以后，我们从浏览器发出一个请求 Request，得到一个响应后的内容 HttpResponse ，这个请求传递到 Django的过程如下：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB04655a9c01957e832ef5e4d978b4e24c?method=download&shareKey=8d63de97ad045d5d59f417afb25f7f5a" alt="请求到Django中的处理流程图">  </p><p>也就是说，每一个请求都是先通过中间件中的 process_request 函数，这个函数返回 None 或者 HttpResponse 对象，如果返回前者，继续处理其它中间件，如果返回一个 HttpResponse，就处理中止，返回到网页上。</p><p>中间件（类）的几种方法<br>中间件可以定义的几种方法，分别是：</p><p>process_request(self,request) ： 在处理url请求之前执行</p><p>process_view(self, request, callback, callback_args,<br>callback_kwargs) ： 调用视图之前执行</p><p>process_template_response(self,request,response) ： 只有当views函数中返回的对象中具有render方法，才会直接调用</p><p>process_response(self, request, response) ： 在响应返回浏览器之前调用</p><p>自定义中间件<br>在Django中我们可以自己写一个继承了MiddlewareMixin的类，来实现自定义中间件。通过from django.urls.deprecation import MiddlewareMixin导入MiddlewareMixin。</p><p>为中间件创建一个目录Middle，并在Middle目录下创建middle1.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class middle11(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&quot;中间件1请求&quot;)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&quot;中间件1返回&quot;)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class middle2(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&quot;中间件2请求&quot;)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&quot;中间件2返回&quot;)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class middle3(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&quot;中间件3请求&quot;)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&quot;中间件3返回&quot;)</span><br><span class="line">        return response</span><br></pre></td></tr></table></figure><p>在项目目录下的settings.py文件的MIDDLEWARE中添加如下三行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;Middle.middle1.middle11&#39;,</span><br><span class="line">&#39;Middle.middle1.middle2&#39;,</span><br><span class="line">&#39;Middle.middle1.middle3&#39;,</span><br></pre></td></tr></table></figure><p>当我们在浏览器中访问一个页面的时候在控制台就会看到如下的结果：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB7f08c20201bab55e63606763d5718b3f?method=download&shareKey=a861abec06c2fef7e33e026196e5f453" alt="middleware自定义演示结果">  </p><p>从这里也向我们证实了当一个请求进来的时候，会通过所有的中间件处理，并且当请求获得相应时也会通过中间件去处理。</p><h3 id="中间件应用场景"><a href="#中间件应用场景" class="headerlink" title="中间件应用场景"></a>中间件应用场景</h3><p>由于中间件工作在 视图函数执行前、执行后适合所有的请求/一部分请求做批量处理。</p><p>1、做IP限制<br>放在 中间件类的列表中，阻止某些IP访问了；</p><p>2.URL访问过滤<br>如果用户访问的是login视图（放过）</p><p>如果访问其他视图（需要检测是不是有session已经有了放行，没有返回login），这样就省得在 多个视图函数上写装饰器了！</p><p>3、缓存(CDN)<br>客户端请求来了，中间件去缓存看看有没有数据，有直接返回给用户，没有再去逻辑层 执行视图函数</p><blockquote><p>注意：项目目录下MIDDLEWARE中’django.middleware.csrf.CsrfViewMiddleware’,为用户实现防止跨站请求伪造的功能，在之前我们都是将它注释掉的，因为我们如果不注释掉在表单提交的时候就会报forbidden的错误，但是如果我们又要用到防止跨域请求，又不要报错我们只需要在表单<from>标签中加入<code>{ csrf_token }</code>即可解决这个问题。</p></blockquote><h3 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h3><p>1.利用用中间件，实现让所有页面都必须在进行用户登录后才能访问qin<br>2.中间件统计，某个网页的访问次数。</p><p><a href="https://www.jianshu.com/p/2889eaff70fa" target="_blank" rel="noopener">原文链接</a>  </p>]]></content>
    
    <summary type="html">
    
      Django中间件
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python后端开发面试总结</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:02:06.000Z</published>
    <updated>2020-04-20T06:02:26.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python后端开发面试总结"><a href="#Python后端开发面试总结" class="headerlink" title="Python后端开发面试总结"></a>Python后端开发面试总结</h2><h3 id="1-is和-的区别？"><a href="#1-is和-的区别？" class="headerlink" title="1. is和==的区别？"></a>1. is和==的区别？</h3><p>is判断两个引用是否指向的是同一个变量，即内存id是否相等，==则是调用的<strong>eq</strong>方法，一般是用于判断值是否相等，也可以重写<strong>eq</strong>方法实现想要的效果。</p><h3 id="2-dict与list的查找复杂度？"><a href="#2-dict与list的查找复杂度？" class="headerlink" title="2. dict与list的查找复杂度？"></a>2. dict与list的查找复杂度？</h3><p>dict用hash实现，查找的时间复杂度是O(1)，list则为O(n)。</p><h3 id="3-a-b-c三个装饰器依次装饰函数fun-，装饰器的执行顺序？"><a href="#3-a-b-c三个装饰器依次装饰函数fun-，装饰器的执行顺序？" class="headerlink" title="3. a/b/c三个装饰器依次装饰函数fun()，装饰器的执行顺序？"></a>3. a/b/c三个装饰器依次装饰函数fun()，装饰器的执行顺序？</h3><p>注意装饰器函数本身一般有两层，在装饰的时候外层和内层顺序是相反的，详情可以参考这边文章python 多个装饰器的调用顺序。</p><h3 id="4-如何运行一个字符串？"><a href="#4-如何运行一个字符串？" class="headerlink" title="4. 如何运行一个字符串？"></a>4. 如何运行一个字符串？</h3><p>eval和exec。</p><h2 id="5-Python多线程能否充分利用CPU多核心，为什么？"><a href="#5-Python多线程能否充分利用CPU多核心，为什么？" class="headerlink" title="5. Python多线程能否充分利用CPU多核心，为什么？"></a>5. Python多线程能否充分利用CPU多核心，为什么？</h2><p>这里回答的是GIL相关的东西，可深可浅，自己把握~</p><h3 id="6-什么是上下文管理器？如何实现？"><a href="#6-什么是上下文管理器？如何实现？" class="headerlink" title="6. 什么是上下文管理器？如何实现？"></a>6. 什么是上下文管理器？如何实现？</h3><p>广泛意义上来说，上下文是指程序运行的环境，Python中常见于打开文件或网络连接，其实就是with关键字，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&quot;test.txt&quot;) as file:  </span><br><span class="line">    print(file.read())</span><br></pre></td></tr></table></figure><p>可以确保文件在最后会被关闭，只要对一个对象实现了<strong>enter</strong>和<strong>exit</strong>函数，就可以构造自己的上下文管理器了</p><h3 id="7-同步-异步-阻塞-非阻塞都是什么？"><a href="#7-同步-异步-阻塞-非阻塞都是什么？" class="headerlink" title="7. 同步/异步/阻塞/非阻塞都是什么？"></a>7. 同步/异步/阻塞/非阻塞都是什么？</h3><p>感觉直接解释概念不好解释，这里我回答的思路是举例子，异步说白了就是任务不需要同步进行，比如用爬虫爬取一个数据，然后再保存数据，接下来再去爬另一个数据，这是同步；异步就是爬虫不用等着数据保存好，爬完一个直接去爬另一个，数据保存的事情交给别的逻辑去慢慢处理；阻塞和非阻塞也是基于此的，同步的情况下会阻塞爬虫，爬虫需要等待数据的保存.(非专业解释)</p><h3 id="8-如何判断两个浮点数是否相等？"><a href="#8-如何判断两个浮点数是否相等？" class="headerlink" title="8. 如何判断两个浮点数是否相等？"></a>8. 如何判断两个浮点数是否相等？</h3><p>之前完全没想过这个的问题，我的回答就是按一个差不多的精度去比较，比如到小数点第几位之前都是相等的，就认为两个数相等，或者Math模块里可能有什么方法可以去精确对比，当时是这么回答的，现在查了一下基本也是这个思路，Math模块中有一个isclose函数用来判断两个浮点数的值是否接近或相等.</p><h3 id="9-MySQL的索引一般是怎么实现的？"><a href="#9-MySQL的索引一般是怎么实现的？" class="headerlink" title="9. MySQL的索引一般是怎么实现的？"></a>9. MySQL的索引一般是怎么实现的？</h3><p>B-Tree(一般是B+Tree)和Hash，然后再简单介绍一下。</p><h3 id="10-对于Flask的实现有了解吗？"><a href="#10-对于Flask的实现有了解吗？" class="headerlink" title="10. 对于Flask的实现有了解吗？"></a>10. 对于Flask的实现有了解吗？</h3><p>只知道WSGI，其余的不清楚，暂时还没去深入看Flask的源码。</p><h2 id="Part-二"><a href="#Part-二" class="headerlink" title="Part 二"></a>Part 二</h2><h4 id="1-一个木棍任意截成三段，围成三角形的概率？"><a href="#1-一个木棍任意截成三段，围成三角形的概率？" class="headerlink" title="1. 一个木棍任意截成三段，围成三角形的概率？"></a>1. 一个木棍任意截成三段，围成三角形的概率？</h4><p>咩咩咩？不知道。（回来查了是25%，具体可以自行搜索，反正脱离数学N年是无论如何都想不出来的）。</p><h4 id="2-一个函数RAND7-随机返回1-7，使用它构造一个RAND10-函数随机返回10。"><a href="#2-一个函数RAND7-随机返回1-7，使用它构造一个RAND10-函数随机返回10。" class="headerlink" title="2. 一个函数RAND7()随机返回1~7，使用它构造一个RAND10()函数随机返回10。"></a>2. 一个函数RAND7()随机返回1~7，使用它构造一个RAND10()函数随机返回10。</h4><p>一开始写了个函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def rand10():  </span><br><span class="line">a &#x3D; rand7() + 3&#x2F;10  </span><br><span class="line">b &#x3D; rand7() - 4  </span><br><span class="line">if b &lt; 0:  </span><br><span class="line">b &#x3D; 0  </span><br><span class="line">return a + b</span><br></pre></td></tr></table></figure><p>也是脑袋抽了，想得太简单，这个rand10虽然能返回1~10的随机数，但每个数出现的概率不是1/10，后面时间快到了检查的时候才反应过来。正确的思路是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def rand10():  </span><br><span class="line">while  1:  </span><br><span class="line">       res &#x3D; (rand7()-1)*7+rand7()    \# res等概率随机1~49  </span><br><span class="line">if res &lt; 40: \# 只取出0~39共40个数，每个数出现的概率也是相等的  </span><br><span class="line">return res % 10 \+ 1 \# 随机输出1~10</span><br></pre></td></tr></table></figure><h4 id="3-把一段JAVA代码改成Python，并增加单元测试。"><a href="#3-把一段JAVA代码改成Python，并增加单元测试。" class="headerlink" title="3. 把一段JAVA代码改成Python，并增加单元测试。"></a>3. 把一段JAVA代码改成Python，并增加单元测试。</h4><p>JAVA代码本身很简单，即使没学过也能看懂，改后的Python代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class MyClass:  </span><br><span class="line">__current &#x3D; 0  </span><br><span class="line">def next(self):  </span><br><span class="line">MyClass.__current +&#x3D; 1  </span><br><span class="line">return MyClass.__current</span><br></pre></td></tr></table></figure><p>但是对于单元测试则仅限于听过的地步，需要用到unittest，好像也有别的模块。</p><h4 id="4-给定一个数组，按奇数在前升序，偶数在后降序排列，一行代码实现。"><a href="#4-给定一个数组，按奇数在前升序，偶数在后降序排列，一行代码实现。" class="headerlink" title="4. 给定一个数组，按奇数在前升序，偶数在后降序排列，一行代码实现。"></a>4. 给定一个数组，按奇数在前升序，偶数在后降序排列，一行代码实现。</h4><p>没啥好说的，一行代码必然是列表生成式，假设数组是nums，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(\[n for n in nums if n % 2\]) \+ sorted(\[n for n in nums if  not n % 2\], reverse&#x3D;True)</span><br></pre></td></tr></table></figure><h3 id="5-实现单例。"><a href="#5-实现单例。" class="headerlink" title="5. 实现单例。"></a>5. 实现单例。</h3><p>单例就是说一个class只能有一个instance，实现的方法有很多，例如改写<strong>new</strong>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Singleton(object):  </span><br><span class="line">_instance &#x3D; None  </span><br><span class="line">def \_\_new\_\_(cls, \*args, \*\*kw):  </span><br><span class="line">if  not cls._instance:  </span><br><span class="line">           cls.\_instance &#x3D; super(Singleton, cls).\_\_new__(cls, \*args, \*\*kw)    </span><br><span class="line">return cls._instance</span><br></pre></td></tr></table></figure><h4 id="6-有一个问答平台，每个用户对一个问题最多只能回答一次，同一个问题最多只能对一个答案点赞；1-设计合适的数据库结构；2-写出SQL获取点赞数最多的10个问题；"><a href="#6-有一个问答平台，每个用户对一个问题最多只能回答一次，同一个问题最多只能对一个答案点赞；1-设计合适的数据库结构；2-写出SQL获取点赞数最多的10个问题；" class="headerlink" title="6. 有一个问答平台，每个用户对一个问题最多只能回答一次，同一个问题最多只能对一个答案点赞；1)设计合适的数据库结构；2)写出SQL获取点赞数最多的10个问题；"></a>6. 有一个问答平台，每个用户对一个问题最多只能回答一次，同一个问题最多只能对一个答案点赞；1)设计合适的数据库结构；2)写出SQL获取点赞数最多的10个问题；</h4><p>我平时也就用数据库查数据，在设计数据库上没有深入研究，因此的我答案就简单写了有哪些表，字段分别是什么，至于题中的条件限制，就交由后台的程序逻辑去处理，而不是在数据库设计层面去限制。因为是自己设计的表结构，SQL本身也就不难。</p><h4 id="7-设计一个栈，实现pop-push及max方法，要求能在O-1-时间内取得最大值。"><a href="#7-设计一个栈，实现pop-push及max方法，要求能在O-1-时间内取得最大值。" class="headerlink" title="7. 设计一个栈，实现pop/push及max方法，要求能在O(1)时间内取得最大值。"></a>7. 设计一个栈，实现pop/push及max方法，要求能在O(1)时间内取得最大值。</h4><p>LeetCode原题啊！list怎么能O(1)取得最大值呢，无非是空间换时间，每push一个数就同时记录当前的最大值。</p><h4 id="8-手写快排。"><a href="#8-手写快排。" class="headerlink" title="8. 手写快排。"></a>8. 手写快排。</h4><p>呵呵。</p><h2 id="其他针对简历的提问"><a href="#其他针对简历的提问" class="headerlink" title="其他针对简历的提问"></a>其他针对简历的提问</h2><h4 id="1-你的网站，你觉得如果访问量上去了，最先出现瓶颈问题的点是哪？怎么优化？"><a href="#1-你的网站，你觉得如果访问量上去了，最先出现瓶颈问题的点是哪？怎么优化？" class="headerlink" title="1. 你的网站，你觉得如果访问量上去了，最先出现瓶颈问题的点是哪？怎么优化？"></a>1. 你的网站，你觉得如果访问量上去了，最先出现瓶颈问题的点是哪？怎么优化？</h4><p>我答的是数据库，因为好多不必要或者可以使用缓存的地方也频繁操作数据库，而且是使用的ORM，但之前从哪看到ORM不能确保对应的SQL语句是最优的，因此可以尝试使用原生SQL或者增加Redis缓存。</p><h3 id="2-如果要扩展后台服务器，需要怎么做？"><a href="#2-如果要扩展后台服务器，需要怎么做？" class="headerlink" title="2. 如果要扩展后台服务器，需要怎么做？"></a>2. 如果要扩展后台服务器，需要怎么做？</h3><p>(话说这不是运维的工作么。。。)呃，就是增加服务器啊，然后前面加一层负载均衡，把请求分配给不同的服务器.(那不同的服务器怎么使用你的Session？)再加个Session服务器。</p><h3 id="3-我看你平时刷编程题，有遇到什么有意思的题目吗？"><a href="#3-我看你平时刷编程题，有遇到什么有意思的题目吗？" class="headerlink" title="3. 我看你平时刷编程题，有遇到什么有意思的题目吗？"></a>3. 我看你平时刷编程题，有遇到什么有意思的题目吗？</h3><p>LeetCode才开始刷，就举了两道Codewars上的题目，我也真是傻了，真的举了两道有意思(但自己没做好)的题。</p><p>其他就无非是一些为什么想做后端开发之类的问题了，个人感觉题目大部分也挺简单的，我的表现也算中规中矩吧，但面试官说我要进一步加强基础知识，具体哪方面(数据库、网络协议、还是Python本身)又语焉不详。</p><p><a href="https://mp.weixin.qq.com/s/ULeyIN825L59LF9-CHocKg" target="_blank" rel="noopener">原文地址</a></p>]]></content>
    
    <summary type="html">
    
      Python后端开发面试总结
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Python小技巧和有趣的内置函数</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:01:26.000Z</published>
    <updated>2020-04-20T06:01:49.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python小技巧和有趣的内置函数"><a href="#Python小技巧和有趣的内置函数" class="headerlink" title="Python小技巧和有趣的内置函数"></a>Python小技巧和有趣的内置函数</h2><blockquote><p>一个python小技巧的集合和一些很有用的Python内置函数,这些函数简直是屌爆了，我认为每个 Pythoner 都应该知道这些函数。</p></blockquote><h3 id="1-1-拆箱"><a href="#1-1-拆箱" class="headerlink" title="1.1 拆箱"></a>1.1 拆箱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b, c &#x3D; 1, 2, 3  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 2, 3)  </span><br><span class="line">&gt;&gt;&gt; a, b, c &#x3D; [1, 2, 3]  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 2, 3)  </span><br><span class="line">&gt;&gt;&gt; a, b, c &#x3D; (2 * i + 1  for i in range(3))  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 3, 5)  </span><br><span class="line">&gt;&gt;&gt; a, (b, c), d &#x3D; [1, (2, 3), 4]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; b  </span><br><span class="line">2  </span><br><span class="line">&gt;&gt;&gt; c  </span><br><span class="line">3  </span><br><span class="line">&gt;&gt;&gt; d  </span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="1-2-拆箱变量交换"><a href="#1-2-拆箱变量交换" class="headerlink" title="1.2 拆箱变量交换"></a>1.2 拆箱变量交换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b &#x3D; 1, 2  </span><br><span class="line">&gt;&gt;&gt; a, b &#x3D; b, a  </span><br><span class="line">&gt;&gt;&gt; a, b  </span><br><span class="line">(2, 1)</span><br></pre></td></tr></table></figure><h3 id="1-3-扩展拆箱-只兼容python3"><a href="#1-3-扩展拆箱-只兼容python3" class="headerlink" title="1.3 扩展拆箱(只兼容python3)"></a>1.3 扩展拆箱(只兼容python3)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, *b, c &#x3D; [1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; b  </span><br><span class="line">[2, 3, 4]  </span><br><span class="line">&gt;&gt;&gt; c  </span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="1-4-负数索引"><a href="#1-4-负数索引" class="headerlink" title="1.4 负数索引"></a>1.4 负数索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[-1]  </span><br><span class="line">10  </span><br><span class="line">&gt;&gt;&gt; a[-3]  </span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="1-5-切割列表"><a href="#1-5-切割列表" class="headerlink" title="1.5 切割列表"></a>1.5 切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[2:8]  </span><br><span class="line">[2, 3, 4, 5, 6, 7]</span><br></pre></td></tr></table></figure><h3 id="1-6-负数索引切割列表"><a href="#1-6-负数索引切割列表" class="headerlink" title="1.6 负数索引切割列表"></a>1.6 负数索引切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[-4:-2]  </span><br><span class="line">[7, 8]</span><br></pre></td></tr></table></figure><h3 id="1-7指定步长切割列表"><a href="#1-7指定步长切割列表" class="headerlink" title="1.7指定步长切割列表"></a>1.7指定步长切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::2]  </span><br><span class="line">[0, 2, 4, 6, 8, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::3]  </span><br><span class="line">[0, 3, 6, 9]  </span><br><span class="line">&gt;&gt;&gt; a[2:8:2]  </span><br><span class="line">[2, 4, 6]</span><br></pre></td></tr></table></figure><h3 id="1-8-负数步长切割列表"><a href="#1-8-负数步长切割列表" class="headerlink" title="1.8 负数步长切割列表"></a>1.8 负数步长切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::-1]  </span><br><span class="line">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]  </span><br><span class="line">&gt;&gt;&gt; a[::-2]  </span><br><span class="line">[10, 8, 6, 4, 2, 0]</span><br></pre></td></tr></table></figure><h3 id="1-9-列表切割赋值"><a href="#1-9-列表切割赋值" class="headerlink" title="1.9 列表切割赋值"></a>1.9 列表切割赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[2:3] &#x3D; [0, 0]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 2, 0, 0, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[1:1] &#x3D; [8, 9]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 8, 9, 2, 0, 0, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[1:-1] &#x3D; []  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 5]</span><br></pre></td></tr></table></figure><h3 id="1-10-命名列表切割方式"><a href="#1-10-命名列表切割方式" class="headerlink" title="1.10 命名列表切割方式"></a>1.10 命名列表切割方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; LASTTHREE &#x3D; slice(-3, None)  </span><br><span class="line">&gt;&gt;&gt; LASTTHREE  </span><br><span class="line">slice(-3, None, None)  </span><br><span class="line">&gt;&gt;&gt; a[LASTTHREE]  </span><br><span class="line">[3, 4, 5]</span><br></pre></td></tr></table></figure><h3 id="1-11-列表以及迭代器的压缩和解压缩"><a href="#1-11-列表以及迭代器的压缩和解压缩" class="headerlink" title="1.11 列表以及迭代器的压缩和解压缩"></a>1.11 列表以及迭代器的压缩和解压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]  </span><br><span class="line">&gt;&gt;&gt; b &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]  </span><br><span class="line">&gt;&gt;&gt; z &#x3D; zip(a, b)  </span><br><span class="line">&gt;&gt;&gt; z  </span><br><span class="line">[(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]  </span><br><span class="line">&gt;&gt;&gt; zip(*z)  </span><br><span class="line">[(1, 2, 3), (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)]</span><br></pre></td></tr></table></figure><h3 id="1-12-列表相邻元素压缩器"><a href="#1-12-列表相邻元素压缩器" class="headerlink" title="1.12 列表相邻元素压缩器"></a>1.12 列表相邻元素压缩器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6]  </span><br><span class="line">&gt;&gt;&gt; zip(*([iter(a)] * 2))  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent &#x3D; lambda a, k: zip(*([iter(a)] * k))  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 3)  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 2)  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 1)  </span><br><span class="line">[(1,), (2,), (3,), (4,), (5,), (6,)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; zip(a[::2], a[1::2])  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; zip(a[::3], a[1::3], a[2::3])  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; group_adjacent &#x3D; lambda a, k: zip(*(a[i::k] for i in range(k)))  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 3)  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 2)  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 1)  </span><br><span class="line">[(1,), (2,), (3,), (4,), (5,), (6,)]</span><br></pre></td></tr></table></figure><h3 id="1-13-在列表中用压缩器和迭代器滑动取值窗口"><a href="#1-13-在列表中用压缩器和迭代器滑动取值窗口" class="headerlink" title="1.13 在列表中用压缩器和迭代器滑动取值窗口"></a>1.13 在列表中用压缩器和迭代器滑动取值窗口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def n_grams(a, n):  </span><br><span class="line">... z &#x3D; [iter(a[i:]) for i in range(n)]  </span><br><span class="line">... return zip(*z)  </span><br><span class="line">...  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 3)  </span><br><span class="line">[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 2)  </span><br><span class="line">[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 4)  </span><br><span class="line">[(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)]</span><br></pre></td></tr></table></figure><h3 id="用压缩器反转字典"><a href="#用压缩器反转字典" class="headerlink" title="用压缩器反转字典"></a>用压缩器反转字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;  </span><br><span class="line">&gt;&gt;&gt; m.items()  </span><br><span class="line">[(&#39;a&#39;, 1), (&#39;c&#39;, 3), (&#39;b&#39;, 2), (&#39;d&#39;, 4)]  </span><br><span class="line">&gt;&gt;&gt; zip(m.values(), m.keys())  </span><br><span class="line">[(1, &#39;a&#39;), (3, &#39;c&#39;), (2, &#39;b&#39;), (4, &#39;d&#39;)]  </span><br><span class="line">&gt;&gt;&gt; mi &#x3D; dict(zip(m.values(), m.keys()))  </span><br><span class="line">&gt;&gt;&gt; mi  </span><br><span class="line">&#123;1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-15-列表展开"><a href="#1-15-列表展开" class="headerlink" title="1.15 列表展开"></a>1.15 列表展开</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [[1, 2], [3, 4], [5, 6]]  </span><br><span class="line">&gt;&gt;&gt; list(itertools.chain.from_iterable(a))  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; sum(a, [])  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; [x for l in a for x in l]  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]  </span><br><span class="line">&gt;&gt;&gt; [x for l1 in a for l2 in l1 for x in l2]  </span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, [3, 4], [[5, 6], [7, 8]]]  </span><br><span class="line">&gt;&gt;&gt; flatten &#x3D; lambda x: [y for l in x for y in flatten(l)] if type(x) is list else [x]  </span><br><span class="line">&gt;&gt;&gt; flatten(a)  </span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure><h3 id="1-16-生成器表达式"><a href="#1-16-生成器表达式" class="headerlink" title="1.16 生成器表达式"></a>1.16 生成器表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; g &#x3D; (x ** 2  for x in xrange(10))  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">0  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">4  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">9  </span><br><span class="line">&gt;&gt;&gt; sum(x ** 3  for x in xrange(10))  </span><br><span class="line">2025  </span><br><span class="line">&gt;&gt;&gt; sum(x ** 3  for x in xrange(10) if x % 3 &#x3D;&#x3D; 1)  </span><br><span class="line">408</span><br></pre></td></tr></table></figure><h3 id="1-17-字典推导"><a href="#1-17-字典推导" class="headerlink" title="1.17 字典推导"></a>1.17 字典推导</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: x ** 2  for x in range(5)&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: &#39;A&#39; + str(x) for x in range(10)&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;0: &#39;A0&#39;, 1: &#39;A1&#39;, 2: &#39;A2&#39;, 3: &#39;A3&#39;, 4: &#39;A4&#39;, 5: &#39;A5&#39;, 6: &#39;A6&#39;, 7: &#39;A7&#39;, 8: &#39;A8&#39;, 9: &#39;A9&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-18-用字典推导反转字典"><a href="#1-18-用字典推导反转字典" class="headerlink" title="1.18 用字典推导反转字典"></a>1.18 用字典推导反转字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;&#39;d&#39;: 4, &#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;  </span><br><span class="line">&gt;&gt;&gt; &#123;v: k for k, v in m.items()&#125;  </span><br><span class="line">&#123;1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-19-命名元组"><a href="#1-19-命名元组" class="headerlink" title="1.19 命名元组"></a>1.19 命名元组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Point &#x3D; collections.namedtuple(&#39;Point&#39;, [&#39;x&#39;, &#39;y&#39;])  </span><br><span class="line">&gt;&gt;&gt; p &#x3D; Point(x&#x3D;1.0, y&#x3D;2.0)  </span><br><span class="line">&gt;&gt;&gt; p  </span><br><span class="line">Point(x&#x3D;1.0, y&#x3D;2.0)  </span><br><span class="line">&gt;&gt;&gt; p.x  </span><br><span class="line">1.0  </span><br><span class="line">&gt;&gt;&gt; p.y  </span><br><span class="line">2.0</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://python.jobbole.com/63320/" target="_blank" rel="noopener">更多请查看原文</a>  </p></blockquote><h3 id="函数部分"><a href="#函数部分" class="headerlink" title="函数部分"></a>函数部分</h3><h3 id="all-iterable"><a href="#all-iterable" class="headerlink" title="all(iterable)"></a>all(iterable)</h3><p>如果可迭代的对象(数组，字符串，列表等，下同)中的元素都是true(或者为空)的话返回True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_all &#x3D; True  </span><br><span class="line">for item in iterable:  </span><br><span class="line">if  not item:  </span><br><span class="line">_all &#x3D; False  </span><br><span class="line">break  </span><br><span class="line">if _all:  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><p>更简便的写法是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if all(iterable):  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><h3 id="any-iterable"><a href="#any-iterable" class="headerlink" title="any(iterable)"></a>any(iterable)</h3><p>如果可迭代的对象中任何一个元素为true的话返回True,如果可迭代的对象为空则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_any &#x3D; False  </span><br><span class="line">for item in iterable:  </span><br><span class="line">if item:  </span><br><span class="line">_any &#x3D; True  </span><br><span class="line">break  </span><br><span class="line">if _any:  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><p>更简便的写法是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if any(iterable):  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><h3 id="cmp-x-y"><a href="#cmp-x-y" class="headerlink" title="cmp(x, y)"></a>cmp(x, y)</h3><p>比较两个对象 x 和 y , x &lt; y 的时候返回负数， x ==y 的时候返回 0， x &gt; y 的时候返回正数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def compare(x,y):  </span><br><span class="line">if x &lt; y:  </span><br><span class="line">return -1  </span><br><span class="line">elif x &#x3D;&#x3D; y:  </span><br><span class="line">return  0  </span><br><span class="line">else:  </span><br><span class="line">return  1</span><br></pre></td></tr></table></figure><p>你完全可以使用一句 cmp(x, y) 来替代。</p><h3 id="dict-arg"><a href="#dict-arg" class="headerlink" title="dict([arg])"></a>dict([arg])</h3><p>使用 arg 提供的条目生成一个新的字典。<br>arg 通常是未知的，但是它很方便！比如说，如果我们想把一个含两个元组的列表转换成一个字典，我们可以这么做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l &#x3D; [(&#39;Knights&#39;, &#39;Ni&#39;), (&#39;Monty&#39;, &#39;Python&#39;), (&#39;SPAM&#39;, &#39;SPAAAM&#39;)]  </span><br><span class="line">d &#x3D; dict()  </span><br><span class="line">for tuple in l:  </span><br><span class="line">   d[tuple[0]] &#x3D; tuple[1]  </span><br><span class="line"># &#123;&#39;Knights&#39;: &#39;Ni&#39;, &#39;Monty&#39;: &#39;Python&#39;, &#39;SPAM&#39;: &#39;SPAAAM&#39;&#125;</span><br></pre></td></tr></table></figure><p>或者这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l &#x3D; [(&#39;Knights&#39;, &#39;Ni&#39;), (&#39;Monty&#39;, &#39;Python&#39;), (&#39;SPAM&#39;, &#39;SPAAAM&#39;)]  </span><br><span class="line">d &#x3D; dict(l) # &#123;&#39;Knights&#39;: &#39;Ni&#39;, &#39;Monty&#39;: &#39;Python&#39;, &#39;SPAM&#39;: &#39;SPAAAM&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="enumerate-iterable-start-0"><a href="#enumerate-iterable-start-0" class="headerlink" title="enumerate(iterable [,start=0])"></a>enumerate(iterable [,start=0])</h3><p>我真的是超级喜欢这个!如果你以前写过C语言，那么你可能会这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in range(len(list)):  </span><br><span class="line"># do stuff with list[i], for example, print it  </span><br><span class="line">print i, list[i]</span><br></pre></td></tr></table></figure><p>噢,不用那么麻烦!你可以使用enumerate()来提高可读性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i, item in enumerate(list):  </span><br><span class="line"># so stuff with item, for example print it  </span><br><span class="line">print i, item</span><br></pre></td></tr></table></figure><h3 id="isinstance-object-classinfo"><a href="#isinstance-object-classinfo" class="headerlink" title="isinstance(object, classinfo)"></a>isinstance(object, classinfo)</h3><p>如果 object 参数是 classinfo 参数的一个实例或者子类(直接或者间接)的话返回 True<br>当你想检验一个对象的类型的时候,第一个想到的应该是使用type()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if type(obj) &#x3D;&#x3D; type(dict):  </span><br><span class="line"># do stuff  </span><br><span class="line">elif type(obj) &#x3D;&#x3D; type(list):  </span><br><span class="line"># do other stuff  </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>或者你可以这么写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if isinstance(obj, dict):  </span><br><span class="line"># do stuff  </span><br><span class="line">elif isinstance(obj, list):  </span><br><span class="line"># do other stuff  </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="pow-x-y-z"><a href="#pow-x-y-z" class="headerlink" title="pow(x, y [,z])"></a>pow(x, y [,z])</h3><p>返回 x 的 y 次幂(如果 z 存在的话则以 z 为模)。<br>如果你想计算 x 的 y 次方，以 z 为模，那么你可以这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mod &#x3D; (x ** y) % z</span><br></pre></td></tr></table></figure><p>但是当 x=1234567， y=4567676， z=56 的时候我的电脑足足跑了 64 秒！<br>不要用 ** 和 % 了，使用 pow(x, y, z) 吧！这个例子可以写成 pow(1234567, 4567676, 56) ，只用了 0.034 秒就出了结果！</p><h3 id="zip-iterable"><a href="#zip-iterable" class="headerlink" title="zip([iterable, ])"></a>zip([iterable, ])</h3><p>这个函数返回一个含元组的列表，具体请看例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l1 &#x3D; (&#39;You gotta&#39;, &#39;the&#39;)  </span><br><span class="line">l2 &#x3D; (&#39;love&#39;, &#39;built-in&#39;)  </span><br><span class="line">out &#x3D; []  </span><br><span class="line">if len(l1) &#x3D;&#x3D; len(l2):  </span><br><span class="line">for i in range(len(l1)):  </span><br><span class="line">       out.append((l1[i], l2[i]))  </span><br><span class="line"># out &#x3D; [(&#39;You gotta&#39;, &#39;love&#39;), (&#39;the&#39;, &#39;built-in)]</span><br></pre></td></tr></table></figure><p>或者这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1 &#x3D; [&#39;You gotta&#39;, &#39;the&#39;]  </span><br><span class="line">l2 &#x3D; [&#39;love&#39;, &#39;built-in&#39;]  </span><br><span class="line">out &#x3D; zip(l1, l2) # [(&#39;You gotta&#39;, &#39;love&#39;), (&#39;the&#39;, &#39;built-in)]</span><br></pre></td></tr></table></figure><p>如果你想得到倒序的话加上 * 操作符就可以了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print zip(*out)  </span><br><span class="line"># [(&#39;You gotta&#39;, &#39;the&#39;), (&#39;love&#39;, &#39;built-in&#39;)]</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Python 内置函数很方便，它们很快并且经过了优化，所以它们可能效率更高。<br>我真心认为每个 Python 开发者都应该好好看看内置函数的文档(引言部分)。<br>忘了说了，在 itertools 模块中有很多很不错的函数。</p>]]></content>
    
    <summary type="html">
    
      Python小技巧和有趣的内置函数
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Python小技巧和有趣的内置函数</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:01:26.000Z</published>
    <updated>2020-04-20T06:23:43.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python小技巧和有趣的内置函数"><a href="#Python小技巧和有趣的内置函数" class="headerlink" title="Python小技巧和有趣的内置函数"></a>Python小技巧和有趣的内置函数</h2><blockquote><p>一个python小技巧的集合和一些很有用的Python内置函数,这些函数简直是屌爆了，我认为每个 Pythoner 都应该知道这些函数。</p></blockquote><h3 id="1-1-拆箱"><a href="#1-1-拆箱" class="headerlink" title="1.1 拆箱"></a>1.1 拆箱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b, c &#x3D; 1, 2, 3  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 2, 3)  </span><br><span class="line">&gt;&gt;&gt; a, b, c &#x3D; [1, 2, 3]  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 2, 3)  </span><br><span class="line">&gt;&gt;&gt; a, b, c &#x3D; (2 * i + 1  for i in range(3))  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 3, 5)  </span><br><span class="line">&gt;&gt;&gt; a, (b, c), d &#x3D; [1, (2, 3), 4]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; b  </span><br><span class="line">2  </span><br><span class="line">&gt;&gt;&gt; c  </span><br><span class="line">3  </span><br><span class="line">&gt;&gt;&gt; d  </span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="1-2-拆箱变量交换"><a href="#1-2-拆箱变量交换" class="headerlink" title="1.2 拆箱变量交换"></a>1.2 拆箱变量交换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b &#x3D; 1, 2  </span><br><span class="line">&gt;&gt;&gt; a, b &#x3D; b, a  </span><br><span class="line">&gt;&gt;&gt; a, b  </span><br><span class="line">(2, 1)</span><br></pre></td></tr></table></figure><h3 id="1-3-扩展拆箱-只兼容python3"><a href="#1-3-扩展拆箱-只兼容python3" class="headerlink" title="1.3 扩展拆箱(只兼容python3)"></a>1.3 扩展拆箱(只兼容python3)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a, *b, c &#x3D; [1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; b  </span><br><span class="line">[2, 3, 4]  </span><br><span class="line">&gt;&gt;&gt; c  </span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="1-4-负数索引"><a href="#1-4-负数索引" class="headerlink" title="1.4 负数索引"></a>1.4 负数索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[-1]  </span><br><span class="line">10  </span><br><span class="line">&gt;&gt;&gt; a[-3]  </span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="1-5-切割列表"><a href="#1-5-切割列表" class="headerlink" title="1.5 切割列表"></a>1.5 切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[2:8]  </span><br><span class="line">[2, 3, 4, 5, 6, 7]</span><br></pre></td></tr></table></figure><h3 id="1-6-负数索引切割列表"><a href="#1-6-负数索引切割列表" class="headerlink" title="1.6 负数索引切割列表"></a>1.6 负数索引切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[-4:-2]  </span><br><span class="line">[7, 8]</span><br></pre></td></tr></table></figure><h3 id="1-7指定步长切割列表"><a href="#1-7指定步长切割列表" class="headerlink" title="1.7指定步长切割列表"></a>1.7指定步长切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::2]  </span><br><span class="line">[0, 2, 4, 6, 8, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::3]  </span><br><span class="line">[0, 3, 6, 9]  </span><br><span class="line">&gt;&gt;&gt; a[2:8:2]  </span><br><span class="line">[2, 4, 6]</span><br></pre></td></tr></table></figure><h3 id="1-8-负数步长切割列表"><a href="#1-8-负数步长切割列表" class="headerlink" title="1.8 负数步长切割列表"></a>1.8 负数步长切割列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::-1]  </span><br><span class="line">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]  </span><br><span class="line">&gt;&gt;&gt; a[::-2]  </span><br><span class="line">[10, 8, 6, 4, 2, 0]</span><br></pre></td></tr></table></figure><h3 id="1-9-列表切割赋值"><a href="#1-9-列表切割赋值" class="headerlink" title="1.9 列表切割赋值"></a>1.9 列表切割赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[2:3] &#x3D; [0, 0]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 2, 0, 0, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[1:1] &#x3D; [8, 9]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 8, 9, 2, 0, 0, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[1:-1] &#x3D; []  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 5]</span><br></pre></td></tr></table></figure><h3 id="1-10-命名列表切割方式"><a href="#1-10-命名列表切割方式" class="headerlink" title="1.10 命名列表切割方式"></a>1.10 命名列表切割方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; LASTTHREE &#x3D; slice(-3, None)  </span><br><span class="line">&gt;&gt;&gt; LASTTHREE  </span><br><span class="line">slice(-3, None, None)  </span><br><span class="line">&gt;&gt;&gt; a[LASTTHREE]  </span><br><span class="line">[3, 4, 5]</span><br></pre></td></tr></table></figure><h3 id="1-11-列表以及迭代器的压缩和解压缩"><a href="#1-11-列表以及迭代器的压缩和解压缩" class="headerlink" title="1.11 列表以及迭代器的压缩和解压缩"></a>1.11 列表以及迭代器的压缩和解压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]  </span><br><span class="line">&gt;&gt;&gt; b &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]  </span><br><span class="line">&gt;&gt;&gt; z &#x3D; zip(a, b)  </span><br><span class="line">&gt;&gt;&gt; z  </span><br><span class="line">[(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]  </span><br><span class="line">&gt;&gt;&gt; zip(*z)  </span><br><span class="line">[(1, 2, 3), (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)]</span><br></pre></td></tr></table></figure><h3 id="1-12-列表相邻元素压缩器"><a href="#1-12-列表相邻元素压缩器" class="headerlink" title="1.12 列表相邻元素压缩器"></a>1.12 列表相邻元素压缩器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6]  </span><br><span class="line">&gt;&gt;&gt; zip(*([iter(a)] * 2))  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent &#x3D; lambda a, k: zip(*([iter(a)] * k))  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 3)  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 2)  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 1)  </span><br><span class="line">[(1,), (2,), (3,), (4,), (5,), (6,)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; zip(a[::2], a[1::2])  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; zip(a[::3], a[1::3], a[2::3])  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; group_adjacent &#x3D; lambda a, k: zip(*(a[i::k] for i in range(k)))  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 3)  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 2)  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 1)  </span><br><span class="line">[(1,), (2,), (3,), (4,), (5,), (6,)]</span><br></pre></td></tr></table></figure><h3 id="1-13-在列表中用压缩器和迭代器滑动取值窗口"><a href="#1-13-在列表中用压缩器和迭代器滑动取值窗口" class="headerlink" title="1.13 在列表中用压缩器和迭代器滑动取值窗口"></a>1.13 在列表中用压缩器和迭代器滑动取值窗口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def n_grams(a, n):  </span><br><span class="line">... z &#x3D; [iter(a[i:]) for i in range(n)]  </span><br><span class="line">... return zip(*z)  </span><br><span class="line">...  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 3)  </span><br><span class="line">[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 2)  </span><br><span class="line">[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 4)  </span><br><span class="line">[(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)]</span><br></pre></td></tr></table></figure><h3 id="用压缩器反转字典"><a href="#用压缩器反转字典" class="headerlink" title="用压缩器反转字典"></a>用压缩器反转字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;  </span><br><span class="line">&gt;&gt;&gt; m.items()  </span><br><span class="line">[(&#39;a&#39;, 1), (&#39;c&#39;, 3), (&#39;b&#39;, 2), (&#39;d&#39;, 4)]  </span><br><span class="line">&gt;&gt;&gt; zip(m.values(), m.keys())  </span><br><span class="line">[(1, &#39;a&#39;), (3, &#39;c&#39;), (2, &#39;b&#39;), (4, &#39;d&#39;)]  </span><br><span class="line">&gt;&gt;&gt; mi &#x3D; dict(zip(m.values(), m.keys()))  </span><br><span class="line">&gt;&gt;&gt; mi  </span><br><span class="line">&#123;1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-15-列表展开"><a href="#1-15-列表展开" class="headerlink" title="1.15 列表展开"></a>1.15 列表展开</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [[1, 2], [3, 4], [5, 6]]  </span><br><span class="line">&gt;&gt;&gt; list(itertools.chain.from_iterable(a))  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; sum(a, [])  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; [x for l in a for x in l]  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]  </span><br><span class="line">&gt;&gt;&gt; [x for l1 in a for l2 in l1 for x in l2]  </span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, [3, 4], [[5, 6], [7, 8]]]  </span><br><span class="line">&gt;&gt;&gt; flatten &#x3D; lambda x: [y for l in x for y in flatten(l)] if type(x) is list else [x]  </span><br><span class="line">&gt;&gt;&gt; flatten(a)  </span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure><h3 id="1-16-生成器表达式"><a href="#1-16-生成器表达式" class="headerlink" title="1.16 生成器表达式"></a>1.16 生成器表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; g &#x3D; (x ** 2  for x in xrange(10))  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">0  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">4  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">9  </span><br><span class="line">&gt;&gt;&gt; sum(x ** 3  for x in xrange(10))  </span><br><span class="line">2025  </span><br><span class="line">&gt;&gt;&gt; sum(x ** 3  for x in xrange(10) if x % 3 &#x3D;&#x3D; 1)  </span><br><span class="line">408</span><br></pre></td></tr></table></figure><h3 id="1-17-字典推导"><a href="#1-17-字典推导" class="headerlink" title="1.17 字典推导"></a>1.17 字典推导</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: x ** 2  for x in range(5)&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: &#39;A&#39; + str(x) for x in range(10)&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;0: &#39;A0&#39;, 1: &#39;A1&#39;, 2: &#39;A2&#39;, 3: &#39;A3&#39;, 4: &#39;A4&#39;, 5: &#39;A5&#39;, 6: &#39;A6&#39;, 7: &#39;A7&#39;, 8: &#39;A8&#39;, 9: &#39;A9&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-18-用字典推导反转字典"><a href="#1-18-用字典推导反转字典" class="headerlink" title="1.18 用字典推导反转字典"></a>1.18 用字典推导反转字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;&#39;d&#39;: 4, &#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;  </span><br><span class="line">&gt;&gt;&gt; &#123;v: k for k, v in m.items()&#125;  </span><br><span class="line">&#123;1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-19-命名元组"><a href="#1-19-命名元组" class="headerlink" title="1.19 命名元组"></a>1.19 命名元组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Point &#x3D; collections.namedtuple(&#39;Point&#39;, [&#39;x&#39;, &#39;y&#39;])  </span><br><span class="line">&gt;&gt;&gt; p &#x3D; Point(x&#x3D;1.0, y&#x3D;2.0)  </span><br><span class="line">&gt;&gt;&gt; p  </span><br><span class="line">Point(x&#x3D;1.0, y&#x3D;2.0)  </span><br><span class="line">&gt;&gt;&gt; p.x  </span><br><span class="line">1.0  </span><br><span class="line">&gt;&gt;&gt; p.y  </span><br><span class="line">2.0</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://python.jobbole.com/63320/" target="_blank" rel="noopener">更多请查看原文</a>  </p></blockquote><h3 id="函数部分"><a href="#函数部分" class="headerlink" title="函数部分"></a>函数部分</h3><h3 id="all-iterable"><a href="#all-iterable" class="headerlink" title="all(iterable)"></a>all(iterable)</h3><p>如果可迭代的对象(数组，字符串，列表等，下同)中的元素都是true(或者为空)的话返回True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_all &#x3D; True  </span><br><span class="line">for item in iterable:  </span><br><span class="line">if  not item:  </span><br><span class="line">_all &#x3D; False  </span><br><span class="line">break  </span><br><span class="line">if _all:  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><p>更简便的写法是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if all(iterable):  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><h3 id="any-iterable"><a href="#any-iterable" class="headerlink" title="any(iterable)"></a>any(iterable)</h3><p>如果可迭代的对象中任何一个元素为true的话返回True,如果可迭代的对象为空则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_any &#x3D; False  </span><br><span class="line">for item in iterable:  </span><br><span class="line">if item:  </span><br><span class="line">_any &#x3D; True  </span><br><span class="line">break  </span><br><span class="line">if _any:  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><p>更简便的写法是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if any(iterable):  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure><h3 id="cmp-x-y"><a href="#cmp-x-y" class="headerlink" title="cmp(x, y)"></a>cmp(x, y)</h3><p>比较两个对象 x 和 y , x &lt; y 的时候返回负数， x ==y 的时候返回 0， x &gt; y 的时候返回正数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def compare(x,y):  </span><br><span class="line">if x &lt; y:  </span><br><span class="line">return -1  </span><br><span class="line">elif x &#x3D;&#x3D; y:  </span><br><span class="line">return  0  </span><br><span class="line">else:  </span><br><span class="line">return  1</span><br></pre></td></tr></table></figure><p>你完全可以使用一句 cmp(x, y) 来替代。</p><h3 id="dict-arg"><a href="#dict-arg" class="headerlink" title="dict([arg])"></a>dict([arg])</h3><p>使用 arg 提供的条目生成一个新的字典。<br>arg 通常是未知的，但是它很方便！比如说，如果我们想把一个含两个元组的列表转换成一个字典，我们可以这么做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l &#x3D; [(&#39;Knights&#39;, &#39;Ni&#39;), (&#39;Monty&#39;, &#39;Python&#39;), (&#39;SPAM&#39;, &#39;SPAAAM&#39;)]  </span><br><span class="line">d &#x3D; dict()  </span><br><span class="line">for tuple in l:  </span><br><span class="line">   d[tuple[0]] &#x3D; tuple[1]  </span><br><span class="line"># &#123;&#39;Knights&#39;: &#39;Ni&#39;, &#39;Monty&#39;: &#39;Python&#39;, &#39;SPAM&#39;: &#39;SPAAAM&#39;&#125;</span><br></pre></td></tr></table></figure><p>或者这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l &#x3D; [(&#39;Knights&#39;, &#39;Ni&#39;), (&#39;Monty&#39;, &#39;Python&#39;), (&#39;SPAM&#39;, &#39;SPAAAM&#39;)]  </span><br><span class="line">d &#x3D; dict(l) # &#123;&#39;Knights&#39;: &#39;Ni&#39;, &#39;Monty&#39;: &#39;Python&#39;, &#39;SPAM&#39;: &#39;SPAAAM&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="enumerate-iterable-start-0"><a href="#enumerate-iterable-start-0" class="headerlink" title="enumerate(iterable [,start=0])"></a>enumerate(iterable [,start=0])</h3><p>我真的是超级喜欢这个!如果你以前写过C语言，那么你可能会这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in range(len(list)):  </span><br><span class="line"># do stuff with list[i], for example, print it  </span><br><span class="line">print i, list[i]</span><br></pre></td></tr></table></figure><p>噢,不用那么麻烦!你可以使用enumerate()来提高可读性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i, item in enumerate(list):  </span><br><span class="line"># so stuff with item, for example print it  </span><br><span class="line">print i, item</span><br></pre></td></tr></table></figure><h3 id="isinstance-object-classinfo"><a href="#isinstance-object-classinfo" class="headerlink" title="isinstance(object, classinfo)"></a>isinstance(object, classinfo)</h3><p>如果 object 参数是 classinfo 参数的一个实例或者子类(直接或者间接)的话返回 True<br>当你想检验一个对象的类型的时候,第一个想到的应该是使用type()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if type(obj) &#x3D;&#x3D; type(dict):  </span><br><span class="line"># do stuff  </span><br><span class="line">elif type(obj) &#x3D;&#x3D; type(list):  </span><br><span class="line"># do other stuff  </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>或者你可以这么写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if isinstance(obj, dict):  </span><br><span class="line"># do stuff  </span><br><span class="line">elif isinstance(obj, list):  </span><br><span class="line"># do other stuff  </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="pow-x-y-z"><a href="#pow-x-y-z" class="headerlink" title="pow(x, y [,z])"></a>pow(x, y [,z])</h3><p>返回 x 的 y 次幂(如果 z 存在的话则以 z 为模)。<br>如果你想计算 x 的 y 次方，以 z 为模，那么你可以这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mod &#x3D; (x ** y) % z</span><br></pre></td></tr></table></figure><p>但是当 x=1234567， y=4567676， z=56 的时候我的电脑足足跑了 64 秒！<br>不要用 ** 和 % 了，使用 pow(x, y, z) 吧！这个例子可以写成 pow(1234567, 4567676, 56) ，只用了 0.034 秒就出了结果！</p><h3 id="zip-iterable"><a href="#zip-iterable" class="headerlink" title="zip([iterable, ])"></a>zip([iterable, ])</h3><p>这个函数返回一个含元组的列表，具体请看例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l1 &#x3D; (&#39;You gotta&#39;, &#39;the&#39;)  </span><br><span class="line">l2 &#x3D; (&#39;love&#39;, &#39;built-in&#39;)  </span><br><span class="line">out &#x3D; []  </span><br><span class="line">if len(l1) &#x3D;&#x3D; len(l2):  </span><br><span class="line">for i in range(len(l1)):  </span><br><span class="line">       out.append((l1[i], l2[i]))  </span><br><span class="line"># out &#x3D; [(&#39;You gotta&#39;, &#39;love&#39;), (&#39;the&#39;, &#39;built-in)]</span><br></pre></td></tr></table></figure><p>或者这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1 &#x3D; [&#39;You gotta&#39;, &#39;the&#39;]  </span><br><span class="line">l2 &#x3D; [&#39;love&#39;, &#39;built-in&#39;]  </span><br><span class="line">out &#x3D; zip(l1, l2) # [(&#39;You gotta&#39;, &#39;love&#39;), (&#39;the&#39;, &#39;built-in)]</span><br></pre></td></tr></table></figure><p>如果你想得到倒序的话加上 * 操作符就可以了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print zip(*out)  </span><br><span class="line"># [(&#39;You gotta&#39;, &#39;the&#39;), (&#39;love&#39;, &#39;built-in&#39;)]</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Python 内置函数很方便，它们很快并且经过了优化，所以它们可能效率更高。<br>我真心认为每个 Python 开发者都应该好好看看内置函数的文档(引言部分)。<br>忘了说了，在 itertools 模块中有很多很不错的函数。</p>]]></content>
    
    <summary type="html">
    
      Python小技巧和有趣的内置函数
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署Django+Vue前后端分离的项目</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:00:48.000Z</published>
    <updated>2020-04-20T06:01:07.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker部署Django-Vue前后端分离的项目"><a href="#Docker部署Django-Vue前后端分离的项目" class="headerlink" title="Docker部署Django+Vue前后端分离的项目"></a>Docker部署Django+Vue前后端分离的项目</h2><blockquote><p>本文主要介绍使用Docker环境部署一个Django Rest和Vue结合的前后端分离项目.</p></blockquote><h3 id="前端Vue"><a href="#前端Vue" class="headerlink" title="前端Vue"></a>前端Vue</h3><h4 id="使用Makefile编译打包"><a href="#使用Makefile编译打包" class="headerlink" title="使用Makefile编译打包"></a>使用Makefile编译打包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># cmdb-frontend makefile</span><br><span class="line">#</span><br><span class="line">SHELL :&#x3D; &#x2F;bin&#x2F;bash</span><br><span class="line">PATH  :&#x3D; node_modules&#x2F;.bin:$(PATH)</span><br><span class="line"></span><br><span class="line">NOW :&#x3D; $(shell date +&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">PROJECT :&#x3D; cmdb-frontend</span><br><span class="line">PKG_NAME :&#x3D; $(PROJECT).tar.gz</span><br><span class="line"></span><br><span class="line"># Docker</span><br><span class="line">REGISTRY :&#x3D; wcr.shuke.net</span><br><span class="line">NAME :&#x3D; devops&#x2F;$(PROJECT)</span><br><span class="line">TAG :&#x3D; v$(shell date +&quot;%Y%m%d&quot;)</span><br><span class="line">IMG :&#x3D; $(REGISTRY)&#x2F;$(NAME):$(TAG)</span><br><span class="line"></span><br><span class="line"># update helm values.yaml</span><br><span class="line">CONTENT :&#x3D; $(subst TAG,$(TAG),&#39;9 s&#x2F;.*&#x2F;  tag\: TAG&#x2F;g&#39;)</span><br><span class="line"></span><br><span class="line">all : install pkg build-img</span><br><span class="line">.PHONY: all</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">@echo -e &quot;\033[32m$(NOW): Build $&#123;PROJECT&#125; project\033[0m&quot;</span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line">pkg:</span><br><span class="line">@echo -e &quot;\033[32m$(NOW): start packing\033[0m&quot;</span><br><span class="line">tar zcf $(PKG_NAME) dist&#x2F;*</span><br><span class="line"></span><br><span class="line">build-img:</span><br><span class="line">@echo -e &quot;\033[32m$(NOW): Start build image...\033[0m&quot;</span><br><span class="line">cp -Ra dist nginx&#x2F;</span><br><span class="line">docker build -t $(IMG) nginx</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">@echo -e &quot;\033[32m$(NOW): clean...\033[0m&quot;</span><br><span class="line">-rm -rf $(PKG_NAME) dist nginx&#x2F;dist</span><br><span class="line">-docker rmi $(IMG)</span><br></pre></td></tr></table></figure><p>⚠️ 注: 在项目的根目录下执行<code>make all</code>命令进行编译打包操作以及生成docker镜像.</p><h4 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># cat cmdb.shuke.net.conf</span><br><span class="line">upstream cmdb-backend &#123;</span><br><span class="line">    server web:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name cmdb.shuke.net;</span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            try_files $uri $uri&#x2F; &#x2F;index.html @fallback;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        location @fallback &#123;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass    http:&#x2F;&#x2F;cmdb-backend;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚠️ 注: 需将nginx配置文件复制到Dokcer镜像中覆盖默认的配置文件</p><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># CMDB Frontend Nginx Dockerfile</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">FROM wcr.shuke.net&#x2F;base&#x2F;nginx:1.14.2</span><br><span class="line"></span><br><span class="line">LABEL maintainer&#x3D;&quot;shu_ke163@163.com&quot;</span><br><span class="line"></span><br><span class="line">COPY dist &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</span><br><span class="line"></span><br><span class="line">COPY cmdb.shuke.net.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;etc&#x2F;nginx</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure><p>⚠️ 注: 此处的nginx镜像可以使用Docker Hub官方的镜像也可以自定义.</p><h3 id="后端Django"><a href="#后端Django" class="headerlink" title="后端Django"></a>后端Django</h3><h4 id="Dockerfile-1"><a href="#Dockerfile-1" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># Django CMDB</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">FROM python:3</span><br><span class="line">ENV PYTHONUNBUFFERED 1</span><br><span class="line">RUN mkdir &#x2F;code</span><br><span class="line">WORKDIR &#x2F;code</span><br><span class="line">ADD requirements.txt &#x2F;code&#x2F;</span><br><span class="line">RUN pip install  --no-cache-dir -r requirements.txt</span><br><span class="line">ADD . &#x2F;code&#x2F;</span><br><span class="line">EXPOSE 8000</span><br><span class="line">CMD [&quot;python&quot;, &quot;.&#x2F;manage.py runserver 0.0.0.0:8000&quot;]</span><br></pre></td></tr></table></figure><p>⚠️ 注: 将Dockerfile放入Django的项目根节点目录下,用于构建后端容器</p><h4 id="docker-compose-yml-文件"><a href="#docker-compose-yml-文件" class="headerlink" title="docker-compose.yml 文件"></a>docker-compose.yml 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:4</span><br><span class="line">    container_name: cmdb-redis</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:5.6</span><br><span class="line">    container_name: cmdb-mysql</span><br><span class="line">    volumes:</span><br><span class="line">      - ~&#x2F;data&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: admin123</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3307:3306&quot;</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    image: cmdb-backend:v1.0.0</span><br><span class="line">    container_name: cmdb-backend</span><br><span class="line">    command: python3 manage.py runserver 0.0.0.0:8000</span><br><span class="line">    volumes:</span><br><span class="line">      - .:&#x2F;code</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8000:8000&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">      - db</span><br><span class="line">    links:</span><br><span class="line">      - redis</span><br><span class="line">      - db</span><br><span class="line">  nginx:</span><br><span class="line">   # 前端Vue项目Dockerfile所在目录 </span><br><span class="line">    build: ..&#x2F;cmdb-frontend&#x2F;nginx&#x2F;</span><br><span class="line">    image: cmdb-frontend:v1.0.0</span><br><span class="line">    container_name: cmdb-nginx</span><br><span class="line">    ports:</span><br><span class="line">      - 9000:80</span><br><span class="line">    depends_on:</span><br><span class="line">      - web</span><br><span class="line">    links:</span><br><span class="line">      - web</span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure><p>⚠️ 注: 使用docker-compose 进行管理项目的所有依赖,包括redis/mysql/django/nginx容器,控制整个项目所依赖的所有容器的生命周期,使用<code>docker-compose up -d</code>命令拉取或生成镜像并启动项目依赖的所有容器</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">1. docker-compose build web   构建后端Django项目容器</span><br><span class="line">2. docker-compose build nginx 构建前端Vue项目容器</span><br><span class="line">3. docker-compose up 前台启动项目</span><br><span class="line">4. docker-compose up 后台启动项目</span><br><span class="line">5. docker-compose images 查看项目所有镜像</span><br><span class="line">6. docker-compose ps 查看项目所有容器</span><br><span class="line">7. docker-compose logs -f [service name] 如:web&#x2F;nginx  查看容器log信息</span><br><span class="line">8. docker-compose config 查看docker-compose.yml文件内容并校验</span><br><span class="line">9. $ docker-compose port nginx 80   # 查看服务的端口映射</span><br><span class="line">0.0.0.0:9000</span><br><span class="line">10. docker-compose stop db 停止单个容器</span><br><span class="line">11. docker-compose start db 启动单个容器</span><br><span class="line">12. docker-compose restart db 重启单个容器</span><br><span class="line">13. docker-compose start   启动所有容器</span><br><span class="line">14. docker-compose stop  停止所有容器</span><br><span class="line">15. docker-compose restart  重启所有容器</span><br><span class="line">16. docker-compose rm  删除所有已停止的容器</span><br><span class="line"></span><br><span class="line"># 以下是所有的docker-compose一些命令参数</span><br><span class="line">Commands:</span><br><span class="line">  build              Build or rebuild services</span><br><span class="line">  bundle             Generate a Docker bundle from the Compose file</span><br><span class="line">  config             Validate and view the Compose file</span><br><span class="line">  create             Create services</span><br><span class="line">  down               Stop and remove containers, networks, images, and volumes</span><br><span class="line">  events             Receive real time events from containers</span><br><span class="line">  exec               Execute a command in a running container</span><br><span class="line">  help               Get help on a command</span><br><span class="line">  images             List images</span><br><span class="line">  kill               Kill containers</span><br><span class="line">  logs               View output from containers</span><br><span class="line">  pause              Pause services</span><br><span class="line">  port               Print the public port for a port binding</span><br><span class="line">  ps                 List containers</span><br><span class="line">  pull               Pull service images</span><br><span class="line">  push               Push service images</span><br><span class="line">  restart            Restart services</span><br><span class="line">  rm                 Remove stopped containers</span><br><span class="line">  run                Run a one-off command</span><br><span class="line">  scale              Set number of containers for a service</span><br><span class="line">  start              Start services</span><br><span class="line">  stop               Stop services</span><br><span class="line">  top                Display the running processes</span><br><span class="line">  unpause            Unpause services</span><br><span class="line">  up                 Create and start containers</span><br><span class="line">  version            Show the Docker-Compose version information</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Docker部署Django+Vue前后端分离的项目
    
    </summary>
    
    
      <category term="Docker" scheme="https://shuke163.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://shuke163.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Django 找回密码</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T06:00:13.000Z</published>
    <updated>2020-04-20T06:00:30.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django-找回密码"><a href="#Django-找回密码" class="headerlink" title="Django 找回密码"></a>Django 找回密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line">from django.contrib.auth.hashers import make_password</span><br><span class="line"></span><br><span class="line">def findpassword(request):</span><br><span class="line">    button &#x3D; &quot;获取验证码&quot;</span><br><span class="line">    new_password &#x3D; False</span><br><span class="line">    </span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">        username &#x3D; request.POST.get(&quot;username&quot;,&#39;root&#39;)</span><br><span class="line">        VerificationCode &#x3D; request.POST.get(&quot;VerificationCode&quot;,&quot;&quot;)</span><br><span class="line">        password&#x3D; request.POST.get(&quot;password&quot;,&quot;&quot;)</span><br><span class="line">        user &#x3D; User.objects.filter(username&#x3D;username)</span><br><span class="line">        if not user:</span><br><span class="line">            tips &#x3D; f&quot;用户&#123;username&#125;不存在&quot;</span><br><span class="line">        else:</span><br><span class="line">            if not request.session.get(&quot;VerificationCode&quot;,&quot;&quot;):</span><br><span class="line">                button &#x3D; &quot;重置密码&quot;</span><br><span class="line">                tips &#x3D; &quot;验证码已发送&quot;</span><br><span class="line">                new_password &#x3D; True</span><br><span class="line">                VerificationCode &#x3D; str(random.randint(1000,9999))</span><br><span class="line">                request.session[&quot;VerificationCode&quot;] &#x3D; VerificationCode</span><br><span class="line">                user[0].email_user(&quot;找回密码&quot;,VerificationCode)</span><br><span class="line">            elif verificationCode &#x3D;&#x3D; request.session.get(&quot;verificationCode&quot;):</span><br><span class="line">                dj_ps &#x3D; make_password(password,None,&quot;pbkdf2_sha256&quot;)</span><br><span class="line">                user[0].password &#x3D; dj_ps</span><br><span class="line">                user[0].save()</span><br><span class="line">                del request.session[&quot;VerificationCode&quot;]</span><br><span class="line">                tips &#x3D; &quot;密码已重置&quot;</span><br><span class="line">            else</span><br><span class="line">               tips &#x3D; &quot;验证码错误，请重新获取&quot;</span><br><span class="line">               new_password &#x3D; False</span><br><span class="line">               def request.session[&quot;VerificationCode&quot;]</span><br><span class="line">      return render(request,&quot;user.html&quot;,locals())</span><br></pre></td></tr></table></figure><h3 id="用户model的实现"><a href="#用户model的实现" class="headerlink" title="用户model的实现"></a>用户model的实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># models.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth.models import AbstractUser</span><br><span class="line"></span><br><span class="line">class MyUser(AbstractUser):</span><br><span class="line">    qq &#x3D; models.ChardField(&quot;QQ 号码&quot;, max_length&#x3D;16)</span><br><span class="line">    weChat &#x3D; models.ChardField(&quot;微信&quot;, max_length&#x3D;100)</span><br><span class="line">    mobile &#x3D; models.ChardField(&quot;手机号码&quot;, max_length&#x3D;11)</span><br><span class="line">    </span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.username</span><br></pre></td></tr></table></figure><h2 id="扩展MyUser-Admin-信息"><a href="#扩展MyUser-Admin-信息" class="headerlink" title="扩展MyUser Admin 信息"></a>扩展MyUser Admin 信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from .models import MyUser</span><br><span class="line">from django.contrib.auth.admin import UserAdmin</span><br><span class="line">from django.utils.translation import gettext_lazy as _</span><br><span class="line"></span><br><span class="line">@admin.register(MyUser)</span><br><span class="line">class MyUserAdmin(UserAdmin):</span><br><span class="line">    list_display &#x3D; [&quot;uername&quot;,&quot;email&quot;,&quot;mobile&quot;,&quot;qq&quot;,&quot;weChat&quot;]</span><br><span class="line">    fieldsets &#x3D; list(&quot;UserAdmin.fielsets&quot;)</span><br><span class="line">    fieldsets[1] &#x3D; (_(&quot;Personal info&quot;),&#123;&quot;fields&quot;: (&quot;first_name&quot;,&quot;last_name&quot;,&quot;email&quot;,&quot;mobile&quot;,&quot;qq&quot;,&quot;weChat&quot;))&#125;)</span><br></pre></td></tr></table></figure><h2 id="Admin后台app设置"><a href="#Admin后台app设置" class="headerlink" title="Admin后台app设置"></a>Admin后台app设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># __init__.py</span><br><span class="line"></span><br><span class="line">from django.apps import AppConfig</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">## 修改app在admin后台显示名称</span><br><span class="line">## default_app_config的值来自apps.py类名</span><br><span class="line"></span><br><span class="line">default_app_config &#x3D; &quot;user.IndexConfig&quot;</span><br><span class="line"></span><br><span class="line"># 获取当前app的命名</span><br><span class="line">def get_current_app_name(_file):</span><br><span class="line">    return os.path.split(os.path.dirname(_file_)[-1])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 重写类 IndexConfig</span><br><span class="line">class IndexConfig(AppConfig):</span><br><span class="line">    name &#x3D; get_current_app_name(__file__)</span><br><span class="line">    verbose_name &#x3D; &quot;用户管理&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Django 找回密码
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django 数据类型</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T05:59:20.000Z</published>
    <updated>2020-04-20T05:59:53.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django-数据类型"><a href="#Django-数据类型" class="headerlink" title="Django 数据类型"></a>Django 数据类型</h2><table><thead><tr><th>表字段</th><th>说明</th></tr></thead><tbody><tr><td>models.Auto.Field</td><td>默认会生成一个名为ID的字段并为int类型</td></tr><tr><td>models.CharField</td><td>字符串类型</td></tr><tr><td>models.BooleanField</td><td>布尔类型</td></tr><tr><td>models.ComaSeparatedIntegerField</td><td>用逗号分隔的整数类型</td></tr><tr><td>models.DateField</td><td>日期(date)类型</td></tr><tr><td>models.DateTimeFile</td><td>日期(datetime)类型</td></tr><tr><td>models.Decimal</td><td>十进制小数类型</td></tr><tr><td>models.EmailField</td><td>字符串类型(正则表达式邮箱)</td></tr><tr><td>models.FloatField</td><td>浮点类型</td></tr><tr><td>models.IntegerField</td><td>整数类型</td></tr><tr><td>models.BigIntegerField</td><td>长整数类型</td></tr><tr><td>models.IPAddressField</td><td>字符串类型(正则表达式)</td></tr><tr><td>models.GenericIPAddressField</td><td>字符串类型，参数protocal可以是: both,IPv4和IPv6，验证IP地址</td></tr><tr><td>models.NullBooleanField</td><td>允许为空的布尔类型</td></tr><tr><td>models.PositiveIntegerField</td><td>正整数的整数类型</td></tr><tr><td>models.PositiveSmallIntegerField</td><td>小正整数类型</td></tr><tr><td>models.SlugField</td><td>包含字母/数字/下划线和连字符的字符串，常用语URL</td></tr><tr><td>models.SmallIntergerField</td><td>小整数类型，取值范围是(-32,768~+32,767)</td></tr><tr><td>models.TextField</td><td>长文本类型</td></tr><tr><td>models.Timefiled</td><td>时间类型，显示时分秒</td></tr><tr><td>models.URLField</td><td>字符串，地址为正则表达式</td></tr><tr><td>models.BinaryField</td><td>二进制数据类型</td></tr></tbody></table><h3 id="表字段参数设置"><a href="#表字段参数设置" class="headerlink" title="表字段参数设置"></a>表字段参数设置</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>Null</td><td>如为True,字段是否可以为空</td></tr><tr><td>Blank</td><td>如为True， 设置在Admin后台站点管理中添加数据时可以允许为空值</td></tr><tr><td>Default</td><td>设置为默认值</td></tr><tr><td>primary_key</td><td>如为True，将字段设置为主键</td></tr><tr><td>db_column</td><td>设置数据库中的字段名称</td></tr><tr><td>Unique</td><td>如为True,将自督办设置成唯一属性，默认为False</td></tr><tr><td>db_index</td><td>如为True，将字段添加数据库索引</td></tr><tr><td>verbose_name</td><td>在Admin站点管理设置字段的显示名称</td></tr><tr><td>related_name</td><td>关联对象反向饮用描述符，用于多表查询，可解决一个数据表有2个外键同时指向另一个数据表而出现重名的问题</td></tr></tbody></table><h3 id="django常用的内置函数"><a href="#django常用的内置函数" class="headerlink" title="django常用的内置函数"></a>django常用的内置函数</h3><table><thead><tr><th>内置函数</th><th>说明</th></tr></thead><tbody><tr><td>authenticate</td><td>验证用户是否存在，必选参数为<code>username</code>和<code>password</code>，只能用于模型User</td></tr><tr><td>create_user</td><td>创建新的用户信息，必选参数为<code>username</code>,只能用于模型User</td></tr><tr><td>set_password</td><td>修改用户密码，必选参数为<code>password</code>，只能用于模型User</td></tr><tr><td>login/logout</td><td>用户的的登陆和注销，只能用于模型User</td></tr><tr><td>make_password</td><td>密码加密处理，必选参数为<code>password</code>，可脱离模型User单独使用</td></tr><tr><td>check_password</td><td>校验加密前后的密码是否相同，可脱离模型User单独使用</td></tr><tr><td>email_user</td><td>发送邮件，只用用于模型User</td></tr><tr><td>send_mail</td><td>发送邮件</td></tr><tr><td>send_mass_mail</td><td>批量发送邮件</td></tr><tr><td>EmailMutilAlternatives</td><td>发送自定义内容格式的邮件</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      Django 数据类型
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>世界上最小的Django项目示例</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T05:58:22.000Z</published>
    <updated>2020-04-20T05:58:51.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-世界上最小的Django项目示例"><a href="#一-世界上最小的Django项目示例" class="headerlink" title="一. 世界上最小的Django项目示例"></a>一. 世界上最小的Django项目示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># hello.py</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line">DEBUG &#x3D; os.environ.get(&quot;DEBUG&quot;,&quot;on&quot;) &#x3D;&#x3D; &quot;on&quot;</span><br><span class="line">SECRET_KEY &#x3D; os.environ.get(&quot;SECRET_KEY&quot;,&quot;&#123;&#123; secret_key &#125;&#125;&quot;)</span><br><span class="line">ALLOWED_HOSTS &#x3D; os.environ.get(&quot;ALLOWED_HOST&quot;,&quot;localhost&quot;).split(&quot;,&quot;)</span><br><span class="line"></span><br><span class="line">settings.configure(</span><br><span class="line">    DEBUG&#x3D;DEBUG,</span><br><span class="line">    SECRET_KEY&#x3D;SECRET_KEY,</span><br><span class="line">    ALLOWED_HOSTS&#x3D;ALLOWED_HOSTS,</span><br><span class="line">    ROOT_URLCONF&#x3D;__name__,</span><br><span class="line">    MIDDLEWARE_CLASSES&#x3D;(</span><br><span class="line">        &#39;django.middleware.common.CommonMiddleware&#39;,</span><br><span class="line">        &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</span><br><span class="line">        &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    return HttpResponse(&#39;Heello World&#39;)</span><br><span class="line">    </span><br><span class="line">urlpatters &#x3D; (</span><br><span class="line">    url(r&#39;^$&#39;,index),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">if __name &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    from django.core.management import execute_from_command_line</span><br><span class="line">    execute_from_command_line(sys.argv)</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python hello.py runserver</span><br></pre></td></tr></table></figure><h2 id="二-使用gunincorn运行python服务"><a href="#二-使用gunincorn运行python服务" class="headerlink" title="二. 使用gunincorn运行python服务"></a>二. 使用gunincorn运行python服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># cat hello.py</span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.core.wsgi import get_wsgi_application</span><br><span class="line">from django.http import Httpresponse</span><br><span class="line"></span><br><span class="line">application &#x3D; get_wsgi_application()</span><br><span class="line"></span><br><span class="line">if __name &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">   from django.core.management import execute_from_command_line</span><br><span class="line">   execute_from_command_line(sys.argv)</span><br></pre></td></tr></table></figure><h3 id="安装gunicorn并运行"><a href="#安装gunicorn并运行" class="headerlink" title="安装gunicorn并运行"></a>安装gunicorn并运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># pip install gunicorn</span><br><span class="line"># gunicorn hello --log-file&#x3D;-</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      世界上最小的Django项目示例
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django序列化</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T05:56:25.000Z</published>
    <updated>2020-04-20T05:58:02.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django序列化"><a href="#Django序列化" class="headerlink" title="Django序列化"></a>Django序列化</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>序列化的model中含choice字段信息存在的问题，status会显示数字而非状态相关的文本，通过在<code>serializers.py</code>文件中添加另一个<code>status_display</code>字段类显示状态文本，便可以解决该问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from rest——framework import serializers</span><br><span class="line">from .models import Sprint,Task</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">class TaskSerializer(serializers.ModelSerializer):</span><br><span class="line">   status_display &#x3D; serializers.SerializerMethodField()</span><br><span class="line">   </span><br><span class="line">   class Meta:</span><br><span class="line">       model &#x3D; Task</span><br><span class="line">       fields &#x3D; (&quot;id&quot;,&quot;name&quot;,&quot;description&quot;,&quot;sprint&quot;,&quot;status&quot;,&quot;status_display&quot;,&quot;order&quot;,&quot;assignred&quot;,&quot;started&quot;,&quot;due&quot;,&quot;completed&quot;,)</span><br><span class="line">       </span><br><span class="line">   def get_status_display(self,obj):</span><br><span class="line">       return obj.get_status_display()</span><br></pre></td></tr></table></figure><ul><li>status_display 是一个只读字段，返回序列化器中<code>get_status_display</code>中方法的值,该方法的语法格式为<code>get</code> + 下划线 + 字段名称组成，如上所示，<code>get_status_display</code></li></ul><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><blockquote><p>序列化遇到的第二个问题是: <code>assigned</code>是一个指向<code>User</code>模型中的外键,这里显示的是用户的主键，然而我们的URL结构期望通过用户名来引用用户，我们在<code>serializers</code>中使用<code>SlugRelatedField</code>来解决这个问题       </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class TaskSerializer(serializers.ModelSerializer):</span><br><span class="line">    assigned &#x3D; serializers.SlugRelatedField(</span><br><span class="line">        slug_field&#x3D;User.USERNAME_FIELD, required&#x3D;False, allow_null&#x3D;true,</span><br><span class="line">        queryset&#x3D;user.objects.all()</span><br><span class="line">    )</span><br><span class="line">    status_display &#x3D; serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Task</span><br><span class="line">        fields &#x3D; (</span><br><span class="line">            &quot;id&quot;, &quot;name&quot;, &quot;description&quot;, &quot;sprint&quot;, &quot;status&quot;, &quot;status_display&quot;, &quot;order&quot;, &quot;assigned&quot;, &quot;started&quot;, &quot;due&quot;,</span><br><span class="line">            &quot;completed&quot;)</span><br><span class="line"></span><br><span class="line">    def get_status_display(self, obj):</span><br><span class="line">        return obj.get_status_display()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Django序列化
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django REST framework API认证(包含JWT认证) + 权限</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-20T05:55:32.000Z</published>
    <updated>2020-04-20T05:56:07.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django-REST-framework-API认证-包含JWT认证-权限"><a href="#Django-REST-framework-API认证-包含JWT认证-权限" class="headerlink" title="Django REST framework API认证(包含JWT认证) + 权限"></a>Django REST framework API认证(包含JWT认证) + 权限</h2><h3 id="一-背景"><a href="#一-背景" class="headerlink" title="一. 背景"></a>一. 背景</h3><p>在我们学习Django Rest Framework（简称DRF）时，其非常友好地给我们提供了一个可浏览API的界面。很多测试工作都可以在可浏览API界面完成测试。要使用可浏览API界面很简单，只需要在urls.py文件中添加如下部分即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import include</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-auth&#x2F;&#39;, include(&#39;rest_framework.urls&#39;,</span><br><span class="line">                               namespace&#x3D;&#39;rest_framework&#39;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>其中，r’^api-auth/‘部分实际上可以用任何你想使用URL替代。唯一的限制是所包含的URL必须使用’rest_framework’命名空间。在Django 1.9+中，REST framework将自动设置，所以你也无须关心。</p><p>配置完成后，如果再次打开浏览器API界面并刷新页面，你将在页面右上角看到一个“Log in”链接。这就是DRF提供的登录和登出入口，可以用来完成认证。</p><p>然后进入到’rest_framework.urls’源码，是可以看到提供了’login’和’logout’两个接口，分别用来登入和登录的。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if django.VERSION &lt; (1, 11):</span><br><span class="line">    login &#x3D; views.login</span><br><span class="line">    login_kwargs &#x3D; &#123;&#39;template_name&#39;: &#39;rest_framework&#x2F;login.html&#39;&#125;</span><br><span class="line">    logout &#x3D; views.logout</span><br><span class="line">else:</span><br><span class="line">    login &#x3D; views.LoginView.as_view(template_name&#x3D;&#39;rest_framework&#x2F;login.html&#39;)</span><br><span class="line">    login_kwargs &#x3D; &#123;&#125;</span><br><span class="line">    logout &#x3D; views.LogoutView.as_view()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">app_name &#x3D; &#39;rest_framework&#39;</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^login&#x2F;$&#39;, login, login_kwargs, name&#x3D;&#39;login&#39;),</span><br><span class="line">    url(r&#39;^logout&#x2F;$&#39;, logout, name&#x3D;&#39;logout&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>其中login接口调用LoginView视图，logout接口调用LogoutView视图。这两个视图都是django.contrib.auth应用提供的。在LogoutView视图中，有这么一个装饰器@method_decorator(csrf_protect)，是用来做CSRF code验证的，就是做表单安全验证的，防止跨站攻击。而这个CSRF code是在返回HTML页面的时候Django会自动注册这么一个CSRF code方法，而在template中会自动调用这个方法生成code值。在前端页面元素form部分，可以查看到name=”csrfmiddlewaretoken”标识，且在Django返回的 HTTP 响应的 cookie 里，Django 会为你添加一个csrftoken 字段，其值为一个自动生成的token。这就是用来做表单安全验证的，具体关于CSRF原理见Django章节。</p><p>这里要说明一个问题就是这个LoginView我们是无法直接拿来用的，因为它需要做CSRF验证，而在前后端分离系统中不需要做CSRF验证，这里不存在站内站外的问题，本身就是跨站访问的。那么在我们前后端分离项目中，如何做API接口的验证呢？其实framework也已经提供了多种验证方式。</p><h3 id="二-身份验证"><a href="#二-身份验证" class="headerlink" title="二. 身份验证"></a>二. 身份验证</h3><p>REST framework提供了许多开箱即用的身份验证方案，同时也允许你实施自定义方案。这里需要明确一下用户认证（Authentication）和用户授权（Authorization）是两个不同的概念，认证解决的是“有没有”的问题，而授权解决的是“能不能”的问题。</p><p>BasicAuthentication<br>该认证方案使用 HTTP Basic Authentication，并根据用户的用户名和密码进行签名。Basic Authentication 通常只适用于测试。</p><p>SessionAuthentication<br>此认证方案使用 Django 的默认 session 后端进行认证。Session 身份验证适用于与您的网站在同一会话环境中运行的 AJAX 客户端。</p><p>TokenAuthentication<br>此认证方案使用简单的基于令牌的 HTTP 认证方案。令牌身份验证适用于 client-server 架构，例如本机桌面和移动客户端。</p><p>RemoteUserAuthentication<br>这种身份验证方案允许您将身份验证委托给您的 Web 服务器，该服务器设置 REMOTE_USER 环境变量。</p><p>默认的认证方案可以使用DEFAULT_AUTHENTICATION_CLASSES全局设置，在settings.py文件配置。在默认情况下，DRF开启了 BasicAuthentication 与 SessionAuthentication 的认证。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (</span><br><span class="line">        &#39;rest_framework.authentication.BasicAuthentication&#39;,</span><br><span class="line">        &#39;rest_framework.authentication.SessionAuthentication&#39;,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于DRF，几乎所有的配置都定义在MREST_FRAMEWORK变量中。另外，关于认证方式DRF默认会检测配置在DEFAULT_AUTHENTICATION_CLASSES变量中的所有认证方式，只要有一个认证方式通过即可登录成功。这里的DEFAULT_AUTHENTICATION_CLASSES与Django中的MIDDLEWARE类似，在将request通过url映射到views之前，Django和DRF都会调用定义在MREST_FRAMEWORK变量中的类的一些方法。<br>另外，你还可以使用基于APIView类的视图，在每个视图或每个视图集的基础上设置身份验证方案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.authentication import SessionAuthentication, BasicAuthentication</span><br><span class="line">from rest_framework.permissions import IsAuthenticated</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line"> </span><br><span class="line">class ExampleView(APIView):</span><br><span class="line">    authentication_classes &#x3D; (SessionAuthentication, BasicAuthentication)</span><br><span class="line">    permission_classes &#x3D; (IsAuthenticated,)</span><br><span class="line"> </span><br><span class="line">    def get(self, request, format&#x3D;None):</span><br><span class="line">        content &#x3D; &#123;</span><br><span class="line">            &#39;user&#39;: unicode(request.user),  # &#96;django.contrib.auth.User&#96; instance.</span><br><span class="line">            &#39;auth&#39;: unicode(request.auth),  # None</span><br><span class="line">        &#125;</span><br><span class="line">        return Response(content)</span><br></pre></td></tr></table></figure><p>需要明白的一点是，DRF的认证是在定义有权限类（permission_classes）的视图下才有作用，且权限类（permission_classes）必须要求认证用户才能访问此视图。如果没有定义权限类（permission_classes），那么也就意味着允许匿名用户的访问，自然牵涉不到认证相关的限制了。所以，一般在项目中的使用方式是在全局配置DEFAULT_AUTHENTICATION_CLASSES认证，然后会定义多个base views，根据不同的访问需求来继承不同的base views即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.permissions import (</span><br><span class="line">    IsAuthenticated,</span><br><span class="line">    IsAdminUser,</span><br><span class="line">    IsAuthenticatedOrReadOnly</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">class BaseView(APIView):</span><br><span class="line">    &#39;&#39;&#39;普通用户&#39;&#39;&#39;</span><br><span class="line">    permission_classes &#x3D; (</span><br><span class="line">        IsOwnerOrReadOnly,</span><br><span class="line">        IsAuthenticated</span><br><span class="line">    )</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class SuperUserpermissions(APIView):</span><br><span class="line">    &#39;&#39;&#39;超级用户&#39;&#39;&#39;</span><br><span class="line">    permission_classes &#x3D; (IsAdminUser,)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class NotLogin(APIView):</span><br><span class="line">    &#39;&#39;&#39;匿名用户&#39;&#39;&#39;</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>另外，在前后端分离项目中一般不会使用 BasicAuthentication 与 SessionAuthentication 的认证方式。所以，我们只需要关心 TokenAuthentication 认证方式即可。</p><h3 id="三-TokenAuthentication"><a href="#三-TokenAuthentication" class="headerlink" title="三.TokenAuthentication"></a>三.TokenAuthentication</h3><p>要使用<code>TokenAuthentication</code>方案，你需要将认证类配置为包含<code>TokenAuthentication</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (</span><br><span class="line">        &#39;rest_framework.authentication.BasicAuthentication&#39;,</span><br><span class="line">        &#39;rest_framework.authentication.SessionAuthentication&#39;,</span><br><span class="line">        &#39;rest_framework.authentication.TokenAuthentication&#39;,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在INSTALLED_APPS设置中另外包含 rest_framework.authtoken：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; (</span><br><span class="line">    ...</span><br><span class="line">    &#39;rest_framework.authtoken&#39;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>注意： rest_framework.authtoken应用一定要放到INSTALLED_APPS，并且确保在更改设置后运行<code>python manage.py migrate</code>。 rest_framework.authtoken应用需要创建一张表用来存储用户与Token的对应关系。<br>数据库迁移完成后，可以看到多了一个authtoken_token表，表结构如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table authtoken_token\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: authtoken_token</span><br><span class="line">Create Table: CREATE TABLE &#96;authtoken_token&#96; (</span><br><span class="line">  &#96;key&#96; varchar(40) NOT NULL,</span><br><span class="line">  &#96;created&#96; datetime(6) NOT NULL,</span><br><span class="line">  &#96;user_id&#96; int(11) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;key&#96;),</span><br><span class="line">  UNIQUE KEY &#96;user_id&#96; (&#96;user_id&#96;),</span><br><span class="line">  CONSTRAINT &#96;authtoken_token_user_id_35299eff_fk_auth_user_id&#96; FOREIGN KEY (&#96;user_id&#96;) REFERENCES &#96;auth_user&#96; (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>其中“user_id”字段关联到了用户表。</p><ul><li>配置URLconf<br>使用<code>TokenAuthentication</code>时，你可能希望为客户提供一种机制，以获取给定用户名和密码的令牌。 REST framework 提供了一个内置的视图来支持这种行为。要使用它，请将<code>obtain_auth_token</code>视图添加到您的 URLconf 中：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.authtoken import views</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-token-auth&#x2F;&#39;, views.obtain_auth_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>其中，<code>r&#39;^api-token-auth/&#39;</code>部分实际上可以用任何你想使用URL替代。</li><li>创建Token<br>你还需要为用户创建令牌，用户令牌与用户是一一对应的。如果你已经创建了一些用户，则可以为所有现有用户生成令牌，例如<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.models import User</span><br><span class="line">from rest_framework.authtoken.models import Token</span><br><span class="line"> </span><br><span class="line">for user in User.objects.all():</span><br><span class="line">    Token.objects.get_or_create(user&#x3D;user)</span><br></pre></td></tr></table></figure>你也可以为某个已经存在的用户创建Token：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for user in User.objects.filter(username&#x3D;&#39;admin&#39;):</span><br><span class="line">    Token.objects.get_or_create(user&#x3D;user)</span><br></pre></td></tr></table></figure>创建成功后，会在Token表中生成对应的Token信息。</li></ul><p>如果你希望每个用户都拥有一个自动生成的令牌，则只需捕捉用户的<code>post_save</code>信号即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.conf import settings</span><br><span class="line">from django.db.models.signals import post_save</span><br><span class="line">from django.dispatch import receiver</span><br><span class="line">from rest_framework.authtoken.models import Token</span><br><span class="line"></span><br><span class="line">@receiver(post_save, sender&#x3D;settings.AUTH_USER_MODEL)</span><br><span class="line">def create_auth_token(sender, instance&#x3D;None, created&#x3D;False, **kwargs):</span><br><span class="line">    if created:</span><br><span class="line">        Token.objects.create(user&#x3D;instance)</span><br></pre></td></tr></table></figure><p>请注意，你需要确保将此代码片段放置在已安装的models.py模块或 Django 启动时将导入的其他某个位置。</p><ul><li>获取Token<br>上面虽然介绍了多种创建Token的方式，其实我们最简单的就是只需要配置一下urls.py，然后就可以通过暴露的API来获取Token了。当使用表单数据或 JSON 将有效的username和password字段发布到视图时，obtain_auth_token视图将返回 JSON 响应：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -d &quot;username&#x3D;admin&amp;password&#x3D;admin123456&quot; http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;api-token-auth&#x2F;</span><br><span class="line">&#123;&quot;token&quot;:&quot;684b41712e8e38549504776613bd5612ba997616&quot;&#125;</span><br></pre></td></tr></table></figure>请注意，缺省的<code>obtain_auth_token</code>视图显式使用 JSON 请求和响应，而不是使用你设置的默认的渲染器和解析器类。</li></ul><p>当我们正常获取到Token后，<code>obtain_auth_token</code>视图会自动帮我们在Token表中创建对应的Token。源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class ObtainAuthToken(APIView):</span><br><span class="line">    throttle_classes &#x3D; ()</span><br><span class="line">    permission_classes &#x3D; ()</span><br><span class="line">    parser_classes &#x3D; (parsers.FormParser, parsers.MultiPartParser, parsers.JSONParser,)</span><br><span class="line">    renderer_classes &#x3D; (renderers.JSONRenderer,)</span><br><span class="line">    serializer_class &#x3D; AuthTokenSerializer</span><br><span class="line">    if coreapi is not None and coreschema is not None:</span><br><span class="line">        schema &#x3D; ManualSchema(</span><br><span class="line">            fields&#x3D;[</span><br><span class="line">                coreapi.Field(</span><br><span class="line">                    name&#x3D;&quot;username&quot;,</span><br><span class="line">                    required&#x3D;True,</span><br><span class="line">                    location&#x3D;&#39;form&#39;,</span><br><span class="line">                    schema&#x3D;coreschema.String(</span><br><span class="line">                        title&#x3D;&quot;Username&quot;,</span><br><span class="line">                        description&#x3D;&quot;Valid username for authentication&quot;,</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">                coreapi.Field(</span><br><span class="line">                    name&#x3D;&quot;password&quot;,</span><br><span class="line">                    required&#x3D;True,</span><br><span class="line">                    location&#x3D;&#39;form&#39;,</span><br><span class="line">                    schema&#x3D;coreschema.String(</span><br><span class="line">                        title&#x3D;&quot;Password&quot;,</span><br><span class="line">                        description&#x3D;&quot;Valid password for authentication&quot;,</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">            ],</span><br><span class="line">            encoding&#x3D;&quot;application&#x2F;json&quot;,</span><br><span class="line">        )</span><br><span class="line"> </span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        serializer &#x3D; self.serializer_class(data&#x3D;request.data,</span><br><span class="line">                                           context&#x3D;&#123;&#39;request&#39;: request&#125;)</span><br><span class="line">        serializer.is_valid(raise_exception&#x3D;True)</span><br><span class="line">        user &#x3D; serializer.validated_data[&#39;user&#39;]</span><br><span class="line">        token, created &#x3D; Token.objects.get_or_create(user&#x3D;user)</span><br><span class="line">        return Response(&#123;&#39;token&#39;: token.key&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">obtain_auth_token &#x3D; ObtainAuthToken.as_view()</span><br></pre></td></tr></table></figure><p>默认情况下，没有权限或限制应用于<code>obtain_auth_token</code>视图。 如果您希望应用<code>throttling</code>，则需要重写视图类，并使用<code>throttle_classes</code>属性包含它们。</p><p>如果你需要自定义<code>obtain_auth_token</code>视图，你可以通过继承<code>ObtainAuthToken</code>视图类来实现，并在你的urls.py中使用它。例如，你可能会返回超出token值的其他用户信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.authtoken.views import ObtainAuthToken</span><br><span class="line">from rest_framework.authtoken.models import Token</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"> </span><br><span class="line">class CustomAuthToken(ObtainAuthToken):</span><br><span class="line"> </span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        serializer &#x3D; self.serializer_class(data&#x3D;request.data,</span><br><span class="line">                                           context&#x3D;&#123;&#39;request&#39;: request&#125;)</span><br><span class="line">        serializer.is_valid(raise_exception&#x3D;True)</span><br><span class="line">        user &#x3D; serializer.validated_data[&#39;user&#39;]</span><br><span class="line">        token, created &#x3D; Token.objects.get_or_create(user&#x3D;user)</span><br><span class="line">        return Response(&#123;</span><br><span class="line">            &#39;token&#39;: token.key,</span><br><span class="line">            &#39;user_id&#39;: user.pk,</span><br><span class="line">            &#39;email&#39;: user.email</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>还有urls.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-token-auth&#x2F;&#39;, CustomAuthToken.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>认证Token<br>当我们获取到Token后，就可以拿着这个Token来认证其他API了。对于客户端进行身份验证，令牌密钥应包含在 <code>Authorization</code> HTTP header 中。关键字应以字符串文字 “Token” 为前缀，用空格分隔两个字符串。例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b</span><br></pre></td></tr></table></figure>注意： 如果你想在 header 中使用不同的关键字（例如Bearer），只需子类化<code>TokenAuthentication</code>并设置keyword类变量。<br>如果成功通过身份验证，<code>TokenAuthentication</code>将提供以下凭据。</li></ul><p>request.user是一个User实例，包含了用户名及相关信息。<br>request.auth是一个rest_framework.authtoken.models.Token实例。<br>未经身份验证的响应被拒绝将导致HTTP 401 Unauthorized的响应和相应的 WWW-Authenticate header。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WWW-Authenticate: Token</span><br></pre></td></tr></table></figure><p>测试令牌认证的API，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET -H &#39;Authorization: Token 684b41712e8e38549504776613bd5612ba997616&#39; http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;virtual&#x2F;</span><br></pre></td></tr></table></figure><p>注意： 如果您在生产中使用<code>TokenAuthentication</code>，则必须确保您的 API 只能通过https访问。</p><h3 id="四-认证源码"><a href="#四-认证源码" class="headerlink" title="四. 认证源码"></a>四. 认证源码</h3><p>使用 TokenAuthentication 认证方式，当认证成功后，在 request 中将提供了 request.user 和 request.auth 实例。其中 request.user 实例中有用户信息，比如用户名及用户ID，而 request.auth 实例中有Token信息。那么DRF是如何把 Token 转换为用户信息呢？通过下面的源码部分就可以看到它们是如何转换的。</p><p>基于 DRF 的请求处理，与常规的 url 配置不同，通常一个 Django 的 url 请求对应一个视图函数，在使用 DRF 时，我们要基于视图对象，然后调用视图对象的 as_view 函数，as_view 函数中会调用 rest_framework/views.py 中的 dispatch 函数，这个函数会根据 request 请求方法，去调用我们在 view 对象中定义的对应的方法，就像这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.authtoken import views</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-token-auth&#x2F;&#39;, views.obtain_auth_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里虽然直接调用 views.obtain_auth_token 方法，但进入到 views.obtain_auth_token 方法后还是 DRF 模式，源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obtain_auth_token &#x3D; ObtainAuthToken.as_view()</span><br></pre></td></tr></table></figure><p>ObtainAuthToken 方法是继承 DRF 中的 APIView 的 View 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class ObtainAuthToken(APIView):</span><br><span class="line">    throttle_classes &#x3D; ()</span><br><span class="line">    permission_classes &#x3D; ()</span><br><span class="line">    parser_classes &#x3D; (parsers.FormParser, parsers.MultiPartParser, parsers.JSONParser,)</span><br><span class="line">    renderer_classes &#x3D; (renderers.JSONRenderer,)</span><br><span class="line">    serializer_class &#x3D; AuthTokenSerializer</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><p>如果你是用 POST 方法请求 ObtainAuthToken，那么 as_view() 函数会调用 dispatch 函数，dispatch 根据 request.METHOD，这里是 POST，去调用 ObtainAuthToken 类的 POST 方法，这就跟通常的 url-&gt;view 的流程一样了。</p><p>这里需要注意的一点就是，DRF 中的 APIVIEW 是继承 Django View 的，重写了部分 as_view 方法，而调用 dispatch 函数是在 Django View 的 as_view 方法中做的事情，源码部分如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class APIView(View):</span><br><span class="line">    ....</span><br><span class="line">    @classmethod</span><br><span class="line">    def as_view(cls, **initkwargs):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Store the original class on the view function.</span><br><span class="line"> </span><br><span class="line">        This allows us to discover information about the view when we do URL</span><br><span class="line">        reverse lookups.  Used for breadcrumb generation.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if isinstance(getattr(cls, &#39;queryset&#39;, None), models.query.QuerySet):</span><br><span class="line">            def force_evaluation():</span><br><span class="line">                raise RuntimeError(</span><br><span class="line">                    &#39;Do not evaluate the &#96;.queryset&#96; attribute directly, &#39;</span><br><span class="line">                    &#39;as the result will be cached and reused between requests. &#39;</span><br><span class="line">                    &#39;Use &#96;.all()&#96; or call &#96;.get_queryset()&#96; instead.&#39;</span><br><span class="line">                )</span><br><span class="line">            cls.queryset._fetch_all &#x3D; force_evaluation</span><br><span class="line"> </span><br><span class="line">        view &#x3D; super(APIView, cls).as_view(**initkwargs)</span><br><span class="line">        view.cls &#x3D; cls</span><br><span class="line">        view.initkwargs &#x3D; initkwargs</span><br></pre></td></tr></table></figure><p>但是用户认证是在执行请求 View 之前做的，所以其实就是在 dispatch 函数之中做的，具体见源码 rest-framework/views.py 中 APIView 类中的 dispatch 函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">class APIView(View):</span><br><span class="line">    &#x2F;&#x2F; 从settings文件中获取认证类、限流类、权限类</span><br><span class="line">    authentication_classes &#x3D; api_settings.DEFAULT_AUTHENTICATION_CLASSES</span><br><span class="line">    throttle_classes &#x3D; api_settings.DEFAULT_THROTTLE_CLASSES</span><br><span class="line">    permission_classes &#x3D; api_settings.DEFAULT_PERMISSION_CLASSES</span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">    def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        &#96;.dispatch()&#96; is pretty much the same as Django&#39;s regular dispatch,</span><br><span class="line">        but with extra hooks for startup, finalize, and exception handling.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.args &#x3D; args</span><br><span class="line">        self.kwargs &#x3D; kwargs</span><br><span class="line">       </span><br><span class="line">        &#x2F;&#x2F; 封装request，对原始request对象增加一些功能，比如认证类，都是在initialize_request方法中完成</span><br><span class="line">        request &#x3D; self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request &#x3D; request</span><br><span class="line">        self.headers &#x3D; self.default_response_headers  # deprecate?</span><br><span class="line"> </span><br><span class="line">        try:</span><br><span class="line">            &#x2F;&#x2F; 调用self.initial进行用户认证</span><br><span class="line">            self.initial(request, *args, **kwargs)</span><br><span class="line"> </span><br><span class="line">            # Get the appropriate handler method</span><br><span class="line">            if request.method.lower() in self.http_method_names:</span><br><span class="line">                handler &#x3D; getattr(self, request.method.lower(),</span><br><span class="line">                                  self.http_method_not_allowed)</span><br><span class="line">            else:</span><br><span class="line">                handler &#x3D; self.http_method_not_allowed</span><br><span class="line"> </span><br><span class="line">            response &#x3D; handler(request, *args, **kwargs)</span><br><span class="line"> </span><br><span class="line">        except Exception as exc:</span><br><span class="line">            response &#x3D; self.handle_exception(exc)</span><br><span class="line"> </span><br><span class="line">        self.response &#x3D; self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">        return self.response</span><br></pre></td></tr></table></figure><p>这里的 self.initialize_request 也可以关注一下，因为这里的 request 对象，后面也会有调用的地方。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class APIView(View):</span><br><span class="line">    ....</span><br><span class="line">    def initialize_request(self, request, *args, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Returns the initial request object.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        parser_context &#x3D; self.get_parser_context(request)</span><br><span class="line"> </span><br><span class="line">        return Request(</span><br><span class="line">            request,</span><br><span class="line">            parsers&#x3D;self.get_parsers(),</span><br><span class="line">            authenticators&#x3D;self.get_authenticators(),   &#x2F;&#x2F; 这里把认证类封装进行了request里面</span><br><span class="line">            negotiator&#x3D;self.get_content_negotiator(),</span><br><span class="line">            parser_context&#x3D;parser_context</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>其中 self.get_authenticators() 方法就是用来取 self.authentication_classes 变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class APIView(View):</span><br><span class="line">    ....</span><br><span class="line">    def get_authenticators(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Instantiates and returns the list of authenticators that this view can use.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return [auth() for auth in self.authentication_classes]</span><br></pre></td></tr></table></figure><p>关于 authentication_classes 变量，上面已经给出了，就在 APIView 里面 authentication_classes 字段。</p><p>然后就到了认证，重点在于 self.initial(request, *args, **kwargs) 函数，对于这个函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class APIView(View):</span><br><span class="line">    ....</span><br><span class="line">    def initial(self, request, *args, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Runs anything that needs to occur prior to calling the method handler.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.format_kwarg &#x3D; self.get_format_suffix(**kwargs)</span><br><span class="line"> </span><br><span class="line">        # Perform content negotiation and store the accepted info on the request</span><br><span class="line">        neg &#x3D; self.perform_content_negotiation(request)</span><br><span class="line">        request.accepted_renderer, request.accepted_media_type &#x3D; neg</span><br><span class="line"> </span><br><span class="line">        # Determine the API version, if versioning is in use.</span><br><span class="line">        version, scheme &#x3D; self.determine_version(request, *args, **kwargs)</span><br><span class="line">        request.version, request.versioning_scheme &#x3D; version, scheme</span><br><span class="line"> </span><br><span class="line">        # Ensure that the incoming request is permitted</span><br><span class="line">        self.perform_authentication(request)   &#x2F;&#x2F; 用户认证</span><br><span class="line">        self.check_permissions(request)        &#x2F;&#x2F; 权限检查</span><br><span class="line">        self.check_throttles(request)          &#x2F;&#x2F; 限流检查</span><br></pre></td></tr></table></figure><p>这里关注 self.perform_authentication(request) 验证某个用户，其实可以看到权限检查及限流也是在这里做的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class APIView(View):</span><br><span class="line">    ....</span><br><span class="line">    def perform_authentication(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Perform authentication on the incoming request.</span><br><span class="line"> </span><br><span class="line">        Note that if you override this and simply &#39;pass&#39;, then authentication</span><br><span class="line">        will instead be performed lazily, the first time either</span><br><span class="line">        &#96;request.user&#96; or &#96;request.auth&#96; is accessed.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        request.user</span><br></pre></td></tr></table></figure><p>这里 request.user 其实是一个 @property 的函数，加 @property 表示调用 user 方法的时候不需要加括号“user()”，可以直接调用 request.user 。而这里的 request 对象就是上面 initialize_request 方法返回的，其中还返回了 DRF 定义的 request 对象，在 request 对象中有被 @property 装饰的 user 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Request(object):</span><br><span class="line">    ....</span><br><span class="line">    @property</span><br><span class="line">    def user(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Returns the user associated with the current request, as authenticated</span><br><span class="line">        by the authentication classes provided to the request.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not hasattr(self, &#39;_user&#39;):</span><br><span class="line">            with wrap_attributeerrors():</span><br><span class="line">                self._authenticate()</span><br><span class="line">        return self._user</span><br></pre></td></tr></table></figure><p>重点来了，到了真正认证的方法了，关注 <code>self._authenticate()</code>函数即可。此方法会循环尝试每个 DRF 认证方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Request(object):</span><br><span class="line">    ....</span><br><span class="line">    def _authenticate(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        尝试使用每个身份验证实例验证请求</span><br><span class="line">        self.authenticators &#x3D; [BasicAuthentication, SessionAuthentication, TokenAuthentication]</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        for authenticator in self.authenticators:</span><br><span class="line">            try:</span><br><span class="line">                user_auth_tuple &#x3D; authenticator.authenticate(self)</span><br><span class="line">            except exceptions.APIException:</span><br><span class="line">                &#x2F;&#x2F; 如果authenticate方法抛出异常，则执行self._not_authenticated方法，相当于匿名用户，没有通过认证</span><br><span class="line">                self._not_authenticated()</span><br><span class="line">                raise</span><br><span class="line"> </span><br><span class="line">            if user_auth_tuple is not None:</span><br><span class="line">                self._authenticator &#x3D; authenticator</span><br><span class="line">                self.user, self.auth &#x3D; user_auth_tuple</span><br><span class="line">                return</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 如果没有设置认证类的话，也相当于匿名用户，没有通过认证</span><br><span class="line">        self._not_authenticated()</span><br></pre></td></tr></table></figure><p>那么 self.authenticators 从哪儿来的呢？就是上面展示的，在 APIVIEW 类中的 authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES 得到的。我们上面在介绍 DRF 身份验证时也说了，可以把认证类定义在全局 settings 文件中，你还可以使用基于 APIView 类的视图，在每个视图或每个视图集的基础上设置身份验证方案。如下方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class ExampleView(APIView):</span><br><span class="line">    authentication_classes &#x3D; (SessionAuthentication, BasicAuthentication)</span><br><span class="line">    permission_classes &#x3D; (IsAuthenticated,)</span><br></pre></td></tr></table></figure><p>当基于 APIView 类的视图定义验证或权限类时，相当于覆盖了原生 APIVIEW 中的相关变量，自然就使用覆盖后的变量了。authentication_classes 里面放的就是可以用来验证一个用户的类，他是一个元组，验证用户时，按照这个元组顺序，直到验证通过或者遍历整个元组还没有通过。同理 self.check_permissions(request) 是验证该用户是否具有API的使用权限。关于对view控制的其他类都在rest-framework/views.py的APIView类中定义了。</p><p>由于我们这里只是拿 TokenAuthentication 认证说明，所以忽略 BasicAuthentication 和 SessionAuthentication 这两种认证，其原理与TokenAuthentication 一样。这样，就进入到了 TokenAuthentication 认证，其源码部分如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取header部分 Authorization 标识的信息</span><br><span class="line">def get_authorization_header(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Return request&#39;s &#39;Authorization:&#39; header, as a bytestring.</span><br><span class="line"> </span><br><span class="line">    Hide some test client ickyness where the header can be unicode.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    auth &#x3D; request.META.get(&#39;HTTP_AUTHORIZATION&#39;, b&#39;&#39;)</span><br><span class="line">    if isinstance(auth, text_type):</span><br><span class="line">        # Work around django test client oddness</span><br><span class="line">        auth &#x3D; auth.encode(HTTP_HEADER_ENCODING)</span><br><span class="line">    return auth</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 解析并认证 Token</span><br><span class="line">class TokenAuthentication(BaseAuthentication):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Simple token based authentication.</span><br><span class="line"> </span><br><span class="line">    Clients should authenticate by passing the token key in the &quot;Authorization&quot;</span><br><span class="line">    HTTP header, prepended with the string &quot;Token &quot;.  For example:</span><br><span class="line"> </span><br><span class="line">        Authorization: Token 401f7ac837da42b97f613d789819ff93537bee6a</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">    keyword &#x3D; &#39;Token&#39;</span><br><span class="line">    model &#x3D; None</span><br><span class="line"> </span><br><span class="line">    def get_model(self):</span><br><span class="line">        if self.model is not None:</span><br><span class="line">            return self.model</span><br><span class="line">        from rest_framework.authtoken.models import Token</span><br><span class="line">        return Token</span><br><span class="line"> </span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    A custom token model may be used, but must have the following properties.</span><br><span class="line"> </span><br><span class="line">    * key -- The string identifying the token</span><br><span class="line">    * user -- The user to which the token belongs</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &#x2F;&#x2F; 通过上面的get_authorization_header方法得到Token信息</span><br><span class="line">        &#x2F;&#x2F; auth &#x3D; [b&#39;Token&#39;, b&#39;684b41712e8e38549504776613bd5612ba997616&#39;]</span><br><span class="line">        auth &#x3D; get_authorization_header(request).split()</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 通过获取Token关键字，并与keyword变量比对，来判断是否是Token方式认证</span><br><span class="line">        if not auth or auth[0].lower() !&#x3D; self.keyword.lower().encode():</span><br><span class="line">            return None</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; auth长度等于2时才是合法值，继续往下进行</span><br><span class="line">        if len(auth) &#x3D;&#x3D; 1:</span><br><span class="line">            msg &#x3D; _(&#39;Invalid token header. No credentials provided.&#39;)</span><br><span class="line">            raise exceptions.AuthenticationFailed(msg)</span><br><span class="line">        elif len(auth) &gt; 2:</span><br><span class="line">            msg &#x3D; _(&#39;Invalid token header. Token string should not contain spaces.&#39;)</span><br><span class="line">            raise exceptions.AuthenticationFailed(msg)</span><br><span class="line">     </span><br><span class="line">        &#x2F;&#x2F; 进行token解码，从bytes编码格式转为字符串</span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; auth[1].decode()</span><br><span class="line">        except UnicodeError:</span><br><span class="line">            msg &#x3D; _(&#39;Invalid token header. Token string should not contain invalid characters.&#39;)</span><br><span class="line">            raise exceptions.AuthenticationFailed(msg)</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 把转换过的token传给认证凭证方法进行验证</span><br><span class="line">        return self.authenticate_credentials(token)</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 验证凭证方法进行接收token并进行验证</span><br><span class="line">    def authenticate_credentials(self, key):</span><br><span class="line">        &#x2F;&#x2F; 获取Token模型实例</span><br><span class="line">        model &#x3D; self.get_model()</span><br><span class="line">        try:</span><br><span class="line">            &#x2F;&#x2F; 使用select_related方法获取相应外键对应的对象（就是两表Join），然后进行Token过滤查询</span><br><span class="line">            token &#x3D; model.objects.select_related(&#39;user&#39;).get(key&#x3D;key)</span><br><span class="line">        except model.DoesNotExist:</span><br><span class="line">            raise exceptions.AuthenticationFailed(_(&#39;Invalid token.&#39;))</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 判断用户是否是登录成功</span><br><span class="line">        if not token.user.is_active:</span><br><span class="line">            raise exceptions.AuthenticationFailed(_(&#39;User inactive or deleted.&#39;))</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 返回user实例，及token实例</span><br><span class="line">        return (token.user, token)</span><br></pre></td></tr></table></figure><blockquote><p>PS：DRF自带的TokenAuthentication认证方式也非常简单，同时弊端也很大，真正项目中用的较少。由于需要存储在数据库表中，它在分布式系统中用起来较为麻烦，并且每次都需要查询数据库，增加数据库压力；同时它不支持Token的过期设置，这是一个很大的问题。在实际前后端分离项目中使用JWT（Json Web Token）标准的认证方式较多，每个语言都有各自实现JWT的方式，Python也不例外。</p></blockquote><h3 id="五-JWT认证"><a href="#五-JWT认证" class="headerlink" title="五. JWT认证"></a>五. JWT认证</h3><p>了解完DRF自带的TokenAuthentication认证方式的弊端之后，再来看JWT（Json Web Token）认证方式。它们两个的原理是一样的，就是认证用户Token，然后取出对应的用户。但JWT解决了两个较大的问题。</p><p>第一，是不需要把Token存储到数据库表中了，而是根据一定的算法来算出用户Token，然后每次用户来验证时再以同样的方式生成对应的Token进行校验。当然，实际JWT生成Token的方式还是较为复杂的，具体可以看JWT协议相关文章。</p><p>第二，JWT对于生成的Token可以设置过期时间，从而在一定程度提高了Token的安全性。</p><p>JWT的原理还是稍稍有点麻烦的，里面涉及了一些对称加密和非对称加密的算法。但是JWT使用起来确是非常简单，Python中有PyJWT库，而在DRF中也有对应的开源项目<a href="https://github.com/GetBlimp/django-rest-framework-jwt" target="_blank" rel="noopener">django-rest-framework-jwt</a></p><ul><li>安装<br>直接使用pip安装即可，目前支持Python、Django、DRF主流版本：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install djangorestframework-jwt</span><br></pre></td></tr></table></figure></li><li>使用<br>在settings.py文件中，将JSONWebTokenAuthentication 添加到REST framework框架的DEFAULT_AUTHENTICATION_CLASSES<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_PERMISSION_CLASSES&#39;: (</span><br><span class="line">        &#39;rest_framework.permissions.IsAuthenticated&#39;,</span><br><span class="line">    ),</span><br><span class="line">    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (</span><br><span class="line">        &#39;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#39;,</span><br><span class="line">        &#39;rest_framework.authentication.SessionAuthentication&#39;,</span><br><span class="line">        &#39;rest_framework.authentication.BasicAuthentication&#39;,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>同样，你还可以使用基于APIView类的视图，在每个视图或每个视图集的基础上设置身份验证方案。与上面演示的 Token 认证一样，这里就不贴代码了，尽可能使用基于APIView类的视图认证方式。<br>但使用基于APIView类的视图认证方式时，不要忘记导入类。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework_jwt.authentication import JSONWebTokenAuthentication</span><br></pre></td></tr></table></figure>在你的urls.py文件中添加以下URL路由，以便通过POST包含用户名和密码的令牌获取。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework_jwt.views import obtain_jwt_token</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-token-auth&#x2F;&#39;, obtain_jwt_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>如果你使用用户名admin和密码admin123456创建了用户，则可以通过在终端中执行以下操作来测试JWT是否正常工作。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST -d &quot;username&#x3D;admin&amp;password&#x3D;admin123456&quot; http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;api-token-auth&#x2F;</span><br></pre></td></tr></table></figure>或者，你可以使用Django REST framework支持的所有内容类型来获取身份验证令牌。例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST -H &quot;Content-Type: application&#x2F;json&quot; -d &#39;&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin123456&quot;&#125;&#39; http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;api-token-auth&#x2F;</span><br></pre></td></tr></table></figure>现在访问需要认证的API时，就必须要包含<code>Authorization: JWT &lt;your_token&gt;</code>头信息了：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -H &quot;Authorization: JWT &lt;your_token&gt;&quot; http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;virtual&#x2F;</span><br></pre></td></tr></table></figure></li><li>刷新Token<br>如果JWT_ALLOW_REFRESH为True，可以“刷新”未过期的令牌以获得具有更新到期时间的全新令牌。像如下这样添加一个URL模式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework_jwt.views import refresh_jwt_token</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-token-refresh&#x2F;&#39;, refresh_jwt_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>使用方式就是将现有令牌传递到刷新API，如下所示: <code>{&quot;token&quot;: EXISTING_TOKEN}</code>。请注意，只有非过期的令牌才有效。另外，响应JSON看起来与正常获取令牌端点<code>{&quot;token&quot;: NEW_TOKEN}</code>相同。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST -H &quot;Content-Type: application&#x2F;json&quot; -d &#39;&#123;&quot;token&quot;:&quot;&lt;EXISTING_TOKEN&gt;&quot;&#125;&#39; http:&#x2F;&#x2F;localhost:8000&#x2F;api-token-refresh&#x2F;</span><br></pre></td></tr></table></figure>可以重复使用令牌刷新（token1 -&gt; token2 -&gt; token3），但此令牌链存储原始令牌（使用用户名/密码凭据获取）的时间。作为orig_iat，你只能将刷新令牌保留至JWT_REFRESH_EXPIRATION_DELTA。<br>刷新token以获得新的token的作用在于，持续保持活跃用户登录状态。比如通过用户密码获得的token有效时间为1小时，那么也就意味着1小时后此token失效，用户必须得重新登录，这对于活跃用户来说其实是多余的。如果这个用户在这1小时内都在浏览网站，我们不应该让用户重新登录，就是在token没有失效之前调用刷新接口为用户获得新的token。</li><li>认证Token<br>在一些微服务架构中，身份验证由单个服务处理。此服务负责其他服务委派确认用户已登录此身份验证服务的责任。这通常意味着其他服务将从用户接收JWT传递给身份验证服务，并在将受保护资源返回给用户之前等待JWT有效的确认。添加以下URL模式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework_jwt.views import verify_jwt_token</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-token-verify&#x2F;&#39;, verify_jwt_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>将Token传递给验证API，如果令牌有效，则返回令牌，返回状态码为200。否则，它将返回400 Bad Request以及识别令牌无效的错误。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST -H &quot;Content-Type: application&#x2F;json&quot; -d &#39;&#123;&quot;token&quot;:&quot;&lt;EXISTING_TOKEN&gt;&quot;&#125;&#39; http:&#x2F;&#x2F;localhost:8000&#x2F;api-token-verify&#x2F;</span><br></pre></td></tr></table></figure></li><li>手动创建Token<br>有时候你可能希望手动生成令牌，例如在创建帐户后立即将令牌返回给用户。或者，你需要返回的信息不止是Token，可能还有用户权限相关值。你可以这样做：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework_jwt.settings import api_settings</span><br><span class="line"> </span><br><span class="line">jwt_payload_handler &#x3D; api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">jwt_encode_handler &#x3D; api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"> </span><br><span class="line">payload &#x3D; jwt_payload_handler(user)</span><br><span class="line">token &#x3D; jwt_encode_handler(payload)</span><br></pre></td></tr></table></figure></li><li>其他设置<br>你可以覆盖一些其他设置，比如变更Token过期时间，以下是所有可用设置的默认值。在settings.py文件中设置。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">JWT_AUTH &#x3D; &#123;</span><br><span class="line">    &#39;JWT_ENCODE_HANDLER&#39;:</span><br><span class="line">    &#39;rest_framework_jwt.utils.jwt_encode_handler&#39;,</span><br><span class="line"> </span><br><span class="line">    &#39;JWT_DECODE_HANDLER&#39;:</span><br><span class="line">    &#39;rest_framework_jwt.utils.jwt_decode_handler&#39;,</span><br><span class="line"> </span><br><span class="line">    &#39;JWT_PAYLOAD_HANDLER&#39;:</span><br><span class="line">    &#39;rest_framework_jwt.utils.jwt_payload_handler&#39;,</span><br><span class="line"> </span><br><span class="line">    &#39;JWT_PAYLOAD_GET_USER_ID_HANDLER&#39;:</span><br><span class="line">    &#39;rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler&#39;,</span><br><span class="line"> </span><br><span class="line">    &#39;JWT_RESPONSE_PAYLOAD_HANDLER&#39;:</span><br><span class="line">    &#39;rest_framework_jwt.utils.jwt_response_payload_handler&#39;,</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 这是用于签署JWT的密钥，确保这是安全的，不共享不公开的</span><br><span class="line">    &#39;JWT_SECRET_KEY&#39;: settings.SECRET_KEY,</span><br><span class="line">    &#39;JWT_GET_USER_SECRET_KEY&#39;: None,</span><br><span class="line">    &#39;JWT_PUBLIC_KEY&#39;: None,</span><br><span class="line">    &#39;JWT_PRIVATE_KEY&#39;: None,</span><br><span class="line">    &#39;JWT_ALGORITHM&#39;: &#39;HS256&#39;,</span><br><span class="line">    &#x2F;&#x2F; 如果秘钥是错误的，它会引发一个jwt.DecodeError</span><br><span class="line">    &#39;JWT_VERIFY&#39;: True,</span><br><span class="line">    &#39;JWT_VERIFY_EXPIRATION&#39;: True,</span><br><span class="line">    &#39;JWT_LEEWAY&#39;: 0,</span><br><span class="line">    &#x2F;&#x2F; Token过期时间设置</span><br><span class="line">    &#39;JWT_EXPIRATION_DELTA&#39;: datetime.timedelta(seconds&#x3D;300),</span><br><span class="line">    &#39;JWT_AUDIENCE&#39;: None,</span><br><span class="line">    &#39;JWT_ISSUER&#39;: None,</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 是否开启允许Token刷新服务，及限制Token刷新间隔时间，从原始Token获取开始计算</span><br><span class="line">    &#39;JWT_ALLOW_REFRESH&#39;: False,</span><br><span class="line">    &#39;JWT_REFRESH_EXPIRATION_DELTA&#39;: datetime.timedelta(days&#x3D;7),</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 定义与令牌一起发送的Authorization标头值前缀</span><br><span class="line">    &#39;JWT_AUTH_HEADER_PREFIX&#39;: &#39;JWT&#39;,</span><br><span class="line">    &#39;JWT_AUTH_COOKIE&#39;: None,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>一般除了过期时间外，其他配置参数很少改变。具体参数意义当用到时可以查询官网。</li></ul><p>JWT唯一的一个不算缺点的缺点就是Token太长了，180位。</p><p><a href="https://segmentfault.com/a/1190000013010835" target="_blank" rel="noopener">Token 认证的来龙去脉</a></p><p><a href="http://www.hi-roy.com/2017/01/11/%E5%9F%BA%E4%BA%8Ecookie%E7%9A%84django-rest-jwt%E8%AE%A4%E8%AF%81/" target="_blank" rel="noopener">基于cookie的django-rest-jwt认证</a></p><p><a href="https://q1mi.github.io/Django-REST-framework-documentation/api-guide/authentication_zh/" target="_blank" rel="noopener">TokenAuthentication</a></p><h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="http://www.ywnds.com/?p=14967" target="_blank" rel="noopener">原文地址</a></p><h3 id="权限相关参考"><a href="#权限相关参考" class="headerlink" title="权限相关参考"></a>权限相关参考</h3><p><a href="https://segmentfault.com/a/1190000004401112" target="_blank" rel="noopener">Django REST framework的各种技巧【目录索引】 - 后端开发那点事儿 - SegmentFault 思否</a><br><a href="https://segmentfault.com/a/1190000004400312" target="_blank" rel="noopener">Django REST framework的各种技巧——3.权限 - 后端开发那点事儿 - SegmentFault 思否</a><br><a href="https://cloud.tencent.com/developer/article/1155184" target="_blank" rel="noopener">django权限管理(Permission)-内置权限实现</a><br><a href="https://juejin.im/post/5a991807518825558a060a77" target="_blank" rel="noopener">django viewset</a></p>]]></content>
    
    <summary type="html">
    
      Django REST framework API认证(包含JWT认证) + 权限
    
    </summary>
    
    
      <category term="Django" scheme="https://shuke163.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://shuke163.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>python的logging模块实现json格式的日志输出</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-19T16:18:41.000Z</published>
    <updated>2020-04-20T06:25:00.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python的logging模块实现json格式的日志输出"><a href="#python的logging模块实现json格式的日志输出" class="headerlink" title="python的logging模块实现json格式的日志输出"></a>python的logging模块实现json格式的日志输出</h2><blockquote><p>想要让开发过程或者是上线后的bug无处可藏，最好的方式便是在程序运行过程中，不断收集重要的日志，以供分析使用。Python中内置的log收集模块是logging，该模块使用起来比较方便，但是美中不足的地方就是日志的格式转成json比较麻烦。于是我结合logging和另一个模块python-json-logger(pip install python-json-logger), 实现json格式的日志输出。</p></blockquote><p>以下代码可以做成模块，直接导入使用</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;user&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import logging, logging.config, os</span><br><span class="line">import structlog</span><br><span class="line">import traceback</span><br><span class="line">from structlog import configure, processors, stdlib, threadlocal</span><br><span class="line">from pythonjsonlogger import jsonlogger</span><br><span class="line">BASE_DIR &#x3D; BASE_DIR &#x3D; os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">DEBUG &#x3D; True  # 标记是否在开发环境</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 给过滤器使用的判断</span><br><span class="line">class RequireDebugTrue(logging.Filter):</span><br><span class="line">    # 实现filter方法</span><br><span class="line">    def filter(self, record):</span><br><span class="line">        return DEBUG</span><br><span class="line"></span><br><span class="line">def get_logger():</span><br><span class="line">    LOGGING &#x3D; &#123;</span><br><span class="line">    # 基本设置</span><br><span class="line">        &#39;version&#39;: 1,  # 日志级别</span><br><span class="line">        &#39;disable_existing_loggers&#39;: False,  # 是否禁用现有的记录器</span><br><span class="line"></span><br><span class="line">    # 日志格式集合</span><br><span class="line">        &#39;formatters&#39;: &#123;</span><br><span class="line">        # 标准输出格式</span><br><span class="line">            &#39;json&#39;: &#123;</span><br><span class="line">            # [具体时间][线程名:线程ID][日志名字:日志级别名称(日志级别ID)] [输出的模块:输出的函数]:日志内容</span><br><span class="line">                &#39;format&#39;: &#39;[%(asctime)s][%(threadName)s:%(thread)d][%(name)s:%(levelname)s(%(lineno)d)]\n[%(module)s:%(funcName)s]:%(message)s&#39;,</span><br><span class="line">                &#39;class&#39;: &#39;pythonjsonlogger.jsonlogger.JsonFormatter&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    # 过滤器</span><br><span class="line">        &#39;filters&#39;: &#123;</span><br><span class="line">            &#39;require_debug_true&#39;: &#123;</span><br><span class="line">                &#39;()&#39;: RequireDebugTrue,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    # 处理器集合</span><br><span class="line">        &#39;handlers&#39;: &#123;</span><br><span class="line">        # 输出到控制台</span><br><span class="line">        # 输出到文件</span><br><span class="line">            &#39;TimeChecklog&#39;: &#123;</span><br><span class="line">                &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">                &#39;class&#39;: &#39;logging.handlers.RotatingFileHandler&#39;,</span><br><span class="line">                &#39;formatter&#39;: &#39;json&#39;,</span><br><span class="line">                &#39;filename&#39;: os.path.join(&quot;.&#x2F;&quot;, &#39;TimeoutCheck.log&#39;),  # 输出位置</span><br><span class="line">                &#39;maxBytes&#39;: 1024 * 1024 * 5,  # 文件大小 5M</span><br><span class="line">                &#39;backupCount&#39;: 5,  # 备份份数</span><br><span class="line">                &#39;encoding&#39;: &#39;utf8&#39;,  # 文件编码</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    # 日志管理器集合</span><br><span class="line">        &#39;loggers&#39;: &#123;</span><br><span class="line">        # 管理器</span><br><span class="line">            &#39;proxyCheck&#39;: &#123;</span><br><span class="line">                &#39;handlers&#39;: [&#39;TimeChecklog&#39;],</span><br><span class="line">                &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">                &#39;propagate&#39;: True,  # 是否传递给父记录器</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logging.config.dictConfig(LOGGING)</span><br><span class="line">    logger &#x3D; logging.getLogger(&quot;proxyCheck&quot;)</span><br><span class="line">    return logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试用例，你可以把get_logger()封装成一个模块，from xxx import get_logger()</span><br><span class="line">logger1 &#x3D; get_logger()</span><br><span class="line">def test():</span><br><span class="line">    try:</span><br><span class="line">        a &#x3D; 1 &#x2F; 0</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logger1.error(&quot;This is a error info&quot;,exc_info&#x3D;True)  # 写入错误日志</span><br><span class="line">        #如果需要添加额外的信息，使用extra关键字即可</span><br><span class="line">        logger1.error(str(traceback.format_exc()), extra&#x3D;&#123;&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;:&quot;value2&quot;&#125;)</span><br><span class="line">        # 其他错误处理代码</span><br><span class="line">        pass</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试的结果，可以在./TimeoutCheck.log文件中看到输出的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat TimeoutCheck.log</span><br><span class="line">&#123;&quot;asctime&quot;: &quot;2019-01-31 11:29:16,818&quot;, &quot;threadName&quot;: &quot;MainThread&quot;, &quot;thread&quot;: 140735830963008, &quot;name&quot;: &quot;proxyCheck&quot;, &quot;levelname&quot;: &quot;ERROR&quot;, &quot;%(lineno&quot;: null, &quot;module&quot;: &quot;log&quot;, &quot;funcName&quot;: &quot;test&quot;, &quot;message&quot;: &quot;This is a error info&quot;, &quot;exc_info&quot;: &quot;Traceback (most recent call last):\n  File \&quot;log.py\&quot;, line 74, in test\n    a &#x3D; 1 &#x2F; 0\nZeroDivisionError: division by zero&quot;&#125;</span><br><span class="line">&#123;&quot;asctime&quot;: &quot;2019-01-31 11:29:16,819&quot;, &quot;threadName&quot;: &quot;MainThread&quot;, &quot;thread&quot;: 140735830963008, &quot;name&quot;: &quot;proxyCheck&quot;, &quot;levelname&quot;: &quot;ERROR&quot;, &quot;%(lineno&quot;: null, &quot;module&quot;: &quot;log&quot;, &quot;funcName&quot;: &quot;test&quot;, &quot;message&quot;: &quot;Traceback (most recent call last):\n  File \&quot;log.py\&quot;, line 74, in test\n    a &#x3D; 1 &#x2F; 0\nZeroDivisionError: division by zero\n&quot;, &quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import datetime</span><br><span class="line">import logging</span><br><span class="line">import logging.config</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">class LogstashFormatter(logging.Formatter):</span><br><span class="line">    def __init__(self, task_name&#x3D;None):</span><br><span class="line">        self.task_name &#x3D; task_name</span><br><span class="line"></span><br><span class="line">        super(LogstashFormatter, self).__init__()</span><br><span class="line"></span><br><span class="line">    def format(self, record):</span><br><span class="line">        data &#x3D; &#123;&#39;@message&#39;: record.msg,</span><br><span class="line">                &#39;@timestamp&#39;: datetime.datetime.utcnow().strftime(&#39;%Y-%m-%dT%H:%M:%S.%fZ&#39;),</span><br><span class="line">                &#39;@type&#39;: &#39;Add log extra test&#39;&#125;</span><br><span class="line"></span><br><span class="line">        if self.task_name:</span><br><span class="line">            data[&#39;@task_name&#39;] &#x3D; self.task_name</span><br><span class="line"></span><br><span class="line">        for key, value in record.args.items():</span><br><span class="line">            data[key] &#x3D; value</span><br><span class="line"></span><br><span class="line">        return json.dumps(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger &#x3D; logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">logging.config.dictConfig(&#123;</span><br><span class="line">    &#39;version&#39;: 1,</span><br><span class="line">    &#39;disable_existing_loggers&#39;: False,  # this fixes the problem</span><br><span class="line">    &#39;formatters&#39;: &#123;</span><br><span class="line">        &#39;json&#39;: &#123;</span><br><span class="line">            &#39;()&#39;: LogstashFormatter,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;handlers&#39;: &#123;</span><br><span class="line">        &#39;console&#39;: &#123;</span><br><span class="line">            &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;logging.StreamHandler&#39;,</span><br><span class="line">            &#39;formatter&#39;: &#39;json&#39;,</span><br><span class="line">            &#39;stream&#39;: sys.stdout</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;loggers&#39;: &#123;</span><br><span class="line">        &#39;&#39;: &#123;</span><br><span class="line">            &#39;handlers&#39;: [&#39;console&#39;],</span><br><span class="line">            &#39;level&#39;: &#39;INFO&#39;,</span><br><span class="line">            &#39;propagate&#39;: True,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger.info(&#39;It works!&#39;, &#123;&#39;aaa&#39;:&#39;bbbb&#39;,&#39;cccc&#39;:&#39;dddd&#39;&#125;)</span><br><span class="line"></span><br><span class="line"># output:</span><br><span class="line">&#123;&quot;@message&quot;: &quot;It works!&quot;, &quot;@timestamp&quot;: &quot;2019-01-31T02:52:24.786570Z&quot;, &quot;@type&quot;: &quot;Add log extra test&quot;, &quot;aaa&quot;: &quot;bbbb&quot;, &quot;cccc&quot;: &quot;dddd&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="版本三"><a href="#版本三" class="headerlink" title="版本三"></a>版本三</h3><blockquote><p>此版本为优化版本,继承pythonjsonlogger.jsonlogger库中的JsonFormatter类,重写format方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: shuke</span><br><span class="line">@file: jsonlog.py </span><br><span class="line">@time: 2019&#x2F;01&#x2F;20 15:36</span><br><span class="line">@contact: shu_ke163@163.com</span><br><span class="line">@software:  shuke-logging</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import json</span><br><span class="line">import socket</span><br><span class="line">import datetime</span><br><span class="line">import logging</span><br><span class="line">import traceback</span><br><span class="line">import logging.config</span><br><span class="line">from pythonjsonlogger.jsonlogger import JsonFormatter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class JsonFormatter(JsonFormatter):</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        self.host &#x3D; socket.getfqdn()</span><br><span class="line">        self.message_type &#x3D; &quot;json&quot;</span><br><span class="line">        self.version &#x3D; &quot;v1.0&quot;</span><br><span class="line">        super(JsonFormatter, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def get_extra_fields(self, record):</span><br><span class="line">        # The list contains all the attributes listed in</span><br><span class="line">        # http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;logging.html#logrecord-attributes</span><br><span class="line">        builtin_attr_list &#x3D; [</span><br><span class="line">            &#39;args&#39;, &#39;asctime&#39;, &#39;created&#39;, &#39;exc_info&#39;, &#39;exc_text&#39;, &#39;filename&#39;, &#39;id&#39;, &#39;levelname&#39;, &#39;levelno&#39;, &#39;module&#39;,</span><br><span class="line">            &#39;msecs&#39;, &#39;msecs&#39;, &#39;message&#39;, &#39;msg&#39;, &#39;name&#39;, &#39;pathname&#39;, &#39;relativeCreated&#39;, &#39;extra&#39;]</span><br><span class="line"></span><br><span class="line">        fields &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">        for key, value in record.__dict__.items():</span><br><span class="line">            if key not in builtin_attr_list:</span><br><span class="line">                fields[key] &#x3D; repr(value)</span><br><span class="line"></span><br><span class="line">        fields[&quot;project&quot;] &#x3D; &quot;WEHOST&quot;</span><br><span class="line">        fields[&quot;team&quot;] &#x3D; &quot;OPS&quot;</span><br><span class="line">        fields[&quot;department&quot;] &#x3D; &quot;IT&quot;</span><br><span class="line">        fields[&quot;log_debug&quot;] &#x3D; True</span><br><span class="line"></span><br><span class="line">        return fields</span><br><span class="line"></span><br><span class="line">    def format_timestamp(self, time):</span><br><span class="line">        return datetime.datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S %f&#39;)</span><br><span class="line"></span><br><span class="line">    def format(self, record):</span><br><span class="line">        message &#x3D; &#123;</span><br><span class="line">            &#39;@timestamp&#39;: self.format_timestamp(record.created),</span><br><span class="line">            &#39;@version&#39;: &#39;v1.0&#39;,</span><br><span class="line">            &#39;name&#39;: record.name,</span><br><span class="line">            &#39;host&#39;: self.host,</span><br><span class="line">            &#39;pathname&#39;: record.pathname,</span><br><span class="line">            &#39;levelno&#39;: record.levelno,</span><br><span class="line">            &#39;filename&#39;: record.filename,</span><br><span class="line">            &#39;module&#39;: record.module,</span><br><span class="line">            &#39;exc_info&#39;: &#39;&#39;.join(traceback.format_exception(*record.exc_info)),</span><br><span class="line">            &#39;exc_text&#39;: record.exc_text,</span><br><span class="line">            &#39;stack_info&#39;: record.stack_info,</span><br><span class="line">            &#39;created&#39;: time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime(record.created)),</span><br><span class="line">            &#39;msecs&#39;: record.msecs,</span><br><span class="line">            &#39;relativeCreated&#39;: record.relativeCreated,</span><br><span class="line">            &#39;type&#39;: self.message_type,</span><br><span class="line">            &#39;level&#39;: record.levelname,</span><br><span class="line">            &#39;message&#39;: record.getMessage(),</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        # Add extra fields</span><br><span class="line">        message.update(self.get_extra_fields(record))</span><br><span class="line"></span><br><span class="line">        return json.dumps(message, indent&#x3D;4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_logger():</span><br><span class="line">    LOGGING &#x3D; &#123;</span><br><span class="line">        # 基本设置</span><br><span class="line">        &#39;version&#39;: 1,  # 日志级别</span><br><span class="line">        &#39;disable_existing_loggers&#39;: False,  # 是否禁用现有的记录器</span><br><span class="line"></span><br><span class="line">        # 日志格式集合</span><br><span class="line">        &#39;formatters&#39;: &#123;</span><br><span class="line">            # 标准输出格式</span><br><span class="line">            &#39;json&#39;: &#123;</span><br><span class="line">                # [具体时间][线程名:线程ID][日志名字:日志级别名称(日志级别ID)] [输出的模块:输出的函数]:日志内容</span><br><span class="line">                # &#39;format&#39;: &#39;[%(asctime)s][%(threadName)s:%(thread)d][%(name)s:%(levelname)s(%(lineno)d)]\n[%(module)s:%(funcName)s]:%(message)s&#39;,</span><br><span class="line">                # &#39;format&#39;: &#39;[%(asctime)s][%(threadName)s:%(thread)d][%(created)s:%(process)d:%(processName)s][%(relativeCreated)s:%(msecs)s][%(pathname)s:%(filename)s][%(name)s:%(levelname)s:%(lineno)d)][%(module)s:%(funcName)s]:%(message)s&#39;,</span><br><span class="line">                # &#39;()&#39;: JsonFormatter.format,</span><br><span class="line">                # &#39;class&#39;: &#39;pythonjsonlogger.jsonlogger.JsonFormatter&#39;,</span><br><span class="line">                &#39;()&#39;: JsonFormatter,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        # 处理器集合</span><br><span class="line">        &#39;handlers&#39;: &#123;</span><br><span class="line">            # 输出到控制台</span><br><span class="line">            &#39;console&#39;: &#123;</span><br><span class="line">                &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">                &#39;class&#39;: &#39;logging.StreamHandler&#39;,</span><br><span class="line">                &#39;formatter&#39;: &#39;json&#39;,</span><br><span class="line">                &#39;stream&#39;: sys.stdout</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        # 日志管理器集合</span><br><span class="line">        &#39;loggers&#39;: &#123;</span><br><span class="line">            # 管理器</span><br><span class="line">            &#39;mylog&#39;: &#123;</span><br><span class="line">                &#39;handlers&#39;: [&#39;console&#39;],</span><br><span class="line">                &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">                &#39;propagate&#39;: True,  # 是否传递给父记录器</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logging.config.dictConfig(LOGGING)</span><br><span class="line">    logger &#x3D; logging.getLogger(&quot;mylog&quot;)</span><br><span class="line">    return logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试用例，你可以把get_logger()封装成一个模块，from xxx import get_logger()</span><br><span class="line">logger &#x3D; get_logger()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        a &#x3D; 1 &#x2F; 0</span><br><span class="line">    except Exception as e:</span><br><span class="line">        # 如果需要添加额外的信息，使用extra关键字即可</span><br><span class="line">        logger.info(&quot;This is a info message&quot;, extra&#x3D;&#123;&quot;type&quot;: &quot;json&quot;, &quot;department&quot;: &quot;IT&quot;, &quot;bussiness&quot;: &quot;game&quot;&#125;,</span><br><span class="line">                    exc_info&#x3D;True)</span><br><span class="line">        logger.info(&quot;Hello World&quot;, extra&#x3D;&#123;&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;&#125;, exc_info&#x3D;True)</span><br><span class="line">        # 其他错误处理代码</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># output:</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot;: &quot;2019-01-31 18:53:39 581892&quot;,</span><br><span class="line">    &quot;@version&quot;: &quot;v1.0&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;mylog&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;MacBooKPro&quot;,</span><br><span class="line">    &quot;pathname&quot;: &quot;jsonlog.py&quot;,</span><br><span class="line">    &quot;levelno&quot;: 20,</span><br><span class="line">    &quot;filename&quot;: &quot;jsonlog.py&quot;,</span><br><span class="line">    &quot;module&quot;: &quot;jsonlog&quot;,</span><br><span class="line">    &quot;exc_info&quot;: &quot;Traceback (most recent call last):\n  File \&quot;jsonlog.py\&quot;, line 129, in test\n    a &#x3D; 1 &#x2F; 0\nZeroDivisionError: division by zero\n&quot;,</span><br><span class="line">    &quot;exc_text&quot;: null,</span><br><span class="line">    &quot;stack_info&quot;: &quot;None&quot;,</span><br><span class="line">    &quot;created&quot;: &quot;2019-01-31 18:53:39&quot;,</span><br><span class="line">    &quot;msecs&quot;: 581.8040370941162,</span><br><span class="line">    &quot;relativeCreated&quot;: 47.5161075592041,</span><br><span class="line">    &quot;type&quot;: &quot;&#39;json&#39;&quot;,</span><br><span class="line">    &quot;level&quot;: &quot;INFO&quot;,</span><br><span class="line">    &quot;message&quot;: &quot;This is a info message&quot;,</span><br><span class="line">    &quot;lineno&quot;: &quot;133&quot;,</span><br><span class="line">    &quot;funcName&quot;: &quot;&#39;test&#39;&quot;,</span><br><span class="line">    &quot;thread&quot;: &quot;140735830963008&quot;,</span><br><span class="line">    &quot;threadName&quot;: &quot;&#39;MainThread&#39;&quot;,</span><br><span class="line">    &quot;processName&quot;: &quot;&#39;MainProcess&#39;&quot;,</span><br><span class="line">    &quot;process&quot;: &quot;83309&quot;,</span><br><span class="line">    &quot;department&quot;: &quot;IT&quot;,</span><br><span class="line">    &quot;bussiness&quot;: &quot;&#39;game&#39;&quot;,</span><br><span class="line">    &quot;project&quot;: &quot;WEHOST&quot;,</span><br><span class="line">    &quot;team&quot;: &quot;OPS&quot;,</span><br><span class="line">    &quot;log_debug&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot;: &quot;2019-01-31 18:53:39 582770&quot;,</span><br><span class="line">    &quot;@version&quot;: &quot;v1.0&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;mylog&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;MacBooKPro&quot;,</span><br><span class="line">    &quot;pathname&quot;: &quot;jsonlog.py&quot;,</span><br><span class="line">    &quot;levelno&quot;: 20,</span><br><span class="line">    &quot;filename&quot;: &quot;jsonlog.py&quot;,</span><br><span class="line">    &quot;module&quot;: &quot;jsonlog&quot;,</span><br><span class="line">    &quot;exc_info&quot;: &quot;Traceback (most recent call last):\n  File \&quot;jsonlog.py\&quot;, line 129, in test\n    a &#x3D; 1 &#x2F; 0\nZeroDivisionError: division by zero\n&quot;,</span><br><span class="line">    &quot;exc_text&quot;: null,</span><br><span class="line">    &quot;stack_info&quot;: &quot;None&quot;,</span><br><span class="line">    &quot;created&quot;: &quot;2019-01-31 18:53:39&quot;,</span><br><span class="line">    &quot;msecs&quot;: 582.7357769012451,</span><br><span class="line">    &quot;relativeCreated&quot;: 48.44784736633301,</span><br><span class="line">    &quot;type&quot;: &quot;json&quot;,</span><br><span class="line">    &quot;level&quot;: &quot;INFO&quot;,</span><br><span class="line">    &quot;message&quot;: &quot;Hello World&quot;,</span><br><span class="line">    &quot;lineno&quot;: &quot;134&quot;,</span><br><span class="line">    &quot;funcName&quot;: &quot;&#39;test&#39;&quot;,</span><br><span class="line">    &quot;thread&quot;: &quot;140735830963008&quot;,</span><br><span class="line">    &quot;threadName&quot;: &quot;&#39;MainThread&#39;&quot;,</span><br><span class="line">    &quot;processName&quot;: &quot;&#39;MainProcess&#39;&quot;,</span><br><span class="line">    &quot;process&quot;: &quot;83309&quot;,</span><br><span class="line">    &quot;key1&quot;: &quot;&#39;value1&#39;&quot;,</span><br><span class="line">    &quot;key2&quot;: &quot;&#39;value2&#39;&quot;,</span><br><span class="line">    &quot;project&quot;: &quot;WEHOST&quot;,</span><br><span class="line">    &quot;team&quot;: &quot;OPS&quot;,</span><br><span class="line">    &quot;department&quot;: &quot;IT&quot;,</span><br><span class="line">    &quot;log_debug&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到日志是json格式，这样你就可以很方便的使用grafna和kafka-&gt;logstash-&gt;es的方式进行日志收集展示了.如果需要将日志直接打到kafka中,需要使用kafka-python库,同时定义handlers进行处理.</p>]]></content>
    
    <summary type="html">
    
      python的logging模块实现json格式的日志输出
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>让人想骂街的 Python 炫技操作：条件语句的七种写法</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-19T16:15:34.000Z</published>
    <updated>2020-04-20T06:23:15.816Z</updated>
    
    <content type="html"><![CDATA[<p>有的人说 Python 是一门入门容易，但是精通难的语言，这一点我非常赞同。</p><p>Python 语言里有许多（而且是越来越多）的高级特性，是 Python 发烧友们非常喜欢的。在这些人的眼里，能够写出那些一般开发者看不懂的高级特性，就是高手，就是大神。</p><p>但你要知道，在团队合作里，炫技是大忌。</p><p>为什么这么说呢？我说下自己的看法：</p><p>越简洁的代码，越清晰的逻辑，就越不容易出错；<br>在团队合作中，你的代码不只有你在维护，降低别人的阅读/理解代码逻辑的成本是一种良好的品德<br>简单的代码，只会用到最基本的语法糖，复杂的高级特性，会有更多的依赖（如语言的版本）<br>在这个系列里，我将总结列举一下，我所见过的那些炫技操作，今天先来个热身，写一写很简单的条件判断语句里有哪些让人想骂街的炫技操作，在这里，如果你是 Python 发烧友，你可以学到一些写出超酷的代码书写技巧，但学习归学习，希望你区分场景使用。</p><ol start="0"><li>原代码<br>这是一段非常简单的通过年龄判断一个人是否成年的代码，由于代码行数过多，有些人就不太愿意这样写，因为这体现不出自己多年的 Python 功力。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if age &gt; 18:</span><br><span class="line">    return &quot;已成年&quot;</span><br><span class="line">else:</span><br><span class="line">    return &quot;未成年&quot;</span><br></pre></td></tr></table></figure>下面我列举了六种这段代码的变异写法，一个比一个还 6 ，单独拿出来比较好理解，放在工程代码里，没用过这些学法的人，一定会看得一脸懵逼，理解了之后，又不经意大呼：卧槽，还可以这样写？，而后就要开始骂街了：这是给人看的代码？</li><li>第一种<br>语法:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;on_true&gt; if &lt;condition&gt; else &lt;on_false&gt;</span><br></pre></td></tr></table></figure>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; age1 &#x3D; 20</span><br><span class="line">&gt;&gt;&gt; age2 &#x3D; 17</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; msg1 &#x3D; &quot;已成年&quot; if age1 &gt; 18 else &quot;未成年&quot;</span><br><span class="line">&gt;&gt;&gt; print msg1</span><br><span class="line">已成年</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; msg2 &#x3D; &quot;已成年&quot; if age2 &gt; 18 else &quot;未成年&quot;</span><br><span class="line">&gt;&gt;&gt; print msg2</span><br><span class="line">未成年</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li>第二种<br>语法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;expression&gt; and &lt;on_true&gt; or &lt;on_false&gt;</span><br></pre></td></tr></table></figure>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; msg1 &#x3D; age1 &gt; 18 and &quot;已成年&quot; or &quot;未成年&quot;</span><br><span class="line">&gt;&gt;&gt; msg2 &#x3D; &quot;已成年&quot; if age2 &gt; 18 else &quot;未成年&quot;</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; print(msg1)</span><br><span class="line">已成年</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; print(msg2)</span><br><span class="line">未成年</span><br></pre></td></tr></table></figure></li><li>第三种<br>语法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&lt;on_true&gt;, &lt;on_false&gt;)[condition]</span><br></pre></td></tr></table></figure>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; msg1 &#x3D; (&quot;未成年&quot;, &quot;已成年&quot;)[age1 &gt; 18]</span><br><span class="line">&gt;&gt;&gt; print(msg1)</span><br><span class="line">已成年</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; msg2 &#x3D; (&quot;未成年&quot;, &quot;已成年&quot;)[age2 &gt; 18]</span><br><span class="line">&gt;&gt;&gt; print(msg2)</span><br><span class="line">未成年</span><br></pre></td></tr></table></figure></li><li>第四种<br>语法:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lambda: &lt;on_false&gt;, lambda:&lt;on_true&gt;)[&lt;condition&gt;]()</span><br></pre></td></tr></table></figure>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; msg1 &#x3D; (lambda:&quot;未成年&quot;, lambda:&quot;已成年&quot;)[age1 &gt; 18]()</span><br><span class="line">&gt;&gt;&gt; print(msg1)</span><br><span class="line">已成年</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; msg2 &#x3D; (lambda:&quot;未成年&quot;, lambda:&quot;已成年&quot;)[age2 &gt; 18]()</span><br><span class="line">&gt;&gt;&gt; print(msg2)</span><br><span class="line">未成年</span><br></pre></td></tr></table></figure></li><li>第五种<br>语法:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;True: &lt;on_true&gt;, False: &lt;on_false&gt;&#125;[&lt;condition&gt;]</span><br></pre></td></tr></table></figure>例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; msg1 &#x3D; &#123;True: &quot;已成年&quot;, False: &quot;未成年&quot;&#125;[age1 &gt; 18]</span><br><span class="line">&gt;&gt;&gt; print(msg1)</span><br><span class="line">已成年</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; msg2 &#x3D; &#123;True: &quot;已成年&quot;, False: &quot;未成年&quot;&#125;[age2 &gt; 18]</span><br><span class="line">&gt;&gt;&gt; print(msg2)</span><br><span class="line">未成年</span><br></pre></td></tr></table></figure></li><li>第六种<br>语法:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((&lt;condition&gt;) and (&lt;on_true&gt;,) or (&lt;on_false&gt;,))[0]</span><br></pre></td></tr></table></figure>例子:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; msg1 &#x3D; ((age1 &gt; 18) and (&quot;已成年&quot;,) or (&quot;未成年&quot;,))[0]</span><br><span class="line">&gt;&gt;&gt; print(msg1)</span><br><span class="line">已成年</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; msg2 &#x3D; ((age2 &gt; 18) and (&quot;已成年&quot;,) or (&quot;未成年&quot;,))[0]</span><br><span class="line">&gt;&gt;&gt; print(msg2)</span><br><span class="line">未成年</span><br></pre></td></tr></table></figure>以上代码，都比较简单，仔细看都能看懂，我就不做解释了。</li></ol><p>看到这里，有没有涨姿势了，学了这么久的 Python ，这么多骚操作，还真是活久见。。这六种写法里，我最推荐使用的是第一种，自己也经常在用，简洁直白，代码行还少。而其他的写法虽然能写，但是不会用，也不希望在我余生里碰到会在公共代码里用这些写法的同事。</p>]]></content>
    
    <summary type="html">
    
      让人想骂街的 Python 炫技操作:条件语句的七种写法
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
  <entry>
    <title>Flask知识点总结</title>
    <link href="https://shuke163.github.io/2020/04/20/"/>
    <id>https://shuke163.github.io/2020/04/20/</id>
    <published>2020-04-19T16:07:54.000Z</published>
    <updated>2020-04-20T06:24:16.285Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote><h2 id="Python-中更优雅的日志记录方案"><a href="#Python-中更优雅的日志记录方案" class="headerlink" title="Python 中更优雅的日志记录方案"></a>Python 中更优雅的日志记录方案</h2><p>在 Python 中，一般情况下我们可能直接用自带的 logging 模块来记录日志，包括我之前的时候也是一样。在使用时我们需要配置一些 Handler、Formatter 来进行一些处理，比如把日志输出到不同的位置，或者设置一个不同的输出格式，或者设置日志分块和备份。但其实个人感觉 logging 用起来其实并不是那么好用，其实主要还是配置较为繁琐.</p><h2 id="常见使用"><a href="#常见使用" class="headerlink" title="常见使用"></a>常见使用</h2><p>首先看看 logging 常见的解决方案吧，我一般会配置输出到文件、控制台和 Elasticsearch。输出到控制台就仅仅是方便直接查看的；输出到文件是方便直接存储，保留所有历史记录的备份；输出到 Elasticsearch，直接将 Elasticsearch 作为存储和分析的中心，使用 Kibana 可以非常方便地分析和查看运行情况。<br>所以在这里我基本会对 logging 做如下的封装写法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">mport logging</span><br><span class="line">import sys</span><br><span class="line">from os import makedirs</span><br><span class="line">from os.path import dirname, exists</span><br><span class="line"></span><br><span class="line">from cmreslogging.handlers import CMRESHandler</span><br><span class="line"></span><br><span class="line">loggers &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">LOG_ENABLED &#x3D; True  # 是否开启日志</span><br><span class="line">LOG_TO_CONSOLE &#x3D; True  # 是否输出到控制台</span><br><span class="line">LOG_TO_FILE &#x3D; True  # 是否输出到文件</span><br><span class="line">LOG_TO_ES &#x3D; True  # 是否输出到 Elasticsearch</span><br><span class="line"></span><br><span class="line">LOG_PATH &#x3D; &#39;.&#x2F;runtime.log&#39;  # 日志文件路径</span><br><span class="line">LOG_LEVEL &#x3D; &#39;DEBUG&#39;  # 日志级别</span><br><span class="line">LOG_FORMAT &#x3D; &#39;%(levelname)s - %(asctime)s - process: %(process)d - %(filename)s - %(name)s - %(lineno)d - %(module)s - %(message)s&#39;  # 每条日志输出格式</span><br><span class="line">ELASTIC_SEARCH_HOST &#x3D; &#39;eshost&#39;  # Elasticsearch Host</span><br><span class="line">ELASTIC_SEARCH_PORT &#x3D; 9200  # Elasticsearch Port</span><br><span class="line">ELASTIC_SEARCH_INDEX &#x3D; &#39;runtime&#39;  # Elasticsearch Index Name</span><br><span class="line">APP_ENVIRONMENT &#x3D; &#39;dev&#39;  # 运行环境，如测试环境还是生产环境</span><br><span class="line"></span><br><span class="line">def get_logger(name&#x3D;None):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    get logger by name</span><br><span class="line">    :param name: name of logger</span><br><span class="line">    :return: logger</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    global loggers</span><br><span class="line"></span><br><span class="line">    if not name: name &#x3D; __name__</span><br><span class="line"></span><br><span class="line">    if loggers.get(name):</span><br><span class="line">        return loggers.get(name)</span><br><span class="line"></span><br><span class="line">    logger &#x3D; logging.getLogger(name)</span><br><span class="line">    logger.setLevel(LOG_LEVEL)</span><br><span class="line"></span><br><span class="line">    # 输出到控制台</span><br><span class="line">    if LOG_ENABLED and LOG_TO_CONSOLE:</span><br><span class="line">        stream_handler &#x3D; logging.StreamHandler(sys.stdout)</span><br><span class="line">        stream_handler.setLevel(level&#x3D;LOG_LEVEL)</span><br><span class="line">        formatter &#x3D; logging.Formatter(LOG_FORMAT)</span><br><span class="line">        stream_handler.setFormatter(formatter)</span><br><span class="line">        logger.addHandler(stream_handler)</span><br><span class="line"></span><br><span class="line">    # 输出到文件</span><br><span class="line">    if LOG_ENABLED and LOG_TO_FILE:</span><br><span class="line">        # 如果路径不存在，创建日志文件文件夹</span><br><span class="line">        log_dir &#x3D; dirname(log_path)</span><br><span class="line">        if not exists(log_dir): makedirs(log_dir)</span><br><span class="line">        # 添加 FileHandler</span><br><span class="line">        file_handler &#x3D; logging.FileHandler(log_path, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">        file_handler.setLevel(level&#x3D;LOG_LEVEL)</span><br><span class="line">        formatter &#x3D; logging.Formatter(LOG_FORMAT)</span><br><span class="line">        file_handler.setFormatter(formatter)</span><br><span class="line">        logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">    # 输出到 Elasticsearch</span><br><span class="line">    if LOG_ENABLED and LOG_TO_ES:</span><br><span class="line">        # 添加 CMRESHandler</span><br><span class="line">        es_handler &#x3D; CMRESHandler(hosts&#x3D;[&#123;&#39;host&#39;: ELASTIC_SEARCH_HOST, &#39;port&#39;: ELASTIC_SEARCH_PORT&#125;],</span><br><span class="line">                                  # 可以配置对应的认证权限</span><br><span class="line">                                  auth_type&#x3D;CMRESHandler.AuthType.NO_AUTH,  </span><br><span class="line">                                  es_index_name&#x3D;ELASTIC_SEARCH_INDEX,</span><br><span class="line">                                  # 一个月分一个 Index</span><br><span class="line">                                  index_name_frequency&#x3D;CMRESHandler.IndexNameFrequency.MONTHLY,</span><br><span class="line">                                  # 额外增加环境标识</span><br><span class="line">                                  es_additional_fields&#x3D;&#123;&#39;environment&#39;: APP_ENVIRONMENT&#125;  </span><br><span class="line">                                  )</span><br><span class="line">        es_handler.setLevel(level&#x3D;LOG_LEVEL)</span><br><span class="line">        formatter &#x3D; logging.Formatter(LOG_FORMAT)</span><br><span class="line">        es_handler.setFormatter(formatter)</span><br><span class="line">        logger.addHandler(es_handler)</span><br><span class="line"></span><br><span class="line">    # 保存到全局 loggers</span><br><span class="line">    loggers[name] &#x3D; logger</span><br><span class="line">    return logger</span><br></pre></td></tr></table></figure><p>定义完了怎么使用呢？只需要使用定义的方法获取一个 logger，然后 log 对应的内容即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logger &#x3D; get_logger()</span><br><span class="line">logger.debug(&#39;this is a message&#39;)</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG - 2019-10-11 22:27:35,923 - process: 99490 - logger.py - __main__ - 81 - logger - this is a message</span><br></pre></td></tr></table></figure><p>我们看看这个定义的基本实现吧。首先这里一些常量是用来定义 <code>logging</code> 模块的一些基本属性的，比如 LOG_ENABLED 代表是否开启日志功能，<code>LOG_TO_E</code>S 代表是否将日志输出到 Elasticsearch，另外还有很多其他的日志基本配置，如 <code>LOG_FORMAT</code> 配置了日志每个条目输出的基本格式，另外还有一些连接的必要信息。这些变量可以和运行时的命令行或环境变量对接起来，可以方便地实现一些开关和配置的更换。</p><p>然后定义了这么一个 <code>get_logger</code> 方法，接收一个参数 name。首先该方法拿到 name 之后，会到全局的 loggers 变量里面查找，loggers 变量是一个全局字典，如果有已经声明过的 logger，直接将其获取返回即可，不用再将其二次初始化。如果 loggers 里面没有找到 name 对应的 logger，那就进行创建即可。创建 logger 之后，可以为其添加各种对应的 Handler，如输出到控制台就用 StreamHandler，输出到文件就用 FileHandler 或 RotatingFileHandler，输出到 Elasticsearch 就用 CMRESHandler，分别配置好对应的信息即可。</p><p>最后呢，将新建的 logger 保存到全局的 loggers 里面并返回即可，这样如果有同名的 logger 便可以直接查找 loggers 直接返回了。<br>在这里依赖了额外的输出到 Elasticsearch 的包，叫做 CMRESHandler，它可以支持将日志输出到 Elasticsearch 里面，如果要使用的话可以安装一下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install CMRESHandler</span><br></pre></td></tr></table></figure><p>其 GitHub 地址是：<code>https://github.com/cmanaha/python-elasticsearch-logger</code>，具体的使用方式可以看看它的官方说明，如配置认证信息，配置 Index 分隔信息等等。<br>好，上面就是我之前常用的 logging 配置，通过如上的配置，我就可以实现将 logging 输出到三个位置，并可以实现对应的效果。比如输出到 Elasticsearch 之后，我就可以非常方便地使用 Kibana 来查看当前运行情况，ERROR Log 的比例等等.<br>也可以在它的基础上做更进一步的统计分析.</p><h2 id="loguru"><a href="#loguru" class="headerlink" title="loguru"></a>loguru</h2><p>上面的实现方式已经是一个较为可行的配置方案了。然而，我还是会感觉到有些 Handler 配起来麻烦，尤其是新建一个项目的很多时候懒得去写一些配置。即使是不用上文的配置，用最基本的几行 logging 配置，像如下的通用配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level &#x3D; logging.INFO,format &#x3D; &#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)</span><br><span class="line">logger &#x3D; logging.getLogger(__name__)</span><br></pre></td></tr></table></figure><p>我也懒得去写，感觉并不是一个优雅的实现方式。<br>有需求就有动力啊，这不，就有人实现了这么一个库，叫做 loguru，可以将 log 的配置和使用更加简单和方便。<br>下面我们来看看它到底是怎么用的吧.</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先，这个库的安装方式很简单，就用基本的 pip 安装即可，Python 3 版本的安装如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install loguru</span><br></pre></td></tr></table></figure><p>安装完毕之后，我们就可以在项目里使用这个 loguru 库了.</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>那么这个库怎么来用呢？我们先用一个实例感受下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from loguru import logger</span><br><span class="line"></span><br><span class="line">logger.debug(&#39;this is a debug message&#39;)</span><br></pre></td></tr></table></figure><p>看到了吧，不需要配置什么东西，直接引入一个 logger，然后调用其 debug 方法即可。</p><p>在 loguru 里面有且仅有一个主要对象，那就是 logger，loguru 里面有且仅有一个 logger，而且它已经被提前配置了一些基础信息，比如比较友好的格式化、文本颜色信息等等。</p><p>上面的代码运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-10-13 22:46:12.367 | DEBUG    | __main__:&lt;module&gt;:4 - this is a debug message</span><br></pre></td></tr></table></figure><p>可以看到其默认的输出格式是上面的内容，有时间、级别、模块名、行号以及日志信息，不需要手动创建 logger，直接使用即可，另外其输出还是彩色的，看起来会更加友好。</p><p>以上的日志信息是直接输出到控制台的，并没有输出到其他的地方，如果想要输出到其他的位置，比如存为文件，我们只需要使用一行代码声明即可。</p><p>例如将结果同时输出到一个 runtime.log 文件里面，可以这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from loguru import logger</span><br><span class="line"></span><br><span class="line">logger.add(&#39;runtime.log&#39;)</span><br><span class="line">logger.debug(&#39;this is a debug&#39;)</span><br></pre></td></tr></table></figure><p>很简单吧，我们也不需要再声明一个 FileHandler 了，就一行 add 语句搞定，运行之后会发现目录下 runtime.log 里面同样出现了刚刚控制台输出的 DEBUG 信息。</p><p>上面就是一些基本的使用，但这还远远不够，下面我们来详细了解下它的一些功能模块.</p><h2 id="详细使用"><a href="#详细使用" class="headerlink" title="详细使用"></a>详细使用</h2><p>既然是日志，那么最常见的就是输出到文件了。loguru 对输出到文件的配置有非常强大的支持，比如支持输出到多个文件，分级别分别输出，过大创建新文件，过久自动删除等等。</p><p>下面我们分别看看这些怎样来实现，这里基本上就是 add 方法的使用介绍。因为这个 add 方法就相当于给 logger 添加了一个 Handler，它给我们暴露了许多参数来实现 Handler 的配置，下面我们来详细介绍下。<br>首先看看它的方法定义吧:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def add(</span><br><span class="line">        self,</span><br><span class="line">        sink,</span><br><span class="line">        *,</span><br><span class="line">        level&#x3D;_defaults.LOGURU_LEVEL,</span><br><span class="line">        format&#x3D;_defaults.LOGURU_FORMAT,</span><br><span class="line">        filter&#x3D;_defaults.LOGURU_FILTER,</span><br><span class="line">        colorize&#x3D;_defaults.LOGURU_COLORIZE,</span><br><span class="line">        serialize&#x3D;_defaults.LOGURU_SERIALIZE,</span><br><span class="line">        backtrace&#x3D;_defaults.LOGURU_BACKTRACE,</span><br><span class="line">        diagnose&#x3D;_defaults.LOGURU_DIAGNOSE,</span><br><span class="line">        enqueue&#x3D;_defaults.LOGURU_ENQUEUE,</span><br><span class="line">        catch&#x3D;_defaults.LOGURU_CATCH,</span><br><span class="line">        **kwargs</span><br><span class="line">    ):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>看看它的源代码，它支持这么多的参数，如 level、format、filter、color 等等。</p><blockquote><p>sink<br>另外我们还注意到它有个非常重要的参数 sink，我们看看官方文档：<code>https://loguru.readthedocs.io/en/stable/api/logger.html#sink</code>，可以了解到通过 sink 我们可以传入多种不同的数据结构，汇总如下:</p></blockquote><ul><li>sink 可以传入一个 file 对象，例如 sys.stderr 或者 open(‘file.log’, ‘w’) 都可以。</li><li>sink 可以直接传入一个 str 字符串或者 pathlib.Path 对象，其实就是代表文件路径的，如果识别到是这种类型，它会自动创建对应路径的日志文件并将日志输出进去。</li><li>sink 可以是一个方法，可以自行定义输出实现。</li><li>sink 可以是一个 logging 模块的 Handler，比如 FileHandler、StreamHandler 等等，或者上文中我们提到的 CMRESHandler 照样也是可以的，这样就可以实现自定义 Handler 的配置。</li><li>sink 还可以是一个自定义的类，具体的实现规范可以参见官方文档.<br>所以说，刚才我们所演示的输出到文件，仅仅给它传了一个 str 字符串路径，他就给我们创建了一个日志文件，就是这个原理。</li></ul><blockquote><blockquote><p>format, filter, level<br>下面我们再了解下它的其他参数，例如 format、filter、level 等等。<br>其实它们的概念和格式和 logging 模块都是基本一样的了，例如这里使用 format、filter、level 来规定输出的格式:</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.add(&#39;runtime.log&#39;, format&#x3D;&quot;&#123;time&#125; &#123;level&#125; &#123;message&#125;&quot;, filter&#x3D;&quot;my_module&quot;, level&#x3D;&quot;INFO&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>删除sink<br>另外添加 sink 之后我们也可以对其进行删除，相当于重新刷新并写入新的内容。<br>删除的时候根据刚刚 add 方法返回的 id 进行删除即可，看下面的例子:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from loguru import logger</span><br><span class="line"></span><br><span class="line">trace &#x3D; logger.add(&#39;runtime.log&#39;)</span><br><span class="line">logger.debug(&#39;this is a debug message&#39;)</span><br><span class="line">logger.remove(trace)</span><br><span class="line">logger.debug(&#39;this is another debug message&#39;)</span><br></pre></td></tr></table></figure><p>看这里，我们首先 add 了一个 sink，然后获取它的返回值，赋值为 trace。随后输出了一条日志，然后将 trace 变量传给 remove 方法，再次输出一条日志，看看结果是怎样的。<br>控制台输出如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">019-10-13 23:18:26.469 | DEBUG    | __main__:&lt;module&gt;:4 - this is a debug message</span><br><span class="line">2019-10-13 23:18:26.469 | DEBUG    | __main__:&lt;module&gt;:6 - this is another debug message</span><br></pre></td></tr></table></figure><p>日志文件 runtime.log 内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-10-13 23:18:26.469 | DEBUG    | __main__:&lt;module&gt;:4 - this is a debug message</span><br></pre></td></tr></table></figure><p>可以发现，在调用 remove 方法之后，确实将历史 log 删除了。<br>这样我们就可以实现日志的刷新重新写入操作。</p><blockquote><p>rotation 配置<br>用了 loguru 我们还可以非常方便地使用 rotation 配置，比如我们想一天输出一个日志文件，或者文件太大了自动分隔日志文件，我们可以直接使用 add 方法的 rotation 参数进行配置。<br>我们看看下面的例子：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.add(&#39;runtime_&#123;time&#125;.log&#39;, rotation&#x3D;&quot;500 MB&quot;)</span><br></pre></td></tr></table></figure><p>通过这样的配置我们就可以实现每 500MB 存储一个文件，每个 log 文件过大就会新创建一个 log 文件。我们在配置 log 名字时加上了一个 time 占位符，这样在生成时可以自动将时间替换进去，生成一个文件名包含时间的 log 文件。<br>另外我们也可以使用 rotation 参数实现定时创建 log 文件，例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.add(&#39;runtime_&#123;time&#125;.log&#39;, rotation&#x3D;&#39;00:00&#39;)</span><br></pre></td></tr></table></figure><p>这样就可以实现每天 0 点新创建一个 log 文件输出了。<br>另外我们也可以配置 log 文件的循环时间，比如每隔一周创建一个 log 文件，写法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.add(&#39;runtime_&#123;time&#125;.log&#39;, rotation&#x3D;&#39;1 week&#39;)</span><br></pre></td></tr></table></figure><p>这样我们就可以实现一周创建一个 log 文件了。</p><blockquote><p>retention 配置<br>很多情况下，一些非常久远的 log 对我们来说并没有什么用处了，它白白占据了一些存储空间，不清除掉就会非常浪费。retention 这个参数可以配置日志的最长保留时间。<br>比如我们想要设置日志文件最长保留 10 天，可以这么来配置:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.add(&#39;runtime.log&#39;, retention&#x3D;&#39;10 days&#39;)</span><br></pre></td></tr></table></figure><p>这样 log 文件里面就会保留最新 10 天的 log，妈妈再也不用担心 log 沉积的问题啦。</p><blockquote><p>compression 配置<br>loguru 还可以配置文件的压缩格式，比如使用 zip 文件格式保存，示例如下:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.add(&#39;runtime.log&#39;, compression&#x3D;&#39;zip&#39;)</span><br></pre></td></tr></table></figure><p>这样可以更加节省存储空间。</p><blockquote><p>字符串格式化<br>loguru 在输出 log 的时候还提供了非常友好的字符串格式化功能，像这样:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.info(&#39;If you are using Python &#123;&#125;, prefer &#123;feature&#125; of course!&#39;, 3.6, feature&#x3D;&#39;f-strings&#39;)</span><br></pre></td></tr></table></figure><p>这样在添加参数就非常方便了。</p><blockquote><p>Traceback 记录<br>在很多情况下，如果遇到运行错误，而我们在打印输出 log 的时候万一不小心没有配置好 Traceback 的输出，很有可能我们就没法追踪错误所在了。<br>但用了 loguru 之后，我们用它提供的装饰器就可以直接进行 Traceback 的记录，类似这样的配置即可:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@logger.catch</span><br><span class="line">def my_function(x, y, z):</span><br><span class="line">    # An error? It&#39;s caught anyway!</span><br><span class="line">    return 1 &#x2F; (x + y + z)</span><br></pre></td></tr></table></figure><p>我们做个测试，我们在调用时三个参数都传入 0，直接引发除以 0 的错误，看看会出现什么情况:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_function(0, 0, 0)</span><br></pre></td></tr></table></figure><p>运行完毕之后，可以发现 log 里面就出现了 Traceback 信息，而且给我们输出了当时的变量值，真的是不能再赞了！结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; File &quot;run.py&quot;, line 15, in &lt;module&gt;</span><br><span class="line">    my_function(0, 0, 0)</span><br><span class="line">    └ &lt;function my_function at 0x1171dd510&gt;</span><br><span class="line"></span><br><span class="line">  File &quot;&#x2F;private&#x2F;var&#x2F;py&#x2F;logurutest&#x2F;demo5.py&quot;, line 13, in my_function</span><br><span class="line">    return 1 &#x2F; (x + y + z)</span><br><span class="line">                │   │   └ 0</span><br><span class="line">                │   └ 0</span><br><span class="line">                └ 0</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>因此，用 loguru 可以非常方便地实现日志追踪，debug 效率可能要高上十倍了？<br>另外 loguru 还有很多很多强大的功能，这里就不再一一展开讲解了，更多的内容大家可以看看 loguru 的官方文档详细了解一下：<code>https://loguru.readthedocs.io/en/stable/index.html</code><br>看完之后，是时候把自己的 logging 模块替换成 loguru 啦！</p>]]></content>
    
    <summary type="html">
    
      Flask知识点总结
    
    </summary>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/categories/PYTHON/"/>
    
    
      <category term="PYTHON" scheme="https://shuke163.github.io/tags/PYTHON/"/>
    
  </entry>
  
</feed>
