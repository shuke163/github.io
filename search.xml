<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Alembic</title>
    <url>/2020/04/20/Alembic/</url>
    <content><![CDATA[<h2 id="Alembic"><a href="#Alembic" class="headerlink" title="Alembic"></a>Alembic</h2><p>数据库的管理是一个项目中非常关键的部分。<br>整个开发过程中免不了要对数据库的结构进行一定的修改，比如字段的增加，字段类型的改变， 或者新添和删除一个表。<br>比如新建一个表格，朴素的思想（原始的冲动）是代码里补充一个 class，定义好各个字段（可能有50个甚至更多的字段），再一次 create_all()（这也意味着之前的数据会消失），或者在代码部分写好之后，通过数据库软件人肉修改数据库中的结构（想想，几十个字段，甚至上百个字段）。<br>上述的做法，费时费力，不要忘了，生产工具的使用促进人类社会发展，重复的机械劳动就是浪费生命，聪明的程序员是要学会偷懒的。<br>所以，今天我们来学习一下 alembic！这是 sqlalchemy 作者亲自开发的 数据库版本管理工具，亲儿子。（需要强调的是，仅仅针对结构化的数据，Mysql PostgreSQL 等）<br>数据库迁移的终极目的：数据不丢失。</p>
<h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>pip install alembic  # 请确保是你代码运行 python 版本中的 pip<br>显然，这是为了确保安装了 alembic。之后你就可以在命令行使用 alembic 命令了</p>
<h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>alembic init alembic_dir  # alembic_dir 是自定义的名字，不用加引号<br>在你的项目的根目录下运行这个指令，不出意外，会出现：（当然，你也可以在别的目录里面这么做，不过，仅仅是使用的话，知道这是个套路就好了，因为 alembic 命令会找当前命令录里的 env.py 文件）<br>yourproject/<br>alembic.ini  # 相关的初始化配置，主要为 env.py 中的 context 提供相应的参数，我们需要修改的是 sqlalchemy.url 这个<br>alembic_dir/<br>env.py # 环境文件，灵活性相当之大<br>README<br>   script.py.mako  # 这是用来生成迁移脚本 py 文件的 mako 语法脚本文件<br>   versions/  # 这个文件里保存着每次 revision 的相关信息</p>
<h3 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h3><p>编辑 alembic.ini 文件，绑定数据库<br>sqlalchemy.url = driver://user:pass@localhost/dbname  # 把 = 后面的修改成你数据库的配置就可以了，不要加引号<br>第四步：<br>在 env.py 中强势插入如下代码，防止在使用 自动迁移命令 时，找不到数据库的路径，参考：stackoverflow<br>import os<br>import sys<br>sys.path.insert(0. os.path.realpath(‘.’))<br>为了使用模型类实现 自动迁移，还需要设置元数据，这样 alembic 才能获取模型类中定义的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from models import Base</span><br><span class="line">Target_metadata &#x3D; Base.metadata</span><br></pre></td></tr></table></figure>
<h3 id="第五步："><a href="#第五步：" class="headerlink" title="第五步："></a>第五步：</h3><p>比如你的代码里已经创建了一个表模型类，有如下两个操作。<br>alembic revision -m ‘input your description for this version’  # 这个属于你手动在 versions/fdfadsf.py 去更改，不需要模型类<br>alembic revision –autogenerate -m ‘input your description for this version’  # 这是自动的，建议用这个，省事，不过在 upgrade 之前一定要自己再 adjust 一下<br>这两个命令都会在 versions 文件夹里生成一个脚本文件，前者需要手动添加，后者自动生成。<br>迁移命令生成后之后不要忘记使用命令 alembic upgrade head 使数据库保持最新的状态。</p>
<p>顾名思义， 生成一个版本<br>此时在该数据库中会生成一个 alembic_version 的表，记录版本信息<br>注意，其中一旦某个版本缺失，那基本上就可以重来了，alembic 的操作将无法定位版本信息，不过！也可以自己 hack 一下，比如数据库的版本号不在versions里头，我们可以自己生成一个，把版本号给改了，这个大家有兴趣可以自己去玩，灵活性很大，总而言之，还是不希望版本的缺失。<br>最后介绍几个命令的意思：<br>alembic current  # 显示当前数据库的版本<br>alembic upgrade head/base/dfas(version num)  # head 指更新到最新版本，base 则是最初版本，也可以指定，类似于 git<br>alembic downgrade base/dfsa(version num)  # 降级，如果是 -1 的话，就是直接回退一级  +/- num 代表前进和后退多少个版本<br>alembic head  # 当前最新的版本号是哪个<br>alembic merge -m ‘fsdf’ asdf fdasf  # 合并两个 head<br>alembic -c test_alembic/alembic.ini dsfajf  # 指定目录<br>具体演示一些可参考的步骤：<br>pip install alembic，可以用 /anaconda/bin/pip install alembic<br>alembic init alembic_dir<br>alembic revision —autogenerate  # 自动脚本，初始化数据库，强调 使用 autogenerate 是无法在与最新版本号不一致的情况下使用的<br>alembic revision -m ‘fasdfads’  # 手动脚本<br>init data 插入数据，接下来的操作就是在存在数据的情况下进行操作，默认使用 autogenerate<br>增加字段，删除字段<br>重命名字段，自动脚本，手动脚本，引申到重命名表格<br>使用 compare_type=True，然后自动脚本 检测字段类型、长度改变，参考该链接<br>强调一下，autogenerate 的局限性，参考链接内容<br>统一再介绍一下几个相关的操作命令<br>团队使用方面，安利 flask-script 的功能，env.py 给予了充分自定义的可能，可以参考o2o_system的修改模式，可是要强调的是数据库操作是个敏感内容，不管是多大的团队，操作数据库的人总不会有太多，还有就是如何使用 flask-script 简化 命令 的输入。</p>
<p>op.rename_table(<br>    ‘old_name’,<br>    ‘new_name’<br>)<br>op.alter_column(<br>    ‘table_name’,<br>    ‘old_name’,<br>    ‘existing_type’,<br>    ‘new_name’<br>)<br>一些进阶的说明：<br>branches 的操作，涉及到了 merge heads 等命令，然后还可以指定 base。<br>offline mode<br>自定义配置文件，自定义 configuration<br>手动定义脚本中还有更多的内容可以学习，operation 有许多方法，比较有用的是批量处理的部分<br>multidb 模板</p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible2.0 python Api</title>
    <url>/2020/04/20/Ansible2-0-python-Api/</url>
    <content><![CDATA[<h2 id="Ansible2-0-python-Api"><a href="#Ansible2-0-python-Api" class="headerlink" title="Ansible2.0 python Api"></a>Ansible2.0 python Api</h2><blockquote>
<p>Python 3.6.2  ansible 2.4.3.0</p>
</blockquote>
<p><a href="https://docs.ansible.com/ansible/latest/dev_guide/developing_api.html#python-api-example" target="_blank" rel="noopener">官方示例</a><br>注意: 默认官方示例中Ansbile的连接参数使用的是local,执行命令操作是在本地</p>
<p>示例修改后调用Ansible的模块执行远端命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python  </span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line">import shutil</span><br><span class="line">from collections import namedtuple</span><br><span class="line">from ansible.parsing.dataloader import DataLoader</span><br><span class="line">from ansible.vars.manager import VariableManager</span><br><span class="line">from ansible.inventory.manager import InventoryManager</span><br><span class="line">from ansible.playbook.play import Play</span><br><span class="line">from ansible.executor.task_queue_manager import TaskQueueManager</span><br><span class="line">from ansible.plugins.callback import CallbackBase</span><br><span class="line">import ansible.constants as C</span><br><span class="line"></span><br><span class="line">class ResultCallback(CallbackBase):</span><br><span class="line">    &quot;&quot;&quot;A sample callback plugin used for performing an action as results come in</span><br><span class="line"></span><br><span class="line">    If you want to collect all results into a single object for processing at</span><br><span class="line">    the end of the execution, look into utilizing the &#96;&#96;json&#96;&#96; callback plugin</span><br><span class="line">    or writing your own custom callback plugin</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def v2_runner_on_ok(self, result, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;Print a json representation of the result</span><br><span class="line"></span><br><span class="line">        This method could store the result in an instance attribute for retrieval later</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        host &#x3D; result._host</span><br><span class="line">        print(json.dumps(&#123;host.name: result._result&#125;, indent&#x3D;4))</span><br><span class="line"></span><br><span class="line"># since API is constructed for CLI it expects certain options to always be set, named tuple &#39;fakes&#39; the args parsing options object</span><br><span class="line">Options &#x3D; namedtuple(&#39;Options&#39;, [&#39;connection&#39;, &#39;module_path&#39;, &#39;forks&#39;, &#39;become&#39;, &#39;become_method&#39;, &#39;become_user&#39;, &#39;check&#39;, &#39;diff&#39;])</span><br><span class="line">options &#x3D; Options(connection&#x3D;&#39;smart&#39;, module_path&#x3D;[&#39;&#x2F;Users&#x2F;zhao&#x2F;anaconda3&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;ansible&#39;], forks&#x3D;10, become&#x3D;True, become_method&#x3D;&#39;sudo&#39;, become_user&#x3D;&#39;root&#39;, check&#x3D;False, diff&#x3D;False)</span><br><span class="line"></span><br><span class="line"># initialize needed objects</span><br><span class="line">loader &#x3D; DataLoader() # Takes care of finding and reading yaml, json and ini files</span><br><span class="line">passwords &#x3D; dict(vault_pass&#x3D;&#39;secret&#39;)</span><br><span class="line"></span><br><span class="line"># Instantiate our ResultCallback for handling results as they come in. Ansible expects this to be one of its main display outlets</span><br><span class="line">results_callback &#x3D; ResultCallback()</span><br><span class="line"></span><br><span class="line"># create inventory, use path to host config file as source or hosts in a comma separated string</span><br><span class="line"># 此处的sources参数可以是hosts文件所在的目录,也可以是完整的文件路径,或者主机字符串,使用逗号分割</span><br><span class="line">inventory &#x3D; InventoryManager(loader&#x3D;loader, sources&#x3D;&#39;&#x2F;Users&#x2F;zhao&#x2F;work&#x2F;playbook&#x2F;inventory&#39;)</span><br><span class="line"></span><br><span class="line"># variable manager takes care of merging all the different sources to give you a unifed view of variables available in each context</span><br><span class="line">variable_manager &#x3D; VariableManager(loader&#x3D;loader, inventory&#x3D;inventory)</span><br><span class="line"></span><br><span class="line"># create datastructure that represents our play, including tasks, this is basically what our YAML loader does internally.</span><br><span class="line">play_source &#x3D;  dict(</span><br><span class="line">        name &#x3D; &quot;Ansible Play&quot;,</span><br><span class="line">        # 需要执行的主机或者主机组</span><br><span class="line">        hosts &#x3D; &#39;nginx-test&#39;,</span><br><span class="line">        gather_facts &#x3D; &#39;no&#39;,</span><br><span class="line">        tasks &#x3D; [</span><br><span class="line">            dict(action&#x3D;dict(module&#x3D;&#39;shell&#39;, args&#x3D;&#39;whoami&#39;), register&#x3D;&#39;shell_out&#39;),</span><br><span class="line">            dict(action&#x3D;dict(module&#x3D;&#39;debug&#39;, args&#x3D;dict(msg&#x3D;&#39;&#123;&#123;shell_out.stdout&#125;&#125;&#39;)))</span><br><span class="line">         ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"># Create play object, playbook objects use .load instead of init or new methods,</span><br><span class="line"># this will also automatically create the task objects from the info provided in play_source</span><br><span class="line">play &#x3D; Play().load(play_source, variable_manager&#x3D;variable_manager, loader&#x3D;loader)</span><br><span class="line"></span><br><span class="line"># Run it - instantiate task queue manager, which takes care of forking and setting up all objects to iterate over host list and tasks</span><br><span class="line">tqm &#x3D; None</span><br><span class="line">try:</span><br><span class="line">    tqm &#x3D; TaskQueueManager(</span><br><span class="line">              inventory&#x3D;inventory,</span><br><span class="line">              variable_manager&#x3D;variable_manager,</span><br><span class="line">              loader&#x3D;loader,</span><br><span class="line">              options&#x3D;options,</span><br><span class="line">              passwords&#x3D;passwords,</span><br><span class="line">              stdout_callback&#x3D;results_callback,  # Use our custom callback instead of the &#96;&#96;default&#96;&#96; callback plugin, which prints to stdout</span><br><span class="line">          )</span><br><span class="line">    result &#x3D; tqm.run(play) # most interesting data for a play is actually sent to the callback&#39;s methods</span><br><span class="line">finally:</span><br><span class="line">    # we always need to cleanup child procs and the structres we use to communicate with them</span><br><span class="line">    if tqm is not None:</span><br><span class="line">        tqm.cleanup()</span><br><span class="line"></span><br><span class="line">     # Remove ansible tmpdir</span><br><span class="line">    shutil.rmtree(C.DEFAULT_LOCAL_TMP, True)</span><br><span class="line">&#96;&#96;&#96;    </span><br><span class="line">执行结果如下:</span><br></pre></td></tr></table></figure>
<p>{<br>    “ngx-brazil-test01br-t001.gru1.wecash.net”: {<br>        “changed”: true,<br>        “end”: “2018-06-20 10:59:36.486658”,<br>        “stdout”: “root”,<br>        “cmd”: “whoami”,<br>        “rc”: 0,<br>        “start”: “2018-06-20 10:59:36.484856”,<br>        “stderr”: “”,<br>        “delta”: “0:00:00.001802”,<br>        “invocation”: {<br>            “module_args”: {<br>                “warn”: true,<br>                “executable”: null,<br>                “_uses_shell”: true,<br>                “_raw_params”: “whoami”,<br>                “removes”: null,<br>                “creates”: null,<br>                “chdir”: null,<br>                “stdin”: null<br>            }<br>        },<br>        “_ansible_parsed”: true,<br>        “stdout_lines”: [<br>            “root”<br>        ],<br>        “stderr_lines”: [],<br>        “_ansible_no_log”: false<br>    }<br>}<br>{<br>    “ngx-brazil-test01br-t001.gru1.wecash.net”: {<br>        “msg”: “root”,<br>        “_ansible_verbose_always”: true,<br>        “_ansible_no_log”: false,<br>        “changed”: false<br>    }<br>}<br>```</p>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible API调用测试</title>
    <url>/2020/04/20/Ansible-API%E8%B0%83%E7%94%A8%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="Ansible-API调用测试"><a href="#Ansible-API调用测试" class="headerlink" title="Ansible API调用测试"></a>Ansible API调用测试</h2><p>本文主要作为记录并未实际使用验证</p>
<p>以下代码是博主测试使用的代码，博主测试使用密码来测试，如需秘钥只要将password注释了就可以使用秘钥了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat test.py</span><br><span class="line"></span><br><span class="line">#! &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from  setup.ansible_api.runner import AdHocRunner, CommandRunner, PlayBookRunner</span><br><span class="line">from  setup.ansible_api.inventory import BaseInventory</span><br><span class="line"></span><br><span class="line">def  TestAdHocRunner():</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">         以yml的形式 执行多个命令</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        host_data &#x3D; [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;hostname&quot;: &quot;192.168.188.6&quot;,</span><br><span class="line">                &quot;ip&quot;: &quot;192.168.188.6&quot;,</span><br><span class="line">                &quot;port&quot;: 22,</span><br><span class="line">                &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">                &quot;password&quot;: &quot;admin12&quot;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">        inventory &#x3D; BaseInventory(host_data)</span><br><span class="line">        runner &#x3D; AdHocRunner(inventory)</span><br><span class="line"></span><br><span class="line">        tasks &#x3D; [</span><br><span class="line">            # &#123;&quot;action&quot;: &#123;&quot;module&quot;: &quot;cron&quot;,&quot;args&quot;: &quot;name&#x3D;\&quot;sync time\&quot; minute&#x3D;\&quot;*&#x2F;3\&quot; job&#x3D;\&quot;&#x2F;usr&#x2F;sbin&#x2F;ntpdate time.nist.gov &amp;&gt; &#x2F;dev&#x2F;null\&quot;&quot; &#125;, &quot;name&quot;: &quot;run_cmd&quot;&#125;,</span><br><span class="line">            # &#123;&quot;action&quot;: &#123;&quot;module&quot;: &quot;shell&quot;, &quot;args&quot;: &quot;ls &#x2F;root1&quot;&#125;, &quot;name&quot;: &quot;run_whoami&quot;&#125;,</span><br><span class="line">            # &#123;&quot;action&quot;: &#123;&quot;module&quot;: &quot;copy&quot;, &quot;args&quot;: &quot;src&#x3D;&#x2F;home&#x2F;23.txt dest&#x3D;&#x2F;tmp&quot;,&quot;mode&quot;:&quot;0644&quot;&#125;, &quot;name&quot;: &quot;run_whoami&quot;&#125;,</span><br><span class="line">            # &#123;&quot;action&quot;: &#123;&quot;module&quot;: &quot;setup&quot;, &quot;args&quot;: &quot;&quot;&#125;, &quot;name&quot;: &quot;run_whoami&quot;&#125;,</span><br><span class="line">            &#123;&quot;action&quot;: &#123;&quot;module&quot;: &quot;ping&quot;, &quot;args&quot;: &quot;&quot;&#125;, &quot;name&quot;: &quot;run_whoami&quot;&#125;,</span><br><span class="line">            # &#123;&quot;action&quot;: &#123;&quot;module&quot;: &quot;yum&quot;, &quot;args&quot;: &quot;name&#x3D;httpd state&#x3D;latest&quot;&#125;, &quot;name&quot;: &quot;run_whoami&quot;&#125;,</span><br><span class="line">        ]</span><br><span class="line">        ret &#x3D; runner.run(tasks, &quot;all&quot;)</span><br><span class="line">        print(ret.results_summary)</span><br><span class="line">        print(ret.results_raw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def TestCommandRunner():</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        执行单个命令，返回结果</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        host_data &#x3D; [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;hostname&quot;: &quot;192.168.188.6&quot;,</span><br><span class="line">                &quot;ip&quot;: &quot;192.168.188.6&quot;,</span><br><span class="line">                &quot;port&quot;: 22,</span><br><span class="line">                &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">                &quot;password&quot;: &quot;admin12&quot;,</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">        inventory &#x3D; BaseInventory(host_data)</span><br><span class="line">        runner &#x3D; CommandRunner(inventory)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        res &#x3D; runner.execute(&#39;who&#39;, &#39;all&#39;)</span><br><span class="line">        print(res.results_command)</span><br><span class="line">        print(res.results_raw)</span><br><span class="line">        print(res.results_command[&#39;192.168.188.6&#39;][&#39;stdout&#39;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def TestPlayBookRunner():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">     以yml的形式 执行多个命令</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    host_data &#x3D; [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;hostname&quot;: &quot;192.168.188.6&quot;,</span><br><span class="line">            &quot;ip&quot;: &quot;192.168.188.5&quot;,</span><br><span class="line">            &quot;port&quot;: 22,</span><br><span class="line">            &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">            &quot;password&quot;: &quot;admin12&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    inventory &#x3D; BaseInventory(host_data)</span><br><span class="line">    path &#x3D; &#39;&#x2F;etc&#x2F;ansible&#x2F;webservice.yml&#39;</span><br><span class="line">    runner &#x3D; PlayBookRunner(playbook_path&#x3D;path,inventory&#x3D;inventory)</span><br><span class="line">    ret &#x3D; runner.run()</span><br><span class="line">    print(ret)</span><br><span class="line"></span><br><span class="line">def  TestInventoryRunner():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    返回主机信息，组信息，组内主机信息</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    host_list &#x3D; [&#123;</span><br><span class="line">        &quot;hostname&quot;: &quot;testserver1&quot;,</span><br><span class="line">        &quot;ip&quot;: &quot;102.1.1.1&quot;,</span><br><span class="line">        &quot;port&quot;: 22,</span><br><span class="line">        &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">        &quot;password&quot;: &quot;password&quot;,</span><br><span class="line">        &quot;private_key&quot;: &quot;&#x2F;tmp&#x2F;private_key&quot;,</span><br><span class="line">        &quot;become&quot;: &#123;</span><br><span class="line">            &quot;method&quot;: &quot;sudo&quot;,</span><br><span class="line">            &quot;user&quot;: &quot;root&quot;,</span><br><span class="line">            &quot;pass&quot;: None,</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;groups&quot;: [&quot;group1&quot;, &quot;group2&quot;],</span><br><span class="line">        &quot;vars&quot;: &#123;&quot;sexy&quot;: &quot;yes&quot;&#125;,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        &quot;hostname&quot;: &quot;testserver2&quot;,</span><br><span class="line">        &quot;ip&quot;: &quot;8.8.8.8&quot;,</span><br><span class="line">        &quot;port&quot;: 2222,</span><br><span class="line">        &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">        &quot;password&quot;: &quot;password&quot;,</span><br><span class="line">        &quot;private_key&quot;: &quot;&#x2F;tmp&#x2F;private_key&quot;,</span><br><span class="line">        &quot;become&quot;: &#123;</span><br><span class="line">            &quot;method&quot;: &quot;su&quot;,</span><br><span class="line">            &quot;user&quot;: &quot;root&quot;,</span><br><span class="line">            &quot;pass&quot;: &quot;123&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;groups&quot;: [&quot;group3&quot;, &quot;group4&quot;],</span><br><span class="line">        &quot;vars&quot;: &#123;&quot;love&quot;: &quot;yes&quot;&#125;,</span><br><span class="line">    &#125;]</span><br><span class="line"></span><br><span class="line">    inventory &#x3D; BaseInventory(host_list&#x3D;host_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(&quot;#&quot;*10 + &quot;Hosts&quot; + &quot;#&quot;*10)</span><br><span class="line">    for host in inventory.hosts:</span><br><span class="line">        print(host)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(&quot;#&quot; * 10 + &quot;Groups&quot; + &quot;#&quot; * 10)</span><br><span class="line">    for group in inventory.groups:</span><br><span class="line">        print(group)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(&quot;#&quot; * 10 + &quot;all group hosts&quot; + &quot;#&quot; * 10)</span><br><span class="line">    group &#x3D; inventory.get_group(&#39;all&#39;)</span><br><span class="line">    print(group.hosts)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    TestPlayBookRunner()</span><br><span class="line">    TestAdHocRunnerRunner()</span><br><span class="line">    TestCommandRunner()</span><br><span class="line">    TestInventoryRunner()</span><br></pre></td></tr></table></figure>
<p>下面测试调用AdHoc的测试结果，博主比较懒，只测试一个ping模块，其他模块网友请自行测试。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PLAY [Ansible Ad-hoc] **********************************************************</span><br><span class="line"></span><br><span class="line">TASK [ping] ********************************************************************</span><br><span class="line">ok: [192.168.188.6]</span><br><span class="line">&#123;&#39;ok&#39;: &#123;&#39;192.168.188.6&#39;: &#123;&#39;ping&#39;: &#123;&#39;invocation&#39;: &#123;&#39;module_args&#39;: &#123;&#39;data&#39;: &#39;pong&#39;&#125;&#125;, &#39;ping&#39;: &#39;pong&#39;, &#39;_ansible_parsed&#39;: True, &#39;_ansible_no_log&#39;: False, &#39;changed&#39;: False&#125;&#125;&#125;, &#39;failed&#39;: &#123;&#125;, &#39;unreachable&#39;: &#123;&#125;, &#39;skipped&#39;: &#123;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>下面测试调用Command的测试结果，测试在目标机器上面使用who命令，其他命令网友自行测试。另外调用TestCommandRunner()必须是以下模块’shell’, ‘raw’, ‘command’, ‘script’，其他模块，请使用AdHoc。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PLAY [Run command who on 192.168.188.6] ****************************************</span><br><span class="line"></span><br><span class="line">TASK [command] *****************************************************************</span><br><span class="line">changed: [192.168.188.6]</span><br><span class="line">&#123;&#39;192.168.188.6&#39;: &#123;&#39;cmd&#39;: &#39;who&#39;, &#39;stderr&#39;: &#39;&#39;, &#39;stdout&#39;: &#39;root     :0           2018-03-10 09:59 (:0)\nroot     pts&#x2F;1        2018-03-10 10:15 (192.168.188.7)&#39;, &#39;rc&#39;: 0, &#39;delta&#39;: &#39;0:00:00.017265&#39;&#125;&#125;</span><br><span class="line">&#123;&#39;ok&#39;: &#123;&#39;192.168.188.6&#39;: &#123;&#39;command&#39;: &#123;&#39;changed&#39;: True, &#39;end&#39;: &#39;2018-03-10 10:15:21.892560&#39;, &#39;stdout&#39;: &#39;root     :0           2018-03-10 09:59 (:0)\nroot     pts&#x2F;1        2018-03-10 10:15 (192.168.188.7)&#39;, &#39;cmd&#39;: &#39;who&#39;, &#39;rc&#39;: 0, &#39;start&#39;: &#39;2018-03-10 10:15:21.875295&#39;, &#39;stderr&#39;: &#39;&#39;, &#39;delta&#39;: &#39;0:00:00.017265&#39;, &#39;invocation&#39;: &#123;&#39;module_args&#39;: &#123;&#39;warn&#39;: True, &#39;executable&#39;: None, &#39;_uses_shell&#39;: True, &#39;_raw_params&#39;: &#39;who&#39;, &#39;removes&#39;: None, &#39;creates&#39;: None, &#39;chdir&#39;: None, &#39;stdin&#39;: None&#125;&#125;, &#39;_ansible_parsed&#39;: True, &#39;stdout_lines&#39;: [&#39;root     :0           2018-03-10 09:59 (:0)&#39;, &#39;root     pts&#x2F;1        2018-03-10 10:15 (192.168.188.7)&#39;], &#39;stderr_lines&#39;: [], &#39;_ansible_no_log&#39;: False&#125;&#125;&#125;, &#39;failed&#39;: &#123;&#125;, &#39;unreachable&#39;: &#123;&#125;, &#39;skipped&#39;: &#123;&#125;&#125;</span><br><span class="line">root     :0           2018-03-10 09:59 (:0)</span><br><span class="line">root     pts&#x2F;1        2018-03-10 10:15 (192.168.188.7)</span><br></pre></td></tr></table></figure>
<p>下面测试调用PlayBook的测试结果。<br>下面是博主使用的playbook文件，只是简单的touch一个123.txt文件，其他网友自行测试。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- hosts: te</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars:</span><br><span class="line">    - touch_flile: 123.txt</span><br><span class="line">  tasks:</span><br><span class="line">    - name: touch file</span><br><span class="line">      shell: &quot;touch &#x2F;tmp&#x2F;&#123;&#123; touch_flile &#125;&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>以下结果是经过博主json格式转换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&#39;results&#39;: [&#123;</span><br><span class="line">		&#39;task&#39;: &#123;</span><br><span class="line">			&#39;name&#39;: &#39;Gathering Facts&#39;</span><br><span class="line">		&#125;,</span><br><span class="line">		&#39;hosts&#39;: &#123;</span><br><span class="line">			&#39;192.168.188.6&#39;: &#123;</span><br><span class="line">				&#39;invocation&#39;: &#123;</span><br><span class="line">					&#39;module_args&#39;: &#123;</span><br><span class="line">						&#39;filter&#39;: &#39;*&#39;,</span><br><span class="line">						&#39;gather_subset&#39;: [&#39;all&#39;],</span><br><span class="line">						&#39;fact_path&#39;: &#39;&#x2F;etc&#x2F;ansible&#x2F;facts.d&#39;,</span><br><span class="line">						&#39;gather_timeout&#39;: 10</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				&#39;_ansible_parsed&#39;: True,</span><br><span class="line">				&#39;_ansible_verbose_override&#39;: True,</span><br><span class="line">				&#39;_ansible_no_log&#39;: False,</span><br><span class="line">				&#39;changed&#39;: False</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		&#39;task&#39;: &#123;</span><br><span class="line">			&#39;name&#39;: &#39;touch file&#39;</span><br><span class="line">		&#125;,</span><br><span class="line">		&#39;hosts&#39;: &#123;</span><br><span class="line">			&#39;192.168.188.6&#39;: &#123;</span><br><span class="line">				&#39;changed&#39;: True,</span><br><span class="line">				&#39;end&#39;: &#39;2018-03-10 18:14:52.078526&#39;,</span><br><span class="line">				&#39;stdout&#39;: &#39;&#39;,</span><br><span class="line">				&#39;cmd&#39;: &#39;touch &#x2F;tmp&#x2F;123.txt&#39;,</span><br><span class="line">				&#39;rc&#39;: 0,</span><br><span class="line">				&#39;start&#39;: &#39;2018-03-10 18:14:52.064544&#39;,</span><br><span class="line">				&#39;stderr&#39;: &#39;&#39;,</span><br><span class="line">				&#39;delta&#39;: &#39;0:00:00.013982&#39;,</span><br><span class="line">				&#39;invocation&#39;: &#123;</span><br><span class="line">					&#39;module_args&#39;: &#123;</span><br><span class="line">						&#39;warn&#39;: True,</span><br><span class="line">						&#39;executable&#39;: None,</span><br><span class="line">						&#39;_uses_shell&#39;: True,</span><br><span class="line">						&#39;_raw_params&#39;: &#39;touch &#x2F;tmp&#x2F;123.txt&#39;,</span><br><span class="line">						&#39;removes&#39;: None,</span><br><span class="line">						&#39;creates&#39;: None,</span><br><span class="line">						&#39;chdir&#39;: None,</span><br><span class="line">						&#39;stdin&#39;: None</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				&#39;warnings&#39;: [&#39;Consider using file module with state&#x3D;touch rather than running touch&#39;],</span><br><span class="line">				&#39;_ansible_parsed&#39;: True,</span><br><span class="line">				&#39;stdout_lines&#39;: [],</span><br><span class="line">				&#39;stderr_lines&#39;: [],</span><br><span class="line">				&#39;_ansible_no_log&#39;: False</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;],</span><br><span class="line">	&#39;status&#39;: &#123;</span><br><span class="line">		&#39;192.168.188.6&#39;: &#123;</span><br><span class="line">			&#39;ok&#39;: 2,</span><br><span class="line">			&#39;failures&#39;: 0,</span><br><span class="line">			&#39;unreachable&#39;: 0,</span><br><span class="line">			&#39;changed&#39;: 1,</span><br><span class="line">			&#39;skipped&#39;: 0</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面测试Inventory</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##########Hosts##########</span><br><span class="line">testserver1</span><br><span class="line">testserver2</span><br><span class="line">##########Groups##########</span><br><span class="line">all</span><br><span class="line">ungrouped</span><br><span class="line">group1</span><br><span class="line">group2</span><br><span class="line">group3</span><br><span class="line">group4</span><br><span class="line">##########all group hosts##########</span><br><span class="line">[testserver1, testserver2]</span><br></pre></td></tr></table></figure>

<p><a href="http://www.panzxl.com/archives/42" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST framework API认证(包含JWT认证) + 权限</title>
    <url>/2020/04/20/Django-REST-framework-API%E8%AE%A4%E8%AF%81-%E5%8C%85%E5%90%ABJWT%E8%AE%A4%E8%AF%81-%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h2 id="Django-REST-framework-API认证-包含JWT认证-权限"><a href="#Django-REST-framework-API认证-包含JWT认证-权限" class="headerlink" title="Django REST framework API认证(包含JWT认证) + 权限"></a>Django REST framework API认证(包含JWT认证) + 权限</h2><h3 id="一-背景"><a href="#一-背景" class="headerlink" title="一. 背景"></a>一. 背景</h3><p>在我们学习Django Rest Framework（简称DRF）时，其非常友好地给我们提供了一个可浏览API的界面。很多测试工作都可以在可浏览API界面完成测试。要使用可浏览API界面很简单，只需要在urls.py文件中添加如下部分即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import include</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-auth&#x2F;&#39;, include(&#39;rest_framework.urls&#39;,</span><br><span class="line">                               namespace&#x3D;&#39;rest_framework&#39;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>其中，r’^api-auth/‘部分实际上可以用任何你想使用URL替代。唯一的限制是所包含的URL必须使用’rest_framework’命名空间。在Django 1.9+中，REST framework将自动设置，所以你也无须关心。</p>
<p>配置完成后，如果再次打开浏览器API界面并刷新页面，你将在页面右上角看到一个“Log in”链接。这就是DRF提供的登录和登出入口，可以用来完成认证。</p>
<p>然后进入到’rest_framework.urls’源码，是可以看到提供了’login’和’logout’两个接口，分别用来登入和登录的。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if django.VERSION &lt; (1, 11):</span><br><span class="line">    login &#x3D; views.login</span><br><span class="line">    login_kwargs &#x3D; &#123;&#39;template_name&#39;: &#39;rest_framework&#x2F;login.html&#39;&#125;</span><br><span class="line">    logout &#x3D; views.logout</span><br><span class="line">else:</span><br><span class="line">    login &#x3D; views.LoginView.as_view(template_name&#x3D;&#39;rest_framework&#x2F;login.html&#39;)</span><br><span class="line">    login_kwargs &#x3D; &#123;&#125;</span><br><span class="line">    logout &#x3D; views.LogoutView.as_view()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">app_name &#x3D; &#39;rest_framework&#39;</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^login&#x2F;$&#39;, login, login_kwargs, name&#x3D;&#39;login&#39;),</span><br><span class="line">    url(r&#39;^logout&#x2F;$&#39;, logout, name&#x3D;&#39;logout&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>其中login接口调用LoginView视图，logout接口调用LogoutView视图。这两个视图都是django.contrib.auth应用提供的。在LogoutView视图中，有这么一个装饰器@method_decorator(csrf_protect)，是用来做CSRF code验证的，就是做表单安全验证的，防止跨站攻击。而这个CSRF code是在返回HTML页面的时候Django会自动注册这么一个CSRF code方法，而在template中会自动调用这个方法生成code值。在前端页面元素form部分，可以查看到name=”csrfmiddlewaretoken”标识，且在Django返回的 HTTP 响应的 cookie 里，Django 会为你添加一个csrftoken 字段，其值为一个自动生成的token。这就是用来做表单安全验证的，具体关于CSRF原理见Django章节。</p>
<p>这里要说明一个问题就是这个LoginView我们是无法直接拿来用的，因为它需要做CSRF验证，而在前后端分离系统中不需要做CSRF验证，这里不存在站内站外的问题，本身就是跨站访问的。那么在我们前后端分离项目中，如何做API接口的验证呢？其实framework也已经提供了多种验证方式。</p>
<h3 id="二-身份验证"><a href="#二-身份验证" class="headerlink" title="二. 身份验证"></a>二. 身份验证</h3><p>REST framework提供了许多开箱即用的身份验证方案，同时也允许你实施自定义方案。这里需要明确一下用户认证（Authentication）和用户授权（Authorization）是两个不同的概念，认证解决的是“有没有”的问题，而授权解决的是“能不能”的问题。</p>
<p>BasicAuthentication<br>该认证方案使用 HTTP Basic Authentication，并根据用户的用户名和密码进行签名。Basic Authentication 通常只适用于测试。</p>
<p>SessionAuthentication<br>此认证方案使用 Django 的默认 session 后端进行认证。Session 身份验证适用于与您的网站在同一会话环境中运行的 AJAX 客户端。</p>
<p>TokenAuthentication<br>此认证方案使用简单的基于令牌的 HTTP 认证方案。令牌身份验证适用于 client-server 架构，例如本机桌面和移动客户端。</p>
<p>RemoteUserAuthentication<br>这种身份验证方案允许您将身份验证委托给您的 Web 服务器，该服务器设置 REMOTE_USER 环境变量。</p>
<p>默认的认证方案可以使用DEFAULT_AUTHENTICATION_CLASSES全局设置，在settings.py文件配置。在默认情况下，DRF开启了 BasicAuthentication 与 SessionAuthentication 的认证。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (</span><br><span class="line">        &#39;rest_framework.authentication.BasicAuthentication&#39;,</span><br><span class="line">        &#39;rest_framework.authentication.SessionAuthentication&#39;,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于DRF，几乎所有的配置都定义在MREST_FRAMEWORK变量中。另外，关于认证方式DRF默认会检测配置在DEFAULT_AUTHENTICATION_CLASSES变量中的所有认证方式，只要有一个认证方式通过即可登录成功。这里的DEFAULT_AUTHENTICATION_CLASSES与Django中的MIDDLEWARE类似，在将request通过url映射到views之前，Django和DRF都会调用定义在MREST_FRAMEWORK变量中的类的一些方法。<br>另外，你还可以使用基于APIView类的视图，在每个视图或每个视图集的基础上设置身份验证方案。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework.authentication import SessionAuthentication, BasicAuthentication</span><br><span class="line">from rest_framework.permissions import IsAuthenticated</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line"> </span><br><span class="line">class ExampleView(APIView):</span><br><span class="line">    authentication_classes &#x3D; (SessionAuthentication, BasicAuthentication)</span><br><span class="line">    permission_classes &#x3D; (IsAuthenticated,)</span><br><span class="line"> </span><br><span class="line">    def get(self, request, format&#x3D;None):</span><br><span class="line">        content &#x3D; &#123;</span><br><span class="line">            &#39;user&#39;: unicode(request.user),  # &#96;django.contrib.auth.User&#96; instance.</span><br><span class="line">            &#39;auth&#39;: unicode(request.auth),  # None</span><br><span class="line">        &#125;</span><br><span class="line">        return Response(content)</span><br></pre></td></tr></table></figure>
<p>需要明白的一点是，DRF的认证是在定义有权限类（permission_classes）的视图下才有作用，且权限类（permission_classes）必须要求认证用户才能访问此视图。如果没有定义权限类（permission_classes），那么也就意味着允许匿名用户的访问，自然牵涉不到认证相关的限制了。所以，一般在项目中的使用方式是在全局配置DEFAULT_AUTHENTICATION_CLASSES认证，然后会定义多个base views，根据不同的访问需求来继承不同的base views即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework.permissions import (</span><br><span class="line">    IsAuthenticated,</span><br><span class="line">    IsAdminUser,</span><br><span class="line">    IsAuthenticatedOrReadOnly</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">class BaseView(APIView):</span><br><span class="line">    &#39;&#39;&#39;普通用户&#39;&#39;&#39;</span><br><span class="line">    permission_classes &#x3D; (</span><br><span class="line">        IsOwnerOrReadOnly,</span><br><span class="line">        IsAuthenticated</span><br><span class="line">    )</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class SuperUserpermissions(APIView):</span><br><span class="line">    &#39;&#39;&#39;超级用户&#39;&#39;&#39;</span><br><span class="line">    permission_classes &#x3D; (IsAdminUser,)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class NotLogin(APIView):</span><br><span class="line">    &#39;&#39;&#39;匿名用户&#39;&#39;&#39;</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>另外，在前后端分离项目中一般不会使用 BasicAuthentication 与 SessionAuthentication 的认证方式。所以，我们只需要关心 TokenAuthentication 认证方式即可。</p>
<h3 id="三-TokenAuthentication"><a href="#三-TokenAuthentication" class="headerlink" title="三.TokenAuthentication"></a>三.TokenAuthentication</h3><p>要使用<code>TokenAuthentication</code>方案，你需要将认证类配置为包含<code>TokenAuthentication</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (</span><br><span class="line">        &#39;rest_framework.authentication.BasicAuthentication&#39;,</span><br><span class="line">        &#39;rest_framework.authentication.SessionAuthentication&#39;,</span><br><span class="line">        &#39;rest_framework.authentication.TokenAuthentication&#39;,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并在INSTALLED_APPS设置中另外包含 rest_framework.authtoken：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; (</span><br><span class="line">    ...</span><br><span class="line">    &#39;rest_framework.authtoken&#39;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意： rest_framework.authtoken应用一定要放到INSTALLED_APPS，并且确保在更改设置后运行<code>python manage.py migrate</code>。 rest_framework.authtoken应用需要创建一张表用来存储用户与Token的对应关系。<br>数据库迁移完成后，可以看到多了一个authtoken_token表，表结构如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create table authtoken_token\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: authtoken_token</span><br><span class="line">Create Table: CREATE TABLE &#96;authtoken_token&#96; (</span><br><span class="line">  &#96;key&#96; varchar(40) NOT NULL,</span><br><span class="line">  &#96;created&#96; datetime(6) NOT NULL,</span><br><span class="line">  &#96;user_id&#96; int(11) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;key&#96;),</span><br><span class="line">  UNIQUE KEY &#96;user_id&#96; (&#96;user_id&#96;),</span><br><span class="line">  CONSTRAINT &#96;authtoken_token_user_id_35299eff_fk_auth_user_id&#96; FOREIGN KEY (&#96;user_id&#96;) REFERENCES &#96;auth_user&#96; (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<p>其中“user_id”字段关联到了用户表。</p>
<ul>
<li>配置URLconf<br>使用<code>TokenAuthentication</code>时，你可能希望为客户提供一种机制，以获取给定用户名和密码的令牌。 REST framework 提供了一个内置的视图来支持这种行为。要使用它，请将<code>obtain_auth_token</code>视图添加到您的 URLconf 中：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework.authtoken import views</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-token-auth&#x2F;&#39;, views.obtain_auth_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
其中，<code>r&#39;^api-token-auth/&#39;</code>部分实际上可以用任何你想使用URL替代。</li>
<li>创建Token<br>你还需要为用户创建令牌，用户令牌与用户是一一对应的。如果你已经创建了一些用户，则可以为所有现有用户生成令牌，例如<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib.auth.models import User</span><br><span class="line">from rest_framework.authtoken.models import Token</span><br><span class="line"> </span><br><span class="line">for user in User.objects.all():</span><br><span class="line">    Token.objects.get_or_create(user&#x3D;user)</span><br></pre></td></tr></table></figure>
你也可以为某个已经存在的用户创建Token：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for user in User.objects.filter(username&#x3D;&#39;admin&#39;):</span><br><span class="line">    Token.objects.get_or_create(user&#x3D;user)</span><br></pre></td></tr></table></figure>
创建成功后，会在Token表中生成对应的Token信息。</li>
</ul>
<p>如果你希望每个用户都拥有一个自动生成的令牌，则只需捕捉用户的<code>post_save</code>信号即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf import settings</span><br><span class="line">from django.db.models.signals import post_save</span><br><span class="line">from django.dispatch import receiver</span><br><span class="line">from rest_framework.authtoken.models import Token</span><br><span class="line"></span><br><span class="line">@receiver(post_save, sender&#x3D;settings.AUTH_USER_MODEL)</span><br><span class="line">def create_auth_token(sender, instance&#x3D;None, created&#x3D;False, **kwargs):</span><br><span class="line">    if created:</span><br><span class="line">        Token.objects.create(user&#x3D;instance)</span><br></pre></td></tr></table></figure>
<p>请注意，你需要确保将此代码片段放置在已安装的models.py模块或 Django 启动时将导入的其他某个位置。</p>
<ul>
<li>获取Token<br>上面虽然介绍了多种创建Token的方式，其实我们最简单的就是只需要配置一下urls.py，然后就可以通过暴露的API来获取Token了。当使用表单数据或 JSON 将有效的username和password字段发布到视图时，obtain_auth_token视图将返回 JSON 响应：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -d &quot;username&#x3D;admin&amp;password&#x3D;admin123456&quot; http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;api-token-auth&#x2F;</span><br><span class="line">&#123;&quot;token&quot;:&quot;684b41712e8e38549504776613bd5612ba997616&quot;&#125;</span><br></pre></td></tr></table></figure>
请注意，缺省的<code>obtain_auth_token</code>视图显式使用 JSON 请求和响应，而不是使用你设置的默认的渲染器和解析器类。</li>
</ul>
<p>当我们正常获取到Token后，<code>obtain_auth_token</code>视图会自动帮我们在Token表中创建对应的Token。源码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ObtainAuthToken(APIView):</span><br><span class="line">    throttle_classes &#x3D; ()</span><br><span class="line">    permission_classes &#x3D; ()</span><br><span class="line">    parser_classes &#x3D; (parsers.FormParser, parsers.MultiPartParser, parsers.JSONParser,)</span><br><span class="line">    renderer_classes &#x3D; (renderers.JSONRenderer,)</span><br><span class="line">    serializer_class &#x3D; AuthTokenSerializer</span><br><span class="line">    if coreapi is not None and coreschema is not None:</span><br><span class="line">        schema &#x3D; ManualSchema(</span><br><span class="line">            fields&#x3D;[</span><br><span class="line">                coreapi.Field(</span><br><span class="line">                    name&#x3D;&quot;username&quot;,</span><br><span class="line">                    required&#x3D;True,</span><br><span class="line">                    location&#x3D;&#39;form&#39;,</span><br><span class="line">                    schema&#x3D;coreschema.String(</span><br><span class="line">                        title&#x3D;&quot;Username&quot;,</span><br><span class="line">                        description&#x3D;&quot;Valid username for authentication&quot;,</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">                coreapi.Field(</span><br><span class="line">                    name&#x3D;&quot;password&quot;,</span><br><span class="line">                    required&#x3D;True,</span><br><span class="line">                    location&#x3D;&#39;form&#39;,</span><br><span class="line">                    schema&#x3D;coreschema.String(</span><br><span class="line">                        title&#x3D;&quot;Password&quot;,</span><br><span class="line">                        description&#x3D;&quot;Valid password for authentication&quot;,</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">            ],</span><br><span class="line">            encoding&#x3D;&quot;application&#x2F;json&quot;,</span><br><span class="line">        )</span><br><span class="line"> </span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        serializer &#x3D; self.serializer_class(data&#x3D;request.data,</span><br><span class="line">                                           context&#x3D;&#123;&#39;request&#39;: request&#125;)</span><br><span class="line">        serializer.is_valid(raise_exception&#x3D;True)</span><br><span class="line">        user &#x3D; serializer.validated_data[&#39;user&#39;]</span><br><span class="line">        token, created &#x3D; Token.objects.get_or_create(user&#x3D;user)</span><br><span class="line">        return Response(&#123;&#39;token&#39;: token.key&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">obtain_auth_token &#x3D; ObtainAuthToken.as_view()</span><br></pre></td></tr></table></figure>
<p>默认情况下，没有权限或限制应用于<code>obtain_auth_token</code>视图。 如果您希望应用<code>throttling</code>，则需要重写视图类，并使用<code>throttle_classes</code>属性包含它们。</p>
<p>如果你需要自定义<code>obtain_auth_token</code>视图，你可以通过继承<code>ObtainAuthToken</code>视图类来实现，并在你的urls.py中使用它。例如，你可能会返回超出token值的其他用户信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework.authtoken.views import ObtainAuthToken</span><br><span class="line">from rest_framework.authtoken.models import Token</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"> </span><br><span class="line">class CustomAuthToken(ObtainAuthToken):</span><br><span class="line"> </span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        serializer &#x3D; self.serializer_class(data&#x3D;request.data,</span><br><span class="line">                                           context&#x3D;&#123;&#39;request&#39;: request&#125;)</span><br><span class="line">        serializer.is_valid(raise_exception&#x3D;True)</span><br><span class="line">        user &#x3D; serializer.validated_data[&#39;user&#39;]</span><br><span class="line">        token, created &#x3D; Token.objects.get_or_create(user&#x3D;user)</span><br><span class="line">        return Response(&#123;</span><br><span class="line">            &#39;token&#39;: token.key,</span><br><span class="line">            &#39;user_id&#39;: user.pk,</span><br><span class="line">            &#39;email&#39;: user.email</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<p>还有urls.py:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-token-auth&#x2F;&#39;, CustomAuthToken.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>认证Token<br>当我们获取到Token后，就可以拿着这个Token来认证其他API了。对于客户端进行身份验证，令牌密钥应包含在 <code>Authorization</code> HTTP header 中。关键字应以字符串文字 “Token” 为前缀，用空格分隔两个字符串。例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b</span><br></pre></td></tr></table></figure>
注意： 如果你想在 header 中使用不同的关键字（例如Bearer），只需子类化<code>TokenAuthentication</code>并设置keyword类变量。<br>如果成功通过身份验证，<code>TokenAuthentication</code>将提供以下凭据。</li>
</ul>
<p>request.user是一个User实例，包含了用户名及相关信息。<br>request.auth是一个rest_framework.authtoken.models.Token实例。<br>未经身份验证的响应被拒绝将导致HTTP 401 Unauthorized的响应和相应的 WWW-Authenticate header。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WWW-Authenticate: Token</span><br></pre></td></tr></table></figure>
<p>测试令牌认证的API，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -X GET -H &#39;Authorization: Token 684b41712e8e38549504776613bd5612ba997616&#39; http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;virtual&#x2F;</span><br></pre></td></tr></table></figure>
<p>注意： 如果您在生产中使用<code>TokenAuthentication</code>，则必须确保您的 API 只能通过https访问。</p>
<h3 id="四-认证源码"><a href="#四-认证源码" class="headerlink" title="四. 认证源码"></a>四. 认证源码</h3><p>使用 TokenAuthentication 认证方式，当认证成功后，在 request 中将提供了 request.user 和 request.auth 实例。其中 request.user 实例中有用户信息，比如用户名及用户ID，而 request.auth 实例中有Token信息。那么DRF是如何把 Token 转换为用户信息呢？通过下面的源码部分就可以看到它们是如何转换的。</p>
<p>基于 DRF 的请求处理，与常规的 url 配置不同，通常一个 Django 的 url 请求对应一个视图函数，在使用 DRF 时，我们要基于视图对象，然后调用视图对象的 as_view 函数，as_view 函数中会调用 rest_framework/views.py 中的 dispatch 函数，这个函数会根据 request 请求方法，去调用我们在 view 对象中定义的对应的方法，就像这样:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework.authtoken import views</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-token-auth&#x2F;&#39;, views.obtain_auth_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>这里虽然直接调用 views.obtain_auth_token 方法，但进入到 views.obtain_auth_token 方法后还是 DRF 模式，源码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obtain_auth_token &#x3D; ObtainAuthToken.as_view()</span><br></pre></td></tr></table></figure>
<p>ObtainAuthToken 方法是继承 DRF 中的 APIView 的 View 类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ObtainAuthToken(APIView):</span><br><span class="line">    throttle_classes &#x3D; ()</span><br><span class="line">    permission_classes &#x3D; ()</span><br><span class="line">    parser_classes &#x3D; (parsers.FormParser, parsers.MultiPartParser, parsers.JSONParser,)</span><br><span class="line">    renderer_classes &#x3D; (renderers.JSONRenderer,)</span><br><span class="line">    serializer_class &#x3D; AuthTokenSerializer</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure>
<p>如果你是用 POST 方法请求 ObtainAuthToken，那么 as_view() 函数会调用 dispatch 函数，dispatch 根据 request.METHOD，这里是 POST，去调用 ObtainAuthToken 类的 POST 方法，这就跟通常的 url-&gt;view 的流程一样了。</p>
<p>这里需要注意的一点就是，DRF 中的 APIVIEW 是继承 Django View 的，重写了部分 as_view 方法，而调用 dispatch 函数是在 Django View 的 as_view 方法中做的事情，源码部分如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class APIView(View):</span><br><span class="line">    ....</span><br><span class="line">    @classmethod</span><br><span class="line">    def as_view(cls, **initkwargs):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Store the original class on the view function.</span><br><span class="line"> </span><br><span class="line">        This allows us to discover information about the view when we do URL</span><br><span class="line">        reverse lookups.  Used for breadcrumb generation.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if isinstance(getattr(cls, &#39;queryset&#39;, None), models.query.QuerySet):</span><br><span class="line">            def force_evaluation():</span><br><span class="line">                raise RuntimeError(</span><br><span class="line">                    &#39;Do not evaluate the &#96;.queryset&#96; attribute directly, &#39;</span><br><span class="line">                    &#39;as the result will be cached and reused between requests. &#39;</span><br><span class="line">                    &#39;Use &#96;.all()&#96; or call &#96;.get_queryset()&#96; instead.&#39;</span><br><span class="line">                )</span><br><span class="line">            cls.queryset._fetch_all &#x3D; force_evaluation</span><br><span class="line"> </span><br><span class="line">        view &#x3D; super(APIView, cls).as_view(**initkwargs)</span><br><span class="line">        view.cls &#x3D; cls</span><br><span class="line">        view.initkwargs &#x3D; initkwargs</span><br></pre></td></tr></table></figure>
<p>但是用户认证是在执行请求 View 之前做的，所以其实就是在 dispatch 函数之中做的，具体见源码 rest-framework/views.py 中 APIView 类中的 dispatch 函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class APIView(View):</span><br><span class="line">    &#x2F;&#x2F; 从settings文件中获取认证类、限流类、权限类</span><br><span class="line">    authentication_classes &#x3D; api_settings.DEFAULT_AUTHENTICATION_CLASSES</span><br><span class="line">    throttle_classes &#x3D; api_settings.DEFAULT_THROTTLE_CLASSES</span><br><span class="line">    permission_classes &#x3D; api_settings.DEFAULT_PERMISSION_CLASSES</span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">    def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        &#96;.dispatch()&#96; is pretty much the same as Django&#39;s regular dispatch,</span><br><span class="line">        but with extra hooks for startup, finalize, and exception handling.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.args &#x3D; args</span><br><span class="line">        self.kwargs &#x3D; kwargs</span><br><span class="line">       </span><br><span class="line">        &#x2F;&#x2F; 封装request，对原始request对象增加一些功能，比如认证类，都是在initialize_request方法中完成</span><br><span class="line">        request &#x3D; self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request &#x3D; request</span><br><span class="line">        self.headers &#x3D; self.default_response_headers  # deprecate?</span><br><span class="line"> </span><br><span class="line">        try:</span><br><span class="line">            &#x2F;&#x2F; 调用self.initial进行用户认证</span><br><span class="line">            self.initial(request, *args, **kwargs)</span><br><span class="line"> </span><br><span class="line">            # Get the appropriate handler method</span><br><span class="line">            if request.method.lower() in self.http_method_names:</span><br><span class="line">                handler &#x3D; getattr(self, request.method.lower(),</span><br><span class="line">                                  self.http_method_not_allowed)</span><br><span class="line">            else:</span><br><span class="line">                handler &#x3D; self.http_method_not_allowed</span><br><span class="line"> </span><br><span class="line">            response &#x3D; handler(request, *args, **kwargs)</span><br><span class="line"> </span><br><span class="line">        except Exception as exc:</span><br><span class="line">            response &#x3D; self.handle_exception(exc)</span><br><span class="line"> </span><br><span class="line">        self.response &#x3D; self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">        return self.response</span><br></pre></td></tr></table></figure>
<p>这里的 self.initialize_request 也可以关注一下，因为这里的 request 对象，后面也会有调用的地方。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class APIView(View):</span><br><span class="line">    ....</span><br><span class="line">    def initialize_request(self, request, *args, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Returns the initial request object.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        parser_context &#x3D; self.get_parser_context(request)</span><br><span class="line"> </span><br><span class="line">        return Request(</span><br><span class="line">            request,</span><br><span class="line">            parsers&#x3D;self.get_parsers(),</span><br><span class="line">            authenticators&#x3D;self.get_authenticators(),   &#x2F;&#x2F; 这里把认证类封装进行了request里面</span><br><span class="line">            negotiator&#x3D;self.get_content_negotiator(),</span><br><span class="line">            parser_context&#x3D;parser_context</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>
<p>其中 self.get_authenticators() 方法就是用来取 self.authentication_classes 变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class APIView(View):</span><br><span class="line">    ....</span><br><span class="line">    def get_authenticators(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Instantiates and returns the list of authenticators that this view can use.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return [auth() for auth in self.authentication_classes]</span><br></pre></td></tr></table></figure>
<p>关于 authentication_classes 变量，上面已经给出了，就在 APIView 里面 authentication_classes 字段。</p>
<p>然后就到了认证，重点在于 self.initial(request, *args, **kwargs) 函数，对于这个函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class APIView(View):</span><br><span class="line">    ....</span><br><span class="line">    def initial(self, request, *args, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Runs anything that needs to occur prior to calling the method handler.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.format_kwarg &#x3D; self.get_format_suffix(**kwargs)</span><br><span class="line"> </span><br><span class="line">        # Perform content negotiation and store the accepted info on the request</span><br><span class="line">        neg &#x3D; self.perform_content_negotiation(request)</span><br><span class="line">        request.accepted_renderer, request.accepted_media_type &#x3D; neg</span><br><span class="line"> </span><br><span class="line">        # Determine the API version, if versioning is in use.</span><br><span class="line">        version, scheme &#x3D; self.determine_version(request, *args, **kwargs)</span><br><span class="line">        request.version, request.versioning_scheme &#x3D; version, scheme</span><br><span class="line"> </span><br><span class="line">        # Ensure that the incoming request is permitted</span><br><span class="line">        self.perform_authentication(request)   &#x2F;&#x2F; 用户认证</span><br><span class="line">        self.check_permissions(request)        &#x2F;&#x2F; 权限检查</span><br><span class="line">        self.check_throttles(request)          &#x2F;&#x2F; 限流检查</span><br></pre></td></tr></table></figure>
<p>这里关注 self.perform_authentication(request) 验证某个用户，其实可以看到权限检查及限流也是在这里做的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class APIView(View):</span><br><span class="line">    ....</span><br><span class="line">    def perform_authentication(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Perform authentication on the incoming request.</span><br><span class="line"> </span><br><span class="line">        Note that if you override this and simply &#39;pass&#39;, then authentication</span><br><span class="line">        will instead be performed lazily, the first time either</span><br><span class="line">        &#96;request.user&#96; or &#96;request.auth&#96; is accessed.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        request.user</span><br></pre></td></tr></table></figure>
<p>这里 request.user 其实是一个 @property 的函数，加 @property 表示调用 user 方法的时候不需要加括号“user()”，可以直接调用 request.user 。而这里的 request 对象就是上面 initialize_request 方法返回的，其中还返回了 DRF 定义的 request 对象，在 request 对象中有被 @property 装饰的 user 方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Request(object):</span><br><span class="line">    ....</span><br><span class="line">    @property</span><br><span class="line">    def user(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Returns the user associated with the current request, as authenticated</span><br><span class="line">        by the authentication classes provided to the request.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not hasattr(self, &#39;_user&#39;):</span><br><span class="line">            with wrap_attributeerrors():</span><br><span class="line">                self._authenticate()</span><br><span class="line">        return self._user</span><br></pre></td></tr></table></figure>
<p>重点来了，到了真正认证的方法了，关注 <code>self._authenticate()</code>函数即可。此方法会循环尝试每个 DRF 认证方式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Request(object):</span><br><span class="line">    ....</span><br><span class="line">    def _authenticate(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        尝试使用每个身份验证实例验证请求</span><br><span class="line">        self.authenticators &#x3D; [BasicAuthentication, SessionAuthentication, TokenAuthentication]</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        for authenticator in self.authenticators:</span><br><span class="line">            try:</span><br><span class="line">                user_auth_tuple &#x3D; authenticator.authenticate(self)</span><br><span class="line">            except exceptions.APIException:</span><br><span class="line">                &#x2F;&#x2F; 如果authenticate方法抛出异常，则执行self._not_authenticated方法，相当于匿名用户，没有通过认证</span><br><span class="line">                self._not_authenticated()</span><br><span class="line">                raise</span><br><span class="line"> </span><br><span class="line">            if user_auth_tuple is not None:</span><br><span class="line">                self._authenticator &#x3D; authenticator</span><br><span class="line">                self.user, self.auth &#x3D; user_auth_tuple</span><br><span class="line">                return</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 如果没有设置认证类的话，也相当于匿名用户，没有通过认证</span><br><span class="line">        self._not_authenticated()</span><br></pre></td></tr></table></figure>
<p>那么 self.authenticators 从哪儿来的呢？就是上面展示的，在 APIVIEW 类中的 authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES 得到的。我们上面在介绍 DRF 身份验证时也说了，可以把认证类定义在全局 settings 文件中，你还可以使用基于 APIView 类的视图，在每个视图或每个视图集的基础上设置身份验证方案。如下方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ExampleView(APIView):</span><br><span class="line">    authentication_classes &#x3D; (SessionAuthentication, BasicAuthentication)</span><br><span class="line">    permission_classes &#x3D; (IsAuthenticated,)</span><br></pre></td></tr></table></figure>
<p>当基于 APIView 类的视图定义验证或权限类时，相当于覆盖了原生 APIVIEW 中的相关变量，自然就使用覆盖后的变量了。authentication_classes 里面放的就是可以用来验证一个用户的类，他是一个元组，验证用户时，按照这个元组顺序，直到验证通过或者遍历整个元组还没有通过。同理 self.check_permissions(request) 是验证该用户是否具有API的使用权限。关于对view控制的其他类都在rest-framework/views.py的APIView类中定义了。</p>
<p>由于我们这里只是拿 TokenAuthentication 认证说明，所以忽略 BasicAuthentication 和 SessionAuthentication 这两种认证，其原理与TokenAuthentication 一样。这样，就进入到了 TokenAuthentication 认证，其源码部分如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取header部分 Authorization 标识的信息</span><br><span class="line">def get_authorization_header(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Return request&#39;s &#39;Authorization:&#39; header, as a bytestring.</span><br><span class="line"> </span><br><span class="line">    Hide some test client ickyness where the header can be unicode.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    auth &#x3D; request.META.get(&#39;HTTP_AUTHORIZATION&#39;, b&#39;&#39;)</span><br><span class="line">    if isinstance(auth, text_type):</span><br><span class="line">        # Work around django test client oddness</span><br><span class="line">        auth &#x3D; auth.encode(HTTP_HEADER_ENCODING)</span><br><span class="line">    return auth</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 解析并认证 Token</span><br><span class="line">class TokenAuthentication(BaseAuthentication):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Simple token based authentication.</span><br><span class="line"> </span><br><span class="line">    Clients should authenticate by passing the token key in the &quot;Authorization&quot;</span><br><span class="line">    HTTP header, prepended with the string &quot;Token &quot;.  For example:</span><br><span class="line"> </span><br><span class="line">        Authorization: Token 401f7ac837da42b97f613d789819ff93537bee6a</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">    keyword &#x3D; &#39;Token&#39;</span><br><span class="line">    model &#x3D; None</span><br><span class="line"> </span><br><span class="line">    def get_model(self):</span><br><span class="line">        if self.model is not None:</span><br><span class="line">            return self.model</span><br><span class="line">        from rest_framework.authtoken.models import Token</span><br><span class="line">        return Token</span><br><span class="line"> </span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    A custom token model may be used, but must have the following properties.</span><br><span class="line"> </span><br><span class="line">    * key -- The string identifying the token</span><br><span class="line">    * user -- The user to which the token belongs</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &#x2F;&#x2F; 通过上面的get_authorization_header方法得到Token信息</span><br><span class="line">        &#x2F;&#x2F; auth &#x3D; [b&#39;Token&#39;, b&#39;684b41712e8e38549504776613bd5612ba997616&#39;]</span><br><span class="line">        auth &#x3D; get_authorization_header(request).split()</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 通过获取Token关键字，并与keyword变量比对，来判断是否是Token方式认证</span><br><span class="line">        if not auth or auth[0].lower() !&#x3D; self.keyword.lower().encode():</span><br><span class="line">            return None</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; auth长度等于2时才是合法值，继续往下进行</span><br><span class="line">        if len(auth) &#x3D;&#x3D; 1:</span><br><span class="line">            msg &#x3D; _(&#39;Invalid token header. No credentials provided.&#39;)</span><br><span class="line">            raise exceptions.AuthenticationFailed(msg)</span><br><span class="line">        elif len(auth) &gt; 2:</span><br><span class="line">            msg &#x3D; _(&#39;Invalid token header. Token string should not contain spaces.&#39;)</span><br><span class="line">            raise exceptions.AuthenticationFailed(msg)</span><br><span class="line">     </span><br><span class="line">        &#x2F;&#x2F; 进行token解码，从bytes编码格式转为字符串</span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; auth[1].decode()</span><br><span class="line">        except UnicodeError:</span><br><span class="line">            msg &#x3D; _(&#39;Invalid token header. Token string should not contain invalid characters.&#39;)</span><br><span class="line">            raise exceptions.AuthenticationFailed(msg)</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 把转换过的token传给认证凭证方法进行验证</span><br><span class="line">        return self.authenticate_credentials(token)</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 验证凭证方法进行接收token并进行验证</span><br><span class="line">    def authenticate_credentials(self, key):</span><br><span class="line">        &#x2F;&#x2F; 获取Token模型实例</span><br><span class="line">        model &#x3D; self.get_model()</span><br><span class="line">        try:</span><br><span class="line">            &#x2F;&#x2F; 使用select_related方法获取相应外键对应的对象（就是两表Join），然后进行Token过滤查询</span><br><span class="line">            token &#x3D; model.objects.select_related(&#39;user&#39;).get(key&#x3D;key)</span><br><span class="line">        except model.DoesNotExist:</span><br><span class="line">            raise exceptions.AuthenticationFailed(_(&#39;Invalid token.&#39;))</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 判断用户是否是登录成功</span><br><span class="line">        if not token.user.is_active:</span><br><span class="line">            raise exceptions.AuthenticationFailed(_(&#39;User inactive or deleted.&#39;))</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 返回user实例，及token实例</span><br><span class="line">        return (token.user, token)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>PS：DRF自带的TokenAuthentication认证方式也非常简单，同时弊端也很大，真正项目中用的较少。由于需要存储在数据库表中，它在分布式系统中用起来较为麻烦，并且每次都需要查询数据库，增加数据库压力；同时它不支持Token的过期设置，这是一个很大的问题。在实际前后端分离项目中使用JWT（Json Web Token）标准的认证方式较多，每个语言都有各自实现JWT的方式，Python也不例外。</p>
</blockquote>
<h3 id="五-JWT认证"><a href="#五-JWT认证" class="headerlink" title="五. JWT认证"></a>五. JWT认证</h3><p>了解完DRF自带的TokenAuthentication认证方式的弊端之后，再来看JWT（Json Web Token）认证方式。它们两个的原理是一样的，就是认证用户Token，然后取出对应的用户。但JWT解决了两个较大的问题。</p>
<p>第一，是不需要把Token存储到数据库表中了，而是根据一定的算法来算出用户Token，然后每次用户来验证时再以同样的方式生成对应的Token进行校验。当然，实际JWT生成Token的方式还是较为复杂的，具体可以看JWT协议相关文章。</p>
<p>第二，JWT对于生成的Token可以设置过期时间，从而在一定程度提高了Token的安全性。</p>
<p>JWT的原理还是稍稍有点麻烦的，里面涉及了一些对称加密和非对称加密的算法。但是JWT使用起来确是非常简单，Python中有PyJWT库，而在DRF中也有对应的开源项目<a href="https://github.com/GetBlimp/django-rest-framework-jwt" target="_blank" rel="noopener">django-rest-framework-jwt</a></p>
<ul>
<li>安装<br>直接使用pip安装即可，目前支持Python、Django、DRF主流版本：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install djangorestframework-jwt</span><br></pre></td></tr></table></figure></li>
<li>使用<br>在settings.py文件中，将JSONWebTokenAuthentication 添加到REST framework框架的DEFAULT_AUTHENTICATION_CLASSES<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_PERMISSION_CLASSES&#39;: (</span><br><span class="line">        &#39;rest_framework.permissions.IsAuthenticated&#39;,</span><br><span class="line">    ),</span><br><span class="line">    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (</span><br><span class="line">        &#39;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#39;,</span><br><span class="line">        &#39;rest_framework.authentication.SessionAuthentication&#39;,</span><br><span class="line">        &#39;rest_framework.authentication.BasicAuthentication&#39;,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
同样，你还可以使用基于APIView类的视图，在每个视图或每个视图集的基础上设置身份验证方案。与上面演示的 Token 认证一样，这里就不贴代码了，尽可能使用基于APIView类的视图认证方式。<br>但使用基于APIView类的视图认证方式时，不要忘记导入类。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework_jwt.authentication import JSONWebTokenAuthentication</span><br></pre></td></tr></table></figure>
在你的urls.py文件中添加以下URL路由，以便通过POST包含用户名和密码的令牌获取。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework_jwt.views import obtain_jwt_token</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-token-auth&#x2F;&#39;, obtain_jwt_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
如果你使用用户名admin和密码admin123456创建了用户，则可以通过在终端中执行以下操作来测试JWT是否正常工作。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -X POST -d &quot;username&#x3D;admin&amp;password&#x3D;admin123456&quot; http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;api-token-auth&#x2F;</span><br></pre></td></tr></table></figure>
或者，你可以使用Django REST framework支持的所有内容类型来获取身份验证令牌。例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -X POST -H &quot;Content-Type: application&#x2F;json&quot; -d &#39;&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin123456&quot;&#125;&#39; http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;api-token-auth&#x2F;</span><br></pre></td></tr></table></figure>
现在访问需要认证的API时，就必须要包含<code>Authorization: JWT &lt;your_token&gt;</code>头信息了：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -H &quot;Authorization: JWT &lt;your_token&gt;&quot; http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;virtual&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>刷新Token<br>如果JWT_ALLOW_REFRESH为True，可以“刷新”未过期的令牌以获得具有更新到期时间的全新令牌。像如下这样添加一个URL模式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework_jwt.views import refresh_jwt_token</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-token-refresh&#x2F;&#39;, refresh_jwt_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
使用方式就是将现有令牌传递到刷新API，如下所示: <code>{&quot;token&quot;: EXISTING_TOKEN}</code>。请注意，只有非过期的令牌才有效。另外，响应JSON看起来与正常获取令牌端点<code>{&quot;token&quot;: NEW_TOKEN}</code>相同。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -X POST -H &quot;Content-Type: application&#x2F;json&quot; -d &#39;&#123;&quot;token&quot;:&quot;&lt;EXISTING_TOKEN&gt;&quot;&#125;&#39; http:&#x2F;&#x2F;localhost:8000&#x2F;api-token-refresh&#x2F;</span><br></pre></td></tr></table></figure>
可以重复使用令牌刷新（token1 -&gt; token2 -&gt; token3），但此令牌链存储原始令牌（使用用户名/密码凭据获取）的时间。作为orig_iat，你只能将刷新令牌保留至JWT_REFRESH_EXPIRATION_DELTA。<br>刷新token以获得新的token的作用在于，持续保持活跃用户登录状态。比如通过用户密码获得的token有效时间为1小时，那么也就意味着1小时后此token失效，用户必须得重新登录，这对于活跃用户来说其实是多余的。如果这个用户在这1小时内都在浏览网站，我们不应该让用户重新登录，就是在token没有失效之前调用刷新接口为用户获得新的token。</li>
<li>认证Token<br>在一些微服务架构中，身份验证由单个服务处理。此服务负责其他服务委派确认用户已登录此身份验证服务的责任。这通常意味着其他服务将从用户接收JWT传递给身份验证服务，并在将受保护资源返回给用户之前等待JWT有效的确认。添加以下URL模式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework_jwt.views import verify_jwt_token</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^api-token-verify&#x2F;&#39;, verify_jwt_token)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
将Token传递给验证API，如果令牌有效，则返回令牌，返回状态码为200。否则，它将返回400 Bad Request以及识别令牌无效的错误。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -X POST -H &quot;Content-Type: application&#x2F;json&quot; -d &#39;&#123;&quot;token&quot;:&quot;&lt;EXISTING_TOKEN&gt;&quot;&#125;&#39; http:&#x2F;&#x2F;localhost:8000&#x2F;api-token-verify&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>手动创建Token<br>有时候你可能希望手动生成令牌，例如在创建帐户后立即将令牌返回给用户。或者，你需要返回的信息不止是Token，可能还有用户权限相关值。你可以这样做：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework_jwt.settings import api_settings</span><br><span class="line"> </span><br><span class="line">jwt_payload_handler &#x3D; api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">jwt_encode_handler &#x3D; api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"> </span><br><span class="line">payload &#x3D; jwt_payload_handler(user)</span><br><span class="line">token &#x3D; jwt_encode_handler(payload)</span><br></pre></td></tr></table></figure></li>
<li>其他设置<br>你可以覆盖一些其他设置，比如变更Token过期时间，以下是所有可用设置的默认值。在settings.py文件中设置。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JWT_AUTH &#x3D; &#123;</span><br><span class="line">    &#39;JWT_ENCODE_HANDLER&#39;:</span><br><span class="line">    &#39;rest_framework_jwt.utils.jwt_encode_handler&#39;,</span><br><span class="line"> </span><br><span class="line">    &#39;JWT_DECODE_HANDLER&#39;:</span><br><span class="line">    &#39;rest_framework_jwt.utils.jwt_decode_handler&#39;,</span><br><span class="line"> </span><br><span class="line">    &#39;JWT_PAYLOAD_HANDLER&#39;:</span><br><span class="line">    &#39;rest_framework_jwt.utils.jwt_payload_handler&#39;,</span><br><span class="line"> </span><br><span class="line">    &#39;JWT_PAYLOAD_GET_USER_ID_HANDLER&#39;:</span><br><span class="line">    &#39;rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler&#39;,</span><br><span class="line"> </span><br><span class="line">    &#39;JWT_RESPONSE_PAYLOAD_HANDLER&#39;:</span><br><span class="line">    &#39;rest_framework_jwt.utils.jwt_response_payload_handler&#39;,</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 这是用于签署JWT的密钥，确保这是安全的，不共享不公开的</span><br><span class="line">    &#39;JWT_SECRET_KEY&#39;: settings.SECRET_KEY,</span><br><span class="line">    &#39;JWT_GET_USER_SECRET_KEY&#39;: None,</span><br><span class="line">    &#39;JWT_PUBLIC_KEY&#39;: None,</span><br><span class="line">    &#39;JWT_PRIVATE_KEY&#39;: None,</span><br><span class="line">    &#39;JWT_ALGORITHM&#39;: &#39;HS256&#39;,</span><br><span class="line">    &#x2F;&#x2F; 如果秘钥是错误的，它会引发一个jwt.DecodeError</span><br><span class="line">    &#39;JWT_VERIFY&#39;: True,</span><br><span class="line">    &#39;JWT_VERIFY_EXPIRATION&#39;: True,</span><br><span class="line">    &#39;JWT_LEEWAY&#39;: 0,</span><br><span class="line">    &#x2F;&#x2F; Token过期时间设置</span><br><span class="line">    &#39;JWT_EXPIRATION_DELTA&#39;: datetime.timedelta(seconds&#x3D;300),</span><br><span class="line">    &#39;JWT_AUDIENCE&#39;: None,</span><br><span class="line">    &#39;JWT_ISSUER&#39;: None,</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 是否开启允许Token刷新服务，及限制Token刷新间隔时间，从原始Token获取开始计算</span><br><span class="line">    &#39;JWT_ALLOW_REFRESH&#39;: False,</span><br><span class="line">    &#39;JWT_REFRESH_EXPIRATION_DELTA&#39;: datetime.timedelta(days&#x3D;7),</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 定义与令牌一起发送的Authorization标头值前缀</span><br><span class="line">    &#39;JWT_AUTH_HEADER_PREFIX&#39;: &#39;JWT&#39;,</span><br><span class="line">    &#39;JWT_AUTH_COOKIE&#39;: None,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
一般除了过期时间外，其他配置参数很少改变。具体参数意义当用到时可以查询官网。</li>
</ul>
<p>JWT唯一的一个不算缺点的缺点就是Token太长了，180位。</p>
<p><a href="https://segmentfault.com/a/1190000013010835" target="_blank" rel="noopener">Token 认证的来龙去脉</a></p>
<p><a href="http://www.hi-roy.com/2017/01/11/%E5%9F%BA%E4%BA%8Ecookie%E7%9A%84django-rest-jwt%E8%AE%A4%E8%AF%81/" target="_blank" rel="noopener">基于cookie的django-rest-jwt认证</a></p>
<p><a href="https://q1mi.github.io/Django-REST-framework-documentation/api-guide/authentication_zh/" target="_blank" rel="noopener">TokenAuthentication</a></p>
<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="http://www.ywnds.com/?p=14967" target="_blank" rel="noopener">原文地址</a></p>
<h3 id="权限相关参考"><a href="#权限相关参考" class="headerlink" title="权限相关参考"></a>权限相关参考</h3><p><a href="https://segmentfault.com/a/1190000004401112" target="_blank" rel="noopener">Django REST framework的各种技巧【目录索引】 - 后端开发那点事儿 - SegmentFault 思否</a><br><a href="https://segmentfault.com/a/1190000004400312" target="_blank" rel="noopener">Django REST framework的各种技巧——3.权限 - 后端开发那点事儿 - SegmentFault 思否</a><br><a href="https://cloud.tencent.com/developer/article/1155184" target="_blank" rel="noopener">django权限管理(Permission)-内置权限实现</a><br><a href="https://juejin.im/post/5a991807518825558a060a77" target="_blank" rel="noopener">django viewset</a></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 数据类型</title>
    <url>/2020/04/20/Django-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="Django-数据类型"><a href="#Django-数据类型" class="headerlink" title="Django 数据类型"></a>Django 数据类型</h2><table>
<thead>
<tr>
<th>表字段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>models.Auto.Field</td>
<td>默认会生成一个名为ID的字段并为int类型</td>
</tr>
<tr>
<td>models.CharField</td>
<td>字符串类型</td>
</tr>
<tr>
<td>models.BooleanField</td>
<td>布尔类型</td>
</tr>
<tr>
<td>models.ComaSeparatedIntegerField</td>
<td>用逗号分隔的整数类型</td>
</tr>
<tr>
<td>models.DateField</td>
<td>日期(date)类型</td>
</tr>
<tr>
<td>models.DateTimeFile</td>
<td>日期(datetime)类型</td>
</tr>
<tr>
<td>models.Decimal</td>
<td>十进制小数类型</td>
</tr>
<tr>
<td>models.EmailField</td>
<td>字符串类型(正则表达式邮箱)</td>
</tr>
<tr>
<td>models.FloatField</td>
<td>浮点类型</td>
</tr>
<tr>
<td>models.IntegerField</td>
<td>整数类型</td>
</tr>
<tr>
<td>models.BigIntegerField</td>
<td>长整数类型</td>
</tr>
<tr>
<td>models.IPAddressField</td>
<td>字符串类型(正则表达式)</td>
</tr>
<tr>
<td>models.GenericIPAddressField</td>
<td>字符串类型，参数protocal可以是: both,IPv4和IPv6，验证IP地址</td>
</tr>
<tr>
<td>models.NullBooleanField</td>
<td>允许为空的布尔类型</td>
</tr>
<tr>
<td>models.PositiveIntegerField</td>
<td>正整数的整数类型</td>
</tr>
<tr>
<td>models.PositiveSmallIntegerField</td>
<td>小正整数类型</td>
</tr>
<tr>
<td>models.SlugField</td>
<td>包含字母/数字/下划线和连字符的字符串，常用语URL</td>
</tr>
<tr>
<td>models.SmallIntergerField</td>
<td>小整数类型，取值范围是(-32,768~+32,767)</td>
</tr>
<tr>
<td>models.TextField</td>
<td>长文本类型</td>
</tr>
<tr>
<td>models.Timefiled</td>
<td>时间类型，显示时分秒</td>
</tr>
<tr>
<td>models.URLField</td>
<td>字符串，地址为正则表达式</td>
</tr>
<tr>
<td>models.BinaryField</td>
<td>二进制数据类型</td>
</tr>
</tbody></table>
<h3 id="表字段参数设置"><a href="#表字段参数设置" class="headerlink" title="表字段参数设置"></a>表字段参数设置</h3><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Null</td>
<td>如为True,字段是否可以为空</td>
</tr>
<tr>
<td>Blank</td>
<td>如为True， 设置在Admin后台站点管理中添加数据时可以允许为空值</td>
</tr>
<tr>
<td>Default</td>
<td>设置为默认值</td>
</tr>
<tr>
<td>primary_key</td>
<td>如为True，将字段设置为主键</td>
</tr>
<tr>
<td>db_column</td>
<td>设置数据库中的字段名称</td>
</tr>
<tr>
<td>Unique</td>
<td>如为True,将自督办设置成唯一属性，默认为False</td>
</tr>
<tr>
<td>db_index</td>
<td>如为True，将字段添加数据库索引</td>
</tr>
<tr>
<td>verbose_name</td>
<td>在Admin站点管理设置字段的显示名称</td>
</tr>
<tr>
<td>related_name</td>
<td>关联对象反向饮用描述符，用于多表查询，可解决一个数据表有2个外键同时指向另一个数据表而出现重名的问题</td>
</tr>
</tbody></table>
<h3 id="django常用的内置函数"><a href="#django常用的内置函数" class="headerlink" title="django常用的内置函数"></a>django常用的内置函数</h3><table>
<thead>
<tr>
<th>内置函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>authenticate</td>
<td>验证用户是否存在，必选参数为<code>username</code>和<code>password</code>，只能用于模型User</td>
</tr>
<tr>
<td>create_user</td>
<td>创建新的用户信息，必选参数为<code>username</code>,只能用于模型User</td>
</tr>
<tr>
<td>set_password</td>
<td>修改用户密码，必选参数为<code>password</code>，只能用于模型User</td>
</tr>
<tr>
<td>login/logout</td>
<td>用户的的登陆和注销，只能用于模型User</td>
</tr>
<tr>
<td>make_password</td>
<td>密码加密处理，必选参数为<code>password</code>，可脱离模型User单独使用</td>
</tr>
<tr>
<td>check_password</td>
<td>校验加密前后的密码是否相同，可脱离模型User单独使用</td>
</tr>
<tr>
<td>email_user</td>
<td>发送邮件，只用用于模型User</td>
</tr>
<tr>
<td>send_mail</td>
<td>发送邮件</td>
</tr>
<tr>
<td>send_mass_mail</td>
<td>批量发送邮件</td>
</tr>
<tr>
<td>EmailMutilAlternatives</td>
<td>发送自定义内容格式的邮件</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 找回密码</title>
    <url>/2020/04/20/Django-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h2 id="Django-找回密码"><a href="#Django-找回密码" class="headerlink" title="Django 找回密码"></a>Django 找回密码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">from django.shortcuts import render</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line">from django.contrib.auth.hashers import make_password</span><br><span class="line"></span><br><span class="line">def findpassword(request):</span><br><span class="line">    button &#x3D; &quot;获取验证码&quot;</span><br><span class="line">    new_password &#x3D; False</span><br><span class="line">    </span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">        username &#x3D; request.POST.get(&quot;username&quot;,&#39;root&#39;)</span><br><span class="line">        VerificationCode &#x3D; request.POST.get(&quot;VerificationCode&quot;,&quot;&quot;)</span><br><span class="line">        password&#x3D; request.POST.get(&quot;password&quot;,&quot;&quot;)</span><br><span class="line">        user &#x3D; User.objects.filter(username&#x3D;username)</span><br><span class="line">        if not user:</span><br><span class="line">            tips &#x3D; f&quot;用户&#123;username&#125;不存在&quot;</span><br><span class="line">        else:</span><br><span class="line">            if not request.session.get(&quot;VerificationCode&quot;,&quot;&quot;):</span><br><span class="line">                button &#x3D; &quot;重置密码&quot;</span><br><span class="line">                tips &#x3D; &quot;验证码已发送&quot;</span><br><span class="line">                new_password &#x3D; True</span><br><span class="line">                VerificationCode &#x3D; str(random.randint(1000,9999))</span><br><span class="line">                request.session[&quot;VerificationCode&quot;] &#x3D; VerificationCode</span><br><span class="line">                user[0].email_user(&quot;找回密码&quot;,VerificationCode)</span><br><span class="line">            elif verificationCode &#x3D;&#x3D; request.session.get(&quot;verificationCode&quot;):</span><br><span class="line">                dj_ps &#x3D; make_password(password,None,&quot;pbkdf2_sha256&quot;)</span><br><span class="line">                user[0].password &#x3D; dj_ps</span><br><span class="line">                user[0].save()</span><br><span class="line">                del request.session[&quot;VerificationCode&quot;]</span><br><span class="line">                tips &#x3D; &quot;密码已重置&quot;</span><br><span class="line">            else</span><br><span class="line">               tips &#x3D; &quot;验证码错误，请重新获取&quot;</span><br><span class="line">               new_password &#x3D; False</span><br><span class="line">               def request.session[&quot;VerificationCode&quot;]</span><br><span class="line">      return render(request,&quot;user.html&quot;,locals())</span><br></pre></td></tr></table></figure>

<h3 id="用户model的实现"><a href="#用户model的实现" class="headerlink" title="用户model的实现"></a>用户model的实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># models.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth.models import AbstractUser</span><br><span class="line"></span><br><span class="line">class MyUser(AbstractUser):</span><br><span class="line">    qq &#x3D; models.ChardField(&quot;QQ 号码&quot;, max_length&#x3D;16)</span><br><span class="line">    weChat &#x3D; models.ChardField(&quot;微信&quot;, max_length&#x3D;100)</span><br><span class="line">    mobile &#x3D; models.ChardField(&quot;手机号码&quot;, max_length&#x3D;11)</span><br><span class="line">    </span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.username</span><br></pre></td></tr></table></figure>

<h2 id="扩展MyUser-Admin-信息"><a href="#扩展MyUser-Admin-信息" class="headerlink" title="扩展MyUser Admin 信息"></a>扩展MyUser Admin 信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from .models import MyUser</span><br><span class="line">from django.contrib.auth.admin import UserAdmin</span><br><span class="line">from django.utils.translation import gettext_lazy as _</span><br><span class="line"></span><br><span class="line">@admin.register(MyUser)</span><br><span class="line">class MyUserAdmin(UserAdmin):</span><br><span class="line">    list_display &#x3D; [&quot;uername&quot;,&quot;email&quot;,&quot;mobile&quot;,&quot;qq&quot;,&quot;weChat&quot;]</span><br><span class="line">    fieldsets &#x3D; list(&quot;UserAdmin.fielsets&quot;)</span><br><span class="line">    fieldsets[1] &#x3D; (_(&quot;Personal info&quot;),&#123;&quot;fields&quot;: (&quot;first_name&quot;,&quot;last_name&quot;,&quot;email&quot;,&quot;mobile&quot;,&quot;qq&quot;,&quot;weChat&quot;))&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Admin后台app设置"><a href="#Admin后台app设置" class="headerlink" title="Admin后台app设置"></a>Admin后台app设置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># __init__.py</span><br><span class="line"></span><br><span class="line">from django.apps import AppConfig</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">## 修改app在admin后台显示名称</span><br><span class="line">## default_app_config的值来自apps.py类名</span><br><span class="line"></span><br><span class="line">default_app_config &#x3D; &quot;user.IndexConfig&quot;</span><br><span class="line"></span><br><span class="line"># 获取当前app的命名</span><br><span class="line">def get_current_app_name(_file):</span><br><span class="line">    return os.path.split(os.path.dirname(_file_)[-1])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 重写类 IndexConfig</span><br><span class="line">class IndexConfig(AppConfig):</span><br><span class="line">    name &#x3D; get_current_app_name(__file__)</span><br><span class="line">    verbose_name &#x3D; &quot;用户管理&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django中间件</title>
    <url>/2020/04/20/Django%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="Django中间件"><a href="#Django中间件" class="headerlink" title="Django中间件"></a>Django中间件</h2><p>Django1.9版本以后，我们从浏览器发出一个请求 Request，得到一个响应后的内容 HttpResponse ，这个请求传递到 Django的过程如下：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB04655a9c01957e832ef5e4d978b4e24c?method=download&shareKey=8d63de97ad045d5d59f417afb25f7f5a" alt="请求到Django中的处理流程图">  </p>
<p>也就是说，每一个请求都是先通过中间件中的 process_request 函数，这个函数返回 None 或者 HttpResponse 对象，如果返回前者，继续处理其它中间件，如果返回一个 HttpResponse，就处理中止，返回到网页上。</p>
<p>中间件（类）的几种方法<br>中间件可以定义的几种方法，分别是：</p>
<p>process_request(self,request) ： 在处理url请求之前执行</p>
<p>process_view(self, request, callback, callback_args,<br>callback_kwargs) ： 调用视图之前执行</p>
<p>process_template_response(self,request,response) ： 只有当views函数中返回的对象中具有render方法，才会直接调用</p>
<p>process_response(self, request, response) ： 在响应返回浏览器之前调用</p>
<p>自定义中间件<br>在Django中我们可以自己写一个继承了MiddlewareMixin的类，来实现自定义中间件。通过from django.urls.deprecation import MiddlewareMixin导入MiddlewareMixin。</p>
<p>为中间件创建一个目录Middle，并在Middle目录下创建middle1.py:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.utils.deprecation import MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class middle11(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&quot;中间件1请求&quot;)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&quot;中间件1返回&quot;)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class middle2(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&quot;中间件2请求&quot;)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&quot;中间件2返回&quot;)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class middle3(MiddlewareMixin):</span><br><span class="line">    def process_request(self, request):</span><br><span class="line">        print(&quot;中间件3请求&quot;)</span><br><span class="line"></span><br><span class="line">    def process_response(self, request, response):</span><br><span class="line">        print(&quot;中间件3返回&quot;)</span><br><span class="line">        return response</span><br></pre></td></tr></table></figure>
<p>在项目目录下的settings.py文件的MIDDLEWARE中添加如下三行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;Middle.middle1.middle11&#39;,</span><br><span class="line">&#39;Middle.middle1.middle2&#39;,</span><br><span class="line">&#39;Middle.middle1.middle3&#39;,</span><br></pre></td></tr></table></figure>
<p>当我们在浏览器中访问一个页面的时候在控制台就会看到如下的结果：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB7f08c20201bab55e63606763d5718b3f?method=download&shareKey=a861abec06c2fef7e33e026196e5f453" alt="middleware自定义演示结果">  </p>
<p>从这里也向我们证实了当一个请求进来的时候，会通过所有的中间件处理，并且当请求获得相应时也会通过中间件去处理。</p>
<h3 id="中间件应用场景"><a href="#中间件应用场景" class="headerlink" title="中间件应用场景"></a>中间件应用场景</h3><p>由于中间件工作在 视图函数执行前、执行后适合所有的请求/一部分请求做批量处理。</p>
<p>1、做IP限制<br>放在 中间件类的列表中，阻止某些IP访问了；</p>
<p>2.URL访问过滤<br>如果用户访问的是login视图（放过）</p>
<p>如果访问其他视图（需要检测是不是有session已经有了放行，没有返回login），这样就省得在 多个视图函数上写装饰器了！</p>
<p>3、缓存(CDN)<br>客户端请求来了，中间件去缓存看看有没有数据，有直接返回给用户，没有再去逻辑层 执行视图函数</p>
<blockquote>
<p>注意：项目目录下MIDDLEWARE中’django.middleware.csrf.CsrfViewMiddleware’,为用户实现防止跨站请求伪造的功能，在之前我们都是将它注释掉的，因为我们如果不注释掉在表单提交的时候就会报forbidden的错误，但是如果我们又要用到防止跨域请求，又不要报错我们只需要在表单<from>标签中加入<code>{ csrf_token }</code>即可解决这个问题。</from></p>
</blockquote>
<h3 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h3><p>1.利用用中间件，实现让所有页面都必须在进行用户登录后才能访问qin<br>2.中间件统计，某个网页的访问次数。</p>
<p><a href="https://www.jianshu.com/p/2889eaff70fa" target="_blank" rel="noopener">原文链接</a>  </p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基于Admin原理实现的CURD组件</title>
    <url>/2020/04/20/Django%E5%9F%BA%E4%BA%8EAdmin%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0%E7%9A%84CURD%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Django基于Admin原理实现的CURD组件"><a href="#Django基于Admin原理实现的CURD组件" class="headerlink" title="Django基于Admin原理实现的CURD组件"></a>Django基于Admin原理实现的CURD组件</h1><hr>
<br>

<h2 id="Django管理后台admin"><a href="#Django管理后台admin" class="headerlink" title="Django管理后台admin"></a>Django管理后台admin</h2><p>常用共29个功能: <a href="http://www.cnblogs.com/wupeiqi/articles/7444717.html" target="_blank" rel="noopener">参考</a></p>
<ol>
<li>在项目的app中的admin.py文件中注册models类，示例如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat app_name&#x2F;admin.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.contrib.admin import ModelAdmin</span><br><span class="line">from . import models</span><br><span class="line">from django.shortcuts import HttpResponse</span><br><span class="line">from django.forms import ModelForm</span><br><span class="line">from django.forms import fields</span><br><span class="line">from django.forms import widgets</span><br><span class="line"></span><br><span class="line"># 用户表,自定义admin后台错误信息提示</span><br><span class="line">class UserModelForm(ModelForm):</span><br><span class="line">    others &#x3D; fields.CharField()</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; models.UserInfo</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br><span class="line">        error_messages &#x3D; &#123;</span><br><span class="line">            &#39;name&#39;:&#123;&#39;required&#39;:&#39;用户名不能问空&#39;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">class UserInfoModelAdmin(ModelAdmin):</span><br><span class="line">    # 使用自定义的form表单验证功能</span><br><span class="line">    form &#x3D; UserModelForm</span><br><span class="line"></span><br><span class="line">    # 1.定义列表页面，显示列数据</span><br><span class="line">    list_display &#x3D; [&#39;name&#39;,&#39;pwd&#39;,&#39;email&#39;]</span><br><span class="line"></span><br><span class="line">    def email(self, obj):</span><br><span class="line">        return obj.name + obj.pwd</span><br><span class="line"></span><br><span class="line">    email.empty_value_display &#x3D; &quot;默认为空时显示的值&quot;</span><br><span class="line"></span><br><span class="line">    # 2.定义列表页面，列可以进行点击进入编辑页面</span><br><span class="line">    list_display_links &#x3D; [&#39;pwd&#39;]</span><br><span class="line">    </span><br><span class="line">    # 3.定义列表页面，快速搜索</span><br><span class="line">    list_filter &#x3D; [&#39;ut&#39;]</span><br><span class="line">    </span><br><span class="line">    # 4.定义列表页面，分页功能</span><br><span class="line">    list_per_page &#x3D; 10</span><br><span class="line">    </span><br><span class="line">    # 5. 列是否可编辑</span><br><span class="line">    list_editable &#x3D; [&#39;name&#39;]</span><br><span class="line"></span><br><span class="line">    # 6. 查询列</span><br><span class="line">    search_fields &#x3D; [&#39;name&#39;,&#39;pwd&#39;]</span><br><span class="line"></span><br><span class="line">    # 7. 是否在页面顶端显示保存按钮</span><br><span class="line">    # save_on_top &#x3D; True</span><br><span class="line"></span><br><span class="line">    # 8. 下拉选项的批量操作，类似于批量删除功能</span><br><span class="line">    def func(self, request, queryset):</span><br><span class="line">        print(self, request, queryset)</span><br><span class="line">        id_list &#x3D; request.POST.getlist(&#39;_selected_action&#39;)</span><br><span class="line">        # models.UserInfo.objects.filter(id__in&#x3D;id_list).delete()</span><br><span class="line"></span><br><span class="line">    func.short_description &#x3D; &quot;批量初始化&quot;</span><br><span class="line"></span><br><span class="line">    actions &#x3D; [func, ]</span><br><span class="line"></span><br><span class="line">    # 9. 列表页面使用模板文件</span><br><span class="line">    change_list_template &#x3D; [&#39;xxx.html&#39;]</span><br><span class="line">    </span><br><span class="line">    # raw_id_fields &#x3D; [&#39;ut&#39;,]</span><br><span class="line">    # fields &#x3D; [&#39;name&#39;]</span><br><span class="line">    # exclude &#x3D; [&#39;name&#39;,]</span><br><span class="line">    </span><br><span class="line">    # 10. 分类展示</span><br><span class="line">    # fieldsets &#x3D; (</span><br><span class="line">    #     (&#39;基本数据&#39;, &#123;</span><br><span class="line">    #         &#39;fields&#39;: (&#39;name&#39;,)</span><br><span class="line">    #     &#125;),</span><br><span class="line">    #     (&#39;其他&#39;, &#123;</span><br><span class="line">    #         &#39;classes&#39;: (&#39;collapse&#39;, &#39;wide&#39;, &#39;extrapretty&#39;),  # &#39;collapse&#39;,&#39;wide&#39;, &#39;extrapretty&#39;</span><br><span class="line">    #         &#39;fields&#39;: (&#39;pwd&#39;, &#39;ut&#39;),</span><br><span class="line">    #     &#125;),</span><br><span class="line">    # )</span><br><span class="line"></span><br><span class="line">    # 11.快速过滤</span><br><span class="line">    # filter_vertical &#x3D; (&quot;roles&quot;,)</span><br><span class="line">    filter_horizontal &#x3D; (&quot;roles&quot;,)</span><br><span class="line">    </span><br><span class="line">    # 12. 排序</span><br><span class="line">    ordering &#x3D; [&#39;-id&#39;]</span><br><span class="line"></span><br><span class="line"># 注册使用自定义的UserInfoModelAdmin类的页面展示规则</span><br><span class="line">admin.site.register(models.UserInfo,UserInfoModelAdmin)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2. 用户类型表(基于ModelAdmin类)</span><br><span class="line">class UserTypeModelAdmin(ModelAdmin):</span><br><span class="line">    list_display &#x3D; [&#39;title&#39;]</span><br><span class="line">    </span><br><span class="line">admin.site.register(models.UserType,UserTypeModelAdmin)</span><br></pre></td></tr></table></figure></li>
</ol>
<p><em>注: 默认使用ModelAdmin类进行后台操作，可以定义自己的calss，通过继承ModelAdmin类实现定制页面展示功能</em><br>2. Django自带Admin原理<br>2.1 每注册一个model类，Django内部会生成4个对应的增删改查URL，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URL:</span><br><span class="line">    &#x2F;admin&#x2F;app_name&#x2F;model_name&#x2F;</span><br><span class="line">    &#x2F;admin&#x2F;app_name&#x2F;model_name&#x2F;add&#x2F;</span><br><span class="line">    &#x2F;admin&#x2F;app_name&#x2F;model_name&#x2F;1&#x2F;change&#x2F;</span><br><span class="line">    &#x2F;admin&#x2F;app_name&#x2F;model_name&#x2F;1&#x2F;delete&#x2F;</span><br><span class="line">    例：&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;</span><br></pre></td></tr></table></figure>
<p>2.2 内部实现机制</p>
<ul>
<li>在app下面的admin.py文件中注册models类;</li>
<li>Django程序在启动时会循环所有app下面的admin文件中注册的models类，为每个models类生成对应的增删改查4个URL;</li>
<li>每个注册的model类会封装一个用于处理当前类所对应的URL的view对象,用于处理CURD操作，默认为ModelAdmin类对象;<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. self.model&#x3D;models.UserInfo</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;                obj1.changelist_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;add&#x2F;            obj1.add_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;(\d+)&#x2F;delete&#x2F;   obj1.delete_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;userinfo&#x2F;(\d+)&#x2F;change&#x2F;   obj1.change_view</span><br><span class="line"></span><br><span class="line">2. self.model&#x3D;models.UserType</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;usertype&#x2F;                obj2.changelist_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;usertype&#x2F;add&#x2F;            obj2.add_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;usertype&#x2F;(\d+)&#x2F;delete&#x2F;   obj2.delete_view</span><br><span class="line">&#x2F;admin&#x2F;app01&#x2F;usertype&#x2F;(\d+)&#x2F;change&#x2F;   obj2.change_view</span><br></pre></td></tr></table></figure>
<br>

</li>
</ul>
<h2 id="自定义实现CURD类似Admin功能"><a href="#自定义实现CURD类似Admin功能" class="headerlink" title="自定义实现CURD类似Admin功能"></a>自定义实现CURD类似Admin功能</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li>了解django启动时执行的启动文件顺序</li>
<li>制作启动文件</li>
<li>settings.py配置文件中注册启动文件使全局生效</li>
<li>实现组件CURD业务逻辑</li>
<li>主要参考Django Admin的实现，利用单利模式和include原理实现路由分发</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><em>假设组件app名称为: arya</em></p>
<ol>
<li>Django程序启动顺序<br>在程序启动时，django会根据配置项INSTALLED_APPS中注册的启动文件，遍历每个App下面对应的注册启动文件,在arya组件下面的app.py文件中实现ready方法激活启动文件,如下:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># arya&#x2F;app.py</span><br><span class="line"></span><br><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line">class AryaConfig(AppConfig):</span><br><span class="line">    name &#x3D; &#39;arya&#39;</span><br><span class="line"></span><br><span class="line">    # Django启动时自动扫描所有app下面的arya模块</span><br><span class="line">    def ready(self):</span><br><span class="line">        from django.utils.module_loading import autodiscover_modules</span><br><span class="line">        autodiscover_modules(&#39;arya&#39;)</span><br></pre></td></tr></table></figure></li>
<li>在项目的setting.py文件中配置，激活组件，使全局生效，此时Django启动时，在完全启动前，便会扫描所有app下面的arya.py文件并加载生效<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    &#39;arya.apps.AryaConfig&#39;,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li>核心代码逻辑实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat arya&#x2F;seevice&#x2F;v1.py</span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.shortcuts import render, HttpResponse, redirect</span><br><span class="line"></span><br><span class="line">class AryaConfig(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    每个models类的URL对应处理的View实现</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, model_class, site):</span><br><span class="line">        self.model_class &#x3D; model_class</span><br><span class="line">        # View对象</span><br><span class="line">        self.site &#x3D; site</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def urls(self):</span><br><span class="line">        partterns &#x3D; [</span><br><span class="line">            url(r&#39;^$&#39;, self.changelist_view),</span><br><span class="line">            url(r&#39;^add&#x2F;&#39;, self.add_view),</span><br><span class="line">            url(r&#39;^(\d+)&#x2F;change&#x2F;$&#39;, self.change_view),</span><br><span class="line">            url(r&#39;^(\d+)&#x2F;delete&#x2F;$&#39;, self.delete_view)</span><br><span class="line">        ]</span><br><span class="line">        return partterns</span><br><span class="line"></span><br><span class="line">    def changelist_view(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        列表试图</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # return HttpResponse(&quot;列表页面&quot;)</span><br><span class="line">        return render(request, &#39;arya&#x2F;changelist.html&#39;)</span><br><span class="line"></span><br><span class="line">    def add_view(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        添加试图</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return HttpResponse(&quot;添加试图&quot;)</span><br><span class="line"></span><br><span class="line">    def change_view(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        修改试图</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return HttpResponse(&quot;修改试图&quot;)</span><br><span class="line"></span><br><span class="line">    def delete_view(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        删除试图</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return HttpResponse(&quot;删除试图&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AryaSite(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    实现类似于admin.site.register()功能</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    # 存放所有的models类及对应处理UTRL的的view对象</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self._registry &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    def register(self, class_name, config_class):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        注册方法,封装对象</span><br><span class="line">        self._registry &#x3D; &#123;</span><br><span class="line">            module.UserInfo: obj1,  # obj1 &#x3D; AryaConfig(models.UserInfo,site),</span><br><span class="line">            module.UserType: obj2,  # obj2 &#x3D; AryaConfig(models.UserType,site),</span><br><span class="line">        &#125;</span><br><span class="line">        :param class_name: models类</span><br><span class="line">        :param config_class: 对应的View类(AryaConfig)</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self._registry[class_name] &#x3D; config_class(class_name, self)</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def urls(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        处理子路由</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        partterns &#x3D; [</span><br><span class="line">            url(r&#39;^login&#x2F;$&#39;, self.login),</span><br><span class="line">            url(r&#39;^logout&#x2F;$&#39;, self.logout),</span><br><span class="line">        ]</span><br><span class="line">        # 循环self._registry属性里面的每一个元素，key为models类，value为URLS对应处理的类obj对象</span><br><span class="line">        for model_class, arya_config_obj in self._registry.items():</span><br><span class="line">            # 分别为app名称和models的类名称</span><br><span class="line">            print(&quot;*&quot; * 50)</span><br><span class="line">            print(model_class._meta.app_label, model_class._meta.model_name)</span><br><span class="line">            app_model_name_urls &#x3D; r&#39;^&#123;0&#125;&#x2F;&#123;1&#125;&#x2F;&#39;.format(model_class._meta.app_label, model_class._meta.model_name)</span><br><span class="line">            # arya_config_obj.urls self._registry字典中存放的values对象obj下面的urls方法</span><br><span class="line">            pt &#x3D; url(app_model_name_urls, (arya_config_obj.urls, None, None))</span><br><span class="line">            partterns.append(pt)</span><br><span class="line">        # 3元组</span><br><span class="line">        return partterns, None, None</span><br><span class="line"></span><br><span class="line">    def login(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        登陆</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return redirect(&#39;login&#39;)</span><br><span class="line"></span><br><span class="line">    def logout(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        退出</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return redirect(&#39;login&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 实例化，利用单例模式</span><br><span class="line">site &#x3D; AryaSite()</span><br></pre></td></tr></table></figure>
<br>

</li>
</ol>
<h3 id="引入arya组件并使用"><a href="#引入arya组件并使用" class="headerlink" title="引入arya组件并使用"></a>引入arya组件并使用</h3><ol>
<li><p>创建app，引入arya组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建多个app，并在每个app下面创建arya.py文件，用于实现CURD操作</span><br><span class="line">django startapp app01</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><p>在app01下面创建models模型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat app01&#x2F;models.py</span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class UserType(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户类型表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;用户类型&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;用户类型表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Role(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    角色表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    caption &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;角色名&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;角色表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.caption</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserInfo(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;用户名&quot;)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;64, verbose_name&#x3D;&quot;密码&quot;)</span><br><span class="line">    email &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;邮箱&quot;)</span><br><span class="line">    ut &#x3D; models.ForeignKey(to&#x3D;&quot;UserType&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;用户类型&quot;)</span><br><span class="line">    roles &#x3D; models.ManyToManyField(to&#x3D;&quot;Role&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;所属角色&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;用户表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.username</span><br></pre></td></tr></table></figure></li>
<li><p>生成表结构并制作部分展示数据，可以直接在表中添加，也可以通过admin后台进行添加</p>
</li>
<li><p>在app01中的arya.py文件中注册models类并自定义实现展示UI</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat app01&#x2F;arya.py</span><br><span class="line"></span><br><span class="line">from arya.service import v1</span><br><span class="line">from . import models</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># 自定义属性控制UI展示</span><br><span class="line">class UserInfoConfig(v1.AryaConfig):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    自定义用户信息UI</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    list_display &#x3D; [&#39;username&#39;, &#39;ut&#39;, &#39;roles&#39;, &#39;email&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserTypeConfig(v1.AryaConfig):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    自定义用户类型UI</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    list_display &#x3D; [&#39;title&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class RoleConfig(v1.AryaConfig):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    自定义角色UI</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    list_display &#x3D; [&#39;caption&#39;]</span><br><span class="line"></span><br><span class="line"># 注册models</span><br><span class="line">v1.site.register(models.UserInfo, UserInfoConfig)</span><br><span class="line">v1.site.register(models.UserType, UserTypeConfig)</span><br><span class="line">v1.site.register(models.Role, RoleConfig)</span><br></pre></td></tr></table></figure></li>
<li><p>在项目中应用arya组件，使URL生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#cat project_name&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from arya.service import v1</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line"># url的第二个参数返回类型为([],None,None)的元组,源码见include方法</span><br><span class="line"># 此处的login和logut也可以使用arya&#x2F;service&#x2F;v1.py文件中定义的路由，示例为自己实现</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    # 此处会生成对应的多个URL子路由</span><br><span class="line">    url(r&#39;^arya&#x2F;&#39;, v1.site.urls),</span><br><span class="line">    url(r&#39;^index&#x2F;$&#39;, views.index, name&#x3D;&quot;index&quot;),</span><br><span class="line">    url(r&#39;^login&#x2F;$&#39;, views.login, name&#x3D;&quot;login&quot;),</span><br><span class="line">    url(r&#39;^logout&#x2F;$&#39;, views.logout, name&#x3D;&quot;logout&quot;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li><p>路由试图处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat project_name&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.shortcuts import render, redirect</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line">def login(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    登陆</span><br><span class="line">    :param request:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">        return render(request, &#39;login.html&#39;)</span><br><span class="line">    else:</span><br><span class="line">        username &#x3D; request.POST.get(&#39;username&#39;)</span><br><span class="line">        password &#x3D; request.POST.get(&#39;password&#39;)</span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;username, password&#x3D;password).first()</span><br><span class="line">        if obj:</span><br><span class="line">            request.session[&#39;userinfo&#39;] &#x3D; &#123;&#39;username&#39;: obj.username, &#39;is_login&#39;: True&#125;</span><br><span class="line">            return redirect(&#39;index&#39;)</span><br><span class="line">        return render(request, &#39;login.html&#39;, &#123;&#39;msg&#39;: &#39;用户名或密码错误&#39;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def logout(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    退出</span><br><span class="line">    :param request:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">        return redirect(&#39;login&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    首页</span><br><span class="line">    :param request:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">        return render(request, &#39;index.html&#39;)</span><br></pre></td></tr></table></figure></li>
<li><p>项目URL<br>此时在项目的路由中已经存在对应增删改查的4个URL，如下所示:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># app_nmae 应用名</span><br><span class="line"># models_name models类名小写</span><br><span class="line">arya&#x2F;app_name&#x2F;models_name&#x2F;</span><br><span class="line">arya&#x2F;app_name&#x2F;models_name&#x2F;add&#x2F;</span><br><span class="line">arya&#x2F;app_name&#x2F;models_name&#x2F;(\d+)&#x2F;change&#x2F;</span><br><span class="line">arya&#x2F;app_name&#x2F;models_name&#x2F;(\d+)&#x2F;delete&#x2F;</span><br><span class="line"># 在该示例中为: </span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;arya&#x2F;app01&#x2F;userinfo&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;arya&#x2F;app01&#x2F;userinfo&#x2F;add&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;arya&#x2F;app01&#x2F;userinfo&#x2F;()</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li>
<li><p>扩展<br>在每个app下面的arya.py文件中继承arya组件中的service.v1.AryaConfig类，自己内部实现处理URL的view以及定制化操作</p>
<br>  

</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  至此，自定义实现的类似Django admin组件基本开发完成，能够满足models模型数据的CURD操作。在Django中作为app引入CustAdmin组件，然后在settings文件中注册后就<br>可以生效使用了,engoy it!</p>
<p><a href="https://github.com/shuke163/CustAdmin" target="_blank" rel="noopener">github</a></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django序列化</title>
    <url>/2020/04/20/Django%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="Django序列化"><a href="#Django序列化" class="headerlink" title="Django序列化"></a>Django序列化</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>序列化的model中含choice字段信息存在的问题，status会显示数字而非状态相关的文本，通过在<code>serializers.py</code>文件中添加另一个<code>status_display</code>字段类显示状态文本，便可以解决该问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest——framework import serializers</span><br><span class="line">from .models import Sprint,Task</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">class TaskSerializer(serializers.ModelSerializer):</span><br><span class="line">   status_display &#x3D; serializers.SerializerMethodField()</span><br><span class="line">   </span><br><span class="line">   class Meta:</span><br><span class="line">       model &#x3D; Task</span><br><span class="line">       fields &#x3D; (&quot;id&quot;,&quot;name&quot;,&quot;description&quot;,&quot;sprint&quot;,&quot;status&quot;,&quot;status_display&quot;,&quot;order&quot;,&quot;assignred&quot;,&quot;started&quot;,&quot;due&quot;,&quot;completed&quot;,)</span><br><span class="line">       </span><br><span class="line">   def get_status_display(self,obj):</span><br><span class="line">       return obj.get_status_display()</span><br></pre></td></tr></table></figure>
<ul>
<li>status_display 是一个只读字段，返回序列化器中<code>get_status_display</code>中方法的值,该方法的语法格式为<code>get</code> + 下划线 + 字段名称组成，如上所示，<code>get_status_display</code></li>
</ul>
<h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><blockquote>
<p>序列化遇到的第二个问题是: <code>assigned</code>是一个指向<code>User</code>模型中的外键,这里显示的是用户的主键，然而我们的URL结构期望通过用户名来引用用户，我们在<code>serializers</code>中使用<code>SlugRelatedField</code>来解决这个问题       </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class TaskSerializer(serializers.ModelSerializer):</span><br><span class="line">    assigned &#x3D; serializers.SlugRelatedField(</span><br><span class="line">        slug_field&#x3D;User.USERNAME_FIELD, required&#x3D;False, allow_null&#x3D;true,</span><br><span class="line">        queryset&#x3D;user.objects.all()</span><br><span class="line">    )</span><br><span class="line">    status_display &#x3D; serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Task</span><br><span class="line">        fields &#x3D; (</span><br><span class="line">            &quot;id&quot;, &quot;name&quot;, &quot;description&quot;, &quot;sprint&quot;, &quot;status&quot;, &quot;status_display&quot;, &quot;order&quot;, &quot;assigned&quot;, &quot;started&quot;, &quot;due&quot;,</span><br><span class="line">            &quot;completed&quot;)</span><br><span class="line"></span><br><span class="line">    def get_status_display(self, obj):</span><br><span class="line">        return obj.get_status_display()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 自定义分页实现</title>
    <url>/2020/04/20/Django-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="Django-自定义分页实现"><a href="#Django-自定义分页实现" class="headerlink" title="Django 自定义分页实现"></a>Django 自定义分页实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2017&#x2F;9&#x2F;9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Page(object):</span><br><span class="line">    def __init__(self, current_page, all_count, base_url, per_page&#x3D;10, pager_page_count&#x3D;11):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :param current_page: 当前页</span><br><span class="line">        :param all_count: 数据总条数</span><br><span class="line">        :param base_url: 分页的url</span><br><span class="line">        :param per_page: 每页显示的数据条数</span><br><span class="line">        :param pager_page_count: 每页显示的页码数量</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.current_page &#x3D; current_page</span><br><span class="line">        self.per_page &#x3D; per_page</span><br><span class="line">        self.all_count &#x3D; all_count</span><br><span class="line">        self.base_url &#x3D; base_url</span><br><span class="line">        self.pager_page_count &#x3D; pager_page_count</span><br><span class="line">        pager_count, b &#x3D; divmod(all_count, per_page)</span><br><span class="line">        if b !&#x3D; 0:</span><br><span class="line">            pager_count +&#x3D; 1</span><br><span class="line">        self.pager_count &#x3D; pager_count</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def start(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        数据库获取值的起始索引位置</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return (self.current_page - 1) * self.per_page</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def end(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        数据库获取值的结束索引位置</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.current_page * self.per_page</span><br><span class="line"></span><br><span class="line">    def page_html(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        渲染的HTML页码</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 页码</span><br><span class="line">        pager_page_count &#x3D; self.pager_page_count</span><br><span class="line">        half_pager_page_count &#x3D; int(pager_page_count &#x2F; 2)</span><br><span class="line"></span><br><span class="line">        if self.pager_count &lt; self.pager_page_count:</span><br><span class="line">            pager_start &#x3D; 1</span><br><span class="line">            pager_end &#x3D; self.pager_count</span><br><span class="line">        else:</span><br><span class="line">            # 数据较多，页码超过11，最少110条</span><br><span class="line">            if self.current_page &lt;&#x3D; half_pager_page_count:</span><br><span class="line">                pager_start &#x3D; 1</span><br><span class="line">                pager_end &#x3D; pager_page_count</span><br><span class="line">            else:</span><br><span class="line">                if (self.current_page + half_pager_page_count) &gt; self.pager_count:</span><br><span class="line">                    pager_start &#x3D; self.pager_count - pager_page_count + 1</span><br><span class="line">                    pager_end &#x3D; self.pager_count</span><br><span class="line">                else:</span><br><span class="line">                    pager_start &#x3D; self.current_page - half_pager_page_count</span><br><span class="line">                    pager_end &#x3D; self.current_page + half_pager_page_count</span><br><span class="line">        page_list &#x3D; []</span><br><span class="line">        if self.current_page &lt;&#x3D; 1:</span><br><span class="line">            # prev &#x3D; &#39;&lt;a href&#x3D;&quot;#&quot;&gt;上一页&lt;&#x2F;a&gt;&#39;</span><br><span class="line">            prev &#x3D; &#39;&lt;li class&#x3D;&quot;disabled&quot;&gt;&lt;a href&#x3D;&quot;#&quot; aria-label&#x3D;&quot;Previous&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;laquo;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">        else:</span><br><span class="line">            # prev &#x3D; &#39;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;上一页&lt;&#x2F;a&gt;&#39; % (self.base_url, self.current_page - 1,)</span><br><span class="line">            prev &#x3D; &#39;&lt;li&gt;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot; aria-label&#x3D;&quot;Previous&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;laquo;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39; % \</span><br><span class="line">                   (self.base_url, self.current_page - 1)</span><br><span class="line">        page_list.append(prev)</span><br><span class="line">        for i in range(pager_start, pager_end + 1):</span><br><span class="line">            if self.current_page &#x3D;&#x3D; i:</span><br><span class="line">                # tpl &#x3D; &#39;&lt;a class&#x3D;&quot;active&quot; href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;%s&lt;&#x2F;a&gt;&#39; % (self.base_url, i, i)</span><br><span class="line">                tpl &#x3D; &#39;&lt;li class&#x3D;&quot;active&quot;&gt;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;%s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39; % (self.base_url, i, i)</span><br><span class="line">            else:</span><br><span class="line">                # tpl &#x3D; &#39;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;%s&lt;&#x2F;a&gt;&#39; % (self.base_url, i, i)</span><br><span class="line">                tpl &#x3D; &#39;&lt;li&gt;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;%s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39; % (self.base_url, i, i)</span><br><span class="line">            page_list.append(tpl)</span><br><span class="line"></span><br><span class="line">        if self.current_page &gt;&#x3D; self.pager_count:</span><br><span class="line">            # nex &#x3D; &#39;&lt;a href&#x3D;&quot;#&quot;&gt;下一页&lt;&#x2F;a&gt;&#39;</span><br><span class="line">            nex &#x3D; &#39;&lt;li class&#x3D;&quot;disabled&quot;&gt;&lt;a href&#x3D;&quot;#&quot; aria-label&#x3D;&quot;Next&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;raquo;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">        else:</span><br><span class="line">            # nex &#x3D; &#39;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot;&gt;下一页&lt;&#x2F;a&gt;&#39; % (self.base_url, self.current_page + 1,)</span><br><span class="line">            nex &#x3D; &#39;&lt;li&gt;&lt;a href&#x3D;&quot;%s?page&#x3D;%s&quot; aria-label&#x3D;&quot;Next&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;raquo;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39; % \</span><br><span class="line">                  (self.base_url, self.current_page + 1)</span><br><span class="line">        page_list.append(nex)</span><br><span class="line">        page_str &#x3D; &quot;&quot;.join(page_list)</span><br><span class="line">        return page_str</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 聚合</title>
    <url>/2020/04/20/Django-%E8%81%9A%E5%90%88/</url>
    <content><![CDATA[<h1 id="Django-聚合"><a href="#Django-聚合" class="headerlink" title="Django 聚合"></a>Django 聚合</h1><hr>

<ol>
<li>在查询集上生成聚合(aggregate)<br>aggregate()是QuerySet 的一个终止子句，意思是说，它返回一个包含一些键值对的字典。键的名称是聚合值的标识符，值是计算出来的聚合值。键的名称是按照字段和聚合函数的名称自动生成出来的。如果你想要为聚合值指定一个名称，可以向聚合子句提供它。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Book.objects.aggregate(average_price&#x3D;Avg(&#39;price&#39;))</span><br><span class="line">&#123;&#39;average_price&#39;: 34.35&#125;</span><br></pre></td></tr></table></figure></li>
<li>为查询集的每一项生成聚合(annotate)<br>逐个对象的汇总结果可以由annotate()子句生成。当annotate()子句被指定之后，QuerySet中的每个对象都会被注上特定的值。<br>这些注解的语法都和aggregate()子句所使用的相同。annotate()的每个参数都描述了将要被计算的聚合。比如，给图书添加作者数量的注解：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Build an annotated queryset</span><br><span class="line">&gt;&gt;&gt; from django.db.models import Count</span><br><span class="line">&gt;&gt;&gt; q &#x3D; Book.objects.annotate(Count(&#39;authors&#39;))</span><br><span class="line"># Interrogate the first object in the queryset</span><br><span class="line">&gt;&gt;&gt; q[0]</span><br><span class="line">&lt;Book: The Definitive Guide to Django&gt;</span><br><span class="line">&gt;&gt;&gt; q[0].authors__count</span><br><span class="line">2</span><br><span class="line"># Interrogate the second object in the queryset</span><br><span class="line">&gt;&gt;&gt; q[1]</span><br><span class="line">&lt;Book: Practical Django Projects&gt;</span><br><span class="line">&gt;&gt;&gt; q[1].authors__count</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
和使用 aggregate()一样，注解的名称也根据聚合函数的名称和聚合字段的名称得到的。你可以在指定注解时，为默认名称提供一个别名：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; q &#x3D; Book.objects.annotate(num_authors&#x3D;Count(&#39;authors&#39;))</span><br><span class="line">&gt;&gt;&gt; q[0].num_authors</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; q[1].num_authors</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>与 aggregate() 不同的是， annotate() 不是一个终止子句。annotate()子句的返回结果是一个查询集 (QuerySet)；这个 QuerySet可以用任何QuerySet方法进行修改，包括 filter(), order_by(), 甚至是再次应用annotate()。</p>
<p><a href="http://python.usyiyi.cn/documents/django_182/topics/db/aggregation.html" target="_blank" rel="noopener">Django 聚合</a></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django基于RBAC的权限组件</title>
    <url>/2020/04/20/Django%E5%9F%BA%E4%BA%8ERBAC%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Django基于RBAC的权限组件"><a href="#Django基于RBAC的权限组件" class="headerlink" title="Django基于RBAC的权限组件"></a>Django基于RBAC的权限组件</h1><hr>

<h3 id="RBAC前奏"><a href="#RBAC前奏" class="headerlink" title="RBAC前奏"></a>RBAC前奏</h3><ol>
<li><p>RBAC概念<br>RBAC（Role-Based Access Control，基于角色的访问控制），就是用户通过角色与权限进行关联。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。在这种模型中，用户与角色之间，角色与权限之间，一般者是多对多的关系。</p>
</li>
<li><p>扩展</p>
<ul>
<li>角色是什么？可以理解为一定数量的权限的集合，权限的载体。例如：一个论坛系统，“超级管理员”、“版主”都是角色。版主可管理版内的帖子、可管理版内的用户等，这些是权限。要给某个用户授予这些权限，不需要直接将权限授予用户，可将“版主”这个角色赋予该用户。 </li>
<li>当用户的数量非常大时，要给系统每个用户逐一授权（授角色），是件非常烦琐的事情。这时，就需要给用户分组，每个用户组内有多个用户。除了可给用户授权外，还可以给用户组授权。这样一来，用户拥有的所有权限，就是用户个人拥有的权限与该用户所在用户组拥有的权限之和。</li>
<li>在应用系统中，权限表现成什么？对功能模块的操作，对上传文件的删改，菜单的访问，甚至页面上某个按钮、某个图片的可见性控制，都可属于权限的范畴。有些权限设计，会把功能操作作为一类，而把文件、菜单、页面元素等作为另一类，这样构成“用户-角色-权限-资源”的授权模型。而在做数据表建模时，可把功能操作和资源统一管理，也就是都直接与权限表进行关联，这样可能更具便捷性和易扩展性。</li>
<li>请留意权限表中有一列“权限类型”，我们根据它的取值来区分是哪一类权限，如“MENU”表示菜单的访问权限、“OPERATION”表示功能模块的操作权限、“FILE”表示文件的修改权限、“ELEMENT”表示页面元素的可见性控制等。</li>
<li>这样设计的好处有二。其一，不需要区分哪些是权限操作，哪些是资源，（实际上，有时候也不好区分，如菜单，把它理解为资源呢还是功能模块权限呢？）。其二，方便扩展，当系统要对新的东西进行权限控制时，我只需要建立一个新的关联表“权限XX关联表”，并确定这类权限的权限类型字符串。</li>
<li>这里要注意的是，权限表与权限菜单关联表、权限菜单关联表与菜单表都是一对一的关系。（文件、页面权限点、功能操作等同理）。也就是每添加一个菜单，就得同时往这三个表中各插入一条记录。这样，可以不需要权限菜单关联表，让权限表与菜单表直接关联，此时，须在权限表中新增一列用来保存菜单的ID，权限表通过“权限类型”和这个ID来区分是种类型下的哪条记录。</li>
<li>随着系统的日益庞大，为了方便管理，可引入角色组对角色进行分类管理，跟用户组不同，角色组不参与授权。例如：某电网系统的权限管理模块中，角色就是挂在区局下，而区局在这里可当作角色组，它不参于权限分配。另外，为方便上面各主表自身的管理与查找，可采用树型结构，如菜单树、功能树等，当然这些可不需要参于权限分配。</li>
</ul>
</li>
<li><p>基于rbac的实现<br><a href="https://github.com/shonenada/flask-rbac" target="_blank" rel="noopener">flask-rbac</a><br><a href="https://pypi.python.org/pypi/simple-rbac/0.1.1" target="_blank" rel="noopener">simple-rbac</a></p>
<br>

</li>
</ol>
<h3 id="知识点储备"><a href="#知识点储备" class="headerlink" title="知识点储备"></a>知识点储备</h3><ol>
<li>Django ORM<br>常用的orm方法，all,values,values_list等<br>from models import User</li>
</ol>
<ul>
<li>all<br>models.User.objects.all(),返回值为queryset类型，形如：[obj,obj,obj]</li>
<li>values<br>models.User.objects.values(‘id’,’username’,’password’),返回值为queryset类型，形如：[{‘id’:1,’username’:’shuke’,’password’:’123456’}]</li>
<li>values_list<br>models.User.objects.values_list(‘id’,’username’,’password’),返回值为queryset类型，形如: [(1,’shuke’,’123456’),(2,’mary’,’123456’)]</li>
</ul>
<ol start="2">
<li>一对多及多对多</li>
</ol>
<ul>
<li>一对多（FK常用操作）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">class A(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line"></span><br><span class="line">class B(models.Model):</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line">    fk &#x3D; models.ForeignKey(to&#x3D;&quot;A&quot;)</span><br><span class="line"># 跨表操作</span><br><span class="line">a. all()</span><br><span class="line">b_list &#x3D; models.B.objects.all()</span><br><span class="line">for item in b_list:</span><br><span class="line">    item.id</span><br><span class="line">    item.name</span><br><span class="line">    item.fk_id</span><br><span class="line">    item.fk</span><br><span class="line">    item.fk.name</span><br><span class="line">    item.fk.id</span><br><span class="line">b. values()</span><br><span class="line">b_list &#x3D; models.B.objects.values(&#39;id&#39;,&#39;name&#39;,&#39;fk_id&#39;,&#39;fk__name&#39;)</span><br><span class="line">for item in b_list:</span><br><span class="line">    item[&#39;id&#39;]</span><br><span class="line">    item[&#39;name&#39;]</span><br><span class="line">    item[&#39;fk_id&#39;]</span><br><span class="line">    item[&#39;fk__name&#39;]</span><br><span class="line">c. values_list()</span><br><span class="line">b_list &#x3D; models.B.objects.values_list(&#39;id&#39;,&#39;name&#39;,&#39;fk_id&#39;,&#39;fk__name&#39;)</span><br><span class="line">for item in b_list:</span><br><span class="line">    item[0]  # id</span><br><span class="line">    item[1]  # name</span><br><span class="line">    item[2]  # fk_id</span><br><span class="line">    item[3]  # fk__name</span><br><span class="line">d. 查找名称是&quot;Jack&quot;的用户所有B表中的数据</span><br><span class="line">models.B.objects.filter(fk__name&#x3D;&quot;Jack&quot;).all()</span><br></pre></td></tr></table></figure></li>
<li>多对多(ManyToMany)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">class A(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line"></span><br><span class="line">class B(models.Model):</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line">    m2m &#x3D; models.ManyToMany(to&#x3D;&quot;A&quot;)</span><br><span class="line">PS: 自动会生成第3张表</span><br><span class="line">a. 在A和B表中各插入2条数据</span><br><span class="line">models.A.objects.create(name&#x3D;&quot;Jack&quot;)</span><br><span class="line">models.A.objects.create(name&#x3D;&quot;Mary&quot;)</span><br><span class="line"></span><br><span class="line">models.A.objects.create(title&#x3D;&quot;IT&quot;)</span><br><span class="line">models.A.objects.create(title&#x3D;&quot;CTO&quot;)</span><br><span class="line"></span><br><span class="line">b. CTO和[&#39;Jack&#39;,&#39;Mary&#39;]创建关系</span><br><span class="line">obj &#x3D; models.B.objects.get(title&#x3D;&quot;CTO&quot;)</span><br><span class="line">obj.m2m.add(1)   # 此处可以写id也可以写关联的A表中的obj</span><br><span class="line">obj.m2m.add(2)</span><br><span class="line"></span><br><span class="line">c. 查找CTO的关联的人</span><br><span class="line">obj &#x3D; models.B.objects.get(title&#x3D;&quot;CTO&quot;)</span><br><span class="line">obj.m2m.all()    # 得到一个QuerySet列表，内容为A表中的对象</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li>中间件<br>中间件其实就是一个类，包含2个方法,形如:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MiddleWare:</span><br><span class="line">    # 所有的resquest请求都需要经过该方法,且该方法返回值为None时，继续请求下一个中间件</span><br><span class="line">    def process_request(self,request):</span><br><span class="line">        pass</span><br><span class="line">    def process_response(self,request,response):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure></li>
</ol>
<p><em>注: 中间件编写完成后需要在settings文件中进行注册使用，注册时注意中间件顺序</em></p>
<ol start="4">
<li>Session与Cookie的区别</li>
</ol>
<ul>
<li>由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。</li>
<li>思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。</li>
<li>Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。</li>
<li>总结：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</li>
</ul>
<ol start="5">
<li>正则模块re<br>re.match()方法<br>决定RE是否在字符串刚开始的位置匹配,返回_sre.SRE_Match对象，如果不能匹配返回None。<br>注：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符’$’<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">re.match(pattern, string, flags&#x3D;0)</span><br><span class="line"></span><br><span class="line">print(re.match(&#39;com&#39;,&#39;comwww.runcomoob&#39;).group())</span><br><span class="line">print(re.match(&#39;com&#39;,&#39;Comwww.runcomoob&#39;,re.I).group())</span><br><span class="line">执行结果如下：</span><br><span class="line">com</span><br><span class="line">com</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<br>

<h3 id="RBAC实现"><a href="#RBAC实现" class="headerlink" title="RBAC实现"></a>RBAC实现</h3><h4 id="开发RBAC流程"><a href="#开发RBAC流程" class="headerlink" title="开发RBAC流程"></a>开发RBAC流程</h4><ol>
<li>表结构设计</li>
<li>Django Admin录入数据</li>
<li>用户登陆<ul>
<li>获取角色</li>
<li>获取权限</li>
<li>对权限URL进行去重</li>
</ul>
</li>
<li>生成权限结构信息，写入session中<br>{<br> 1: {<pre><code>&apos;urls&apos;: [&apos;/userinfo/&apos;, &apos;/userinfo/add/&apos;, &apos;/userinfo/(\\d+)/delete/&apos;, &apos;/userinfo/(\\d+)/change/&apos;],
&apos;codes&apos;: [&apos;list&apos;, &apos;add&apos;, &apos;del&apos;, &apos;edit&apos;]</code></pre> },<br> 2: {<pre><code>&apos;urls&apos;: [&apos;/order/&apos;, &apos;/order/add/&apos;, &apos;/order/(\\d+)/delete/&apos;, &apos;/order/(\\d+)/change/&apos;],
&apos;codes&apos;: [&apos;list&apos;, &apos;add&apos;, &apos;del&apos;, &apos;edit&apos;]</code></pre> }<br>}</li>
<li>注册中间件<ul>
<li>白名单</li>
<li>获取当前访问url: request.path_info</li>
<li>session中获取权限，进行权限访问验证</li>
</ul>
</li>
<li>自动生成菜单功能<ul>
<li>采用自定义tag方式实现(inclusion_tag)</li>
<li>作为模板使用{ menu_html request }方式导入html文件中使用</li>
</ul>
</li>
<li>通过Django Admin后台进行管理及维护工作 <br>

</li>
</ol>
<h4 id="Django-ORM表结构设计"><a href="#Django-ORM表结构设计" class="headerlink" title="Django ORM表结构设计"></a>Django ORM表结构设计</h4><p><strong>5个类6张表</strong></p>
<ol>
<li>菜单表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Menu(models.Models):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    菜单表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32,verbose_name&#x3D;&#39;菜单标题&#39;)</span><br><span class="line">    </span><br><span class="line">     # django admin后台显示用</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;菜单表&quot;</span><br><span class="line">    # 重写__str__方法，实例化后的对象将以字符串的形式展示，但实际是一个obj,所以，请不要相信你的眼睛，必要时使用type(arg)进行验证</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br></pre></td></tr></table></figure></li>
<li>权限组表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Group(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    权限组</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    caption &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;组名称&quot;)</span><br><span class="line">    menu &#x3D; models.ForeignKey(to&#x3D;&quot;Menu&quot;, default&#x3D;1, blank&#x3D;True, verbose_name&#x3D;&quot;关联的菜单&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;权限组&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.caption</span><br></pre></td></tr></table></figure></li>
<li>权限表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Permission(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    权限表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;标题&quot;)</span><br><span class="line">    url &#x3D; models.CharField(max_length&#x3D;128, verbose_name&#x3D;&quot;含正则的URL&quot;)</span><br><span class="line">    # menu_gp为null说明是title为菜单项</span><br><span class="line">    menu_gp &#x3D; models.ForeignKey(to&#x3D;&quot;Permission&quot;, null&#x3D;True, blank&#x3D;True, verbose_name&#x3D;&quot;默认选中的组内权限ID&quot;, related_name&#x3D;&quot;pm&quot;)</span><br><span class="line">    code &#x3D; models.CharField(max_length&#x3D;16, verbose_name&#x3D;&quot;权限码&quot;)</span><br><span class="line">    group &#x3D; models.ForeignKey(to&#x3D;&quot;Group&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;所属组&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;权限表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br></pre></td></tr></table></figure></li>
<li>用户表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;用户名&quot;)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;64, verbose_name&#x3D;&quot;密码&quot;)</span><br><span class="line">    email &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;邮箱&quot;)</span><br><span class="line">    roles &#x3D; models.ManyToManyField(to&#x3D;&quot;Role&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;用户关联的角色&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;用户表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.username</span><br></pre></td></tr></table></figure></li>
<li>角色表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Role(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    角色表</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;32, verbose_name&#x3D;&quot;角色名称&quot;)</span><br><span class="line">    permissions &#x3D; models.ManyToManyField(to&#x3D;&quot;Permission&quot;, blank&#x3D;True, verbose_name&#x3D;&quot;角色关联的权限&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name_plural &#x3D; &quot;角色表&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br></pre></td></tr></table></figure></li>
<li>附加</li>
</ol>
<ul>
<li>创建数据库表结构信息</li>
<li>创建超级用户</li>
<li>在admin.py中注册models类</li>
<li>登陆admin管理后台添加数据，进行管理</li>
</ul>
<br>

<h3 id="settings中添加配置项"><a href="#settings中添加配置项" class="headerlink" title="settings中添加配置项"></a>settings中添加配置项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在文件末尾添加配置信息</span><br><span class="line"></span><br><span class="line">vim projectname&#x2F;settings.py</span><br><span class="line"># ########################### 权限管理相关 ###########################3</span><br><span class="line">PERMISSION_MENU_KEY &#x3D; &quot;asdkjalsdf9uajsdf&quot;</span><br><span class="line">PERMISSION_URL_DICT_KEY &#x3D; &quot;iujmsufnsdflsdkf&quot;</span><br><span class="line"></span><br><span class="line">VALID_URL&#x3D; [</span><br><span class="line">    &#39;^&#x2F;login&#x2F;&#39;,</span><br><span class="line">    &quot;^&#x2F;admin*&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h4 id="初始化权限信息"><a href="#初始化权限信息" class="headerlink" title="初始化权限信息"></a>初始化权限信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#cat rbac&#x2F;service&#x2F;init_permission.py</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line">def init_permission(request,user):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户权限信息初始化，获取当前用户所有权限信息，并保存到Session中</span><br><span class="line">    此处的request以及user参数均为对象，user为登陆成功时在数据库中查询到的user对象</span><br><span class="line">    :param request:</span><br><span class="line">    :param user:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 去空去重</span><br><span class="line">    permission_list &#x3D; user.roles.filter(permissions__id__isnull&#x3D;False).values(</span><br><span class="line">        &#39;permissions__id&#39;,</span><br><span class="line">        &#39;permissions__title&#39;,                # 用户列表</span><br><span class="line">        &#39;permissions__url&#39;,</span><br><span class="line">        &#39;permissions__code&#39;,</span><br><span class="line">        &#39;permissions__menu_gp_id&#39;,           # 组内菜单ID，Null表示是菜单</span><br><span class="line">        &#39;permissions__group_id&#39;,             # 权限的组ID</span><br><span class="line">        &#39;permissions__group__menu_id&#39;,       # 当前权限所在组的菜单ID</span><br><span class="line">        &#39;permissions__group__menu__title&#39;,   # 当前权限所在组的菜单名称</span><br><span class="line">    ).distinct()</span><br><span class="line">    </span><br><span class="line">    # 菜单相关配置，在inclusion_tag中使用</span><br><span class="line">    menu_permission_list&#x3D; []</span><br><span class="line">    for item in permission_list:</span><br><span class="line">        tpl &#x3D; &#123;</span><br><span class="line">            &#39;id&#39;: item[&#39;permissions__id&#39;],</span><br><span class="line">            &#39;title&#39;: item[&#39;permissions__title&#39;],</span><br><span class="line">            &#39;url&#39;: item[&#39;permissions__url&#39;],</span><br><span class="line">            &#39;menu_gp_id&#39;: item[&#39;permissions_menu_gp_id&#39;],</span><br><span class="line">            &#39;menu_id&#39;: item[&#39;permissions__group__menu_id&#39;],</span><br><span class="line">            &#39;menu_title&#39;: item[&#39;permissions__group__menu__title&#39;] </span><br><span class="line">        &#125;</span><br><span class="line">        menu_permission_list.append(tpl)</span><br><span class="line">        request.session[settings.PERMISSION_MENU_KEY] &#x3D; menu_permission_list</span><br><span class="line">        # 形如</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;host&#x2F;&quot;,&quot;menu_title&quot;: &quot;主机管理&quot;,&quot;title&quot;: &quot;主机列表&quot;,&quot;id&quot;: 1,&quot;menu_gp_id&quot;: null,&quot;menu_id&quot;: 1&#125;,</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;host&#x2F;add&#x2F;&quot;,&quot;menu_title&quot;: &quot;主机管理&quot;,&quot;title&quot;: &quot;添加主机&quot;,&quot;id&quot;: 2,&quot;menu_gp_id&quot;: 1,&quot;menu_id&quot;: 1&#125;,</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;host&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,&quot;menu_title&quot;: &quot;主机管理&quot;,&quot;title&quot;: &quot;删除主机&quot;,&quot;id&quot;: 3,&quot;menu_gp_id&quot;: 1,&quot;menu_id&quot;: 1&#125;,</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;host&#x2F;(\\d+)&#x2F;change&#x2F;&quot;,&quot;menu_title&quot;: &quot;主机管理&quot;,&quot;title&quot;: &quot;修改主机&quot;,&quot;id&quot;: 4,&quot;menu_gp_id&quot;: 1,&quot;menu_id&quot;: 1&#125;</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;userinfo&#x2F;&quot;,&quot;menu_title&quot;: &quot;用户管理&quot;,&quot;title&quot;: &quot;用户列表&quot;,&quot;id&quot;: 5,&quot;menu_gp_id&quot;: null,&quot;menu_id&quot;: 2&#125;,</span><br><span class="line">        &#123;&quot;url&quot;: &quot;&#x2F;userinfo&#x2F;add&#x2F;&quot;,&quot;menu_title&quot;: &quot;用户管理&quot;,&quot;title&quot;: &quot;添加用户&quot;,&quot;id&quot;: 6,&quot;menu_gp_id&quot;: 5,&quot;menu_id&quot;: 2&#125;,</span><br><span class="line">        ......</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    # 权限相关，中间件使用</span><br><span class="line">    permission_dict &#x3D; &#123;&#125;</span><br><span class="line">    for item in permission_list:</span><br><span class="line">        group_id &#x3D; item[&#39;permissions__group_id&#39;]</span><br><span class="line">        code &#x3D; item[&#39;permissions__code&#39;]</span><br><span class="line">        url &#x3D; item[&#39;permissions__url&#39;]</span><br><span class="line">        if group_id in permission_dict:</span><br><span class="line">            permission_dict[group_id][&#39;codes&#39;].append(code)</span><br><span class="line">            permission_dict[group_id][&#39;urls&#39;].append(url)</span><br><span class="line">        else:</span><br><span class="line">            permission_dict[group_id] &#x3D; &#123;&quot;codes&quot;: [code, ], &quot;urls&quot;: [url, ]&#125;</span><br><span class="line">    request.session[settings.PERMISSION_URL_DICT_KEY] &#x3D; permission_dict</span><br><span class="line">    # 形如</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;1&quot;: &#123;</span><br><span class="line">            &quot;codes&quot;: [&quot;list&quot;,&quot;add&quot;,&quot;delete&quot;,&quot;edit&quot;],</span><br><span class="line">            &quot;urls&quot;: [&quot;&#x2F;host&#x2F;&quot;,&quot;&#x2F;host&#x2F;add&#x2F;&quot;,&quot;&#x2F;host&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,&quot;&#x2F;host&#x2F;(\\d+)&#x2F;change&#x2F;&quot;]</span><br><span class="line">         &#125;,</span><br><span class="line">        &quot;2&quot;: &#123;</span><br><span class="line">            &quot;codes&quot;: [&quot;list&quot;,&quot;add&quot;,&quot;delete&quot;,&quot;change&quot;],</span><br><span class="line">            &quot;urls&quot;: [&quot;&#x2F;userinfo&#x2F;&quot;,&quot;&#x2F;userinfo&#x2F;add&#x2F;&quot;,&quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,&quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;change&#x2F;&quot;]</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p><em>注: 用户登陆成功后进行初始化权限信息,在处理用户权限时需要进行数据去重</em></p>
<h3 id="菜单List及权限Dict格式如下所示："><a href="#菜单List及权限Dict格式如下所示：" class="headerlink" title="菜单List及权限Dict格式如下所示："></a>菜单List及权限Dict格式如下所示：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 菜单List request.session[settings.PERMISSION_MENU_KEY]</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;host&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;主机列表&quot;,</span><br><span class="line">        &quot;id&quot;: 1,</span><br><span class="line">        &quot;menu_gp_id&quot;: null,</span><br><span class="line">        &quot;menu_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;host&#x2F;add&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;添加主机&quot;,</span><br><span class="line">        &quot;id&quot;: 2,</span><br><span class="line">        &quot;menu_gp_id&quot;: 1,</span><br><span class="line">        &quot;menu_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;host&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;删除主机&quot;,</span><br><span class="line">        &quot;id&quot;: 3,</span><br><span class="line">        &quot;menu_gp_id&quot;: 1,</span><br><span class="line">        &quot;menu_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;host&#x2F;(\\d+)&#x2F;change&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;修改主机&quot;,</span><br><span class="line">        &quot;id&quot;: 4,</span><br><span class="line">        &quot;menu_gp_id&quot;: 1,</span><br><span class="line">        &quot;menu_id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;用户列表&quot;,</span><br><span class="line">        &quot;id&quot;: 5,</span><br><span class="line">        &quot;menu_gp_id&quot;: null,</span><br><span class="line">        &quot;menu_id&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;add&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;添加用户&quot;,</span><br><span class="line">        &quot;id&quot;: 6,</span><br><span class="line">        &quot;menu_gp_id&quot;: 5,</span><br><span class="line">        &quot;menu_id&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;删除用户&quot;,</span><br><span class="line">        &quot;id&quot;: 7,</span><br><span class="line">        &quot;menu_gp_id&quot;: 5,</span><br><span class="line">        &quot;menu_id&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;change&#x2F;&quot;,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;修改用户&quot;,</span><br><span class="line">        &quot;id&quot;: 8,</span><br><span class="line">        &quot;menu_gp_id&quot;: 5,</span><br><span class="line">        &quot;menu_id&quot;: 2</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 权限Dict request.session[settings.PERMISSION_URL_DICT_KEY]</span><br><span class="line">&#123;</span><br><span class="line">    &quot;1&quot;: &#123;</span><br><span class="line">        &quot;codes&quot;: [</span><br><span class="line">            &quot;list&quot;,</span><br><span class="line">            &quot;add&quot;,</span><br><span class="line">            &quot;delete&quot;,</span><br><span class="line">            &quot;edit&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;urls&quot;: [</span><br><span class="line">            &quot;&#x2F;host&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;host&#x2F;add&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;host&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;host&#x2F;(\\d+)&#x2F;change&#x2F;&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;2&quot;: &#123;</span><br><span class="line">        &quot;codes&quot;: [</span><br><span class="line">            &quot;list&quot;,</span><br><span class="line">            &quot;add&quot;,</span><br><span class="line">            &quot;delete&quot;,</span><br><span class="line">            &quot;change&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;urls&quot;: [</span><br><span class="line">            &quot;&#x2F;userinfo&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;userinfo&#x2F;add&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;delete&#x2F;&quot;,</span><br><span class="line">            &quot;&#x2F;userinfo&#x2F;(\\d+)&#x2F;change&#x2F;&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat rbac&#x2F;middleware&#x2F;rbac.py</span><br><span class="line"></span><br><span class="line">from django.shortcuts import redirect,HttpResponse</span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line"># 在后续版本中可能会被废弃，故在此直接引入</span><br><span class="line">#from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">class MiddlewareMixin(object):</span><br><span class="line">    def __init__(self, get_response&#x3D;None):</span><br><span class="line">        self.get_response &#x3D; get_response</span><br><span class="line">        super(MiddlewareMixin, self).__init__()</span><br><span class="line"></span><br><span class="line">    def __call__(self, request):</span><br><span class="line">        response &#x3D; None</span><br><span class="line">        if hasattr(self, &#39;process_request&#39;):</span><br><span class="line">            response &#x3D; self.process_request(request)</span><br><span class="line">        if not response:</span><br><span class="line">            response &#x3D; self.get_response(request)</span><br><span class="line">        if hasattr(self, &#39;process_response&#39;):</span><br><span class="line">            response &#x3D; self.process_response(request, response)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line">class RbacMiddleware(MiddlewareMixin):</span><br><span class="line">    def process_request(self,request):</span><br><span class="line">        # 1. 当前请求URL</span><br><span class="line">        current_request_url &#x3D; request.path_info</span><br><span class="line"></span><br><span class="line">        # 2. 处理白名单,如login及admin页面需开放访问权限，根据实际情况而定</span><br><span class="line">        for url in settings.VALID_URL_LIST:</span><br><span class="line">            if re.match(url,current_request_url):</span><br><span class="line">                return None</span><br><span class="line"></span><br><span class="line">        # 3. 获取session中保存的权限信息</span><br><span class="line">        permission_dict &#x3D; request.session.get(settings.PERMISSION_MENU_LIST)</span><br><span class="line">        if not permission_dict:</span><br><span class="line">            # 登陆页面</span><br><span class="line">            return redirect(settings.RBAC_LOGIN_URL)</span><br><span class="line"></span><br><span class="line">        flag &#x3D; False</span><br><span class="line">        for group_id, values in permission_dict.items():</span><br><span class="line">            for url in values[&#39;urls&#39;]:</span><br><span class="line">                regex &#x3D; settings.URL_FORMAT.format(url)</span><br><span class="line">                if re.match(regex, current_request_url):</span><br><span class="line">                    flag &#x3D; True</span><br><span class="line">                    break</span><br><span class="line">            if flag:</span><br><span class="line">                break</span><br><span class="line">        if not flag:</span><br><span class="line">            # 无权访问页面，可以直接redirect</span><br><span class="line">            return HttpResponse(&#39;无权访问&#39;)</span><br></pre></td></tr></table></figure>
<br>

<h4 id="自动生成菜单template-tags"><a href="#自动生成菜单template-tags" class="headerlink" title="自动生成菜单template tags"></a>自动生成菜单template tags</h4><ol>
<li>template tags部分<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2017&#x2F;11&#x2F;20</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line">from django.template import Library</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">register &#x3D; Library()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@register.inclusion_tag(&#39;menu.html&#39;)</span><br><span class="line">def menu_html(request):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    获取session中的菜单信息，匹配当前URL，生成菜单</span><br><span class="line">    :param request: 请求的requst对象</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    menu_list &#x3D; request.session.get(settings.PERMISSION_MENU_KEY)</span><br><span class="line">    # 当前请求URL</span><br><span class="line">    current_url &#x3D; request.path_info</span><br><span class="line"></span><br><span class="line">    menu_dict &#x3D; &#123;&#125;</span><br><span class="line">    # menu_gp_id为空则是菜单</span><br><span class="line">    for item in menu_list:</span><br><span class="line">        if not item[&#39;menu_gp_id&#39;]:</span><br><span class="line">            menu_dict[item[&#39;id&#39;]] &#x3D; item</span><br><span class="line"></span><br><span class="line">    for item in menu_list:</span><br><span class="line">        regax &#x3D; &quot;^&#123;0&#125;$&quot;.format(item[&#39;url&#39;])</span><br><span class="line">        if re.match(regax, current_url):</span><br><span class="line">            menu_gp_id &#x3D; item[&#39;menu_gp_id&#39;]</span><br><span class="line">            if menu_gp_id:</span><br><span class="line">                menu_dict[menu_gp_id][&#39;active&#39;] &#x3D; True</span><br><span class="line">            else:</span><br><span class="line">                menu_dict[item[&#39;id&#39;]][&#39;active&#39;] &#x3D; True</span><br><span class="line"></span><br><span class="line">    result &#x3D; &#123;&#125;</span><br><span class="line">    for item in menu_dict.values():</span><br><span class="line">        active &#x3D; item.get(&#39;active&#39;)</span><br><span class="line">        menu_id &#x3D; item[&#39;menu_id&#39;]</span><br><span class="line">        if menu_id in result:</span><br><span class="line">            result[menu_id][&#39;children&#39;].append(&#123;&#39;title&#39;: item[&#39;title&#39;], &#39;url&#39;: item[&#39;url&#39;], &#39;active&#39;: active&#125;)</span><br><span class="line">            if active:</span><br><span class="line">                result[menu_id][&#39;active&#39;] &#x3D; True</span><br><span class="line">        else:</span><br><span class="line">            result[menu_id] &#x3D; &#123;</span><br><span class="line">                &#39;menu_id&#39;: item[&#39;menu_id&#39;],</span><br><span class="line">                &#39;menu_title&#39;: item[&#39;menu_title&#39;],</span><br><span class="line">                &#39;active&#39;: active,</span><br><span class="line">                &#39;children&#39;: [</span><br><span class="line">                    &#123;&#39;title&#39;: item[&#39;title&#39;], &#39;url&#39;: item[&#39;url&#39;], &#39;active&#39;: active&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">    print(json.dumps(result, indent&#x3D;4, ensure_ascii&#x3D;False))</span><br><span class="line">    return &#123;&#39;menu_dict&#39;: result&#125;</span><br></pre></td></tr></table></figure></li>
<li>生成的菜单树格式如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;1&quot;: &#123;</span><br><span class="line">        &quot;children&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;url&quot;: &quot;&#x2F;host&#x2F;&quot;,</span><br><span class="line">                &quot;active&quot;: null,</span><br><span class="line">                &quot;title&quot;: &quot;主机列表&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;menu_id&quot;: 1,</span><br><span class="line">        &quot;menu_title&quot;: &quot;主机管理&quot;,</span><br><span class="line">        &quot;active&quot;: null</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;2&quot;: &#123;</span><br><span class="line">        &quot;children&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;url&quot;: &quot;&#x2F;userinfo&#x2F;&quot;,</span><br><span class="line">                &quot;active&quot;: null,</span><br><span class="line">                &quot;title&quot;: &quot;用户列表&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;menu_id&quot;: 2,</span><br><span class="line">        &quot;menu_title&quot;: &quot;用户管理&quot;,</span><br><span class="line">        &quot;active&quot;: null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>menu_tpl.html部分<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for k,item in menu_dict.items %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;item&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;item-title&quot;&gt; &#123;&#123; item.menu_title &#125;&#125; &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% if item.active %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;item-permission&quot;&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;item-permission hide&quot;&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">            &#123;% for v in item.children %&#125;</span><br><span class="line">                &#123;% if v.active %&#125;</span><br><span class="line">                    &lt;a href&#x3D;&quot;&#123;&#123; v.url &#125;&#125;&quot; class&#x3D;&quot;active&quot;&gt;&#123;&#123; v.title &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                &#123;% else %&#125;</span><br><span class="line">                    &lt;a href&#x3D;&quot;&#123;&#123; v.url &#125;&#125;&quot;&gt;&#123;&#123; v.title &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li>
<li>HTML部分使用tags<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 上文中的menu_html函数依赖request参数，此处需要传入</span><br><span class="line">&#123; load rbac &#125;</span><br><span class="line">&#123; menu_html request &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><em>注: 自定义tags只支持传入1个参数</em><br><br></p>
<h4 id="注册中间件使用"><a href="#注册中间件使用" class="headerlink" title="注册中间件使用"></a>注册中间件使用</h4><p>project/settings.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE &#x3D; [</span><br><span class="line">    &#39;django.middleware.security.SecurityMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.common.CommonMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,</span><br><span class="line">    &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,</span><br><span class="line">    &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,</span><br><span class="line">    &#39;rbac.middleware.rbac.RbacMiddleware&#39;,</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h4><p>在Django Admin中维护rbac的权限系统并使用<br><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，基于role实现的rbac组件基本开发完成，在Django中作为app引入在settings文件中注册后就可以生效使用了,engoy it!</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署Django+Vue前后端分离的项目</title>
    <url>/2020/04/20/Docker%E9%83%A8%E7%BD%B2Django-Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="Docker部署Django-Vue前后端分离的项目"><a href="#Docker部署Django-Vue前后端分离的项目" class="headerlink" title="Docker部署Django+Vue前后端分离的项目"></a>Docker部署Django+Vue前后端分离的项目</h2><blockquote>
<p>本文主要介绍使用Docker环境部署一个Django Rest和Vue结合的前后端分离项目.</p>
</blockquote>
<h3 id="前端Vue"><a href="#前端Vue" class="headerlink" title="前端Vue"></a>前端Vue</h3><h4 id="使用Makefile编译打包"><a href="#使用Makefile编译打包" class="headerlink" title="使用Makefile编译打包"></a>使用Makefile编译打包</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># cmdb-frontend makefile</span><br><span class="line">#</span><br><span class="line">SHELL :&#x3D; &#x2F;bin&#x2F;bash</span><br><span class="line">PATH  :&#x3D; node_modules&#x2F;.bin:$(PATH)</span><br><span class="line"></span><br><span class="line">NOW :&#x3D; $(shell date +&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">PROJECT :&#x3D; cmdb-frontend</span><br><span class="line">PKG_NAME :&#x3D; $(PROJECT).tar.gz</span><br><span class="line"></span><br><span class="line"># Docker</span><br><span class="line">REGISTRY :&#x3D; wcr.shuke.net</span><br><span class="line">NAME :&#x3D; devops&#x2F;$(PROJECT)</span><br><span class="line">TAG :&#x3D; v$(shell date +&quot;%Y%m%d&quot;)</span><br><span class="line">IMG :&#x3D; $(REGISTRY)&#x2F;$(NAME):$(TAG)</span><br><span class="line"></span><br><span class="line"># update helm values.yaml</span><br><span class="line">CONTENT :&#x3D; $(subst TAG,$(TAG),&#39;9 s&#x2F;.*&#x2F;  tag\: TAG&#x2F;g&#39;)</span><br><span class="line"></span><br><span class="line">all : install pkg build-img</span><br><span class="line">.PHONY: all</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">	@echo -e &quot;\033[32m$(NOW): Build $&#123;PROJECT&#125; project\033[0m&quot;</span><br><span class="line">	npm run build</span><br><span class="line"></span><br><span class="line">pkg:</span><br><span class="line">	@echo -e &quot;\033[32m$(NOW): start packing\033[0m&quot;</span><br><span class="line">	tar zcf $(PKG_NAME) dist&#x2F;*</span><br><span class="line"></span><br><span class="line">build-img:</span><br><span class="line">	@echo -e &quot;\033[32m$(NOW): Start build image...\033[0m&quot;</span><br><span class="line">	cp -Ra dist nginx&#x2F;</span><br><span class="line">	docker build -t $(IMG) nginx</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">	@echo -e &quot;\033[32m$(NOW): clean...\033[0m&quot;</span><br><span class="line">	-rm -rf $(PKG_NAME) dist nginx&#x2F;dist</span><br><span class="line">	-docker rmi $(IMG)</span><br></pre></td></tr></table></figure>
<p>⚠️ 注: 在项目的根目录下执行<code>make all</code>命令进行编译打包操作以及生成docker镜像.</p>
<h4 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat cmdb.shuke.net.conf</span><br><span class="line">upstream cmdb-backend &#123;</span><br><span class="line">    server web:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name cmdb.shuke.net;</span><br><span class="line"></span><br><span class="line">	location &#x2F; &#123;</span><br><span class="line">    	    root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            try_files $uri $uri&#x2F; &#x2F;index.html @fallback;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">        location @fallback &#123;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">	        proxy_pass    http:&#x2F;&#x2F;cmdb-backend;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>⚠️ 注: 需将nginx配置文件复制到Dokcer镜像中覆盖默认的配置文件</p>
<h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># CMDB Frontend Nginx Dockerfile</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">FROM wcr.shuke.net&#x2F;base&#x2F;nginx:1.14.2</span><br><span class="line"></span><br><span class="line">LABEL maintainer&#x3D;&quot;shu_ke163@163.com&quot;</span><br><span class="line"></span><br><span class="line">COPY dist &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</span><br><span class="line"></span><br><span class="line">COPY cmdb.shuke.net.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;etc&#x2F;nginx</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure>
<p>⚠️ 注: 此处的nginx镜像可以使用Docker Hub官方的镜像也可以自定义.</p>
<h3 id="后端Django"><a href="#后端Django" class="headerlink" title="后端Django"></a>后端Django</h3><h4 id="Dockerfile-1"><a href="#Dockerfile-1" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># Django CMDB</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">FROM python:3</span><br><span class="line">ENV PYTHONUNBUFFERED 1</span><br><span class="line">RUN mkdir &#x2F;code</span><br><span class="line">WORKDIR &#x2F;code</span><br><span class="line">ADD requirements.txt &#x2F;code&#x2F;</span><br><span class="line">RUN pip install  --no-cache-dir -r requirements.txt</span><br><span class="line">ADD . &#x2F;code&#x2F;</span><br><span class="line">EXPOSE 8000</span><br><span class="line">CMD [&quot;python&quot;, &quot;.&#x2F;manage.py runserver 0.0.0.0:8000&quot;]</span><br></pre></td></tr></table></figure>
<p>⚠️ 注: 将Dockerfile放入Django的项目根节点目录下,用于构建后端容器</p>
<h4 id="docker-compose-yml-文件"><a href="#docker-compose-yml-文件" class="headerlink" title="docker-compose.yml 文件"></a>docker-compose.yml 文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:4</span><br><span class="line">    container_name: cmdb-redis</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:5.6</span><br><span class="line">    container_name: cmdb-mysql</span><br><span class="line">    volumes:</span><br><span class="line">      - ~&#x2F;data&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: admin123</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3307:3306&quot;</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    image: cmdb-backend:v1.0.0</span><br><span class="line">    container_name: cmdb-backend</span><br><span class="line">    command: python3 manage.py runserver 0.0.0.0:8000</span><br><span class="line">    volumes:</span><br><span class="line">      - .:&#x2F;code</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8000:8000&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">      - db</span><br><span class="line">    links:</span><br><span class="line">      - redis</span><br><span class="line">      - db</span><br><span class="line">  nginx:</span><br><span class="line">   # 前端Vue项目Dockerfile所在目录 </span><br><span class="line">    build: ..&#x2F;cmdb-frontend&#x2F;nginx&#x2F;</span><br><span class="line">    image: cmdb-frontend:v1.0.0</span><br><span class="line">    container_name: cmdb-nginx</span><br><span class="line">    ports:</span><br><span class="line">      - 9000:80</span><br><span class="line">    depends_on:</span><br><span class="line">      - web</span><br><span class="line">    links:</span><br><span class="line">      - web</span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure>
<p>⚠️ 注: 使用docker-compose 进行管理项目的所有依赖,包括redis/mysql/django/nginx容器,控制整个项目所依赖的所有容器的生命周期,使用<code>docker-compose up -d</code>命令拉取或生成镜像并启动项目依赖的所有容器</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. docker-compose build web   构建后端Django项目容器</span><br><span class="line">2. docker-compose build nginx 构建前端Vue项目容器</span><br><span class="line">3. docker-compose up 前台启动项目</span><br><span class="line">4. docker-compose up 后台启动项目</span><br><span class="line">5. docker-compose images 查看项目所有镜像</span><br><span class="line">6. docker-compose ps 查看项目所有容器</span><br><span class="line">7. docker-compose logs -f [service name] 如:web&#x2F;nginx  查看容器log信息</span><br><span class="line">8. docker-compose config 查看docker-compose.yml文件内容并校验</span><br><span class="line">9. $ docker-compose port nginx 80   # 查看服务的端口映射</span><br><span class="line">0.0.0.0:9000</span><br><span class="line">10. docker-compose stop db 停止单个容器</span><br><span class="line">11. docker-compose start db 启动单个容器</span><br><span class="line">12. docker-compose restart db 重启单个容器</span><br><span class="line">13. docker-compose start   启动所有容器</span><br><span class="line">14. docker-compose stop  停止所有容器</span><br><span class="line">15. docker-compose restart  重启所有容器</span><br><span class="line">16. docker-compose rm  删除所有已停止的容器</span><br><span class="line"></span><br><span class="line"># 以下是所有的docker-compose一些命令参数</span><br><span class="line">Commands:</span><br><span class="line">  build              Build or rebuild services</span><br><span class="line">  bundle             Generate a Docker bundle from the Compose file</span><br><span class="line">  config             Validate and view the Compose file</span><br><span class="line">  create             Create services</span><br><span class="line">  down               Stop and remove containers, networks, images, and volumes</span><br><span class="line">  events             Receive real time events from containers</span><br><span class="line">  exec               Execute a command in a running container</span><br><span class="line">  help               Get help on a command</span><br><span class="line">  images             List images</span><br><span class="line">  kill               Kill containers</span><br><span class="line">  logs               View output from containers</span><br><span class="line">  pause              Pause services</span><br><span class="line">  port               Print the public port for a port binding</span><br><span class="line">  ps                 List containers</span><br><span class="line">  pull               Pull service images</span><br><span class="line">  push               Push service images</span><br><span class="line">  restart            Restart services</span><br><span class="line">  rm                 Remove stopped containers</span><br><span class="line">  run                Run a one-off command</span><br><span class="line">  scale              Set number of containers for a service</span><br><span class="line">  start              Start services</span><br><span class="line">  stop               Stop services</span><br><span class="line">  top                Display the running processes</span><br><span class="line">  unpause            Unpause services</span><br><span class="line">  up                 Create and start containers</span><br><span class="line">  version            Show the Docker-Compose version information</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask之路-前戏</title>
    <url>/2020/04/20/Flask%E4%B9%8B%E8%B7%AF-%E5%89%8D%E6%88%8F/</url>
    <content><![CDATA[<h2 id="Flask之路-前戏"><a href="#Flask之路-前戏" class="headerlink" title="Flask之路-前戏"></a>Flask之路-前戏</h2><p>以下内容都是学习Flask框架之前需要了解的知识点,敲黑板…</p>
<h3 id="一-Flask前戏之装饰器"><a href="#一-Flask前戏之装饰器" class="headerlink" title="一. Flask前戏之装饰器"></a>一. Flask前戏之装饰器</h3><h4 id="1-1-无参装饰器"><a href="#1-1-无参装饰器" class="headerlink" title="1.1 无参装饰器"></a>1.1 无参装饰器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;4&#x2F;15</span><br><span class="line"></span><br><span class="line">def wapper(f):</span><br><span class="line">    def inner(*args, **kwargs):</span><br><span class="line">        return f(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line"># 1. 立即执行wapper函数,并且将被装饰的函数当作参数传递</span><br><span class="line"># 2. 此时的func&#x3D;inner</span><br><span class="line">@wapper</span><br><span class="line">def func(arg):</span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(123)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; 123</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>

<h4 id="2-带参数的装饰器"><a href="#2-带参数的装饰器" class="headerlink" title="2. 带参数的装饰器"></a>2. 带参数的装饰器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def outer(num):</span><br><span class="line">    def wapper(f):</span><br><span class="line">        def inner(*args, **kwargs):</span><br><span class="line">            return f(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        return inner</span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    return wapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 首先执行wapper(666)，获得返回值;@wapper;此时@wapper,再执行wapper(func)函数,获得返回值inner，此时:func&#x3D;inner函数</span><br><span class="line">@outer(666)</span><br><span class="line">def func(arg):</span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line">func(&#39;Hello&#39;)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">666</span><br><span class="line">Hello</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>
<h4 id="4-扩展"><a href="#4-扩展" class="headerlink" title="4. 扩展"></a>4. 扩展</h4><p>这里我们引入一个functools模块，这个模块是它能将装饰过的函数的特殊属性保留,对于这个functools.wraps装饰器，相当于wrapper = functools.wraps(func)(wrapper)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import  functools</span><br><span class="line">def wapper(func):</span><br><span class="line">    @functools.wraps(func)</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        return func(*args,**kwargs)</span><br><span class="line">    return inner</span><br><span class="line">@wapper</span><br><span class="line">def index():</span><br><span class="line">    print(&quot;hello world ,from index&quot;)</span><br><span class="line">@wapper</span><br><span class="line">def order():</span><br><span class="line">    print(&quot;hell world ,from order&quot;)</span><br><span class="line"></span><br><span class="line">print(index.__name__) </span><br><span class="line">print(order.__name__) </span><br><span class="line">##########  使用functools.wraps(函数) #############</span><br><span class="line">index</span><br><span class="line">order</span><br><span class="line">########## 不使用functools.wraps(函数)#####################</span><br><span class="line">inner</span><br><span class="line">inner</span><br></pre></td></tr></table></figure>
<h3 id="二-Flask前戏之面向对象"><a href="#二-Flask前戏之面向对象" class="headerlink" title="二. Flask前戏之面向对象"></a>二. Flask前戏之面向对象</h3><p>面向对象3大特性: 继承 封装 多态</p>
<ul>
<li>继承<br>子类继承父类<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Parent(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def talk(self):</span><br><span class="line">        print(&quot;Say Hello!&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Child(Parent):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 &#x3D; Child()</span><br><span class="line">c1.talk()</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; Say Hello!</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">PS: 在python3.x中类的继承遵循广度优先原则,在python2.x中遵循深度优先原则</span><br></pre></td></tr></table></figure></li>
<li>封装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 示例</span><br><span class="line">class Foo(object):</span><br><span class="line">    def __init__(self, age, name):</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line"># 此处的18和&#39;shuke&#39;被封装到Foo类中</span><br><span class="line">f1 &#x3D; Foo(18, &#39;shuke&#39;)</span><br><span class="line"></span><br><span class="line">2. 示例</span><br><span class="line">class Bar(object):</span><br><span class="line">    def __init__(self, counter, obj):</span><br><span class="line">        self.age &#x3D; counter</span><br><span class="line">        self.obj &#x3D; obj</span><br><span class="line"></span><br><span class="line"># 此处的self.obj即为Foo类的对象f1</span><br><span class="line">b1 &#x3D; Bar(1, f1)</span><br><span class="line"></span><br><span class="line">3. 示例</span><br><span class="line">class Bar(object):</span><br><span class="line">    def __init__(self, counter):</span><br><span class="line">        self.age &#x3D; counter</span><br><span class="line">        self.obj &#x3D; Foo(18, &#39;shuke&#39;)</span><br><span class="line">        </span><br><span class="line"># 此处的self.obj即为Foo类的对象</span><br><span class="line">b1 &#x3D; Bar(1)</span><br></pre></td></tr></table></figure></li>
<li>多态<br>鸭子模型</li>
</ul>
<p>PS: 一个py文件中的函数可以被当作模块导入,在其他文件中调用即为封装思想</p>
<h3 id="三-python中什么后面可以加括号"><a href="#三-python中什么后面可以加括号" class="headerlink" title="三. python中什么后面可以加括号"></a>三. python中什么后面可以加括号</h3><h4 id="3-1-基本形式如下"><a href="#3-1-基本形式如下" class="headerlink" title="3.1 基本形式如下"></a>3.1 基本形式如下</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def func(arg):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    由于arg在函数中加括号，所以基本上只有4中表现形式</span><br><span class="line">    :param arg: </span><br><span class="line">    :return: </span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    arg()</span><br></pre></td></tr></table></figure>
<p>a. 函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def f1():</span><br><span class="line">    print(&quot;f1&quot;)</span><br><span class="line">    </span><br><span class="line">func(f1)</span><br></pre></td></tr></table></figure>
<p>b. 类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo(object):</span><br><span class="line">    pass</span><br><span class="line"># 执行类.__init__构造方法</span><br><span class="line">func(Foo)</span><br></pre></td></tr></table></figure>
<p>c. 方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class F3(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def example(self):</span><br><span class="line">        print(&quot;F3&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj &#x3D; F3()</span><br><span class="line">func(obj.example)</span><br></pre></td></tr></table></figure>
<p>d. 对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class F4(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def __call__(self, *args, **kwargs):</span><br><span class="line">        print(&quot;call方法&quot;)</span><br><span class="line"></span><br><span class="line">obj &#x3D; F4()</span><br><span class="line">obj()</span><br><span class="line">&#39;&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; call方法</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">func(obj)</span><br></pre></td></tr></table></figure>

<h4 id="延伸-函数与方法的区别"><a href="#延伸-函数与方法的区别" class="headerlink" title="延伸(函数与方法的区别)"></a>延伸(函数与方法的区别)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class F3(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def example(self):</span><br><span class="line">        print(&quot;F3&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj &#x3D; F3()</span><br><span class="line"># 方法</span><br><span class="line">obj.example()</span><br><span class="line"># 函数</span><br><span class="line">F3.example</span><br></pre></td></tr></table></figure>
<h4 id="科学依据"><a href="#科学依据" class="headerlink" title="科学依据"></a>科学依据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from types import MethodType, FunctionType</span><br><span class="line"></span><br><span class="line">class F3(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def example(self):</span><br><span class="line">        print(&quot;F3&quot;)</span><br><span class="line"></span><br><span class="line">ret1 &#x3D; isinstance(F3.example, MethodType)</span><br><span class="line">ret2 &#x3D; isinstance(F3.example, FunctionType)</span><br><span class="line">print(ret1, ret2)</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; False True</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">obj &#x3D; F3()</span><br><span class="line">ret3 &#x3D; isinstance(obj.example, MethodType)</span><br><span class="line">ret4 &#x3D; isinstance(obj.example, FunctionType)</span><br><span class="line">print(ret3, ret4)</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; True False</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Flask</category>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab 自动触发 Jenkins 构建</title>
    <url>/2020/04/20/GitLab-%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91-Jenkins-%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="GitLab-自动触发-Jenkins-构建"><a href="#GitLab-自动触发-Jenkins-构建" class="headerlink" title="GitLab 自动触发 Jenkins 构建"></a>GitLab 自动触发 Jenkins 构建</h2><p><a href="https://www.wolfcstech.com/2018/03/26/gitlab_trigger_jenkins_build/" target="_blank" rel="noopener">GitLab 自动触发 Jenkins 构建</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask知识点总结</title>
    <url>/2020/04/20/Flask%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote class="blockquote-center">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>


<h2 id="Python-中更优雅的日志记录方案"><a href="#Python-中更优雅的日志记录方案" class="headerlink" title="Python 中更优雅的日志记录方案"></a>Python 中更优雅的日志记录方案</h2><p>在 Python 中，一般情况下我们可能直接用自带的 logging 模块来记录日志，包括我之前的时候也是一样。在使用时我们需要配置一些 Handler、Formatter 来进行一些处理，比如把日志输出到不同的位置，或者设置一个不同的输出格式，或者设置日志分块和备份。但其实个人感觉 logging 用起来其实并不是那么好用，其实主要还是配置较为繁琐.</p>
<h2 id="常见使用"><a href="#常见使用" class="headerlink" title="常见使用"></a>常见使用</h2><p>首先看看 logging 常见的解决方案吧，我一般会配置输出到文件、控制台和 Elasticsearch。输出到控制台就仅仅是方便直接查看的；输出到文件是方便直接存储，保留所有历史记录的备份；输出到 Elasticsearch，直接将 Elasticsearch 作为存储和分析的中心，使用 Kibana 可以非常方便地分析和查看运行情况。<br>所以在这里我基本会对 logging 做如下的封装写法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mport logging</span><br><span class="line">import sys</span><br><span class="line">from os import makedirs</span><br><span class="line">from os.path import dirname, exists</span><br><span class="line"></span><br><span class="line">from cmreslogging.handlers import CMRESHandler</span><br><span class="line"></span><br><span class="line">loggers &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">LOG_ENABLED &#x3D; True  # 是否开启日志</span><br><span class="line">LOG_TO_CONSOLE &#x3D; True  # 是否输出到控制台</span><br><span class="line">LOG_TO_FILE &#x3D; True  # 是否输出到文件</span><br><span class="line">LOG_TO_ES &#x3D; True  # 是否输出到 Elasticsearch</span><br><span class="line"></span><br><span class="line">LOG_PATH &#x3D; &#39;.&#x2F;runtime.log&#39;  # 日志文件路径</span><br><span class="line">LOG_LEVEL &#x3D; &#39;DEBUG&#39;  # 日志级别</span><br><span class="line">LOG_FORMAT &#x3D; &#39;%(levelname)s - %(asctime)s - process: %(process)d - %(filename)s - %(name)s - %(lineno)d - %(module)s - %(message)s&#39;  # 每条日志输出格式</span><br><span class="line">ELASTIC_SEARCH_HOST &#x3D; &#39;eshost&#39;  # Elasticsearch Host</span><br><span class="line">ELASTIC_SEARCH_PORT &#x3D; 9200  # Elasticsearch Port</span><br><span class="line">ELASTIC_SEARCH_INDEX &#x3D; &#39;runtime&#39;  # Elasticsearch Index Name</span><br><span class="line">APP_ENVIRONMENT &#x3D; &#39;dev&#39;  # 运行环境，如测试环境还是生产环境</span><br><span class="line"></span><br><span class="line">def get_logger(name&#x3D;None):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    get logger by name</span><br><span class="line">    :param name: name of logger</span><br><span class="line">    :return: logger</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    global loggers</span><br><span class="line"></span><br><span class="line">    if not name: name &#x3D; __name__</span><br><span class="line"></span><br><span class="line">    if loggers.get(name):</span><br><span class="line">        return loggers.get(name)</span><br><span class="line"></span><br><span class="line">    logger &#x3D; logging.getLogger(name)</span><br><span class="line">    logger.setLevel(LOG_LEVEL)</span><br><span class="line"></span><br><span class="line">    # 输出到控制台</span><br><span class="line">    if LOG_ENABLED and LOG_TO_CONSOLE:</span><br><span class="line">        stream_handler &#x3D; logging.StreamHandler(sys.stdout)</span><br><span class="line">        stream_handler.setLevel(level&#x3D;LOG_LEVEL)</span><br><span class="line">        formatter &#x3D; logging.Formatter(LOG_FORMAT)</span><br><span class="line">        stream_handler.setFormatter(formatter)</span><br><span class="line">        logger.addHandler(stream_handler)</span><br><span class="line"></span><br><span class="line">    # 输出到文件</span><br><span class="line">    if LOG_ENABLED and LOG_TO_FILE:</span><br><span class="line">        # 如果路径不存在，创建日志文件文件夹</span><br><span class="line">        log_dir &#x3D; dirname(log_path)</span><br><span class="line">        if not exists(log_dir): makedirs(log_dir)</span><br><span class="line">        # 添加 FileHandler</span><br><span class="line">        file_handler &#x3D; logging.FileHandler(log_path, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">        file_handler.setLevel(level&#x3D;LOG_LEVEL)</span><br><span class="line">        formatter &#x3D; logging.Formatter(LOG_FORMAT)</span><br><span class="line">        file_handler.setFormatter(formatter)</span><br><span class="line">        logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">    # 输出到 Elasticsearch</span><br><span class="line">    if LOG_ENABLED and LOG_TO_ES:</span><br><span class="line">        # 添加 CMRESHandler</span><br><span class="line">        es_handler &#x3D; CMRESHandler(hosts&#x3D;[&#123;&#39;host&#39;: ELASTIC_SEARCH_HOST, &#39;port&#39;: ELASTIC_SEARCH_PORT&#125;],</span><br><span class="line">                                  # 可以配置对应的认证权限</span><br><span class="line">                                  auth_type&#x3D;CMRESHandler.AuthType.NO_AUTH,  </span><br><span class="line">                                  es_index_name&#x3D;ELASTIC_SEARCH_INDEX,</span><br><span class="line">                                  # 一个月分一个 Index</span><br><span class="line">                                  index_name_frequency&#x3D;CMRESHandler.IndexNameFrequency.MONTHLY,</span><br><span class="line">                                  # 额外增加环境标识</span><br><span class="line">                                  es_additional_fields&#x3D;&#123;&#39;environment&#39;: APP_ENVIRONMENT&#125;  </span><br><span class="line">                                  )</span><br><span class="line">        es_handler.setLevel(level&#x3D;LOG_LEVEL)</span><br><span class="line">        formatter &#x3D; logging.Formatter(LOG_FORMAT)</span><br><span class="line">        es_handler.setFormatter(formatter)</span><br><span class="line">        logger.addHandler(es_handler)</span><br><span class="line"></span><br><span class="line">    # 保存到全局 loggers</span><br><span class="line">    loggers[name] &#x3D; logger</span><br><span class="line">    return logger</span><br></pre></td></tr></table></figure>
<p>定义完了怎么使用呢？只需要使用定义的方法获取一个 logger，然后 log 对应的内容即可:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger &#x3D; get_logger()</span><br><span class="line">logger.debug(&#39;this is a message&#39;)</span><br></pre></td></tr></table></figure>
<p>运行结果如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEBUG - 2019-10-11 22:27:35,923 - process: 99490 - logger.py - __main__ - 81 - logger - this is a message</span><br></pre></td></tr></table></figure>
<p>我们看看这个定义的基本实现吧。首先这里一些常量是用来定义 <code>logging</code> 模块的一些基本属性的，比如 LOG_ENABLED 代表是否开启日志功能，<code>LOG_TO_E</code>S 代表是否将日志输出到 Elasticsearch，另外还有很多其他的日志基本配置，如 <code>LOG_FORMAT</code> 配置了日志每个条目输出的基本格式，另外还有一些连接的必要信息。这些变量可以和运行时的命令行或环境变量对接起来，可以方便地实现一些开关和配置的更换。</p>
<p>然后定义了这么一个 <code>get_logger</code> 方法，接收一个参数 name。首先该方法拿到 name 之后，会到全局的 loggers 变量里面查找，loggers 变量是一个全局字典，如果有已经声明过的 logger，直接将其获取返回即可，不用再将其二次初始化。如果 loggers 里面没有找到 name 对应的 logger，那就进行创建即可。创建 logger 之后，可以为其添加各种对应的 Handler，如输出到控制台就用 StreamHandler，输出到文件就用 FileHandler 或 RotatingFileHandler，输出到 Elasticsearch 就用 CMRESHandler，分别配置好对应的信息即可。</p>
<p>最后呢，将新建的 logger 保存到全局的 loggers 里面并返回即可，这样如果有同名的 logger 便可以直接查找 loggers 直接返回了。<br>在这里依赖了额外的输出到 Elasticsearch 的包，叫做 CMRESHandler，它可以支持将日志输出到 Elasticsearch 里面，如果要使用的话可以安装一下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install CMRESHandler</span><br></pre></td></tr></table></figure>
<p>其 GitHub 地址是：<code>https://github.com/cmanaha/python-elasticsearch-logger</code>，具体的使用方式可以看看它的官方说明，如配置认证信息，配置 Index 分隔信息等等。<br>好，上面就是我之前常用的 logging 配置，通过如上的配置，我就可以实现将 logging 输出到三个位置，并可以实现对应的效果。比如输出到 Elasticsearch 之后，我就可以非常方便地使用 Kibana 来查看当前运行情况，ERROR Log 的比例等等.<br>也可以在它的基础上做更进一步的统计分析.</p>
<h2 id="loguru"><a href="#loguru" class="headerlink" title="loguru"></a>loguru</h2><p>上面的实现方式已经是一个较为可行的配置方案了。然而，我还是会感觉到有些 Handler 配起来麻烦，尤其是新建一个项目的很多时候懒得去写一些配置。即使是不用上文的配置，用最基本的几行 logging 配置，像如下的通用配置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level &#x3D; logging.INFO,format &#x3D; &#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)</span><br><span class="line">logger &#x3D; logging.getLogger(__name__)</span><br></pre></td></tr></table></figure>
<p>我也懒得去写，感觉并不是一个优雅的实现方式。<br>有需求就有动力啊，这不，就有人实现了这么一个库，叫做 loguru，可以将 log 的配置和使用更加简单和方便。<br>下面我们来看看它到底是怎么用的吧.</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先，这个库的安装方式很简单，就用基本的 pip 安装即可，Python 3 版本的安装如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install loguru</span><br></pre></td></tr></table></figure>
<p>安装完毕之后，我们就可以在项目里使用这个 loguru 库了.</p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>那么这个库怎么来用呢？我们先用一个实例感受下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from loguru import logger</span><br><span class="line"></span><br><span class="line">logger.debug(&#39;this is a debug message&#39;)</span><br></pre></td></tr></table></figure>
<p>看到了吧，不需要配置什么东西，直接引入一个 logger，然后调用其 debug 方法即可。</p>
<p>在 loguru 里面有且仅有一个主要对象，那就是 logger，loguru 里面有且仅有一个 logger，而且它已经被提前配置了一些基础信息，比如比较友好的格式化、文本颜色信息等等。</p>
<p>上面的代码运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-10-13 22:46:12.367 | DEBUG    | __main__:&lt;module&gt;:4 - this is a debug message</span><br></pre></td></tr></table></figure>
<p>可以看到其默认的输出格式是上面的内容，有时间、级别、模块名、行号以及日志信息，不需要手动创建 logger，直接使用即可，另外其输出还是彩色的，看起来会更加友好。</p>
<p>以上的日志信息是直接输出到控制台的，并没有输出到其他的地方，如果想要输出到其他的位置，比如存为文件，我们只需要使用一行代码声明即可。</p>
<p>例如将结果同时输出到一个 runtime.log 文件里面，可以这么写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from loguru import logger</span><br><span class="line"></span><br><span class="line">logger.add(&#39;runtime.log&#39;)</span><br><span class="line">logger.debug(&#39;this is a debug&#39;)</span><br></pre></td></tr></table></figure>
<p>很简单吧，我们也不需要再声明一个 FileHandler 了，就一行 add 语句搞定，运行之后会发现目录下 runtime.log 里面同样出现了刚刚控制台输出的 DEBUG 信息。</p>
<p>上面就是一些基本的使用，但这还远远不够，下面我们来详细了解下它的一些功能模块.</p>
<h2 id="详细使用"><a href="#详细使用" class="headerlink" title="详细使用"></a>详细使用</h2><p>既然是日志，那么最常见的就是输出到文件了。loguru 对输出到文件的配置有非常强大的支持，比如支持输出到多个文件，分级别分别输出，过大创建新文件，过久自动删除等等。</p>
<p>下面我们分别看看这些怎样来实现，这里基本上就是 add 方法的使用介绍。因为这个 add 方法就相当于给 logger 添加了一个 Handler，它给我们暴露了许多参数来实现 Handler 的配置，下面我们来详细介绍下。<br>首先看看它的方法定义吧:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def add(</span><br><span class="line">        self,</span><br><span class="line">        sink,</span><br><span class="line">        *,</span><br><span class="line">        level&#x3D;_defaults.LOGURU_LEVEL,</span><br><span class="line">        format&#x3D;_defaults.LOGURU_FORMAT,</span><br><span class="line">        filter&#x3D;_defaults.LOGURU_FILTER,</span><br><span class="line">        colorize&#x3D;_defaults.LOGURU_COLORIZE,</span><br><span class="line">        serialize&#x3D;_defaults.LOGURU_SERIALIZE,</span><br><span class="line">        backtrace&#x3D;_defaults.LOGURU_BACKTRACE,</span><br><span class="line">        diagnose&#x3D;_defaults.LOGURU_DIAGNOSE,</span><br><span class="line">        enqueue&#x3D;_defaults.LOGURU_ENQUEUE,</span><br><span class="line">        catch&#x3D;_defaults.LOGURU_CATCH,</span><br><span class="line">        **kwargs</span><br><span class="line">    ):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>看看它的源代码，它支持这么多的参数，如 level、format、filter、color 等等。</p>
<blockquote>
<p>sink<br>另外我们还注意到它有个非常重要的参数 sink，我们看看官方文档：<code>https://loguru.readthedocs.io/en/stable/api/logger.html#sink</code>，可以了解到通过 sink 我们可以传入多种不同的数据结构，汇总如下:</p>
</blockquote>
<ul>
<li>sink 可以传入一个 file 对象，例如 sys.stderr 或者 open(‘file.log’, ‘w’) 都可以。</li>
<li>sink 可以直接传入一个 str 字符串或者 pathlib.Path 对象，其实就是代表文件路径的，如果识别到是这种类型，它会自动创建对应路径的日志文件并将日志输出进去。</li>
<li>sink 可以是一个方法，可以自行定义输出实现。</li>
<li>sink 可以是一个 logging 模块的 Handler，比如 FileHandler、StreamHandler 等等，或者上文中我们提到的 CMRESHandler 照样也是可以的，这样就可以实现自定义 Handler 的配置。</li>
<li>sink 还可以是一个自定义的类，具体的实现规范可以参见官方文档.<br>所以说，刚才我们所演示的输出到文件，仅仅给它传了一个 str 字符串路径，他就给我们创建了一个日志文件，就是这个原理。</li>
</ul>
<blockquote>
<blockquote>
<p>format, filter, level<br>下面我们再了解下它的其他参数，例如 format、filter、level 等等。<br>其实它们的概念和格式和 logging 模块都是基本一样的了，例如这里使用 format、filter、level 来规定输出的格式:</p>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.add(&#39;runtime.log&#39;, format&#x3D;&quot;&#123;time&#125; &#123;level&#125; &#123;message&#125;&quot;, filter&#x3D;&quot;my_module&quot;, level&#x3D;&quot;INFO&quot;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>删除sink<br>另外添加 sink 之后我们也可以对其进行删除，相当于重新刷新并写入新的内容。<br>删除的时候根据刚刚 add 方法返回的 id 进行删除即可，看下面的例子:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from loguru import logger</span><br><span class="line"></span><br><span class="line">trace &#x3D; logger.add(&#39;runtime.log&#39;)</span><br><span class="line">logger.debug(&#39;this is a debug message&#39;)</span><br><span class="line">logger.remove(trace)</span><br><span class="line">logger.debug(&#39;this is another debug message&#39;)</span><br></pre></td></tr></table></figure>
<p>看这里，我们首先 add 了一个 sink，然后获取它的返回值，赋值为 trace。随后输出了一条日志，然后将 trace 变量传给 remove 方法，再次输出一条日志，看看结果是怎样的。<br>控制台输出如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">019-10-13 23:18:26.469 | DEBUG    | __main__:&lt;module&gt;:4 - this is a debug message</span><br><span class="line">2019-10-13 23:18:26.469 | DEBUG    | __main__:&lt;module&gt;:6 - this is another debug message</span><br></pre></td></tr></table></figure>
<p>日志文件 runtime.log 内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-10-13 23:18:26.469 | DEBUG    | __main__:&lt;module&gt;:4 - this is a debug message</span><br></pre></td></tr></table></figure>
<p>可以发现，在调用 remove 方法之后，确实将历史 log 删除了。<br>这样我们就可以实现日志的刷新重新写入操作。</p>
<blockquote>
<p>rotation 配置<br>用了 loguru 我们还可以非常方便地使用 rotation 配置，比如我们想一天输出一个日志文件，或者文件太大了自动分隔日志文件，我们可以直接使用 add 方法的 rotation 参数进行配置。<br>我们看看下面的例子：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.add(&#39;runtime_&#123;time&#125;.log&#39;, rotation&#x3D;&quot;500 MB&quot;)</span><br></pre></td></tr></table></figure>
<p>通过这样的配置我们就可以实现每 500MB 存储一个文件，每个 log 文件过大就会新创建一个 log 文件。我们在配置 log 名字时加上了一个 time 占位符，这样在生成时可以自动将时间替换进去，生成一个文件名包含时间的 log 文件。<br>另外我们也可以使用 rotation 参数实现定时创建 log 文件，例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.add(&#39;runtime_&#123;time&#125;.log&#39;, rotation&#x3D;&#39;00:00&#39;)</span><br></pre></td></tr></table></figure>
<p>这样就可以实现每天 0 点新创建一个 log 文件输出了。<br>另外我们也可以配置 log 文件的循环时间，比如每隔一周创建一个 log 文件，写法如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.add(&#39;runtime_&#123;time&#125;.log&#39;, rotation&#x3D;&#39;1 week&#39;)</span><br></pre></td></tr></table></figure>
<p>这样我们就可以实现一周创建一个 log 文件了。</p>
<blockquote>
<p>retention 配置<br>很多情况下，一些非常久远的 log 对我们来说并没有什么用处了，它白白占据了一些存储空间，不清除掉就会非常浪费。retention 这个参数可以配置日志的最长保留时间。<br>比如我们想要设置日志文件最长保留 10 天，可以这么来配置:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.add(&#39;runtime.log&#39;, retention&#x3D;&#39;10 days&#39;)</span><br></pre></td></tr></table></figure>
<p>这样 log 文件里面就会保留最新 10 天的 log，妈妈再也不用担心 log 沉积的问题啦。</p>
<blockquote>
<p>compression 配置<br>loguru 还可以配置文件的压缩格式，比如使用 zip 文件格式保存，示例如下:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.add(&#39;runtime.log&#39;, compression&#x3D;&#39;zip&#39;)</span><br></pre></td></tr></table></figure>
<p>这样可以更加节省存储空间。</p>
<blockquote>
<p>字符串格式化<br>loguru 在输出 log 的时候还提供了非常友好的字符串格式化功能，像这样:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.info(&#39;If you are using Python &#123;&#125;, prefer &#123;feature&#125; of course!&#39;, 3.6, feature&#x3D;&#39;f-strings&#39;)</span><br></pre></td></tr></table></figure>
<p>这样在添加参数就非常方便了。</p>
<blockquote>
<p>Traceback 记录<br>在很多情况下，如果遇到运行错误，而我们在打印输出 log 的时候万一不小心没有配置好 Traceback 的输出，很有可能我们就没法追踪错误所在了。<br>但用了 loguru 之后，我们用它提供的装饰器就可以直接进行 Traceback 的记录，类似这样的配置即可:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@logger.catch</span><br><span class="line">def my_function(x, y, z):</span><br><span class="line">    # An error? It&#39;s caught anyway!</span><br><span class="line">    return 1 &#x2F; (x + y + z)</span><br></pre></td></tr></table></figure>
<p>我们做个测试，我们在调用时三个参数都传入 0，直接引发除以 0 的错误，看看会出现什么情况:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">my_function(0, 0, 0)</span><br></pre></td></tr></table></figure>
<p>运行完毕之后，可以发现 log 里面就出现了 Traceback 信息，而且给我们输出了当时的变量值，真的是不能再赞了！结果如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; File &quot;run.py&quot;, line 15, in &lt;module&gt;</span><br><span class="line">    my_function(0, 0, 0)</span><br><span class="line">    └ &lt;function my_function at 0x1171dd510&gt;</span><br><span class="line"></span><br><span class="line">  File &quot;&#x2F;private&#x2F;var&#x2F;py&#x2F;logurutest&#x2F;demo5.py&quot;, line 13, in my_function</span><br><span class="line">    return 1 &#x2F; (x + y + z)</span><br><span class="line">                │   │   └ 0</span><br><span class="line">                │   └ 0</span><br><span class="line">                └ 0</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>
<p>因此，用 loguru 可以非常方便地实现日志追踪，debug 效率可能要高上十倍了？<br>另外 loguru 还有很多很多强大的功能，这里就不再一一展开讲解了，更多的内容大家可以看看 loguru 的官方文档详细了解一下：<code>https://loguru.readthedocs.io/en/stable/index.html</code><br>看完之后，是时候把自己的 logging 模块替换成 loguru 啦！</p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask之路(一)</title>
    <url>/2020/04/20/Flask%E4%B9%8B%E8%B7%AF-%E4%B8%80/</url>
    <content><![CDATA[<h2 id="Flask之路-一"><a href="#Flask之路-一" class="headerlink" title="Flask之路(一)"></a>Flask之路(一)</h2><h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h3><p>Flask是一个基于Python开发并且依赖jinja2模板和Werkzeug WSGI服务的一个微型框架，对于Werkzeug本质是Socket服务端，其用于接收http请求并对请求进行预处理，然后触发Flask框架，开发人员基于Flask框架提供的功能对请求进行相应的处理，并返回给用户，如果要返回给用户复杂的内容时，需要借助jinja2模板来实现对模板的处理，即：将模板和数据进行渲染，将渲染后的字符串返回给用户浏览器。</p>
<p>“微”(micro) 并不表示你需要把整个 Web 应用塞进单个 Python 文件（虽然确实可以 ），也不意味着 Flask 在功能上有所欠缺。微框架中的“微”意味着 Flask 旨在保持核心简单而易于扩展。Flask 不会替你做出太多决策——比如使用何种数据库。而那些 Flask 所选择的——比如使用何种模板引擎——则很容易替换。除此之外的一切都由可由你掌握。如此，Flask 可以与您珠联璧合。</p>
<p>默认情况下，Flask 不包含数据库抽象层、表单验证，或是其它任何已有多种库可以胜任的功能。然而，Flask 支持用扩展来给应用添加这些功能，如同是 Flask 本身实现的一样。众多的扩展提供了数据库集成、表单验证、上传处理、各种各样的开放认证技术等功能。Flask 也许是“微小”的，但它已准备好在需求繁杂的生产环境中投入使用。</p>
<h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install flask</span><br></pre></td></tr></table></figure>
<h4 id="2-WSGI实现原理"><a href="#2-WSGI实现原理" class="headerlink" title="2. WSGI实现原理"></a>2. WSGI实现原理</h4><p>Flask依赖werkzeug模块实现了WSGi协议,监听socket的请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from werkzeug.wrappers import Request, Response</span><br><span class="line"></span><br><span class="line">@Request.application</span><br><span class="line">def hello(request):</span><br><span class="line">    return Response(&#39;Hello World!&#39;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    from werkzeug.serving import run_simple</span><br><span class="line">    run_simple(&#39;localhost&#39;, 4000, hello)</span><br><span class="line"></span><br><span class="line">werkzeug</span><br></pre></td></tr></table></figure>

<h4 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3. 基本使用"></a>3. 基本使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return &#39;Hello World!&#39;</span><br><span class="line">    </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br><span class="line">$ curl http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>



<h3 id="二-路由系统源码分析"><a href="#二-路由系统源码分析" class="headerlink" title="二. 路由系统源码分析"></a>二. 路由系统源码分析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">def index():</span><br><span class="line">    return &#39;Hello World!!&#39;</span><br><span class="line"></span><br><span class="line"># app对象的run方法中,self.add_url_rule(rule, endpoint, f, **options)</span><br><span class="line"># 此处的rule是请求的uri路径，endpoint类似于Django中路由系统的name参数，用于反向生成URL,参数f为触发执行的函数fun,此处也可以是class对象，会触发对象的__call__方法</span><br><span class="line">app.add_url_rule(&#39;&#x2F;index&#39;, &#39;index&#39;, index)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    # 1. 请求进来首先会触发run_simple函数运行,同时执行app.__call__方法</span><br><span class="line">    # 封装请求</span><br><span class="line">    # 路由匹配</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h3 id="三-Flask的装饰器"><a href="#三-Flask的装饰器" class="headerlink" title="三. Flask的装饰器"></a>三. Flask的装饰器</h3><h4 id="3-1-装饰器"><a href="#3-1-装饰器" class="headerlink" title="3.1 装饰器"></a>3.1 装饰器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;4&#x2F;15</span><br><span class="line"></span><br><span class="line"># 1. 无参装饰器</span><br><span class="line">def wapper(f):</span><br><span class="line">    def inner(*args, **kwargs):</span><br><span class="line">        return f(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line"># 1. 立即执行wapper函数,并且将被装饰的函数当作参数传递</span><br><span class="line"># 2. 此时的func&#x3D;inner</span><br><span class="line">@wapper</span><br><span class="line">def func(arg):</span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(123)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; 123</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2. 带参数的装饰器,此处为3层的函数嵌套</span><br><span class="line">def outer(num):</span><br><span class="line">    def wapper(f):</span><br><span class="line">        def inner(*args, **kwargs):</span><br><span class="line">            return f(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        return inner</span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    return wapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 首先执行wapper(666)，获得返回值;@wapper;此时@wapper,再执行wapper(func)函数,获得返回值inner，此时:func&#x3D;inner函数</span><br><span class="line">@outer(666)</span><br><span class="line">def func(arg):</span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(&#39;Hello&#39;)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">666</span><br><span class="line">Hello</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-Flask中的路由装饰器"><a href="#3-2-Flask中的路由装饰器" class="headerlink" title="3.2 Flask中的路由装饰器"></a>3.2 Flask中的路由装饰器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)   #app.router函数装返回decorator对象:形入@decorator</span><br><span class="line">def hello_world():</span><br><span class="line">    return &#39;Hello World!&#39;</span><br></pre></td></tr></table></figure>
<p>⚠️  Flask中路由系统使用的就是带参数的装饰器形式,本质是封装成rule对象,添加到app.url_map属性中</p>
<h4 id="3-3-Flask中认证的装饰器用法"><a href="#3-3-Flask中认证的装饰器用法" class="headerlink" title="3.3 Flask中认证的装饰器用法"></a>3.3 Flask中认证的装饰器用法</h4><p>a. functools 模块使用示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import functools</span><br><span class="line">def wapper(func):</span><br><span class="line">    @functools.wraps(func)</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        return func(*args,**kwargs)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@wapper</span><br><span class="line">def index():</span><br><span class="line">    print(&#39;函数内容&#39;)</span><br><span class="line"></span><br><span class="line">@wapper</span><br><span class="line">def order():</span><br><span class="line">    print(&#39;函数内容&#39;)</span><br><span class="line"></span><br><span class="line">print(index.__name__)</span><br><span class="line">print(order.__name__)</span><br></pre></td></tr></table></figure>
<p>b. Flask中应用示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import functools</span><br><span class="line">from flask import Flask,render_template,request,redirect,session</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__,template_folder&#x3D;&quot;templates&quot;)</span><br><span class="line">app.secret_key &#x3D; &#39;as923lrjks9d8fwlkxlduf&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def auth(func):</span><br><span class="line">    @functools.wraps(func)</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        user_info &#x3D; session.get(&#39;user_info&#39;)</span><br><span class="line">        if not user_info:</span><br><span class="line">            return redirect(&#39;&#x2F;login&#39;)</span><br><span class="line">        return func(*args,**kwargs)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;order: inner函数, name: order</span><br><span class="line">    &#x2F;index: inner函数, name: index</span><br><span class="line">&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;order&#39;,methods&#x3D;[&#39;GET&#39;])</span><br><span class="line">@auth</span><br><span class="line">def order():</span><br><span class="line">    user_info &#x3D; session.get(&#39;user_info&#39;)</span><br><span class="line">    if not user_info:</span><br><span class="line">        return redirect(&#39;&#x2F;login&#39;)</span><br><span class="line"></span><br><span class="line">    return render_template(&#39;index.html&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;index&#39;,methods&#x3D;[&#39;GET&#39;])</span><br><span class="line">@auth</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&#39;index.html&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;login&#39;,methods&#x3D;[&#39;GET&#39;,&#39;POST&#39;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">        return render_template(&#39;login.html&#39;)</span><br><span class="line">    else:</span><br><span class="line">        user &#x3D; request.form.get(&#39;user&#39;)</span><br><span class="line">        pwd &#x3D; request.form.get(&#39;pwd&#39;)</span><br><span class="line">        if user &#x3D;&#x3D; &#39;shuke&#39; and pwd &#x3D;&#x3D; &#39;123&#39;:</span><br><span class="line">            session[&#39;user_info&#39;] &#x3D; user</span><br><span class="line">            return redirect(&#39;&#x2F;index&#39;)</span><br><span class="line">        # return render_template(&#39;login.html&#39;,msg &#x3D; &quot;用户名或密码错误&quot;,error &#x3D; &quot;请注册&quot;)</span><br><span class="line">        return render_template(&#39;login.html&#39;,**&#123;&#39;msg&#39;:&#39;用户名或密码错误&#39;&#125;)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;logout&#39;,methods&#x3D;[&#39;GET&#39;])</span><br><span class="line">def logout():</span><br><span class="line">    del session[&#39;user_info&#39;]</span><br><span class="line">    return redirect(&#39;&#x2F;login&#39;)</span><br><span class="line">    </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<p>⚠️  此处,使用auth装饰器的时候多个函数会对应到同一个同一个装饰器函数inner对象,Flask启动会报错;<br>此时可以使用endpoint参数解决此问题,Flask内部默认使用函数的<strong>name</strong>获取的函数名作为endpoint参数;<br>或者利用functools模块保留被装饰函数的元信息;<br>在实际应用中建议使用类似于Django的中间件方式更优雅的方式解决;</p>
<h3 id="四-配置文件"><a href="#四-配置文件" class="headerlink" title="四. 配置文件"></a>四. 配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flask中的配置文件是一个flask.config.Config对象（继承字典）,默认配置为：</span><br><span class="line">    &#123;</span><br><span class="line">        &#39;DEBUG&#39;:                                get_debug_flag(default&#x3D;False),  是否开启Debug模式</span><br><span class="line">        &#39;TESTING&#39;:                              False,                          是否开启测试模式</span><br><span class="line">        &#39;PROPAGATE_EXCEPTIONS&#39;:                 None,                          </span><br><span class="line">        &#39;PRESERVE_CONTEXT_ON_EXCEPTION&#39;:        None,</span><br><span class="line">        &#39;SECRET_KEY&#39;:                           None,</span><br><span class="line">        &#39;PERMANENT_SESSION_LIFETIME&#39;:           timedelta(days&#x3D;31),</span><br><span class="line">        &#39;USE_X_SENDFILE&#39;:                       False,</span><br><span class="line">        &#39;LOGGER_NAME&#39;:                          None,</span><br><span class="line">        &#39;LOGGER_HANDLER_POLICY&#39;:               &#39;always&#39;,</span><br><span class="line">        &#39;SERVER_NAME&#39;:                          None,</span><br><span class="line">        &#39;APPLICATION_ROOT&#39;:                     None,</span><br><span class="line">        &#39;SESSION_COOKIE_NAME&#39;:                  &#39;session&#39;,</span><br><span class="line">        &#39;SESSION_COOKIE_DOMAIN&#39;:                None,</span><br><span class="line">        &#39;SESSION_COOKIE_PATH&#39;:                  None,</span><br><span class="line">        &#39;SESSION_COOKIE_HTTPONLY&#39;:              True,</span><br><span class="line">        &#39;SESSION_COOKIE_SECURE&#39;:                False,</span><br><span class="line">        &#39;SESSION_REFRESH_EACH_REQUEST&#39;:         True,</span><br><span class="line">        &#39;MAX_CONTENT_LENGTH&#39;:                   None,</span><br><span class="line">        &#39;SEND_FILE_MAX_AGE_DEFAULT&#39;:            timedelta(hours&#x3D;12),</span><br><span class="line">        &#39;TRAP_BAD_REQUEST_ERRORS&#39;:              False,</span><br><span class="line">        &#39;TRAP_HTTP_EXCEPTIONS&#39;:                 False,</span><br><span class="line">        &#39;EXPLAIN_TEMPLATE_LOADING&#39;:             False,</span><br><span class="line">        &#39;PREFERRED_URL_SCHEME&#39;:                 &#39;http&#39;,</span><br><span class="line">        &#39;JSON_AS_ASCII&#39;:                        True,</span><br><span class="line">        &#39;JSON_SORT_KEYS&#39;:                       True,</span><br><span class="line">        &#39;JSONIFY_PRETTYPRINT_REGULAR&#39;:          True,</span><br><span class="line">        &#39;JSONIFY_MIMETYPE&#39;:                     &#39;application&#x2F;json&#39;,</span><br><span class="line">        &#39;TEMPLATES_AUTO_RELOAD&#39;:                None,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>方式一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    app.config[&#39;DEBUG&#39;] &#x3D; True</span><br><span class="line"> </span><br><span class="line">    PS： 由于Config对象本质上是字典，所以还可以使用app.config.update(...)</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">方式二：</span><br></pre></td></tr></table></figure>
<pre><code>app.config.from_pyfile(&quot;python文件名称&quot;)
    如：
        settings.py
            DEBUG = True
        app.config.from_pyfile(&quot;settings.py&quot;)

app.config.from_envvar(&quot;环境变量名称&quot;)
    环境变量的值为python文件名称名称，内部调用from_pyfile方法

app.config.from_json(&quot;json文件名称&quot;)
    JSON文件名称，必须是json格式，因为内部会执行json.loads

app.config.from_mapping({&apos;DEBUG&apos;:True})
    字典格式

app.config.from_object(&quot;python类或类的路径&quot;)

    app.config.from_object(&apos;pro_flask.settings.TestingConfig&apos;)

    settings.py 内容

        class Config(object):
            DEBUG = False
            TESTING = False
            DATABASE_URI = &apos;sqlite://:memory:&apos;

        class ProductionConfig(Config):
            DATABASE_URI = &apos;mysql://user@localhost/foo&apos;

        class DevelopmentConfig(Config):
            DEBUG = True

        class TestingConfig(Config):
            TESTING = True</code></pre><p>PS: 从sys.path中已经存在的路径下开始查找</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PS: settings.py文件默认路径要放在程序root_path目录，如果instance_relative_config为True，则就是instance_path目录</span><br><span class="line"></span><br><span class="line">### 五. 路由系统</span><br><span class="line">#### 5.1 路由基本使用</span><br><span class="line">- @app.route(&#39;&#x2F;user&#x2F;&lt;username&gt;&#39;)</span><br><span class="line">- @app.route(&#39;&#x2F;post&#x2F;&lt;int:post_id&gt;&#39;)</span><br><span class="line">- @app.route(&#39;&#x2F;post&#x2F;&lt;float:post_id&gt;&#39;)</span><br><span class="line">- @app.route(&#39;&#x2F;post&#x2F;&lt;path:path&gt;&#39;)</span><br><span class="line">- @app.route(&#39;&#x2F;login&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])</span><br><span class="line"></span><br><span class="line">常用路由系统有以上五种，所有的路由系统都是基于以下对应关系来处理:</span><br></pre></td></tr></table></figure>
<p>DEFAULT_CONVERTERS = {<br>    ‘default’:          UnicodeConverter,<br>    ‘string’:           UnicodeConverter,<br>    ‘any’:              AnyConverter,<br>    ‘path’:             PathConverter,<br>    ‘int’:              IntegerConverter,<br>    ‘float’:            FloatConverter,<br>    ‘uuid’:             UUIDConverter,<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 5.2 注册路由原理</span><br></pre></td></tr></table></figure>
<p>def auth(func):<br>            def inner(<em>args, *</em>kwargs):<br>                print(‘before’)<br>                result = func(<em>args, *</em>kwargs)<br>                print(‘after’)<br>                return result</p>
<pre><code>return inner

@app.route(&apos;/index.html&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;],endpoint=&apos;index&apos;)
@auth
def index():
    return &apos;Index&apos;
或
def index():
    return &quot;Index&quot;

self.add_url_rule(rule=&apos;/index.html&apos;, endpoint=&quot;index&quot;, view_func=index, methods=[&quot;GET&quot;,&quot;POST&quot;])
or
app.add_url_rule(rule=&apos;/index.html&apos;, endpoint=&quot;index&quot;, view_func=index, methods=[&quot;GET&quot;,&quot;POST&quot;])
app.view_functions[&apos;index&apos;] = index
或
def auth(func):
    def inner(*args, **kwargs):
        print(&apos;before&apos;)
        result = func(*args, **kwargs)
        print(&apos;after&apos;)
        return result

return inner

class IndexView(views.View):
    methods = [&apos;GET&apos;]
    decorators = [auth, ]

    def dispatch_request(self):
        print(&apos;Index&apos;)
        return &apos;Index!&apos;

app.add_url_rule(&apos;/index&apos;, view_func=IndexView.as_view(name=&apos;index&apos;))  # name=endpoint
或
class IndexView(views.MethodView):
    methods = [&apos;GET&apos;]
    decorators = [auth, ]

    def get(self):
        return &apos;Index.GET&apos;

    def post(self):
        return &apos;Index.POST&apos;

app.add_url_rule(&apos;/index&apos;, view_func=IndexView.as_view(name=&apos;index&apos;))  # name=endpoint

@app.route和app.add_url_rule参数：
    rule,                       URL规则
    view_func,                  视图函数名称
    defaults=None,              默认值,当URL中无参数，函数需要参数时，使用defaults={&apos;k&apos;:&apos;v&apos;}为函数提供参数
    endpoint=None,              名称，用于反向生成URL，即： url_for(&apos;名称&apos;)
    methods=None,               允许的请求方式，如：[&quot;GET&quot;,&quot;POST&quot;]


    strict_slashes=None,        对URL最后的 / 符号是否严格要求，
                                如：
                                    @app.route(&apos;/index&apos;,strict_slashes=False)，
                                        访问 http://www.xx.com/index/ 或 http://www.xx.com/index均可
                                    @app.route(&apos;/index&apos;,strict_slashes=True)
                                        仅访问 http://www.xx.com/index 
    redirect_to=None,           重定向到指定地址
                                如：
                                    @app.route(&apos;/index/&lt;int:nid&gt;&apos;, redirect_to=&apos;/home/&lt;nid&gt;&apos;)
                                    或
                                    def func(adapter, nid):
                                        return &quot;/home/888&quot;
                                    @app.route(&apos;/index/&lt;int:nid&gt;&apos;, redirect_to=func)
    subdomain=None,             子域名访问
                                        from flask import Flask, views, url_for

                                        app = Flask(import_name=__name__)
                                        app.config[&apos;SERVER_NAME&apos;] = &apos;wupeiqi.com:5000&apos;


                                        @app.route(&quot;/&quot;, subdomain=&quot;admin&quot;)
                                        def static_index():
                                            &quot;&quot;&quot;Flask supports static subdomains
                                            This is available at static.your-domain.tld&quot;&quot;&quot;
                                            return &quot;static.your-domain.tld&quot;

                                        @app.route(&quot;/dynamic&quot;, subdomain=&quot;&lt;username&gt;&quot;)
                                        def username_index(username):
                                            &quot;&quot;&quot;Dynamic subdomains are also supported
                                            Try going to user1.your-domain.tld/dynamic&quot;&quot;&quot;
                                            return username + &quot;.your-domain.tld&quot;

                                        if __name__ == &apos;__main__&apos;:
                                            app.run()</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 5.3 自定义正则路由匹配</span><br></pre></td></tr></table></figure>
<p>from flask import Flask, views, url_for<br>            from werkzeug.routing import BaseConverter</p>
<pre><code>app = Flask(import_name=__name__)


class RegexConverter(BaseConverter):
    &quot;&quot;&quot;
    自定义URL匹配正则表达式
    &quot;&quot;&quot;
    def __init__(self, map, regex):
        super(RegexConverter, self).__init__(map)
        self.regex = regex

    def to_python(self, value):
        &quot;&quot;&quot;
        路由匹配时，匹配成功后传递给视图函数中参数的值
        :param value: 
        :return: 
        &quot;&quot;&quot;
        return int(value)

    def to_url(self, value):
        &quot;&quot;&quot;
        使用url_for反向生成URL时，传递的参数经过该方法处理，返回的值用于生成URL中的参数
        :param value: 
        :return: 
        &quot;&quot;&quot;
        val = super(RegexConverter, self).to_url(value)
        return val

# 添加到flask中
app.url_map.converters[&apos;regex&apos;] = RegexConverter


@app.route(&apos;/index/&lt;regex(&quot;\d+&quot;):nid&gt;&apos;)
def index(nid):
    print(url_for(&apos;index&apos;, nid=&apos;888&apos;))
    return &apos;Index&apos;

if __name__ == &apos;__main__&apos;:
    app.run()</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 五. </span><br><span class="line">1. 模板的使用</span><br><span class="line">Flask使用的是Jinja2模板，所以其语法和Django无差别</span><br><span class="line">2. 自定义模板方法</span><br><span class="line">Flask中自定义模板方法的方式和Bottle相似，创建一个函数并通过参数的形式传入render_template，如：</span><br></pre></td></tr></table></figure>
<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>
</head>
<body>
    <h1>自定义函数</h1>
    

</body>
</html>

<p>html</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"># cat run.py</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from flask import Flask,render_template</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def wupeiqi():</span><br><span class="line">    return &#39;&lt;h1&gt;Wupeiqi&lt;&#x2F;h1&gt;&#39;</span><br><span class="line"> </span><br><span class="line">@app.route(&#39;&#x2F;login&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])</span><br><span class="line">def login():</span><br><span class="line">    return render_template(&#39;login.html&#39;, ww&#x3D;wupeiqi)</span><br><span class="line"> </span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure>
<p>example.html</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;% macro input(name, type&#x3D;&#39;text&#39;, value&#x3D;&#39;&#39;) %&#125;</span><br><span class="line">        &lt;input type&#x3D;&quot;&#123;&#123; type &#125;&#125;&quot; name&#x3D;&quot;&#123;&#123; name &#125;&#125;&quot; value&#x3D;&quot;&#123;&#123; value &#125;&#125;&quot;&gt;</span><br><span class="line">    &#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; input(&#39;n1&#39;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% include &#39;tp.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;asdf&#123;&#123; v.k1&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>注⚠️：Markup等价django的mark_safe</p>
<h3 id="六-请求和响应"><a href="#六-请求和响应" class="headerlink" title="六. 请求和响应"></a>六. 请求和响应</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">    from flask import request</span><br><span class="line">    from flask import render_template</span><br><span class="line">    from flask import redirect</span><br><span class="line">    from flask import make_response</span><br><span class="line"></span><br><span class="line">    app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @app.route(&#39;&#x2F;login.html&#39;, methods&#x3D;[&#39;GET&#39;, &quot;POST&quot;])</span><br><span class="line">    def login():</span><br><span class="line"></span><br><span class="line">        # 请求相关信息</span><br><span class="line">        # request.method</span><br><span class="line">        # request.args</span><br><span class="line">        # request.form</span><br><span class="line">        # request.values</span><br><span class="line">        # request.cookies</span><br><span class="line">        # request.headers</span><br><span class="line">        # request.path</span><br><span class="line">        # request.full_path</span><br><span class="line">        # request.script_root</span><br><span class="line">        # request.url</span><br><span class="line">        # request.base_url</span><br><span class="line">        # request.url_root</span><br><span class="line">        # request.host_url</span><br><span class="line">        # request.host</span><br><span class="line">        # request.files</span><br><span class="line">        # obj &#x3D; request.files[&#39;the_file_name&#39;]</span><br><span class="line">        # obj.save(&#39;&#x2F;var&#x2F;www&#x2F;uploads&#x2F;&#39; + secure_filename(f.filename))</span><br><span class="line"></span><br><span class="line">        # 响应相关信息</span><br><span class="line">        # return &quot;字符串&quot;</span><br><span class="line">        # return render_template(&#39;html模板路径&#39;,**&#123;&#125;)</span><br><span class="line">        # return redirect(&#39;&#x2F;index.html&#39;)</span><br><span class="line"></span><br><span class="line">        # response &#x3D; make_response(render_template(&#39;index.html&#39;))</span><br><span class="line">        # response是flask.wrappers.Response类型</span><br><span class="line">        # response.delete_cookie(&#39;key&#39;)</span><br><span class="line">        # response.set_cookie(&#39;key&#39;, &#39;value&#39;)</span><br><span class="line">        # response.headers[&#39;X-Something&#39;] &#x3D; &#39;A value&#39;</span><br><span class="line">        # return response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return &quot;内容&quot;</span><br><span class="line"></span><br><span class="line">    if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">        app.run()</span><br></pre></td></tr></table></figure>
<h3 id="七-Session"><a href="#七-Session" class="headerlink" title="七. Session"></a>七. Session</h3><p>除请求对象之外，还有一个 session 对象。它允许你在不同请求间存储特定用户的信息。它是在 Cookies 的基础上实现的，并且对 Cookies 进行密钥签名要使用会话，你需要设置一个密钥。<br>设置：session[‘username’] ＝ ‘xxx’<br>删除：session.pop(‘username’, None)</p>
<ol>
<li>基本使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask, session, redirect, url_for, escape, request</span><br><span class="line"> </span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"> </span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    if &#39;username&#39; in session:</span><br><span class="line">        return &#39;Logged in as %s&#39; % escape(session[&#39;username&#39;])</span><br><span class="line">    return &#39;You are not logged in&#39;</span><br><span class="line"> </span><br><span class="line">@app.route(&#39;&#x2F;login&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        session[&#39;username&#39;] &#x3D; request.form[&#39;username&#39;]</span><br><span class="line">        return redirect(url_for(&#39;index&#39;))</span><br><span class="line">    return &#39;&#39;&#39;</span><br><span class="line">        &lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;p&gt;&lt;input type&#x3D;text name&#x3D;username&gt;</span><br><span class="line">            &lt;p&gt;&lt;input type&#x3D;submit value&#x3D;Login&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line"> </span><br><span class="line">@app.route(&#39;&#x2F;logout&#39;)</span><br><span class="line">def logout():</span><br><span class="line">    # remove the username from the session if it&#39;s there</span><br><span class="line">    session.pop(&#39;username&#39;, None)</span><br><span class="line">    return redirect(url_for(&#39;index&#39;))</span><br><span class="line"> </span><br><span class="line"># set the secret key.  keep this really secret:</span><br><span class="line">app.secret_key &#x3D; &#39;A0Zr98j&#x2F;3yX R~XHH!jmN]LWX&#x2F;,?RT&#39;</span><br></pre></td></tr></table></figure></li>
<li>自定义Session<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install Flask-Session</span><br><span class="line">        </span><br><span class="line">        run.py</span><br><span class="line">            from flask import Flask</span><br><span class="line">            from flask import session</span><br><span class="line">            from pro_flask.utils.session import MySessionInterface</span><br><span class="line">            app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">            app.secret_key &#x3D; &#39;A0Zr98j&#x2F;3yX R~XHH!jmN]LWX&#x2F;,?RT&#39;</span><br><span class="line">            app.session_interface &#x3D; MySessionInterface()</span><br><span class="line"></span><br><span class="line">            @app.route(&#39;&#x2F;login.html&#39;, methods&#x3D;[&#39;GET&#39;, &quot;POST&quot;])</span><br><span class="line">            def login():</span><br><span class="line">                print(session)</span><br><span class="line">                session[&#39;user1&#39;] &#x3D; &#39;alex&#39;</span><br><span class="line">                session[&#39;user2&#39;] &#x3D; &#39;alex&#39;</span><br><span class="line">                del session[&#39;user2&#39;]</span><br><span class="line"></span><br><span class="line">                return &quot;内容&quot;</span><br><span class="line"></span><br><span class="line">            if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">                app.run()</span><br><span class="line"></span><br><span class="line">        session.py</span><br><span class="line">            #!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">            # -*- coding:utf-8 -*-</span><br><span class="line">            import uuid</span><br><span class="line">            import json</span><br><span class="line">            from flask.sessions import SessionInterface</span><br><span class="line">            from flask.sessions import SessionMixin</span><br><span class="line">            from itsdangerous import Signer, BadSignature, want_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            class MySession(dict, SessionMixin):</span><br><span class="line">                def __init__(self, initial&#x3D;None, sid&#x3D;None):</span><br><span class="line">                    self.sid &#x3D; sid</span><br><span class="line">                    self.initial &#x3D; initial</span><br><span class="line">                    super(MySession, self).__init__(initial or ())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                def __setitem__(self, key, value):</span><br><span class="line">                    super(MySession, self).__setitem__(key, value)</span><br><span class="line"></span><br><span class="line">                def __getitem__(self, item):</span><br><span class="line">                    return super(MySession, self).__getitem__(item)</span><br><span class="line"></span><br><span class="line">                def __delitem__(self, key):</span><br><span class="line">                    super(MySession, self).__delitem__(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            class MySessionInterface(SessionInterface):</span><br><span class="line">                session_class &#x3D; MySession</span><br><span class="line">                container &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">                def __init__(self):</span><br><span class="line">                    import redis</span><br><span class="line">                    self.redis &#x3D; redis.Redis()</span><br><span class="line"></span><br><span class="line">                def _generate_sid(self):</span><br><span class="line">                    return str(uuid.uuid4())</span><br><span class="line"></span><br><span class="line">                def _get_signer(self, app):</span><br><span class="line">                    if not app.secret_key:</span><br><span class="line">                        return None</span><br><span class="line">                    return Signer(app.secret_key, salt&#x3D;&#39;flask-session&#39;,</span><br><span class="line">                                  key_derivation&#x3D;&#39;hmac&#39;)</span><br><span class="line"></span><br><span class="line">                def open_session(self, app, request):</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                    程序刚启动时执行，需要返回一个session对象</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                    sid &#x3D; request.cookies.get(app.session_cookie_name)</span><br><span class="line">                    if not sid:</span><br><span class="line">                        sid &#x3D; self._generate_sid()</span><br><span class="line">                        return self.session_class(sid&#x3D;sid)</span><br><span class="line"></span><br><span class="line">                    signer &#x3D; self._get_signer(app)</span><br><span class="line">                    try:</span><br><span class="line">                        sid_as_bytes &#x3D; signer.unsign(sid)</span><br><span class="line">                        sid &#x3D; sid_as_bytes.decode()</span><br><span class="line">                    except BadSignature:</span><br><span class="line">                        sid &#x3D; self._generate_sid()</span><br><span class="line">                        return self.session_class(sid&#x3D;sid)</span><br><span class="line"></span><br><span class="line">                    # session保存在redis中</span><br><span class="line">                    # val &#x3D; self.redis.get(sid)</span><br><span class="line">                    # session保存在内存中</span><br><span class="line">                    val &#x3D; self.container.get(sid)</span><br><span class="line"></span><br><span class="line">                    if val is not None:</span><br><span class="line">                        try:</span><br><span class="line">                            data &#x3D; json.loads(val)</span><br><span class="line">                            return self.session_class(data, sid&#x3D;sid)</span><br><span class="line">                        except:</span><br><span class="line">                            return self.session_class(sid&#x3D;sid)</span><br><span class="line">                    return self.session_class(sid&#x3D;sid)</span><br><span class="line"></span><br><span class="line">                def save_session(self, app, session, response):</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                    程序结束前执行，可以保存session中所有的值</span><br><span class="line">                    如：</span><br><span class="line">                        保存到resit</span><br><span class="line">                        写入到用户cookie</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                    domain &#x3D; self.get_cookie_domain(app)</span><br><span class="line">                    path &#x3D; self.get_cookie_path(app)</span><br><span class="line">                    httponly &#x3D; self.get_cookie_httponly(app)</span><br><span class="line">                    secure &#x3D; self.get_cookie_secure(app)</span><br><span class="line">                    expires &#x3D; self.get_expiration_time(app, session)</span><br><span class="line"></span><br><span class="line">                    val &#x3D; json.dumps(dict(session))</span><br><span class="line"></span><br><span class="line">                    # session保存在redis中</span><br><span class="line">                    # self.redis.setex(name&#x3D;session.sid, value&#x3D;val, time&#x3D;app.permanent_session_lifetime)</span><br><span class="line">                    # session保存在内存中</span><br><span class="line">                    self.container.setdefault(session.sid, val)</span><br><span class="line"></span><br><span class="line">                    session_id &#x3D; self._get_signer(app).sign(want_bytes(session.sid))</span><br><span class="line"></span><br><span class="line">                    response.set_cookie(app.session_cookie_name, session_id,</span><br><span class="line">                                        expires&#x3D;expires, httponly&#x3D;httponly,</span><br><span class="line">                                        domain&#x3D;domain, path&#x3D;path, secure&#x3D;secure)</span><br></pre></td></tr></table></figure></li>
<li>第三方Session<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pip3 install redis</span><br><span class="line">pip3 install flask-session</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from flask import Flask, session, redirect</span><br><span class="line">from flask.ext.session import Session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">app.debug &#x3D; True</span><br><span class="line">app.secret_key &#x3D; &#39;asdfasdfasd&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.config[&#39;SESSION_TYPE&#39;] &#x3D; &#39;redis&#39;</span><br><span class="line">from redis import Redis</span><br><span class="line">app.config[&#39;SESSION_REDIS&#39;] &#x3D; Redis(host&#x3D;&#39;192.168.0.94&#39;,port&#x3D;&#39;6379&#39;)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;login&#39;)</span><br><span class="line">def login():</span><br><span class="line">    session[&#39;username&#39;] &#x3D; &#39;alex&#39;</span><br><span class="line">    return redirect(&#39;&#x2F;index&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;index&#39;)</span><br><span class="line">def index():</span><br><span class="line">    name &#x3D; session[&#39;username&#39;]</span><br><span class="line">    return name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<h3 id="八-蓝图-Blueprint"><a href="#八-蓝图-Blueprint" class="headerlink" title="八. 蓝图(Blueprint)"></a>八. 蓝图(Blueprint)</h3>蓝图用于为应用提供目录划分：</li>
</ol>
<ul>
<li>小型应用程序：示例</li>
<li>大型应用程序：示例</li>
<li>其他：<ul>
<li>蓝图URL前缀：xxx = Blueprint(‘account’, <strong>name</strong>,url_prefix=’/xxx’)</li>
<li>蓝图子域名：xxx = Blueprint(‘account’, <strong>name</strong>,subdomain=’admin’)</li>
<li>前提需要给配置SERVER_NAME： app.config[‘SERVER_NAME’] = ‘<a href="http://www.shuke.com:5000&#39;">www.shuke.com:5000&#39;</a><br>访问时：<a href="http://www.shuke.com:5000/login.html" target="_blank" rel="noopener">www.shuke.com:5000/login.html</a></li>
</ul>
</li>
</ul>
<h3 id="九-闪现-message"><a href="#九-闪现-message" class="headerlink" title="九. 闪现(message)"></a>九. 闪现(message)</h3><p>message是一个基于Session实现的用于保存数据的集合，其特点是：使用一次就删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask, flash, redirect, render_template, request, get_flashed_messages</span><br><span class="line"></span><br><span class="line">        app &#x3D; Flask(__name__)</span><br><span class="line">        app.secret_key &#x3D; &#39;some_secret&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @app.route(&#39;&#x2F;&#39;)</span><br><span class="line">        def index1():</span><br><span class="line">            messages &#x3D; get_flashed_messages()</span><br><span class="line">            print(messages)</span><br><span class="line">            return &quot;Index1&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @app.route(&#39;&#x2F;set&#39;)</span><br><span class="line">        def index2():</span><br><span class="line">            v &#x3D; request.args.get(&#39;p&#39;)</span><br><span class="line">            flash(v)</span><br><span class="line">            return &#39;ok&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">            app.run()</span><br></pre></td></tr></table></figure>

<h3 id="十-中间件"><a href="#十-中间件" class="headerlink" title="十. 中间件"></a>十. 中间件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask, flash, redirect, render_template, request</span><br><span class="line"> </span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">app.secret_key &#x3D; &#39;some_secret&#39;</span><br><span class="line"> </span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index1():</span><br><span class="line">    return render_template(&#39;index.html&#39;)</span><br><span class="line"> </span><br><span class="line">@app.route(&#39;&#x2F;set&#39;)</span><br><span class="line">def index2():</span><br><span class="line">    v &#x3D; request.args.get(&#39;p&#39;)</span><br><span class="line">    flash(v)</span><br><span class="line">    return &#39;ok&#39;</span><br><span class="line"> </span><br><span class="line">class MiddleWare:</span><br><span class="line">    def __init__(self,wsgi_app):</span><br><span class="line">        self.wsgi_app &#x3D; wsgi_app</span><br><span class="line"> </span><br><span class="line">    def __call__(self, *args, **kwargs):</span><br><span class="line"> </span><br><span class="line">        return self.wsgi_app(*args, **kwargs)</span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.wsgi_app &#x3D; MiddleWare(app.wsgi_app)</span><br><span class="line">    app.run(port&#x3D;9999)</span><br></pre></td></tr></table></figure>

<h3 id="十一-请求扩展"><a href="#十一-请求扩展" class="headerlink" title="十一. 请求扩展"></a>十一. 请求扩展</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from flask import Flask, Request, render_template</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__, template_folder&#x3D;&#39;templates&#39;)</span><br><span class="line">app.debug &#x3D; True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.before_first_request</span><br><span class="line">def before_first_request1():</span><br><span class="line">    print(&#39;before_first_request1&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.before_first_request</span><br><span class="line">def before_first_request2():</span><br><span class="line">    print(&#39;before_first_request2&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.before_request</span><br><span class="line">def before_request1():</span><br><span class="line">    Request.nnn &#x3D; 123</span><br><span class="line">    print(&#39;before_request1&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.before_request</span><br><span class="line">def before_request2():</span><br><span class="line">    print(&#39;before_request2&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.after_request</span><br><span class="line">def after_request1(response):</span><br><span class="line">    print(&#39;before_request1&#39;, response)</span><br><span class="line">    return response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.after_request</span><br><span class="line">def after_request2(response):</span><br><span class="line">    print(&#39;before_request2&#39;, response)</span><br><span class="line">    return response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.errorhandler(404)</span><br><span class="line">def page_not_found(error):</span><br><span class="line">    return &#39;This page does not exist&#39;, 404</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.template_global()</span><br><span class="line">def sb(a1, a2):</span><br><span class="line">    return a1 + a2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.template_filter()</span><br><span class="line">def db(a1, a2, a3):</span><br><span class="line">    return a1 + a2 + a3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return render_template(&#39;hello.html&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h3 id="十二-Flask插件"><a href="#十二-Flask插件" class="headerlink" title="十二. Flask插件"></a>十二. Flask插件</h3><ul>
<li>WTForms    </li>
<li>SQLAchemy</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.cnblogs.com/wupeiqi/articles/7552008.html" target="_blank" rel="noopener">Flask-武沛齐-博客园</a><br><a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener">欢迎使用 Flask — Flask 0.10.1 文档</a><br><a href="http://flask.pocoo.org/docs/0.12/" target="_blank" rel="noopener">Welcome to Flask — Flask Documentation  (0.12)</a><br><a href="https://wizardforcel.gitbooks.io/explore-flask/content/index.html" target="_blank" rel="noopener">Flask 之旅</a> </p>
]]></content>
      <categories>
        <category>Flask</category>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-file Example</title>
    <url>/2020/04/20/Jenkins-file-Example/</url>
    <content><![CDATA[<h2 id="Jenkins-file-example"><a href="#Jenkins-file-example" class="headerlink" title="Jenkins file example"></a>Jenkins file example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">properties([buildDiscarder(logRotator(artifactNumToKeepStr: &#39;10&#39;, numToKeepStr: &#39;10&#39;))])</span><br><span class="line">node(&#39;build&#39;) &#123;</span><br><span class="line">    def serviceName  &#x3D; &quot;&quot;</span><br><span class="line">    def warFilePath &#x3D; [</span><br><span class="line">         &#39;external-api-web&#x2F;target&#x2F;external-api-web-1.0-SNAPSHOT.jar&#39;</span><br><span class="line">    ]</span><br><span class="line">    def artifactsPath &#x3D; &quot;devops-artifacts&quot;</span><br><span class="line">    def artifactOssPath &#x3D; &quot;bi&#x2F;$&#123; env.JOB_NAME &#125;&quot;</span><br><span class="line">    sh &quot;echo $&#123; env.JOB_NAME &#125;&quot;</span><br><span class="line">    def tempFolder &#x3D; &quot;&#x2F;tmp&#x2F;$&#123; env.JOB_NAME &#125;&quot;</span><br><span class="line">    def git_commit_id &#x3D; &quot;&quot;</span><br><span class="line">    def artifact &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">    stage(&#39;Preparation&#39;) &#123;</span><br><span class="line">        deleteDir()</span><br><span class="line">        sh &quot;rm -rf $&#123; tempFolder &#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        stage(&#39;Clone from SCM&#39;) &#123;</span><br><span class="line">            &#x2F;&#x2F; checkout scm</span><br><span class="line">            checkout poll: false,</span><br><span class="line">                     scm: [$class: &#39;GitSCM&#39;,</span><br><span class="line">                           branches: [[name: &#39;master&#39;]],</span><br><span class="line">                                       doGenerateSubmoduleConfigurations: false,</span><br><span class="line">                                       submoduleCfg: [],</span><br><span class="line">                                       userRemoteConfigs: [[credentialsId: &#39;7bc6cda9-a250-4d99-962c-e2ede002db06&#39;,</span><br><span class="line">                                                            url: &#39;git@git.wecash.net:bi&#x2F;external-api.git&#39;]]]</span><br><span class="line">            git_commit_id &#x3D; sh(returnStdout: true, script: &#39;git rev-parse --short HEAD&#39;).trim() &#x2F;&#x2F;需要获取shell返回值操作</span><br><span class="line">            git_committer &#x3D; sh(returnStdout: true, script: &quot;git log -1 --format&#x3D;&#39;%ae&#39;&quot;).trim()</span><br><span class="line">            sh &quot;echo $&#123; git_committer &#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(&#39;Build&#39;) &#123;</span><br><span class="line">           withMaven(mavenSettingsConfig: &#39;02e95d2b-6bb6-457d-943f-13c63095e500&#39;,</span><br><span class="line">                  globalMavenSettingsConfig: &#39;bfa90212-2742-4611-aa71-8e0ec76d0c28&#39;,</span><br><span class="line">                  jdk: &#39;Oracle JDK 8&#39;, maven: &#39;Maven 3&#39;) &#123;</span><br><span class="line">                switch(env.BRANCH_NAME) &#123;</span><br><span class="line">                    case &quot;master&quot;:</span><br><span class="line">                        sh &quot;echo this is master branch.&quot;</span><br><span class="line">                        sh &quot;mvn clean install -Pprod -Dmaven.test.skip&#x3D;true&quot;</span><br><span class="line">                        break</span><br><span class="line">                    case &quot;dev&quot;:</span><br><span class="line">                        sh &quot;echo this is dev branch.&quot;</span><br><span class="line">                        sh &quot;mvn clean install -Pdev -Dmaven.test.skip&#x3D;true&quot;</span><br><span class="line">                        break</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(&#39;Run Tests&#39;) &#123;</span><br><span class="line">            sh &quot;echo &#39;No tests to do.&#39;&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(&#39;Update to Aliyun OSS&#39;) &#123;</span><br><span class="line">            sh &quot;mkdir -p $&#123; tempFolder &#125;&quot;</span><br><span class="line">            sh &quot;echo $&#123; env.JOB_NAME &#125;&quot;</span><br><span class="line">            sh &quot; echo $&#123; artifactOssPath &#125;&quot;</span><br><span class="line">            for ( servicePath in warFilePath ) &#123;</span><br><span class="line">                serviceName &#x3D; sh(returnStdout: true, script: &quot;basename $&#123; servicePath &#125; | cut -d . -f 1&quot;).trim()</span><br><span class="line">                serviceFullName &#x3D; sh(returnStdout: true, script: &quot;basename $&#123; servicePath &#125;&quot;).trim()</span><br><span class="line">                sh &quot;mv $&#123; servicePath &#125; $&#123; tempFolder &#125;&#x2F;$&#123; serviceFullName &#125;&quot;</span><br><span class="line">                artifact &#x3D; &quot;$&#123; serviceName &#125;_$&#123; env.BUILD_NUMBER &#125;-$&#123; env.BRANCH_NAME &#125;-$&#123; git_commit_id &#125;.tar.gz&quot;</span><br><span class="line">                sh &quot;mkdir -p $&#123; artifactsPath &#125; &amp;&amp; tar czf $&#123; artifactsPath &#125;&#x2F;$&#123; artifact &#125; -C $&#123; tempFolder &#125; $&#123; serviceFullName &#125;&quot;</span><br><span class="line">                sh &quot;upload-flash -f $&#123; artifactsPath &#125;&#x2F;$&#123; artifact &#125; -t $&#123; artifactOssPath &#125;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(&#39;Archive artifacts&#39;) &#123;</span><br><span class="line">            archiveArtifacts allowEmptyArchive: true, artifacts: &quot;$&#123; artifactsPath &#125;&#x2F;*&quot;, fingerprint: true, onlyIfSuccessful: true</span><br><span class="line">            currentBuild.result &#x3D; &#39;SUCCESS&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">        currentBuild.result &#x3D; &quot;FAILED&quot;</span><br><span class="line">        throw e</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">&#x2F;&#x2F;        notifyBuild(currentBuild.result,git_committer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def notifyBuild(String buildStatus &#x3D; &#39;STARTED&#39;,String GitCommitter) &#123;</span><br><span class="line">  &#x2F;&#x2F; build status of null means successful</span><br><span class="line">  buildStatus &#x3D;  buildStatus ?: &#39;SUCCESSFUL&#39;</span><br><span class="line"></span><br><span class="line">  def subject &#x3D; &quot;$&#123;buildStatus&#125;: Job &#39;$&#123;env.JOB_NAME&#125; [$&#123;env.BUILD_NUMBER&#125;]&#39;&quot;</span><br><span class="line">  def summary &#x3D; &quot;$&#123;subject&#125; ($&#123;env.BUILD_URL&#125;)&quot;</span><br><span class="line">  def details &#x3D; &quot;&quot;&quot;STARTED: Job &#39;$&#123;env.JOB_NAME&#125; [BUILD_NUMBER:$&#123;env.BUILD_NUMBER&#125;]&#39;</span><br><span class="line">                   Check console output at &quot;$&#123;env.BUILD_URL&#125;&quot;&gt;$&#123;env.JOB_NAME&#125; [$&#123;env.BUILD_NUMBER&#125;]&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Send notifications</span><br><span class="line">  mail (</span><br><span class="line">      to: GitCommitter,</span><br><span class="line">      subject: subject,</span><br><span class="line">      body: details,</span><br><span class="line">      recipientProviders: [[$class: &#39;DevelopersRecipientProvider&#39;]]</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins file 构建示例</title>
    <url>/2020/04/20/Jenkins-file-%E6%9E%84%E5%BB%BA%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="Jenkins-file-构建示例"><a href="#Jenkins-file-构建示例" class="headerlink" title="Jenkins file 构建示例"></a>Jenkins file 构建示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;pipeline &#123;</span><br><span class="line">    &#x2F;&#x2F;在任何可用的代理上执行Pipeline</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    agent &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">            label &quot;PTtest&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    options &#123;</span><br><span class="line">        buildDiscarder(logRotator(numToKeepStr: &#39;5&#39;))</span><br><span class="line">        disableConcurrentBuilds()</span><br><span class="line">    &#125;</span><br><span class="line">    tools &#123;</span><br><span class="line">        jdk &#39;Oracle JDK 8&#39;</span><br><span class="line">        maven &#39;Maven 3&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    environment &#123;</span><br><span class="line">        def serviceName  &#x3D; &quot;&quot;</span><br><span class="line">        &#x2F;&#x2F; hosts must be splited by dot</span><br><span class="line">        def warFilePath &#x3D; &#39;mywo-crud-provider&#x2F;target&#x2F;mywo-crud-provider.war&#39;</span><br><span class="line">        def hosts &#x3D; &quot;10.41.118.137&quot;</span><br><span class="line">        def deploy_user &#x3D; &quot;app-deploy&quot;</span><br><span class="line">        def artifactsPath &#x3D; &quot;devops-artifacts&quot;</span><br><span class="line">        def department &#x3D; &quot;meiwozufang&quot;</span><br><span class="line">        def artifactOssPath &#x3D; &quot;$&#123; department &#125;&#x2F;$&#123; env.JOB_NAME &#125;&quot;</span><br><span class="line">        def tempFolder &#x3D; &quot;$&#123; WORKSPACE &#125;&#x2F;$&#123; env.JOB_NAME &#125;&#x2F;$&#123; env.BUILD_NUMBER &#125;&quot;</span><br><span class="line">        def target_dir &#x3D; &quot;&#x2F;data&#x2F;services&#x2F;tomcat-mywo-crud-8090&quot;</span><br><span class="line">        def git_commit_id &#x3D; &quot;&quot;</span><br><span class="line">        def artifact &#x3D; &quot;&quot;</span><br><span class="line">        def jmeterHome &#x3D; &quot;&#x2F;home&#x2F;jenkins&#x2F;apache-jmeter-3.1&quot;</span><br><span class="line">        def antHome &#x3D; &quot;&#x2F;home&#x2F;jenkins&#x2F;apache-ant-1.9.9&quot;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#39;Preparation&#39;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &quot;rm -rf &#x2F;tmp&#x2F;$&#123; env.JOB_NAME &#125;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;Checkout code&#39;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;starting fetchCode......&quot;</span><br><span class="line">                checkout scm</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;SonarQube analysis&#39;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;starting codeAnalyze......&quot;</span><br><span class="line">                script &#123;</span><br><span class="line">                    echo &quot;starting script......&quot;</span><br><span class="line">                    def sonarqubeScannerHome &#x3D; tool name: &#39;SonarQube Scanner&#39;</span><br><span class="line">                    withSonarQubeEnv(&#39;SonarQube-Public&#39;) &#123;</span><br><span class="line">                        sh &quot;$&#123;sonarqubeScannerHome&#125;&#x2F;bin&#x2F;sonar-scanner&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> &#x2F;&#x2F;       stage(&quot;SonarQube Quality Gate&quot;) &#123;</span><br><span class="line"> &#x2F;&#x2F;           when &#123;</span><br><span class="line"> &#x2F;&#x2F;               branch fuck</span><br><span class="line"> &#x2F;&#x2F;           &#125;</span><br><span class="line"> &#x2F;&#x2F;           steps &#123;</span><br><span class="line"> &#x2F;&#x2F;               echo &quot;starting waitForQualityGate......&quot;</span><br><span class="line"> &#x2F;&#x2F;               script &#123;</span><br><span class="line"> &#x2F;&#x2F;                   echo &quot;starting script......&quot;</span><br><span class="line"> &#x2F;&#x2F;                    timeout(time: 1, unit: &#39;HOURS&#39;) &#123;</span><br><span class="line"> &#x2F;&#x2F;                      def qg &#x3D; waitForQualityGate()</span><br><span class="line"> &#x2F;&#x2F;                      if (qg.status !&#x3D; &#39;OK&#39;) &#123;</span><br><span class="line"> &#x2F;&#x2F;                         error &quot;Pipeline aborted due to quality gate failure: $&#123;qg.status&#125;&quot;</span><br><span class="line"> &#x2F;&#x2F;                      &#125;</span><br><span class="line"> &#x2F;&#x2F;                    &#125;</span><br><span class="line"> &#x2F;&#x2F;               &#125;</span><br><span class="line"> &#x2F;&#x2F;           &#125;</span><br><span class="line"> &#x2F;&#x2F;       &#125;</span><br><span class="line"></span><br><span class="line">        stage(&#39;Compile branch master&#39;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                branch &#39;master&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                withMaven(globalMavenSettingsConfig: &#39;bfa90212-2742-4611-aa71-8e0ec76d0c28&#39;, jdk: &#39;Oracle JDK 8&#39;, maven: &#39;Maven 3&#39;, mavenSettingsConfig: &#39;02e95d2b-6bb6-457d-943f-13c63095e500&#39;) &#123;</span><br><span class="line">                    sh &quot;mvn -Dmaven.test.skip&#x3D;true  clean package -U -DskipTests&#x3D;True&quot;</span><br><span class="line">                    sh &quot;echo this is master branch.&quot;</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;Compile branch test&#39;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                branch &#39;test&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                withMaven(globalMavenSettingsConfig: &#39;bfa90212-2742-4611-aa71-8e0ec76d0c28&#39;, jdk: &#39;Oracle JDK 8&#39;, maven: &#39;Maven 3&#39;, mavenSettingsConfig: &#39;02e95d2b-6bb6-457d-943f-13c63095e500&#39;) &#123;</span><br><span class="line">                    sh &quot;mvn -Dmaven.test.skip&#x3D;true  clean package -U -DskipTests&#x3D;True&quot;</span><br><span class="line">                    sh &quot;echo this is test branch.&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;Package &amp; Upload to OSS&#39;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &quot;mkdir -p $&#123; tempFolder &#125;&quot;</span><br><span class="line">                script &#123;</span><br><span class="line">                    sh &quot;echo Upload to OSS.&quot;</span><br><span class="line">                    git_commit_id &#x3D; sh(returnStdout: true, script: &#39;git rev-parse --short HEAD&#39;).trim() &#x2F;&#x2F;需要获取shell返回值操作</span><br><span class="line">                    serviceName &#x3D; sh(returnStdout: true, script: &quot;basename $&#123; warFilePath &#125; | cut -d . -f 1&quot;).trim()</span><br><span class="line">                    sh &quot;mv $&#123; warFilePath &#125; $&#123; tempFolder &#125;&#x2F;ROOT.war&quot;</span><br><span class="line">                    artifact &#x3D; &quot;$&#123; serviceName &#125;_$&#123; env.BUILD_NUMBER &#125;-$&#123; env.BRANCH_NAME &#125;-$&#123; git_commit_id &#125;.tar.gz&quot;</span><br><span class="line">                    sh &quot;mkdir -p $&#123; artifactsPath &#125; &amp;&amp; tar czf $&#123; artifactsPath &#125;&#x2F;$&#123; artifact &#125; -C $&#123; tempFolder &#125; ROOT.war&quot;</span><br><span class="line">                    sh &quot;upload-flash -f $&#123; artifactsPath &#125;&#x2F;$&#123; artifact &#125; -t $&#123; artifactOssPath &#125;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;Deploy Package&#39;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                branch &#39;test&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    echo &quot;starting deploy......&quot;</span><br><span class="line">                    &#x2F;&#x2F; 运维人员维护私有仓库，保存ansible-playbook的配置文件</span><br><span class="line">                    git([url: &#39;git@git.shuke.com:shuke&#x2F;ansiblefiles.git&#39;, branch: &#39;master&#39;, credentialsId: &#39;7bc6cda9-a250-4d99-962c-e2ede002db06&#39;])</span><br><span class="line">                    withDockerRegistry([credentialsId: &#39;82a6a986-3f85-49f9-a926-0edf499fd1e3&#39;, url: &#39;https:&#x2F;&#x2F;dockerhub.shuke.com:5000&#39;]) &#123;</span><br><span class="line">                        withDockerContainer([image: &#39;dockerhub.shuke.com:5000&#x2F;test&#x2F;ansible_deploy:1.0.4&#39;]) &#123;</span><br><span class="line">                            sh &quot;ansible-playbook -i hosts --extra-vars &#39;warFilePath&#x3D;$&#123; tempFolder &#125;&#x2F;ROOT.war target_dir&#x3D;$&#123; target_dir &#125;&#39; -vv deploy_war.yml -l $&#123; hosts &#125;&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;Integration Test&#39;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                branch &#39;test&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            parallel &#123;</span><br><span class="line">                stage(&#39;API Test&#39;) &#123;</span><br><span class="line">                    steps &#123;</span><br><span class="line">                        echo &quot;starting API......&quot;  </span><br><span class="line">                        echo &quot;starting fetchAPI......&quot;</span><br><span class="line">                        dir(&#39;API&#39;) &#123;</span><br><span class="line">                            echo &quot;starting APIScript......&quot;</span><br><span class="line">                            git([url: &#39;git@git.shuke.com:api_test&#x2F;RentHouse.git&#39;, branch: &#39;master&#39;, credentialsId: &#39;7726e85b-f455-40d1-b12c-447ecac70f23&#39;])</span><br><span class="line">                            script &#123;</span><br><span class="line">                                try &#123;</span><br><span class="line">                                    withDockerRegistry([credentialsId: &#39;82a6a986-3f85-49f9-a926-0edf499fd1e3&#39;, url: &#39;https:&#x2F;&#x2F;dockerhub.shuke.com:5000&#39;]) &#123;</span><br><span class="line">                                        withDockerContainer([image: &#39;dockerhub.shuke.com:5000&#x2F;test&#x2F;robotframework:1.0.1&#39;]) &#123;</span><br><span class="line">                                            sh &quot;pybot RentHouse_API_Test&#x2F;test&quot;</span><br><span class="line">                                        &#125; </span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;catch (exc) &#123;</span><br><span class="line">                                   echo &#39;Something failed, I should sound the klaxons!&#39;</span><br><span class="line">                                   emailContent &#x3D;  &quot;API执行过程中报错了！！&quot;</span><br><span class="line">                                &#125;finally&#123;</span><br><span class="line">                                  sh &quot;cp -r .&#x2F;output.xml &#x2F;home&#x2F;jenkins&#x2F;public&#x2F;outputRentHouse_API_Prduction.xml&quot;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">&#x2F;&#x2F;                stage(&#39;UI&#39;) &#123;</span><br><span class="line">&#x2F;&#x2F;                    steps &#123;</span><br><span class="line">&#x2F;&#x2F;                      echo &quot;starting UI......&quot;</span><br><span class="line">&#x2F;&#x2F;                    &#x2F;&#x2F;   测试闪银UI</span><br><span class="line">&#x2F;&#x2F;                        dir(&#39;UI&#39;) &#123;</span><br><span class="line">&#x2F;&#x2F;                            git([url: &#39;git@git.shuke.com:ui_test&#x2F;Wecash_RentalHouse.git&#39;, branch: &#39;master&#39;, credentialsId: &#39;7726e85b-f455-40d1-b12c-447ecac70f23&#39;])</span><br><span class="line">&#x2F;&#x2F;                            script &#123;</span><br><span class="line">&#x2F;&#x2F;                                echo &quot;starting UIScript......&quot;</span><br><span class="line">&#x2F;&#x2F;                                try &#123;</span><br><span class="line">&#x2F;&#x2F;                                   &#x2F;&#x2F;sh &quot;cd &#x2F;gg&quot;</span><br><span class="line">&#x2F;&#x2F;                                   echo &quot;starting UIScript......&quot;</span><br><span class="line">&#x2F;&#x2F;                                   &#x2F;&#x2F; 执行速度太慢，先注释代码</span><br><span class="line">&#x2F;&#x2F;                                   withDockerRegistry([credentialsId: &#39;82a6a986-3f85-49f9-a926-0edf499fd1e3&#39;, url: &#39;https:&#x2F;&#x2F;dockerhub.shuke.com:5000&#39;]) &#123;</span><br><span class="line">&#x2F;&#x2F;                                        withDockerContainer([image: &#39;dockerhub.shuke.com:5000&#x2F;test&#x2F;python-chromedriver:2.7-alpine3.7-selenium&#39;]) &#123;</span><br><span class="line">&#x2F;&#x2F;                                            sh &quot;python TestSuite&#x2F;Runner.py All All business-renthouse&quot;</span><br><span class="line">&#x2F;&#x2F;                                        &#125;</span><br><span class="line">&#x2F;&#x2F;                                    &#125;</span><br><span class="line">&#x2F;&#x2F;                                    sh &quot;&#x2F;usr&#x2F;bin&#x2F;python TestSuite&#x2F;Runner.py All All business-renthouse&quot;</span><br><span class="line">&#x2F;&#x2F;                                &#125;catch (exc) &#123;</span><br><span class="line">&#x2F;&#x2F;                                   echo &#39;Something failed, I should sound the klaxons!&#39;</span><br><span class="line">&#x2F;&#x2F;                                   emailContent &#x3D; &quot;UI执行过程中报错了！！&quot;</span><br><span class="line">&#x2F;&#x2F;                                &#125;</span><br><span class="line">&#x2F;&#x2F;                            &#125;</span><br><span class="line">&#x2F;&#x2F;                        &#125;</span><br><span class="line">&#x2F;&#x2F;                    &#125;</span><br><span class="line">&#x2F;&#x2F;                &#125;</span><br><span class="line">                stage(&#39;PT&#39;) &#123;</span><br><span class="line">                    steps &#123;</span><br><span class="line">                        echo &quot;starting PT......&quot;</span><br><span class="line">                        dir(&#39;PT&#39;) &#123;</span><br><span class="line">                            git credentialsId: &#39;7726e85b-f455-40d1-b12c-447ecac70f23&#39;, url: &#39;git@git.shuke.com:p_test&#x2F;MeiWo.git&#39;</span><br><span class="line">                        &#125;</span><br><span class="line">                        dir(&#39;Tools&#39;) &#123;</span><br><span class="line">                            script &#123;</span><br><span class="line">                                echo &quot;starting PTScript......&quot;</span><br><span class="line">                                git([url: &#39;git@git.shuke.com:gonghui&#x2F;script.git&#39;, branch: &#39;master&#39;, credentialsId: &#39;7726e85b-f455-40d1-b12c-447ecac70f23&#39;])</span><br><span class="line">                                try &#123;</span><br><span class="line">                                    withEnv([&quot;JAVA_HOME&#x3D;$&#123;tool &#39;Oracle JDK 8&#39;&#125;&quot;]) &#123;</span><br><span class="line">                                        sh &quot;$&#123;antHome&#125;&#x2F;bin&#x2F;ant -f $&#123; WORKSPACE &#125;&#x2F;Tools&#x2F;PerformFilesWithPipline&#x2F;build.xml -Dname&#x3D;MeiWo -Denv&#x3D;Test -DJOB_NAME&#x3D;$&#123;JOB_NAME&#125; -DWORKSPACE&#x3D;$&#123;WORKSPACE&#125; -DjmeterHome&#x3D;$&#123;jmeterHome&#125; run&quot;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    echo &quot;starting PTAnalyze......&quot;</span><br><span class="line">                                    sh &quot;python $&#123; WORKSPACE &#125;&#x2F;Tools&#x2F;PerformFilesWithPipline&#x2F;jmeterQYWeiXinWithTimeoutArgu.py $&#123; WORKSPACE &#125;&#x2F;PT&#x2F;results&#x2F; MeiWo 2 5 500 4000&quot;</span><br><span class="line">                                    sh &quot;cp -r $&#123; WORKSPACE &#125;&#x2F;PT&#x2F;results&#x2F;ParseOri.html &#x2F;home&#x2F;jenkins&#x2F;public&#x2F;&quot;</span><br><span class="line">                                &#125;catch (exc) &#123;</span><br><span class="line">                                    echo &#39;PT执行报错了!!&#39;</span><br><span class="line">                                    emailContent &#x3D; &quot;PT执行过程中报错了！！&quot;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;conformReport&amp;noticify&#39;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                branch &#39;test&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                 echo &quot;starting email......&quot;</span><br><span class="line">                 </span><br><span class="line">                dir(&#39;conformresult&#39;) &#123;</span><br><span class="line">                    script&#123;</span><br><span class="line">                        git([url: &#39;git@git.shuke.com:gonghui&#x2F;script.git&#39;, branch: &#39;master&#39;, credentialsId: &#39;7726e85b-f455-40d1-b12c-447ecac70f23&#39;])</span><br><span class="line">                        withDockerRegistry([credentialsId: &#39;82a6a986-3f85-49f9-a926-0edf499fd1e3&#39;, url: &#39;https:&#x2F;&#x2F;dockerhub.shuke.com:5000&#39;]) &#123;</span><br><span class="line">                            withDockerContainer([image: &#39;dockerhub.shuke.com:5000&#x2F;test&#x2F;python3.6.5:1.0.0&#39;,args: &#39;-v &#x2F;data&#x2F;docker&#x2F;jenkins-slave-prod&#x2F;public:&#x2F;home&#x2F;jenkins&#x2F;public&#39;]) &#123;</span><br><span class="line">                                sh &quot;python3 parseScript&#x2F;conformReport.py &#x2F;home&#x2F;jenkins&#x2F;public $&#123; email_list &#125; $&#123;JOB_NAME&#125;-Build&#x2F;&#x2F;$&#123;BUILD_ID&#125;-&quot;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            echo &#39;always!&#39;</span><br><span class="line">            deleteDir()</span><br><span class="line">        &#125;</span><br><span class="line">        success &#123;</span><br><span class="line">            emailext body: &quot;Pipeline Success: Please Go to deploy if you pushed master just now&quot;,</span><br><span class="line">                recipientProviders: [[$class: &#39;DevelopersRecipientProvider&#39;], [$class: &#39;RequesterRecipientProvider&#39;]],</span><br><span class="line">                subject: &quot;&#39;$&#123;JOB_NAME&#125;&#39; ($&#123;BUILD_NUMBER&#125;)times SUCCESS&quot;,</span><br><span class="line">                to: &#39;&#39;</span><br><span class="line">            echo &#39;success!&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            emailext body: &quot;Pipeline error: Please go to $&#123;BUILD_URL&#125; and verify the build \n $&#123; emailContent &#125;&quot;,</span><br><span class="line">                recipientProviders: [[$class: &#39;DevelopersRecipientProvider&#39;], [$class: &#39;RequesterRecipientProvider&#39;]],</span><br><span class="line">                subject: &quot;&#39;$&#123;JOB_NAME&#125;&#39; ($&#123;BUILD_NUMBER&#125;)times FAILED&quot;,</span><br><span class="line">                to: &#39;&#39;</span><br><span class="line">            echo &#39;failure!&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        unstable &#123;</span><br><span class="line">            echo &#39;unstable!&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        changed &#123;</span><br><span class="line">            echo &#39;changed!&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Jenkins-python-deploy</title>
    <url>/2020/04/20/Jenkins-python-deploy/</url>
    <content><![CDATA[<h2 id="Jenkins-python-deploy"><a href="#Jenkins-python-deploy" class="headerlink" title="Jenkins python deploy"></a>Jenkins python deploy</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">echo $WORKSPACE</span><br><span class="line">PROJECT_NAME&#x3D;$&#123;JOB_NAME#*-&#125;</span><br><span class="line">PLAYBOOK_PATH&#x3D;$&#123;WORKSPACE&#125;&#x2F;..&#x2F;brazil_ansible_playbook</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 部署</span><br><span class="line">cd $&#123;PLAYBOOK_PATH&#125;</span><br><span class="line">ansible-playbook -l $&#123;Host&#125; \</span><br><span class="line">-i $&#123;PLAYBOOK_PATH&#125;&#x2F;inventory&#x2F;brazil  \</span><br><span class="line">$&#123;PLAYBOOK_PATH&#125;&#x2F;python_deploy.yml \</span><br><span class="line">-e &quot;&#123;&#39;deploy_from&#39;: &#39;$&#123;WORKSPACE&#125;&#39;,&#39;deploy_dest&#39;:&#39;&#x2F;data&#x2F;services&#x2F;$&#123;PROJECT_NAME&#125;&#39;,&#39;project_name&#39;: &#39;$&#123;PROJECT_NAME&#125;&#39;, &#39;python_version&#39;: &#39;3.6&#39;,&#39;conda_env&#39;: &#39;$&#123;PROJECT_NAME&#125;&#39;,&#39;task_name&#39;: &#39;gunicorn&#39;, &#39;run_file&#39;: &#39;server.py&#39;&#125;&quot; --tags  update_code,envs_init</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># RESTART</span><br><span class="line">ansible -i $&#123;PLAYBOOK_PATH&#125;&#x2F;inventory&#x2F;brazil $&#123;Host&#125; -m shell -a &quot;supervisorctl restart $&#123;PROJECT_NAME&#125;&quot; -b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># STATUS</span><br><span class="line">ansible -i $&#123;PLAYBOOK_PATH&#125;&#x2F;inventory&#x2F;brazil $&#123;Host&#125; -m shell -a &quot;supervisorctl status $&#123;PROJECT_NAME&#125;&quot; -b</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-python-api</title>
    <url>/2020/04/20/Jenkins-python-api/</url>
    <content><![CDATA[<h1 id="Jenkins-python-api"><a href="#Jenkins-python-api" class="headerlink" title="Jenkins-python-api"></a>Jenkins-python-api</h1><hr>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Jenkins作为最流行的自动化流程的核心工具，我们使用它自带的web-ui完全可以满足日常的构建及发布工作，但是如果需要和其他系统做集成就必须二次开发或者通过API方式进行交互了。</p>
<h2 id="Jenkins介绍及相关"><a href="#Jenkins介绍及相关" class="headerlink" title="Jenkins介绍及相关"></a>Jenkins介绍及相关</h2><p><a href="https://www.w3cschool.cn/jenkins/jenkins-5h3228n2.html" target="_blank" rel="noopener">参考资料</a></p>
<h2 id="python版本的API调用"><a href="#python版本的API调用" class="headerlink" title="python版本的API调用"></a>python版本的API调用</h2><h3 id="目前python版本的API主要有两个第三方包"><a href="#目前python版本的API主要有两个第三方包" class="headerlink" title="目前python版本的API主要有两个第三方包"></a>目前python版本的API主要有两个第三方包</h3><ol>
<li>JenkinsApi</li>
</ol>
<ul>
<li><a href="https://github.com/pycontribs/jenkinsapi" target="_blank" rel="noopener">github</a></li>
<li><a href="https://jenkinsapi.readthedocs.io/en/latest/api.html" target="_blank" rel="noopener">文档</a></li>
</ul>
<ol start="2">
<li>Python Jenkins</li>
</ol>
<ul>
<li><a href="https://github.com/openstack/python-jenkins" target="_blank" rel="noopener">github</a></li>
<li><a href="http://python-jenkins.readthedocs.io/en/latest/api.html" target="_blank" rel="noopener">文档</a></li>
</ul>
<h2 id="API示例"><a href="#API示例" class="headerlink" title="API示例"></a>API示例</h2><h3 id="JenkinsAPi模块"><a href="#JenkinsAPi模块" class="headerlink" title="JenkinsAPi模块"></a>JenkinsAPi模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;1&#x2F;17</span><br><span class="line"></span><br><span class="line">from jenkinsapi.jenkins import Jenkins</span><br><span class="line">from jenkinsapi.build import Build</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_server_instance():</span><br><span class="line">    jenkins_url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;&#39;</span><br><span class="line">    server &#x3D; Jenkins(jenkins_url, username&#x3D;&#39;admin&#39;, password&#x3D;&#39;admin123&#39;)</span><br><span class="line">    return server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#x3D; get_server_instance()</span><br><span class="line"></span><br><span class="line"># 1. 版本</span><br><span class="line">print(server.version)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">2.101</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 2. 所有的job列表</span><br><span class="line">print(server.keys())</span><br><span class="line">print(server.get_jobs_list())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">[&#39;ansible-playbook&#39;, &#39;my-github&#39;]</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 3. 全局信息查看</span><br><span class="line">server.pprint()</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&#123;&#39;_class&#39;: &#39;hudson.model.Hudson&#39;,</span><br><span class="line"> &#39;jobs&#39;: [&#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;,</span><br><span class="line">           &#39;color&#39;: &#39;blue&#39;,</span><br><span class="line">           &#39;name&#39;: &#39;ansible-playbook&#39;,</span><br><span class="line">           &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;&#39;&#125;,</span><br><span class="line">          &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;,</span><br><span class="line">           &#39;color&#39;: &#39;disabled&#39;,</span><br><span class="line">           &#39;name&#39;: &#39;my-github&#39;,</span><br><span class="line">           &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;my-github&#x2F;&#39;&#125;]&#125;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 3. 指定job的config.xml配置</span><br><span class="line">print(&quot;my-github job config:\n&quot;, server[&#39;my-github&#39;].get_config())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">my-github job config:</span><br><span class="line"> &lt;?xml version&#x3D;&#39;1.0&#39; encoding&#x3D;&#39;UTF-8&#39;?&gt;</span><br><span class="line">&lt;project&gt;</span><br><span class="line">  &lt;actions&#x2F;&gt;</span><br><span class="line">  &lt;description&gt;&lt;&#x2F;description&gt;</span><br><span class="line">  &lt;keepDependencies&gt;false&lt;&#x2F;keepDependencies&gt;</span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;com.coravy.hudson.plugins.github.GithubProjectProperty plugin&#x3D;&quot;github@1.28.1&quot;&gt;</span><br><span class="line">      &lt;projectUrl&gt;https:&#x2F;&#x2F;github.com&#x2F;shuke163&#x2F;CustAdmin.git&#x2F;&lt;&#x2F;projectUrl&gt;</span><br><span class="line">      &lt;displayName&gt;Admin&lt;&#x2F;displayName&gt;</span><br><span class="line">    &lt;&#x2F;com.coravy.hudson.plugins.github.GithubProjectProperty&gt;</span><br><span class="line">    &lt;jenkins.model.BuildDiscarderProperty&gt;</span><br><span class="line">      &lt;strategy class&#x3D;&quot;hudson.tasks.LogRotator&quot;&gt;</span><br><span class="line">        &lt;daysToKeep&gt;-1&lt;&#x2F;daysToKeep&gt;</span><br><span class="line">        &lt;numToKeep&gt;5&lt;&#x2F;numToKeep&gt;</span><br><span class="line">        &lt;artifactDaysToKeep&gt;-1&lt;&#x2F;artifactDaysToKeep&gt;</span><br><span class="line">        &lt;artifactNumToKeep&gt;-1&lt;&#x2F;artifactNumToKeep&gt;</span><br><span class="line">      &lt;&#x2F;strategy&gt;</span><br><span class="line">    &lt;&#x2F;jenkins.model.BuildDiscarderProperty&gt;</span><br><span class="line">    &lt;hudson.model.ParametersDefinitionProperty&gt;</span><br><span class="line">      &lt;parameterDefinitions&gt;</span><br><span class="line">        &lt;hudson.model.ChoiceParameterDefinition&gt;</span><br><span class="line">          &lt;name&gt;ip&lt;&#x2F;name&gt;</span><br><span class="line">          &lt;description&gt;ip&lt;&#x2F;description&gt;</span><br><span class="line">          &lt;choices class&#x3D;&quot;java.util.Arrays$ArrayList&quot;&gt;</span><br><span class="line">            &lt;a class&#x3D;&quot;string-array&quot;&gt;</span><br><span class="line">              &lt;string&gt;127.0.0.1&lt;&#x2F;string&gt;</span><br><span class="line">            &lt;&#x2F;a&gt;</span><br><span class="line">          &lt;&#x2F;choices&gt;</span><br><span class="line">        &lt;&#x2F;hudson.model.ChoiceParameterDefinition&gt;</span><br><span class="line">      &lt;&#x2F;parameterDefinitions&gt;</span><br><span class="line">    &lt;&#x2F;hudson.model.ParametersDefinitionProperty&gt;</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line">  &lt;scm class&#x3D;&quot;hudson.scm.NullSCM&quot;&#x2F;&gt;</span><br><span class="line">  &lt;canRoam&gt;true&lt;&#x2F;canRoam&gt;</span><br><span class="line">  &lt;disabled&gt;true&lt;&#x2F;disabled&gt;</span><br><span class="line">  &lt;blockBuildWhenDownstreamBuilding&gt;false&lt;&#x2F;blockBuildWhenDownstreamBuilding&gt;</span><br><span class="line">  &lt;blockBuildWhenUpstreamBuilding&gt;false&lt;&#x2F;blockBuildWhenUpstreamBuilding&gt;</span><br><span class="line">  &lt;triggers&#x2F;&gt;</span><br><span class="line">  &lt;concurrentBuild&gt;false&lt;&#x2F;concurrentBuild&gt;</span><br><span class="line">  &lt;builders&gt;</span><br><span class="line">    &lt;hudson.tasks.Shell&gt;</span><br><span class="line">      &lt;command&gt;echo $ip&lt;&#x2F;command&gt;</span><br><span class="line">    &lt;&#x2F;hudson.tasks.Shell&gt;</span><br><span class="line">  &lt;&#x2F;builders&gt;</span><br><span class="line">  &lt;publishers&#x2F;&gt;</span><br><span class="line">  &lt;buildWrappers&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 4. 得到的是一个包含所有jobs的生成器对象</span><br><span class="line">print(server.get_jobs())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">[&#39;ansible-playbook&#39;, &#39;my-github&#39;]</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 5. 所有的job描述</span><br><span class="line">for job_name, job_instance in server.get_jobs():</span><br><span class="line">    print(&#39;Job Name:%s&#39; % (job_instance.name))</span><br><span class="line">    print(&#39;Job Description:%s&#39; % (job_instance.get_description()))</span><br><span class="line">    print(&#39;Is Job running:%s&#39; % (job_instance.is_running()))</span><br><span class="line">    print(&#39;Is Job enabled:%s&#39; % (job_instance.is_enabled()))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">Job Name:ansible-playbook</span><br><span class="line">Job Description:ansible playbook</span><br><span class="line">Is Job running:False</span><br><span class="line">Is Job enabled:True</span><br><span class="line">Job Name:my-github</span><br><span class="line">Job Description:</span><br><span class="line">Is Job running:False</span><br><span class="line">Is Job enabled:True</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 6. Disable&#x2F;Enable a Jenkins Job</span><br><span class="line">job_name &#x3D; &#39;my-github&#39;</span><br><span class="line">if (server.has_job(job_name)):</span><br><span class="line">    job_instance &#x3D; server.get_job(job_name)</span><br><span class="line">    job_instance.disable()</span><br><span class="line">    print(&#39;Name:%s,Is Job Enabled ?:%s&#39; % (job_name, job_instance.is_enabled()))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">Name:my-github,Is Job Enabled ?:False</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 7. CURD Job</span><br><span class="line">server.create_job()</span><br><span class="line">server.delete_job(&#39;ansible-playbook&#39;)</span><br><span class="line">server.copy_job(&#39;my-job&#39;, &#39;new-my-job&#39;)</span><br><span class="line">server.rename_job(&#39;my-github&#39;, &#39;new-my-github&#39;)</span><br><span class="line"></span><br><span class="line"># 8. Get Plugin details</span><br><span class="line">for plugin in server.get_plugins().values():</span><br><span class="line">    print(&quot;Short Name:%s&quot; % (plugin.shortName))</span><br><span class="line">    print(&quot;Long Name:%s&quot; % (plugin.longName))</span><br><span class="line">    print(&quot;Version:%s&quot; % (plugin.version))</span><br><span class="line">    print(&quot;URL:%s&quot; % (plugin.url))</span><br><span class="line">    print(&quot;Active:%s&quot; % (plugin.active))</span><br><span class="line">    print(&quot;Enabled:%s&quot; % (plugin.enabled))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">Short Name:jsch</span><br><span class="line">Long Name:Jenkins JSch dependency plugin</span><br><span class="line">Version:0.1.54.1</span><br><span class="line">URL:http:&#x2F;&#x2F;wiki.jenkins-ci.org&#x2F;display&#x2F;JENKINS&#x2F;JSch+plugin</span><br><span class="line">Active:True</span><br><span class="line">Enabled:True</span><br><span class="line">Short Name:ws-cleanup</span><br><span class="line">Long Name:Jenkins Workspace Cleanup Plugin</span><br><span class="line">Version:0.34</span><br><span class="line">URL:http:&#x2F;&#x2F;wiki.jenkins-ci.org&#x2F;display&#x2F;JENKINS&#x2F;Workspace+Cleanup+Plugin</span><br><span class="line">Active:True</span><br><span class="line">Enabled:True</span><br><span class="line">......</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 9. 从已完成的构建中获取版本信息</span><br><span class="line">def getSCMInfroFromLatestGoodBuild(url, jobName, username&#x3D;&#39;admin&#39;, password&#x3D;&#39;admin123&#39;):</span><br><span class="line">    J &#x3D; Jenkins(url, username, password)</span><br><span class="line">    job &#x3D; J[jobName]</span><br><span class="line">    lgb &#x3D; job.get_last_good_build()</span><br><span class="line">    return lgb.get_revision()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">version &#x3D; getSCMInfroFromLatestGoodBuild(&quot;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;&quot;, &#39;ansible-playbook&#39;)</span><br><span class="line">print(version)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">21c2b6ff6c842a86969f36f75424e17ae27eae68</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 10. 其他</span><br><span class="line">print(server.__dict__)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&#123;&#39;username&#39;: &#39;admin&#39;, &#39;password&#39;: &#39;admin123&#39;, &#39;requester&#39;: &lt;jenkinsapi.utils.requester.Requester object at 0x103423710&gt;, &#39;lazy&#39;: False, &#39;jobs_container&#39;: None, &#39;_data&#39;: &#123;&#39;_class&#39;: &#39;hudson.model.Hudson&#39;, &#39;jobs&#39;: [&#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;, &#39;name&#39;: &#39;ansible-playbook&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;&#39;, &#39;color&#39;: &#39;blue&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;, &#39;name&#39;: &#39;my-github&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;my-github&#x2F;&#39;, &#39;color&#39;: &#39;disabled&#39;&#125;]&#125;, &#39;baseurl&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#39;&#125;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">jobs &#x3D; server.__dict__[&#39;_data&#39;][&#39;jobs&#39;]</span><br><span class="line">print(server.resolve_job_folders(jobs))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">[&#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;, &#39;name&#39;: &#39;ansible-playbook&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;&#39;, &#39;color&#39;: &#39;blue&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;, &#39;name&#39;: &#39;my-github&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;my-github&#x2F;&#39;, &#39;color&#39;: &#39;disabled&#39;&#125;]</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># baseurl</span><br><span class="line">print(server.baseurl)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># username</span><br><span class="line">print(server.username)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">admin</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># password</span><br><span class="line">print(server.password)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">admin123</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 判断job是否存在</span><br><span class="line">print(server.has_job(&#39;prod-java&#39;))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">False</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">print(server.get_queue())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;queue</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 查看试图</span><br><span class="line">print(server.views.keys())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">[&#39;My View&#39;, &#39;all&#39;, &#39;myview&#39;]</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 删除试图</span><br><span class="line">server.delete_view_by_url(&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;view&#x2F;testview&#x2F;&#39;)</span><br><span class="line"></span><br><span class="line"># 获取最后一次构建</span><br><span class="line">print(server[&#39;ansible-playbook&#39;].get_last_good_build())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">ansible-playbook #27</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># BUILD构建相关</span><br><span class="line"># 1. 构建(方式一)</span><br><span class="line">params &#x3D; &#123;&#39;Branch&#39;: &#39;oriin&#x2F;master&#39;, &#39;host&#39;: &#39;192.168.1.100&#39;&#125;</span><br><span class="line">ret &#x3D; server.build_job(&#39;ansible-playbook&#39;, params)</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"># 方式二</span><br><span class="line">job &#x3D; server[&#39;ansible-playbook&#39;]</span><br><span class="line">run_job &#x3D; job.invoke(build_params&#x3D;params)</span><br><span class="line">number &#x3D; run_job.__dict__[&#39;_data&#39;][&#39;executable&#39;][&#39;number&#39;]</span><br><span class="line">build_url &#x3D; run_job.__dict__[&#39;_data&#39;][&#39;executable&#39;][&#39;url&#39;]</span><br><span class="line">print(&quot;第%d次构建: %s&quot; % (number, build_url))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">第40次构建: http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;40&#x2F;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 结果查询</span><br><span class="line"># 1. 方式一</span><br><span class="line">job &#x3D; server.get_job(&#39;ansible-playbook&#39;)</span><br><span class="line">print(job.__dict__[&#39;_data&#39;][&#39;builds&#39;])</span><br><span class="line">url &#x3D; job.__dict__[&#39;_data&#39;][&#39;lastBuild&#39;][&#39;url&#39;]</span><br><span class="line">number &#x3D; job.__dict__[&#39;_data&#39;][&#39;lastBuild&#39;][&#39;number&#39;]</span><br><span class="line">obj &#x3D; Build(url, number, job)</span><br><span class="line"></span><br><span class="line"># 2. 方式二</span><br><span class="line">job &#x3D; server[&#39;ansible-playbook&#39;]</span><br><span class="line">url &#x3D; job.__dict__[&#39;_data&#39;][&#39;lastBuild&#39;][&#39;url&#39;]</span><br><span class="line">number &#x3D; job.__dict__[&#39;_data&#39;][&#39;lastBuild&#39;][&#39;number&#39;]</span><br><span class="line">obj &#x3D; Build(url, number, job)</span><br><span class="line"></span><br><span class="line"># 全局信息</span><br><span class="line">print(obj.pprint())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;,</span><br><span class="line"> &#39;actions&#39;: [&#123;&#39;_class&#39;: &#39;hudson.model.ParametersAction&#39;,</span><br><span class="line">              &#39;parameters&#39;: [&#123;&#39;_class&#39;: &#39;net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterValue&#39;,</span><br><span class="line">                              &#39;name&#39;: &#39;Branch&#39;,</span><br><span class="line">                              &#39;value&#39;: &#39;oriin&#x2F;master&#39;&#125;,</span><br><span class="line">                             &#123;&#39;_class&#39;: &#39;hudson.model.StringParameterValue&#39;,</span><br><span class="line">                              &#39;name&#39;: &#39;host&#39;,</span><br><span class="line">                              &#39;value&#39;: &#39;192.168.1.100&#39;&#125;]&#125;,</span><br><span class="line">             &#123;&#39;_class&#39;: &#39;hudson.model.CauseAction&#39;,</span><br><span class="line">              &#39;causes&#39;: [&#123;&#39;_class&#39;: &#39;hudson.model.Cause$UserIdCause&#39;,</span><br><span class="line">                          &#39;shortDescription&#39;: &#39;Started by user 管理员&#39;,</span><br><span class="line">                          &#39;userId&#39;: &#39;admin&#39;,</span><br><span class="line">                          &#39;userName&#39;: &#39;管理员&#39;&#125;]&#125;,</span><br><span class="line">             &#123;&#125;,</span><br><span class="line">             ......</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(obj.get_result_url())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;40&#x2F;testReport&#x2F;api&#x2F;python</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(obj.is_running())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">False</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(obj.stop())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">True</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(obj.is_good())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">True</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(obj.get_number())</span><br><span class="line">print(obj.buildno)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">40</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(obj.get_status())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">SUCCESS</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(obj.get_revision())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">21c2b6ff6c842a86969f36f75424e17ae27eae68</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(obj.get_revision_branch())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">[&#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;name&#39;: &#39;refs&#x2F;remotes&#x2F;origin&#x2F;master&#39;&#125;]</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(obj.get_console())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">Started by user ç®¡çå</span><br><span class="line">[EnvInject] - Loading node environment variables.</span><br><span class="line">Building in workspace &#x2F;Users&#x2F;zhao&#x2F;data&#x2F;workspace&#x2F;workspace&#x2F;ansible-playbook</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git rev-parse --is-inside-work-tree # timeout&#x3D;10</span><br><span class="line">Fetching changes from the remote Git repository</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git config remote.origin.url git@git.icbc.net:ansible-roles&#x2F;zff.ansible.git # timeout&#x3D;10</span><br><span class="line">Fetching upstream changes from git@git.icbc.net:ansible-roles&#x2F;zff.ansible.git</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git --version # timeout&#x3D;10</span><br><span class="line">using GIT_SSH to set credentials deploy key</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git fetch --tags --progress git@git.icbc.net:ansible-roles&#x2F;zff.ansible.git +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git rev-parse refs&#x2F;remotes&#x2F;origin&#x2F;master^&#123;commit&#125; # timeout&#x3D;10</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git rev-parse refs&#x2F;remotes&#x2F;origin&#x2F;origin&#x2F;master^&#123;commit&#125; # timeout&#x3D;10</span><br><span class="line">Checking out Revision 21c2b6ff6c842a86969f36f75424e17ae27eae68 (refs&#x2F;remotes&#x2F;origin&#x2F;master)</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git config core.sparsecheckout # timeout&#x3D;10</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git checkout -f 21c2b6ff6c842a86969f36f75424e17ae27eae68</span><br><span class="line">Commit message: &quot;update tomcat root mode&quot;</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git rev-list --no-walk 21c2b6ff6c842a86969f36f75424e17ae27eae68 # timeout&#x3D;10</span><br><span class="line">[ansible-playbook] $ &#x2F;bin&#x2F;sh -xe &#x2F;Users&#x2F;Shared&#x2F;Jenkins&#x2F;tmp&#x2F;jenkins280834745018509074.sh</span><br><span class="line">+ echo 192.168.1.100</span><br><span class="line">192.168.1.100</span><br><span class="line">+ echo test</span><br><span class="line">test</span><br><span class="line">+ echo http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;40&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;40&#x2F;</span><br><span class="line">+ echo 40</span><br><span class="line">40</span><br><span class="line">+ echo jenkins-ansible-playbook-40</span><br><span class="line">jenkins-ansible-playbook-40</span><br><span class="line">Recording fingerprints</span><br><span class="line">Finished: SUCCESS</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">print(obj.get_causes())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">[&#123;&#39;_class&#39;: &#39;hudson.model.Cause$UserIdCause&#39;, &#39;shortDescription&#39;: &#39;Started by user 管理员&#39;, &#39;userId&#39;: &#39;admin&#39;, &#39;userName&#39;: &#39;管理员&#39;&#125;]</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(obj.get_params())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&#123;&#39;Branch&#39;: &#39;oriin&#x2F;master&#39;, &#39;host&#39;: &#39;192.168.1.100&#39;&#125;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(obj.get_env_vars())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&#123;&#39;BUILD_CAUSE&#39;: &#39;MANUALTRIGGER&#39;, &#39;BUILD_CAUSE_MANUALTRIGGER&#39;: &#39;true&#39;, &#39;BUILD_DISPLAY_NAME&#39;: &#39;#40&#39;, &#39;BUILD_ID&#39;: &#39;40&#39;, &#39;BUILD_NUMBER&#39;: &#39;40&#39;, &#39;BUILD_TAG&#39;: &#39;jenkins-ansible-playbook-40&#39;, &#39;BUILD_URL&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;40&#x2F;&#39;, &#39;Branch&#39;: &#39;oriin&#x2F;master&#39;, &#39;EXECUTOR_NUMBER&#39;: &#39;1&#39;, &#39;HUDSON_HOME&#39;: &#39;&#x2F;Users&#x2F;zhao&#x2F;data&#x2F;workspace&#39;, &#39;HUDSON_SERVER_COOKIE&#39;: &#39;5634a2d507063d61&#39;, &#39;HUDSON_URL&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;&#39;, &#39;JENKINS_HOME&#39;: &#39;&#x2F;Users&#x2F;zhao&#x2F;data&#x2F;workspace&#39;, &#39;JENKINS_SERVER_COOKIE&#39;: &#39;5634a2d507063d61&#39;, &#39;JENKINS_URL&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;&#39;, &#39;JOB_BASE_NAME&#39;: &#39;ansible-playbook&#39;, &#39;JOB_NAME&#39;: &#39;ansible-playbook&#39;, &#39;JOB_URL&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;&#39;, &#39;NODE_LABELS&#39;: &#39;master&#39;, &#39;NODE_NAME&#39;: &#39;master&#39;, &#39;ROOT_BUILD_CAUSE&#39;: &#39;MANUALTRIGGER&#39;, &#39;ROOT_BUILD_CAUSE_MANUALTRIGGER&#39;: &#39;true&#39;, &#39;RUN_CHANGES_DISPLAY_URL&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;40&#x2F;display&#x2F;redirect?page&#x3D;changes&#39;, &#39;RUN_DISPLAY_URL&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;40&#x2F;display&#x2F;redirect&#39;, &#39;TEST_ARGS&#39;: &#39;test&#39;, &#39;host&#39;: &#39;192.168.1.100&#39;&#125;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(obj.job)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">ansible-playbook</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(obj.get_data(&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;40&#x2F;api&#x2F;python&#x2F;?pretty&#x3D;true&#39;))</span><br><span class="line">&#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;actions&#39;: [&#123;&#39;_class&#39;: &#39;hudson.model.ParametersAction&#39;, &#39;parameters&#39;: [&#123;&#39;_class&#39;: &#39;net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterValue&#39;, &#39;name&#39;: &#39;Branch&#39;, &#39;value&#39;: &#39;oriin&#x2F;master&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.StringParameterValue&#39;, &#39;name&#39;: &#39;host&#39;, &#39;value&#39;: &#39;192.168.1.100&#39;&#125;]&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.CauseAction&#39;, &#39;causes&#39;: [&#123;&#39;_class&#39;: &#39;hudson.model.Cause$UserIdCause&#39;, &#39;shortDescription&#39;: &#39;Started by user 管理员&#39;, &#39;userId&#39;: &#39;admin&#39;, &#39;userName&#39;: &#39;管理员&#39;&#125;]&#125;, &#123;&#125;, &#123;&#39;_class&#39;: &#39;hudson.plugins.git.util.BuildData&#39;, &#39;buildsByBranchName&#39;: &#123;&#39;refs&#x2F;remotes&#x2F;origin&#x2F;master&#39;: &#123;&#39;_class&#39;: &#39;hudson.plugins.git.util.Build&#39;, &#39;buildNumber&#39;: 40, &#39;buildResult&#39;: None, &#39;marked&#39;: &#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;branch&#39;: [&#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;name&#39;: &#39;refs&#x2F;remotes&#x2F;origin&#x2F;master&#39;&#125;]&#125;, &#39;revision&#39;: &#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;branch&#39;: [&#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;name&#39;: &#39;refs&#x2F;remotes&#x2F;origin&#x2F;master&#39;&#125;]&#125;&#125;&#125;, &#39;lastBuiltRevision&#39;: &#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;branch&#39;: [&#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;name&#39;: &#39;refs&#x2F;remotes&#x2F;origin&#x2F;master&#39;&#125;]&#125;, &#39;remoteUrls&#39;: [&#39;git@git.idbc.net:ansible-roles&#x2F;zff.ansible.git&#39;], &#39;scmName&#39;: &#39;&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.plugins.git.GitTagAction&#39;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;], &#39;artifacts&#39;: [], &#39;building&#39;: False, &#39;description&#39;: None, &#39;displayName&#39;: &#39;#40&#39;, &#39;duration&#39;: 735, &#39;estimatedDuration&#39;: 897, &#39;executor&#39;: None, &#39;fullDisplayName&#39;: &#39;ansible-playbook #40&#39;, &#39;id&#39;: &#39;40&#39;, &#39;keepLog&#39;: False, &#39;number&#39;: 40, &#39;queueId&#39;: 21, &#39;result&#39;: &#39;SUCCESS&#39;, &#39;timestamp&#39;: 1516172959444, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;40&#x2F;&#39;, &#39;builtOn&#39;: &#39;&#39;, &#39;changeSet&#39;: &#123;&#39;_class&#39;: &#39;hudson.plugins.git.GitChangeSetList&#39;, &#39;items&#39;: [], &#39;kind&#39;: &#39;git&#39;&#125;, &#39;culprits&#39;: []&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Some-API"><a href="#Some-API" class="headerlink" title="Some API"></a>Some API</h4><p>This module is a collection of helpful, high-level functions for automating common tasks. Many of these functions were designed to be exposed to the command-line, hence they have simple string arguments.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from jenkinsapi import api as API</span><br><span class="line">server &#x3D; get_server_instance()</span><br><span class="line">jobs &#x3D; server.get_jobs_list()</span><br><span class="line"></span><br><span class="line"># 1. 等待所有job执行完成</span><br><span class="line">ret &#x3D; API.block_until_complete(&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;&#39;, jobs, username&#x3D;&#39;admin&#39;, password&#x3D;&#39;admin123&#39;, ssl_verify&#x3D;False)</span><br><span class="line">print(ret)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">Waiting for jobs &quot;ansible-playbook&quot; to complete. Will wait another 12000s</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 2. job 构建的完整名称</span><br><span class="line">ret &#x3D; API.get_build(&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;&#39;, &#39;ansible-playbook&#39;, 66, username&#x3D;&#39;admin&#39;, password&#x3D;&#39;admin123&#39;,</span><br><span class="line">                    ssl_verify&#x3D;False)</span><br><span class="line">print(ret)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">ansible-playbook #66</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 3. 最后一次构建</span><br><span class="line">ret &#x3D; API.get_latest_build(&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;&#39;, &#39;ansible-playbook&#39;, username&#x3D;&#39;admin&#39;, password&#x3D;&#39;admin123&#39;,</span><br><span class="line">                           ssl_verify&#x3D;False)</span><br><span class="line">print(ret)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">ansible-playbook #66</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 4. 最后一次完整构建</span><br><span class="line">ret &#x3D; API.get_latest_complete_build(&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;&#39;, &#39;ansible-playbook&#39;, username&#x3D;&#39;admin&#39;, password&#x3D;&#39;admin123&#39;,</span><br><span class="line">                                    ssl_verify&#x3D;False)</span><br><span class="line">print(ret)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">ansible-playbook #66</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 5. 查询试图信息</span><br><span class="line">ret &#x3D; API.get_nested_view_from_url(&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;view&#x2F;myview&#x2F;&#39;, username&#x3D;&#39;admin&#39;, password&#x3D;&#39;admin123&#39;,</span><br><span class="line">                                   ssl_verify&#x3D;False)</span><br><span class="line">print(ret.get_config_xml_url())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;view&#x2F;myview&#x2F;config.xml</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(ret.get_job_dict())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&#123;&#39;ansible-playbook&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;&#39;, &#39;my-github&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;my-github&#x2F;&#39;&#125;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(ret.pprint())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&#123;&#39;_class&#39;: &#39;hudson.model.ListView&#39;,</span><br><span class="line"> &#39;description&#39;: &#39;测试试图&#39;,</span><br><span class="line"> &#39;jobs&#39;: [&#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;,</span><br><span class="line">           &#39;color&#39;: &#39;blue&#39;,</span><br><span class="line">           &#39;name&#39;: &#39;ansible-playbook&#39;,</span><br><span class="line">           &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;&#39;&#125;,</span><br><span class="line">          &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;,</span><br><span class="line">           &#39;color&#39;: &#39;disabled&#39;,</span><br><span class="line">           &#39;name&#39;: &#39;my-github&#39;,</span><br><span class="line">           &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;my-github&#x2F;&#39;&#125;],</span><br><span class="line"> &#39;name&#39;: &#39;myview&#39;,</span><br><span class="line"> &#39;property&#39;: [],</span><br><span class="line"> &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;view&#x2F;myview&#x2F;&#39;&#125;</span><br><span class="line">None</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(ret.get_config())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;hudson.model.ListView&gt;</span><br><span class="line">  &lt;name&gt;myview&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;description&gt;测试试图&lt;&#x2F;description&gt;</span><br><span class="line">  &lt;filterExecutors&gt;false&lt;&#x2F;filterExecutors&gt;</span><br><span class="line">  &lt;filterQueue&gt;false&lt;&#x2F;filterQueue&gt;</span><br><span class="line">  &lt;properties class&#x3D;&quot;hudson.model.View$PropertyList&quot;&#x2F;&gt;</span><br><span class="line">  &lt;jobNames&gt;</span><br><span class="line">    &lt;comparator class&#x3D;&quot;hudson.util.CaseInsensitiveComparator&quot;&#x2F;&gt;</span><br><span class="line">    &lt;string&gt;ansible-playbook&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;string&gt;my-github&lt;&#x2F;string&gt;</span><br><span class="line">  &lt;&#x2F;jobNames&gt;</span><br><span class="line">  &lt;jobFilters&#x2F;&gt;</span><br><span class="line">  &lt;columns&gt;</span><br><span class="line">    &lt;hudson.views.StatusColumn&#x2F;&gt;</span><br><span class="line">    &lt;hudson.views.WeatherColumn&#x2F;&gt;</span><br><span class="line">    &lt;hudson.views.JobColumn&#x2F;&gt;</span><br><span class="line">    &lt;hudson.views.LastSuccessColumn&#x2F;&gt;</span><br><span class="line">    &lt;hudson.views.LastDurationColumn&#x2F;&gt;</span><br><span class="line">    &lt;hudson.views.BuildButtonColumn&#x2F;&gt;</span><br><span class="line">    &lt;hudson.plugins.git.GitBranchSpecifierColumn plugin&#x3D;&quot;git@3.7.0&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;columns&gt;</span><br><span class="line">  &lt;recurse&gt;false&lt;&#x2F;recurse&gt;</span><br><span class="line">&lt;&#x2F;hudson.model.ListView&gt;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 6. 类似与get_nested_view_from_url函数</span><br><span class="line">ret &#x3D; API.get_view_from_url(&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;view&#x2F;myview&#x2F;&#39;, username&#x3D;&#39;admin&#39;, password&#x3D;&#39;admin123&#39;,</span><br><span class="line">                            ssl_verify&#x3D;False)</span><br><span class="line">print(ret.get_job_dict())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&#123;&#39;ansible-playbook&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;&#39;, &#39;my-github&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;my-github&#x2F;&#39;&#125;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(ret.get_config_xml_url())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;view&#x2F;myview&#x2F;config.xml</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>


<h3 id="Python-Jenkins模块"><a href="#Python-Jenkins模块" class="headerlink" title="Python Jenkins模块"></a>Python Jenkins模块</h3><h4 id="Working-with-Jenkins-Jobs"><a href="#Working-with-Jenkins-Jobs" class="headerlink" title="Working with Jenkins Jobs"></a>Working with Jenkins Jobs</h4><p>This is an example showing how to create, configure and delete Jenkins jobs.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;1&#x2F;17</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import jenkins</span><br><span class="line"></span><br><span class="line">server &#x3D; jenkins.Jenkins(&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#39;, username&#x3D;&quot;admin&quot;, password&#x3D;&quot;admin123&quot;)</span><br><span class="line">params &#x3D; &#123;&#39;Branch&#39;: &#39;oriin&#x2F;master&#39;, &#39;host&#39;: &#39;192.168.1.110&#39;&#125;</span><br><span class="line"></span><br><span class="line"># server对象</span><br><span class="line"># Jenkins的job数量</span><br><span class="line">print(server.jobs_count())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">2</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># Jenkins-web-ui</span><br><span class="line">print(server.server)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 所有的job信息</span><br><span class="line">all_jobs_li &#x3D; server.get_all_jobs()</span><br><span class="line">for item in all_jobs_li:</span><br><span class="line">    print(&#39;name: %s&#39; % item[&#39;name&#39;], &#39;URL: &#39;, item[&#39;url&#39;])</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">name: ansible-playbook URL:  http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;</span><br><span class="line">name: my-github URL:  http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;my-github&#x2F;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 账户信息描述</span><br><span class="line">print(server.get_whoami())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&#123;&#39;_class&#39;: &#39;hudson.model.User&#39;, &#39;absoluteUrl&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;user&#x2F;admin&#39;, &#39;description&#39;: &#39;本地测试&#39;, &#39;fullName&#39;: &#39;管理员&#39;, &#39;id&#39;: &#39;admin&#39;, &#39;property&#39;: [&#123;&#39;_class&#39;: &#39;jenkins.security.ApiTokenProperty&#39;&#125;, &#123;&#39;_class&#39;: &#39;com.cloudbees.plugins.credentials.UserCredentialsProvider$UserCredentialsProperty&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.tasks.Mailer$UserProperty&#39;, &#39;address&#39;: &#39;admin@163.com&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.plugins.emailext.watching.EmailExtWatchAction$UserProperty&#39;, &#39;triggers&#39;: []&#125;, &#123;&#39;_class&#39;: &#39;jenkins.security.LastGrantedAuthoritiesProperty&#39;&#125;, &#123;&#39;_class&#39;: &#39;org.jenkinsci.plugins.displayurlapi.user.PreferredProviderUserProperty&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.PaneStatusProperties&#39;&#125;, &#123;&#39;_class&#39;: &#39;org.jenkinsci.main.modules.cli.auth.ssh.UserPropertyImpl&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.security.HudsonPrivateSecurityRealm$Details&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.MyViewsProperty&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.search.UserSearchProperty&#39;, &#39;insensitiveSearch&#39;: True&#125;, &#123;&#39;_class&#39;: &#39;hudson.plugins.favorite.user.FavoriteUserProperty&#39;&#125;]&#125;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># auth</span><br><span class="line">print(server.auth)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">b&#39;Basic YWRtaW46YWRtaW4xMjM&#x3D;&#39;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># DEBUG Job信息</span><br><span class="line">print(server.debug_job_info(&#39;ansible-playbook&#39;))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">_class hudson.model.FreeStyleProject</span><br><span class="line">actions [&#123;&#39;_class&#39;: &#39;hudson.model.ParametersDefinitionProperty&#39;, &#39;parameterDefinitions&#39;: [&#123;&#39;_class&#39;: &#39;net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterDefinition&#39;, &#39;defaultParameterValue&#39;: None, &#39;description&#39;: &#39;分支&#39;, &#39;name&#39;: &#39;Branch&#39;, &#39;type&#39;: &#39;PT_BRANCH&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.StringParameterDefinition&#39;, &#39;defaultParameterValue&#39;: &#123;&#39;_class&#39;: &#39;hudson.model.StringParameterValue&#39;, &#39;value&#39;: &#39;127.0.0.1,127.0.0.2,127.0.0.1&#39;&#125;, &#39;description&#39;: &#39;本机&#39;, &#39;name&#39;: &#39;host&#39;, &#39;type&#39;: &#39;StringParameterDefinition&#39;&#125;]&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#39;_class&#39;: &#39;com.cloudbees.plugins.credentials.ViewCredentialsAction&#39;&#125;]</span><br><span class="line">description ansible playbook</span><br><span class="line">displayName ansible-playbook</span><br><span class="line">displayNameOrNull None</span><br><span class="line">fullDisplayName ansible-playbook</span><br><span class="line">fullName ansible-playbook</span><br><span class="line">name ansible-playbook</span><br><span class="line">url http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;</span><br><span class="line">buildable True</span><br><span class="line">......</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">####### CURD Job #######</span><br><span class="line"></span><br><span class="line"># Job是否存在</span><br><span class="line">print(server.job_exists(&#39;my-api&#39;))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">True or None</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 获取所有的Job</span><br><span class="line">print(server.get_jobs())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">[&#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;, &#39;name&#39;: &#39;ansible-playbook&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;&#39;, &#39;color&#39;: &#39;aborted&#39;, &#39;fullname&#39;: &#39;ansible-playbook&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;, &#39;name&#39;: &#39;my-api&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;my-api&#x2F;&#39;, &#39;color&#39;: &#39;notbuilt&#39;, &#39;fullname&#39;: &#39;my-api&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;, &#39;name&#39;: &#39;my-github&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;my-github&#x2F;&#39;, &#39;color&#39;: &#39;disabled&#39;, &#39;fullname&#39;: &#39;my-github&#39;&#125;]</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 创建Job</span><br><span class="line">server.create_job(&#39;API&#39;, jenkins.RECONFIG_XML)</span><br><span class="line"></span><br><span class="line"># 删除Job</span><br><span class="line">server.delete_job(&#39;my-api&#39;)</span><br><span class="line"></span><br><span class="line"># 复制job</span><br><span class="line">server.copy_job(&#39;my-github&#39;, &#39;copy-my-github&#39;)</span><br><span class="line"></span><br><span class="line"># enable job</span><br><span class="line">server.enable_job(&#39;copy-my-github&#39;)</span><br><span class="line"></span><br><span class="line"># 禁用Job</span><br><span class="line">server.disable_job(&#39;copy-my-github&#39;)</span><br><span class="line"></span><br><span class="line"># 重新配置Job</span><br><span class="line">server.reconfig_job(&#39;copy-my-github&#39;, jenkins.RECONFIG_XML)</span><br><span class="line"></span><br><span class="line"># 重命名Job</span><br><span class="line">server.rename_job(&#39;API&#39;, &#39;my-api&#39;)</span><br><span class="line"></span><br><span class="line"># 触发Job运行</span><br><span class="line"># 触发Job(方式一)</span><br><span class="line">server.build_job_url(&#39;ansible-playbook&#39;, parameters&#x3D;params)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;buildWithParameters?Branch&#x3D;oriin%2Fmaster&amp;host&#x3D;192.168.1.110</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"># 触发Job(方式二)</span><br><span class="line">server.build_job(&#39;ansible-playbook&#39;, parameters&#x3D;params)</span><br><span class="line"></span><br><span class="line"># 查看指定构建编号的输出</span><br><span class="line">print(server.get_build_console_output(&#39;ansible-playbook&#39;, 41))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">Started by user 管理员</span><br><span class="line">[EnvInject] - Loading node environment variables.</span><br><span class="line">Building in workspace &#x2F;Users&#x2F;zhao&#x2F;data&#x2F;workspace&#x2F;workspace&#x2F;ansible-playbook</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git rev-parse --is-inside-work-tree # timeout&#x3D;10</span><br><span class="line">Fetching changes from the remote Git repository</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git config remote.origin.url git@git.icbc.net:ansible-roles&#x2F;zff.ansible.git # timeout&#x3D;10</span><br><span class="line">Fetching upstream changes from git@git.icbc.net:ansible-roles&#x2F;zff.ansible.git</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git --version # timeout&#x3D;10</span><br><span class="line">using GIT_SSH to set credentials deploy key</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git fetch --tags --progress git@git.icbc.net:ansible-roles&#x2F;zff.ansible.git +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git rev-parse refs&#x2F;remotes&#x2F;origin&#x2F;master^&#123;commit&#125; # timeout&#x3D;10</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git rev-parse refs&#x2F;remotes&#x2F;origin&#x2F;origin&#x2F;master^&#123;commit&#125; # timeout&#x3D;10</span><br><span class="line">Checking out Revision 21c2b6ff6c842a86969f36f75424e17ae27eae68 (refs&#x2F;remotes&#x2F;origin&#x2F;master)</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git config core.sparsecheckout # timeout&#x3D;10</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git checkout -f 21c2b6ff6c842a86969f36f75424e17ae27eae68</span><br><span class="line">Commit message: &quot;update tomcat root mode&quot;</span><br><span class="line"> &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git rev-list --no-walk 21c2b6ff6c842a86969f36f75424e17ae27eae68 # timeout&#x3D;10</span><br><span class="line">[ansible-playbook] $ &#x2F;bin&#x2F;sh -xe &#x2F;Users&#x2F;Shared&#x2F;Jenkins&#x2F;tmp&#x2F;jenkins5080034200775659821.sh</span><br><span class="line">+ echo 192.168.1.110</span><br><span class="line">192.168.1.110</span><br><span class="line">+ echo test</span><br><span class="line">test</span><br><span class="line">+ echo http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;41&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;41&#x2F;</span><br><span class="line">+ echo 41</span><br><span class="line">41</span><br><span class="line">+ echo jenkins-ansible-playbook-41</span><br><span class="line">jenkins-ansible-playbook-41</span><br><span class="line">Finished: SUCCESS</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 下一次构建编号,步长为5</span><br><span class="line">next_bn &#x3D; server.get_job_info(&#39;ansible-playbook&#39;)[&#39;nextBuildNumber&#39;]</span><br><span class="line">server.set_next_build_number(&#39;ansible-playbook&#39;, next_bn + 5)</span><br><span class="line"></span><br><span class="line"># 指定编号的构建Job信息</span><br><span class="line">print(server.get_build_info(&#39;ansible-playbook&#39;, 48))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;actions&#39;: [&#123;&#39;_class&#39;: &#39;hudson.model.ParametersAction&#39;, &#39;parameters&#39;: [&#123;&#39;_class&#39;: &#39;net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterValue&#39;, &#39;name&#39;: &#39;Branch&#39;, &#39;value&#39;: &#39;oriin&#x2F;master&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.StringParameterValue&#39;, &#39;name&#39;: &#39;host&#39;, &#39;value&#39;: &#39;192.168.1.110&#39;&#125;]&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.CauseAction&#39;, &#39;causes&#39;: [&#123;&#39;_class&#39;: &#39;hudson.model.Cause$UserIdCause&#39;, &#39;shortDescription&#39;: &#39;Started by user 管理员&#39;, &#39;userId&#39;: &#39;admin&#39;, &#39;userName&#39;: &#39;管理员&#39;&#125;]&#125;, &#123;&#125;, &#123;&#39;_class&#39;: &#39;hudson.plugins.git.util.BuildData&#39;, &#39;buildsByBranchName&#39;: &#123;&#39;refs&#x2F;remotes&#x2F;origin&#x2F;master&#39;: &#123;&#39;_class&#39;: &#39;hudson.plugins.git.util.Build&#39;, &#39;buildNumber&#39;: 48, &#39;buildResult&#39;: None, &#39;marked&#39;: &#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;branch&#39;: [&#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;name&#39;: &#39;refs&#x2F;remotes&#x2F;origin&#x2F;master&#39;&#125;]&#125;, &#39;revision&#39;: &#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;branch&#39;: [&#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;name&#39;: &#39;refs&#x2F;remotes&#x2F;origin&#x2F;master&#39;&#125;]&#125;&#125;&#125;, &#39;lastBuiltRevision&#39;: &#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;branch&#39;: [&#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;name&#39;: &#39;refs&#x2F;remotes&#x2F;origin&#x2F;master&#39;&#125;]&#125;, &#39;remoteUrls&#39;: [&#39;git@git.icbc.net:ansible-roles&#x2F;zff.ansible.git&#39;], &#39;scmName&#39;: &#39;&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.plugins.git.GitTagAction&#39;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;], &#39;artifacts&#39;: [], &#39;building&#39;: False, &#39;description&#39;: None, &#39;displayName&#39;: &#39;#48&#39;, &#39;duration&#39;: 1861, &#39;estimatedDuration&#39;: 4305, &#39;executor&#39;: None, &#39;fullDisplayName&#39;: &#39;ansible-playbook #48&#39;, &#39;id&#39;: &#39;48&#39;, &#39;keepLog&#39;: False, &#39;number&#39;: 48, &#39;queueId&#39;: 24, &#39;result&#39;: &#39;SUCCESS&#39;, &#39;timestamp&#39;: 1516185645519, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;48&#x2F;&#39;, &#39;builtOn&#39;: &#39;&#39;, &#39;changeSet&#39;: &#123;&#39;_class&#39;: &#39;hudson.plugins.git.GitChangeSetList&#39;, &#39;items&#39;: [], &#39;kind&#39;: &#39;git&#39;&#125;, &#39;culprits&#39;: []&#125;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 获取正在运行的Job，一般结合build_job方法一起使用</span><br><span class="line">print(server.get_running_builds())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">[&#123;&#39;name&#39;: &#39;ansible-playbook&#39;, &#39;number&#39;: 57, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;57&#x2F;&#39;, &#39;node&#39;: &#39;(master)&#39;, &#39;executor&#39;: 1&#125;]</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 终止指定编号的Job</span><br><span class="line">server.stop_build(&#39;ansible-playbook&#39;, 62)</span><br><span class="line"></span><br><span class="line"># 获取Job名称</span><br><span class="line">print(server.get_job_name(&#39;ansible-playbook&#39;))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">ansible-playbook</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 断言Job是否存在</span><br><span class="line">print(server.assert_job_exists(&#39;ansible-playbook&#39;))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">存在则返回None，不存在则抛出错误信息</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 该Job所有的相关信息</span><br><span class="line">print(server.get_job_info(&#39;ansible-playbook&#39;))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;, &#39;actions&#39;: [&#123;&#39;_class&#39;: &#39;hudson.model.ParametersDefinitionProperty&#39;, &#39;parameterDefinitions&#39;: [&#123;&#39;_class&#39;: &#39;net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterDefinition&#39;, &#39;defaultParameterValue&#39;: None, &#39;description&#39;: &#39;分支&#39;, &#39;name&#39;: &#39;Branch&#39;, &#39;type&#39;: &#39;PT_BRANCH&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.StringParameterDefinition&#39;, &#39;defaultParameterValue&#39;: &#123;&#39;_class&#39;: &#39;hudson.model.StringParameterValue&#39;, &#39;value&#39;: &#39;127.0.0.1,127.0.0.2,127.0.0.1&#39;&#125;, &#39;description&#39;: &#39;本机&#39;, &#39;name&#39;: &#39;host&#39;, &#39;type&#39;: &#39;StringParameterDefinition&#39;&#125;]&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#39;_class&#39;: &#39;com.cloudbees.plugins.credentials.ViewCredentialsAction&#39;&#125;], &#39;description&#39;: &#39;ansible playbook&#39;, &#39;displayName&#39;: &#39;ansible-playbook&#39;, &#39;displayNameOrNull&#39;: None, &#39;fullDisplayName&#39;: &#39;ansible-playbook&#39;, &#39;fullName&#39;: &#39;ansible-playbook&#39;, &#39;name&#39;: &#39;ansible-playbook&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;&#39;, &#39;buildable&#39;: True, &#39;builds&#39;: [&#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;number&#39;: 62, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;62&#x2F;&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;number&#39;: 61, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;61&#x2F;&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;number&#39;: 60, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;60&#x2F;&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;number&#39;: 59, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;59&#x2F;&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;number&#39;: 58, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;58&#x2F;&#39;&#125;], &#39;color&#39;: &#39;aborted&#39;, &#39;firstBuild&#39;: &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;number&#39;: 58, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;58&#x2F;&#39;&#125;, &#39;healthReport&#39;: [&#123;&#39;description&#39;: &#39;Build stability: No recent builds failed.&#39;, &#39;iconClassName&#39;: &#39;icon-health-80plus&#39;, &#39;iconUrl&#39;: &#39;health-80plus.png&#39;, &#39;score&#39;: 100&#125;], &#39;inQueue&#39;: False, &#39;keepDependencies&#39;: False, &#39;lastBuild&#39;: &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;number&#39;: 62, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;62&#x2F;&#39;&#125;, &#39;lastCompletedBuild&#39;: &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;number&#39;: 62, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;62&#x2F;&#39;&#125;, &#39;lastFailedBuild&#39;: None, &#39;lastStableBuild&#39;: &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;number&#39;: 61, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;61&#x2F;&#39;&#125;, &#39;lastSuccessfulBuild&#39;: &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;number&#39;: 61, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;61&#x2F;&#39;&#125;, &#39;lastUnstableBuild&#39;: None, &#39;lastUnsuccessfulBuild&#39;: &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;number&#39;: 62, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;62&#x2F;&#39;&#125;, &#39;nextBuildNumber&#39;: 63, &#39;property&#39;: [&#123;&#39;_class&#39;: &#39;jenkins.model.BuildDiscarderProperty&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.ParametersDefinitionProperty&#39;, &#39;parameterDefinitions&#39;: [&#123;&#39;_class&#39;: &#39;net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterDefinition&#39;, &#39;defaultParameterValue&#39;: None, &#39;description&#39;: &#39;分支&#39;, &#39;name&#39;: &#39;Branch&#39;, &#39;type&#39;: &#39;PT_BRANCH&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.StringParameterDefinition&#39;, &#39;defaultParameterValue&#39;: &#123;&#39;_class&#39;: &#39;hudson.model.StringParameterValue&#39;, &#39;name&#39;: &#39;host&#39;, &#39;value&#39;: &#39;127.0.0.1,127.0.0.2,127.0.0.1&#39;&#125;, &#39;description&#39;: &#39;本机&#39;, &#39;name&#39;: &#39;host&#39;, &#39;type&#39;: &#39;StringParameterDefinition&#39;&#125;]&#125;], &#39;queueItem&#39;: None, &#39;concurrentBuild&#39;: False, &#39;downstreamProjects&#39;: [], &#39;labelExpression&#39;: None, &#39;scm&#39;: &#123;&#39;_class&#39;: &#39;hudson.plugins.git.GitSCM&#39;&#125;, &#39;upstreamProjects&#39;: []&#125;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 查看该试图下所有的Job</span><br><span class="line">print(server.get_jobs(&#39;myview&#39;))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">[&#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;, &#39;name&#39;: &#39;ansible-playbook&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;&#39;, &#39;color&#39;: &#39;aborted&#39;, &#39;fullname&#39;: &#39;ansible-playbook&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;, &#39;name&#39;: &#39;my-api&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;my-api&#x2F;&#39;, &#39;color&#39;: &#39;notbuilt&#39;, &#39;fullname&#39;: &#39;my-api&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleProject&#39;, &#39;name&#39;: &#39;my-github&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;my-github&#x2F;&#39;, &#39;color&#39;: &#39;disabled&#39;, &#39;fullname&#39;: &#39;my-github&#39;&#125;]</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 正则匹配获取Job信息</span><br><span class="line"># print(server.get_job_info_regex(&#39;^my&#39;))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">Job相关信息</span><br><span class="line">....</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 获取最后一次构建的Job信息</span><br><span class="line"># build a parameterized job</span><br><span class="line"># requires creating and configuring the ansible-playbook job to accept &#39;param1&#39; &amp; &#39;param2&#39;</span><br><span class="line">job_name &#x3D; &quot;ansible-playbook&quot;</span><br><span class="line">server.build_job(job_name, &#123;&#39;Branch&#39;: &#39;oriin&#x2F;master&#39;, &#39;host&#39;: &#39;192.168.1.110&#39;&#125;)</span><br><span class="line">last_build_number &#x3D; server.get_job_info(job_name)[&#39;lastCompletedBuild&#39;][&#39;number&#39;]</span><br><span class="line">build_info &#x3D; server.get_build_info(job_name, last_build_number)</span><br><span class="line">print(build_info)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&#123;&#39;_class&#39;: &#39;hudson.model.FreeStyleBuild&#39;, &#39;actions&#39;: [&#123;&#39;_class&#39;: &#39;hudson.model.ParametersAction&#39;, &#39;parameters&#39;: [&#123;&#39;_class&#39;: &#39;net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterValue&#39;, &#39;name&#39;: &#39;Branch&#39;, &#39;value&#39;: &#39;origin&#x2F;master&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.StringParameterValue&#39;, &#39;name&#39;: &#39;host&#39;, &#39;value&#39;: &#39;127.0.0.1,127.0.0.2,127.0.0.105&#39;&#125;]&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.CauseAction&#39;, &#39;causes&#39;: [&#123;&#39;_class&#39;: &#39;hudson.model.Cause$UserIdCause&#39;, &#39;shortDescription&#39;: &#39;Started by user 管理员&#39;, &#39;userId&#39;: &#39;admin&#39;, &#39;userName&#39;: &#39;管理员&#39;&#125;]&#125;, &#123;&#125;, &#123;&#39;_class&#39;: &#39;hudson.plugins.git.util.BuildData&#39;, &#39;buildsByBranchName&#39;: &#123;&#39;refs&#x2F;remotes&#x2F;origin&#x2F;master&#39;: &#123;&#39;_class&#39;: &#39;hudson.plugins.git.util.Build&#39;, &#39;buildNumber&#39;: 62, &#39;buildResult&#39;: None, &#39;marked&#39;: &#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;branch&#39;: [&#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;name&#39;: &#39;refs&#x2F;remotes&#x2F;origin&#x2F;master&#39;&#125;]&#125;, &#39;revision&#39;: &#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;branch&#39;: [&#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;name&#39;: &#39;refs&#x2F;remotes&#x2F;origin&#x2F;master&#39;&#125;]&#125;&#125;&#125;, &#39;lastBuiltRevision&#39;: &#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;branch&#39;: [&#123;&#39;SHA1&#39;: &#39;21c2b6ff6c842a86969f36f75424e17ae27eae68&#39;, &#39;name&#39;: &#39;refs&#x2F;remotes&#x2F;origin&#x2F;master&#39;&#125;]&#125;, &#39;remoteUrls&#39;: [&#39;git@git.icbc.net:ansible-roles&#x2F;zff.ansible.git&#39;], &#39;scmName&#39;: &#39;&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.plugins.git.GitTagAction&#39;&#125;, &#123;&#125;, &#123;&#39;_class&#39;: &#39;jenkins.model.InterruptedBuildAction&#39;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;], &#39;artifacts&#39;: [], &#39;building&#39;: False, &#39;description&#39;: None, &#39;displayName&#39;: &#39;#62&#39;, &#39;duration&#39;: 7069, &#39;estimatedDuration&#39;: 7681, &#39;executor&#39;: None, &#39;fullDisplayName&#39;: &#39;ansible-playbook #62&#39;, &#39;id&#39;: &#39;62&#39;, &#39;keepLog&#39;: False, &#39;number&#39;: 62, &#39;queueId&#39;: 33, &#39;result&#39;: &#39;ABORTED&#39;, &#39;timestamp&#39;: 1516186369042, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;job&#x2F;ansible-playbook&#x2F;62&#x2F;&#39;, &#39;builtOn&#39;: &#39;&#39;, &#39;changeSet&#39;: &#123;&#39;_class&#39;: &#39;hudson.plugins.git.GitChangeSetList&#39;, &#39;items&#39;: [], &#39;kind&#39;: &#39;git&#39;&#125;, &#39;culprits&#39;: []&#125;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># shutdown jenkins</span><br><span class="line">server.quiet_down()</span><br></pre></td></tr></table></figure>
<h4 id="Working-with-Jenkins-Views"><a href="#Working-with-Jenkins-Views" class="headerlink" title="Working with Jenkins Views"></a>Working with Jenkins Views</h4><p>This is an example showing how to create, configure and delete Jenkins views.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 试图相关</span><br><span class="line">print(server.get_views())</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">[&#123;&#39;_class&#39;: &#39;hudson.model.AllView&#39;, &#39;name&#39;: &#39;all&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;&#39;&#125;, &#123;&#39;_class&#39;: &#39;hudson.model.ListView&#39;, &#39;name&#39;: &#39;myview&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;view&#x2F;myview&#x2F;&#39;&#125;]</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># CURD VIEW</span><br><span class="line">server.view_exists()</span><br><span class="line">server.create_view(&#39;EMPTY&#39;, jenkins.EMPTY_VIEW_CONFIG_XML)</span><br><span class="line">views &#x3D; server.get_views()</span><br><span class="line">server.delete_view(&#39;EMPTY&#39;)</span><br><span class="line">server.reconfig_view(&#39;newview&#39;,jenkins.EMPTY_VIEW_CONFIG_XML)</span><br><span class="line">server.get_view_name(&#39;EMPTY&#39;)</span><br><span class="line">view_config &#x3D; server.get_view_config(&#39;EMPTY&#39;)</span><br><span class="line"># 获取试图下所有的job</span><br><span class="line">print(server._get_view_jobs(&#39;myview&#39;))</span><br><span class="line"></span><br><span class="line"># 试图配置信息</span><br><span class="line">print(server.get_view_config(&#39;myview&#39;))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;hudson.model.ListView&gt;</span><br><span class="line">  &lt;name&gt;myview&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;description&gt;测试试图&lt;&#x2F;description&gt;</span><br><span class="line">  &lt;filterExecutors&gt;false&lt;&#x2F;filterExecutors&gt;</span><br><span class="line">  &lt;filterQueue&gt;false&lt;&#x2F;filterQueue&gt;</span><br><span class="line">  &lt;properties class&#x3D;&quot;hudson.model.View$PropertyList&quot;&#x2F;&gt;</span><br><span class="line">  &lt;jobNames&gt;</span><br><span class="line">    &lt;comparator class&#x3D;&quot;hudson.util.CaseInsensitiveComparator&quot;&#x2F;&gt;</span><br><span class="line">    &lt;string&gt;ansible-playbook&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;string&gt;my-github&lt;&#x2F;string&gt;</span><br><span class="line">  &lt;&#x2F;jobNames&gt;</span><br><span class="line">  &lt;jobFilters&#x2F;&gt;</span><br><span class="line">  &lt;columns&gt;</span><br><span class="line">    &lt;hudson.views.StatusColumn&#x2F;&gt;</span><br><span class="line">    &lt;hudson.views.WeatherColumn&#x2F;&gt;</span><br><span class="line">    &lt;hudson.views.JobColumn&#x2F;&gt;</span><br><span class="line">    &lt;hudson.views.LastSuccessColumn&#x2F;&gt;</span><br><span class="line">    &lt;hudson.views.LastDurationColumn&#x2F;&gt;</span><br><span class="line">    &lt;hudson.views.BuildButtonColumn&#x2F;&gt;</span><br><span class="line">    &lt;hudson.plugins.git.GitBranchSpecifierColumn plugin&#x3D;&quot;git@3.7.0&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;columns&gt;</span><br><span class="line">  &lt;recurse&gt;false&lt;&#x2F;recurse&gt;</span><br><span class="line">&lt;&#x2F;hudson.model.ListView&gt;</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>建议使用Python Jenkins模块，相对JenkinsApi而言，模块封装的更好。接口调用更方便，更容易上手,模块内容不是很多，可以自己研读源码进行二次开发，方便与其他系统集成，更好的落地DevOps方案的实施;</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkinsfile 构建示例</title>
    <url>/2020/04/20/Jenkinsfile-%E6%9E%84%E5%BB%BA%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="Jenkinsfile-构建示例"><a href="#Jenkinsfile-构建示例" class="headerlink" title="Jenkinsfile 构建示例"></a>Jenkinsfile 构建示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;pipeline &#123;</span><br><span class="line">    &#x2F;&#x2F;在任何可用的代理上执行Pipeline</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    agent &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">            label &quot;PTtest&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    options &#123;</span><br><span class="line">        buildDiscarder(logRotator(numToKeepStr: &#39;5&#39;))</span><br><span class="line">        disableConcurrentBuilds()</span><br><span class="line">    &#125;</span><br><span class="line">    tools &#123;</span><br><span class="line">        jdk &#39;Oracle JDK 8&#39;</span><br><span class="line">        maven &#39;Maven 3&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    environment &#123;</span><br><span class="line">        def serviceName  &#x3D; &quot;&quot;</span><br><span class="line">        &#x2F;&#x2F; hosts must be splited by dot</span><br><span class="line">        def warFilePath &#x3D; &#39;mywo-crud-provider&#x2F;target&#x2F;mywo-crud-provider.war&#39;</span><br><span class="line">        def hosts &#x3D; &quot;10.41.118.137&quot;</span><br><span class="line">        def deploy_user &#x3D; &quot;app-deploy&quot;</span><br><span class="line">        def artifactsPath &#x3D; &quot;devops-artifacts&quot;</span><br><span class="line">        def department &#x3D; &quot;meiwozufang&quot;</span><br><span class="line">        def artifactOssPath &#x3D; &quot;$&#123; department &#125;&#x2F;$&#123; env.JOB_NAME &#125;&quot;</span><br><span class="line">        def tempFolder &#x3D; &quot;$&#123; WORKSPACE &#125;&#x2F;$&#123; env.JOB_NAME &#125;&#x2F;$&#123; env.BUILD_NUMBER &#125;&quot;</span><br><span class="line">        def target_dir &#x3D; &quot;&#x2F;data&#x2F;services&#x2F;tomcat-mywo-crud-8090&quot;</span><br><span class="line">        def git_commit_id &#x3D; &quot;&quot;</span><br><span class="line">        def artifact &#x3D; &quot;&quot;</span><br><span class="line">        def jmeterHome &#x3D; &quot;&#x2F;home&#x2F;jenkins&#x2F;apache-jmeter-3.1&quot;</span><br><span class="line">        def antHome &#x3D; &quot;&#x2F;home&#x2F;jenkins&#x2F;apache-ant-1.9.9&quot;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#39;Preparation&#39;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &quot;rm -rf &#x2F;tmp&#x2F;$&#123; env.JOB_NAME &#125;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;Checkout code&#39;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;starting fetchCode......&quot;</span><br><span class="line">                checkout scm</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;SonarQube analysis&#39;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &quot;starting codeAnalyze......&quot;</span><br><span class="line">                script &#123;</span><br><span class="line">                    echo &quot;starting script......&quot;</span><br><span class="line">                    def sonarqubeScannerHome &#x3D; tool name: &#39;SonarQube Scanner&#39;</span><br><span class="line">                    withSonarQubeEnv(&#39;SonarQube-Public&#39;) &#123;</span><br><span class="line">                        sh &quot;$&#123;sonarqubeScannerHome&#125;&#x2F;bin&#x2F;sonar-scanner&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> &#x2F;&#x2F;       stage(&quot;SonarQube Quality Gate&quot;) &#123;</span><br><span class="line"> &#x2F;&#x2F;           when &#123;</span><br><span class="line"> &#x2F;&#x2F;               branch fuck</span><br><span class="line"> &#x2F;&#x2F;           &#125;</span><br><span class="line"> &#x2F;&#x2F;           steps &#123;</span><br><span class="line"> &#x2F;&#x2F;               echo &quot;starting waitForQualityGate......&quot;</span><br><span class="line"> &#x2F;&#x2F;               script &#123;</span><br><span class="line"> &#x2F;&#x2F;                   echo &quot;starting script......&quot;</span><br><span class="line"> &#x2F;&#x2F;                    timeout(time: 1, unit: &#39;HOURS&#39;) &#123;</span><br><span class="line"> &#x2F;&#x2F;                      def qg &#x3D; waitForQualityGate()</span><br><span class="line"> &#x2F;&#x2F;                      if (qg.status !&#x3D; &#39;OK&#39;) &#123;</span><br><span class="line"> &#x2F;&#x2F;                         error &quot;Pipeline aborted due to quality gate failure: $&#123;qg.status&#125;&quot;</span><br><span class="line"> &#x2F;&#x2F;                      &#125;</span><br><span class="line"> &#x2F;&#x2F;                    &#125;</span><br><span class="line"> &#x2F;&#x2F;               &#125;</span><br><span class="line"> &#x2F;&#x2F;           &#125;</span><br><span class="line"> &#x2F;&#x2F;       &#125;</span><br><span class="line"></span><br><span class="line">        stage(&#39;Compile branch master&#39;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                branch &#39;master&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                withMaven(globalMavenSettingsConfig: &#39;bfa90212-2742-4611-aa71-8e0ec76d0c28&#39;, jdk: &#39;Oracle JDK 8&#39;, maven: &#39;Maven 3&#39;, mavenSettingsConfig: &#39;02e95d2b-6bb6-457d-943f-13c63095e500&#39;) &#123;</span><br><span class="line">                    sh &quot;mvn -Dmaven.test.skip&#x3D;true  clean package -U -DskipTests&#x3D;True&quot;</span><br><span class="line">                    sh &quot;echo this is master branch.&quot;</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;Compile branch test&#39;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                branch &#39;test&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                withMaven(globalMavenSettingsConfig: &#39;bfa90212-2742-4611-aa71-8e0ec76d0c28&#39;, jdk: &#39;Oracle JDK 8&#39;, maven: &#39;Maven 3&#39;, mavenSettingsConfig: &#39;02e95d2b-6bb6-457d-943f-13c63095e500&#39;) &#123;</span><br><span class="line">                    sh &quot;mvn -Dmaven.test.skip&#x3D;true  clean package -U -DskipTests&#x3D;True&quot;</span><br><span class="line">                    sh &quot;echo this is test branch.&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;Package &amp; Upload to OSS&#39;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &quot;mkdir -p $&#123; tempFolder &#125;&quot;</span><br><span class="line">                script &#123;</span><br><span class="line">                    sh &quot;echo Upload to OSS.&quot;</span><br><span class="line">                    git_commit_id &#x3D; sh(returnStdout: true, script: &#39;git rev-parse --short HEAD&#39;).trim() &#x2F;&#x2F;需要获取shell返回值操作</span><br><span class="line">                    serviceName &#x3D; sh(returnStdout: true, script: &quot;basename $&#123; warFilePath &#125; | cut -d . -f 1&quot;).trim()</span><br><span class="line">                    sh &quot;mv $&#123; warFilePath &#125; $&#123; tempFolder &#125;&#x2F;ROOT.war&quot;</span><br><span class="line">                    artifact &#x3D; &quot;$&#123; serviceName &#125;_$&#123; env.BUILD_NUMBER &#125;-$&#123; env.BRANCH_NAME &#125;-$&#123; git_commit_id &#125;.tar.gz&quot;</span><br><span class="line">                    sh &quot;mkdir -p $&#123; artifactsPath &#125; &amp;&amp; tar czf $&#123; artifactsPath &#125;&#x2F;$&#123; artifact &#125; -C $&#123; tempFolder &#125; ROOT.war&quot;</span><br><span class="line">                    sh &quot;upload-flash -f $&#123; artifactsPath &#125;&#x2F;$&#123; artifact &#125; -t $&#123; artifactOssPath &#125;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;Deploy Package&#39;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                branch &#39;test&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    echo &quot;starting deploy......&quot;</span><br><span class="line">                    &#x2F;&#x2F; 运维人员维护私有仓库，保存ansible-playbook的配置文件</span><br><span class="line">                    git([url: &#39;git@git.shuke.com:shuke&#x2F;ansiblefiles.git&#39;, branch: &#39;master&#39;, credentialsId: &#39;7bc6cda9-a250-4d99-962c-e2ede002db06&#39;])</span><br><span class="line">                    withDockerRegistry([credentialsId: &#39;82a6a986-3f85-49f9-a926-0edf499fd1e3&#39;, url: &#39;https:&#x2F;&#x2F;dockerhub.shuke.com:5000&#39;]) &#123;</span><br><span class="line">                        withDockerContainer([image: &#39;dockerhub.shuke.com:5000&#x2F;test&#x2F;ansible_deploy:1.0.4&#39;]) &#123;</span><br><span class="line">                            sh &quot;ansible-playbook -i hosts --extra-vars &#39;warFilePath&#x3D;$&#123; tempFolder &#125;&#x2F;ROOT.war target_dir&#x3D;$&#123; target_dir &#125;&#39; -vv deploy_war.yml -l $&#123; hosts &#125;&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;Integration Test&#39;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                branch &#39;test&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            parallel &#123;</span><br><span class="line">                stage(&#39;API Test&#39;) &#123;</span><br><span class="line">                    steps &#123;</span><br><span class="line">                        echo &quot;starting API......&quot;  </span><br><span class="line">                        echo &quot;starting fetchAPI......&quot;</span><br><span class="line">                        dir(&#39;API&#39;) &#123;</span><br><span class="line">                            echo &quot;starting APIScript......&quot;</span><br><span class="line">                            git([url: &#39;git@git.shuke.com:api_test&#x2F;RentHouse.git&#39;, branch: &#39;master&#39;, credentialsId: &#39;7726e85b-f455-40d1-b12c-447ecac70f23&#39;])</span><br><span class="line">                            script &#123;</span><br><span class="line">                                try &#123;</span><br><span class="line">                                    withDockerRegistry([credentialsId: &#39;82a6a986-3f85-49f9-a926-0edf499fd1e3&#39;, url: &#39;https:&#x2F;&#x2F;dockerhub.shuke.com:5000&#39;]) &#123;</span><br><span class="line">                                        withDockerContainer([image: &#39;dockerhub.shuke.com:5000&#x2F;test&#x2F;robotframework:1.0.1&#39;]) &#123;</span><br><span class="line">                                            sh &quot;pybot RentHouse_API_Test&#x2F;test&quot;</span><br><span class="line">                                        &#125; </span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;catch (exc) &#123;</span><br><span class="line">                                   echo &#39;Something failed, I should sound the klaxons!&#39;</span><br><span class="line">                                   emailContent &#x3D;  &quot;API执行过程中报错了！！&quot;</span><br><span class="line">                                &#125;finally&#123;</span><br><span class="line">                                  sh &quot;cp -r .&#x2F;output.xml &#x2F;home&#x2F;jenkins&#x2F;public&#x2F;outputRentHouse_API_Prduction.xml&quot;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">&#x2F;&#x2F;                stage(&#39;UI&#39;) &#123;</span><br><span class="line">&#x2F;&#x2F;                    steps &#123;</span><br><span class="line">&#x2F;&#x2F;                      echo &quot;starting UI......&quot;</span><br><span class="line">&#x2F;&#x2F;                    &#x2F;&#x2F;   测试闪银UI</span><br><span class="line">&#x2F;&#x2F;                        dir(&#39;UI&#39;) &#123;</span><br><span class="line">&#x2F;&#x2F;                            git([url: &#39;git@git.shuke.com:ui_test&#x2F;Wecash_RentalHouse.git&#39;, branch: &#39;master&#39;, credentialsId: &#39;7726e85b-f455-40d1-b12c-447ecac70f23&#39;])</span><br><span class="line">&#x2F;&#x2F;                            script &#123;</span><br><span class="line">&#x2F;&#x2F;                                echo &quot;starting UIScript......&quot;</span><br><span class="line">&#x2F;&#x2F;                                try &#123;</span><br><span class="line">&#x2F;&#x2F;                                   &#x2F;&#x2F;sh &quot;cd &#x2F;gg&quot;</span><br><span class="line">&#x2F;&#x2F;                                   echo &quot;starting UIScript......&quot;</span><br><span class="line">&#x2F;&#x2F;                                   &#x2F;&#x2F; 执行速度太慢，先注释代码</span><br><span class="line">&#x2F;&#x2F;                                   withDockerRegistry([credentialsId: &#39;82a6a986-3f85-49f9-a926-0edf499fd1e3&#39;, url: &#39;https:&#x2F;&#x2F;dockerhub.shuke.com:5000&#39;]) &#123;</span><br><span class="line">&#x2F;&#x2F;                                        withDockerContainer([image: &#39;dockerhub.shuke.com:5000&#x2F;test&#x2F;python-chromedriver:2.7-alpine3.7-selenium&#39;]) &#123;</span><br><span class="line">&#x2F;&#x2F;                                            sh &quot;python TestSuite&#x2F;Runner.py All All business-renthouse&quot;</span><br><span class="line">&#x2F;&#x2F;                                        &#125;</span><br><span class="line">&#x2F;&#x2F;                                    &#125;</span><br><span class="line">&#x2F;&#x2F;                                    sh &quot;&#x2F;usr&#x2F;bin&#x2F;python TestSuite&#x2F;Runner.py All All business-renthouse&quot;</span><br><span class="line">&#x2F;&#x2F;                                &#125;catch (exc) &#123;</span><br><span class="line">&#x2F;&#x2F;                                   echo &#39;Something failed, I should sound the klaxons!&#39;</span><br><span class="line">&#x2F;&#x2F;                                   emailContent &#x3D; &quot;UI执行过程中报错了！！&quot;</span><br><span class="line">&#x2F;&#x2F;                                &#125;</span><br><span class="line">&#x2F;&#x2F;                            &#125;</span><br><span class="line">&#x2F;&#x2F;                        &#125;</span><br><span class="line">&#x2F;&#x2F;                    &#125;</span><br><span class="line">&#x2F;&#x2F;                &#125;</span><br><span class="line">                stage(&#39;PT&#39;) &#123;</span><br><span class="line">                    steps &#123;</span><br><span class="line">                        echo &quot;starting PT......&quot;</span><br><span class="line">                        dir(&#39;PT&#39;) &#123;</span><br><span class="line">                            git credentialsId: &#39;7726e85b-f455-40d1-b12c-447ecac70f23&#39;, url: &#39;git@git.shuke.com:p_test&#x2F;MeiWo.git&#39;</span><br><span class="line">                        &#125;</span><br><span class="line">                        dir(&#39;Tools&#39;) &#123;</span><br><span class="line">                            script &#123;</span><br><span class="line">                                echo &quot;starting PTScript......&quot;</span><br><span class="line">                                git([url: &#39;git@git.shuke.com:gonghui&#x2F;script.git&#39;, branch: &#39;master&#39;, credentialsId: &#39;7726e85b-f455-40d1-b12c-447ecac70f23&#39;])</span><br><span class="line">                                try &#123;</span><br><span class="line">                                    withEnv([&quot;JAVA_HOME&#x3D;$&#123;tool &#39;Oracle JDK 8&#39;&#125;&quot;]) &#123;</span><br><span class="line">                                        sh &quot;$&#123;antHome&#125;&#x2F;bin&#x2F;ant -f $&#123; WORKSPACE &#125;&#x2F;Tools&#x2F;PerformFilesWithPipline&#x2F;build.xml -Dname&#x3D;MeiWo -Denv&#x3D;Test -DJOB_NAME&#x3D;$&#123;JOB_NAME&#125; -DWORKSPACE&#x3D;$&#123;WORKSPACE&#125; -DjmeterHome&#x3D;$&#123;jmeterHome&#125; run&quot;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    echo &quot;starting PTAnalyze......&quot;</span><br><span class="line">                                    sh &quot;python $&#123; WORKSPACE &#125;&#x2F;Tools&#x2F;PerformFilesWithPipline&#x2F;jmeterQYWeiXinWithTimeoutArgu.py $&#123; WORKSPACE &#125;&#x2F;PT&#x2F;results&#x2F; MeiWo 2 5 500 4000&quot;</span><br><span class="line">                                    sh &quot;cp -r $&#123; WORKSPACE &#125;&#x2F;PT&#x2F;results&#x2F;ParseOri.html &#x2F;home&#x2F;jenkins&#x2F;public&#x2F;&quot;</span><br><span class="line">                                &#125;catch (exc) &#123;</span><br><span class="line">                                    echo &#39;PT执行报错了!!&#39;</span><br><span class="line">                                    emailContent &#x3D; &quot;PT执行过程中报错了！！&quot;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;conformReport&amp;noticify&#39;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                branch &#39;test&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                 echo &quot;starting email......&quot;</span><br><span class="line">                 </span><br><span class="line">                dir(&#39;conformresult&#39;) &#123;</span><br><span class="line">                    script&#123;</span><br><span class="line">                        git([url: &#39;git@git.shuke.com:gonghui&#x2F;script.git&#39;, branch: &#39;master&#39;, credentialsId: &#39;7726e85b-f455-40d1-b12c-447ecac70f23&#39;])</span><br><span class="line">                        withDockerRegistry([credentialsId: &#39;82a6a986-3f85-49f9-a926-0edf499fd1e3&#39;, url: &#39;https:&#x2F;&#x2F;dockerhub.shuke.com:5000&#39;]) &#123;</span><br><span class="line">                            withDockerContainer([image: &#39;dockerhub.shuke.com:5000&#x2F;test&#x2F;python3.6.5:1.0.0&#39;,args: &#39;-v &#x2F;data&#x2F;docker&#x2F;jenkins-slave-prod&#x2F;public:&#x2F;home&#x2F;jenkins&#x2F;public&#39;]) &#123;</span><br><span class="line">                                sh &quot;python3 parseScript&#x2F;conformReport.py &#x2F;home&#x2F;jenkins&#x2F;public $&#123; email_list &#125; $&#123;JOB_NAME&#125;-Build&#x2F;&#x2F;$&#123;BUILD_ID&#125;-&quot;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            echo &#39;always!&#39;</span><br><span class="line">            deleteDir()</span><br><span class="line">        &#125;</span><br><span class="line">        success &#123;</span><br><span class="line">            emailext body: &quot;Pipeline Success: Please Go to deploy if you pushed master just now&quot;,</span><br><span class="line">                recipientProviders: [[$class: &#39;DevelopersRecipientProvider&#39;], [$class: &#39;RequesterRecipientProvider&#39;]],</span><br><span class="line">                subject: &quot;&#39;$&#123;JOB_NAME&#125;&#39; ($&#123;BUILD_NUMBER&#125;)times SUCCESS&quot;,</span><br><span class="line">                to: &#39;&#39;</span><br><span class="line">            echo &#39;success!&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        failure &#123;</span><br><span class="line">            emailext body: &quot;Pipeline error: Please go to $&#123;BUILD_URL&#125; and verify the build \n $&#123; emailContent &#125;&quot;,</span><br><span class="line">                recipientProviders: [[$class: &#39;DevelopersRecipientProvider&#39;], [$class: &#39;RequesterRecipientProvider&#39;]],</span><br><span class="line">                subject: &quot;&#39;$&#123;JOB_NAME&#125;&#39; ($&#123;BUILD_NUMBER&#125;)times FAILED&quot;,</span><br><span class="line">                to: &#39;&#39;</span><br><span class="line">            echo &#39;failure!&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        unstable &#123;</span><br><span class="line">            echo &#39;unstable!&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        changed &#123;</span><br><span class="line">            echo &#39;changed!&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title> Logrotate日志切割</title>
    <url>/2020/04/20/Logrotate%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/</url>
    <content><![CDATA[<h2 id="Logrotate日志切割"><a href="#Logrotate日志切割" class="headerlink" title="Logrotate日志切割"></a>Logrotate日志切割</h2><h3 id="crontab配置"><a href="#crontab配置" class="headerlink" title="crontab配置"></a>crontab配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">59 23 * * * &#x2F;usr&#x2F;sbin&#x2F;logrotate  -f  &#x2F;data&#x2F;scripts&#x2F;logrotate_pylog.conf</span><br></pre></td></tr></table></figure>

<h3 id="logrotate配置"><a href="#logrotate配置" class="headerlink" title="logrotate配置"></a>logrotate配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;data&#x2F;service&#x2F;proxy-pool-master-select&#x2F;nohup.out</span><br><span class="line">&#123;</span><br><span class="line">    rotate 1</span><br><span class="line">    daily</span><br><span class="line">    dateext</span><br><span class="line">    missingok</span><br><span class="line">    notifempty</span><br><span class="line">    compress</span><br><span class="line">    delaycompress</span><br><span class="line">    copytruncate</span><br><span class="line">    olddir &#x2F;data&#x2F;service&#x2F;proxy-pool-master-select</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;data&#x2F;service&#x2F;proxy-pool-master-core&#x2F;nohup.out</span><br><span class="line">&#123;</span><br><span class="line">    rotate 1</span><br><span class="line">    daily</span><br><span class="line">    dateext</span><br><span class="line">    missingok</span><br><span class="line">    notifempty</span><br><span class="line">    compress</span><br><span class="line">    delaycompress</span><br><span class="line">    copytruncate</span><br><span class="line">    olddir &#x2F;data&#x2F;service&#x2F;proxy-pool-master-core</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM调优命令</title>
    <url>/2020/04/20/JVM%E8%B0%83%E4%BC%98%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="JVM调优命令"><a href="#JVM调优命令" class="headerlink" title="JVM调优命令"></a>JVM调优命令</h2><blockquote>
<p>运用jvm自带的命令可以方便的在生产监控和打印堆栈的日志信息帮忙我们来定位问题！虽然jvm调优成熟的工具已经有很多：jconsole、大名鼎鼎的VisualVM，IBM的Memory Analyzer等等，但是在生产环境出现问题的时候，一方面工具的使用会有所限制，另一方面喜欢装X的我们，总喜欢在出现问题的时候在终端输入一些命令来解决。所有的工具几乎都是依赖于jdk的接口和底层的这些命令，研究这些命令的使用也让我们更能了解jvm构成和特性。<br>Sun JDK监控和故障处理命令有jps jstat jmap jhat jstack jinfo下面做一一介绍</p>
</blockquote>
<h3 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h3><blockquote>
<p>JVM Process Status Tool,显示指定系统内所有的HotSpot虚拟机进程。</p>
</blockquote>
<p>命令格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jps [options] [hostid]</span><br></pre></td></tr></table></figure>
<p>option参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-l : 输出主类全名或jar路径</span><br><span class="line">-q : 只输出LVMID</span><br><span class="line">-m : 输出JVM启动时传递给main()的参数</span><br><span class="line">-v : 输出JVM启动时显示指定的JVM参数</span><br></pre></td></tr></table></figure>
<p>其中<code>[option]、[hostid]</code>参数也可以不写</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@jav-collection01br-p001:~# jps -mlv</span><br><span class="line">1808 &#x2F;data&#x2F;services&#x2F;brazil_DivisionCaseTools&#x2F;DivisionCaseTools_br-1.0.jar --spring.profiles.active&#x3D;br-prod -Xmx1024M -Duser.timezone&#x3D;America&#x2F;Sao_Paulo</span><br><span class="line">8196 &#x2F;data&#x2F;services&#x2F;brazil_phonebook&#x2F;phonebook_br-0.0.1-SNAPSHOT.jar --spring.profiles.active&#x3D;br-prod -Xmx1024M -Duser.timezone&#x3D;America&#x2F;Sao_Paulo</span><br><span class="line">4756 org.apache.catalina.startup.Bootstrap start -Djava.util.logging.config.file&#x3D;&#x2F;data&#x2F;services&#x2F;brazil_AuthCenter&#x2F;conf&#x2F;logging.properties -Djava.util.logging.manager&#x3D;org.apache.juli.ClassLoaderLogManager -Xmx1G -Xms1G -XX:MetaspaceSize&#x3D;128M -XX:MaxMetaspaceSize&#x3D;128M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath&#x3D;&#x2F;data&#x2F;services&#x2F;brazil_AuthCenter&#x2F;logs&#x2F;dump -XX:+PrintClassHistogram -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -Xloggc:&#x2F;data&#x2F;services&#x2F;brazil_AuthCenter&#x2F;logs&#x2F;gc.log -Djdk.tls.ephemeralDHKeySize&#x3D;2048 -Djava.protocol.handler.pkgs&#x3D;org.apache.catalina.webresources -Djava.endorsed.dirs&#x3D;&#x2F;data&#x2F;services&#x2F;brazil_AuthCenter&#x2F;endorsed -Dcatalina.base&#x3D;&#x2F;data&#x2F;services&#x2F;brazil_AuthCenter -Dcatalina.home&#x3D;&#x2F;data&#x2F;services&#x2F;brazil_AuthCenter -Djava.io.tmpdir&#x3D;&#x2F;data&#x2F;services&#x2F;brazil_AuthCenter&#x2F;temp</span><br><span class="line">3928 &#x2F;data&#x2F;soft&#x2F;lts&#x2F;lts-task-tracker&#x2F;prod&#x2F;lts-tasktracker-springboot-1.6.9.jar -Duser.timezone&#x3D;America&#x2F;Sao_Paulo -Xmx256M</span><br></pre></td></tr></table></figure>

<h3 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h3><blockquote>
<p>jstat(JVM statistics Monitoring)是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。</p>
</blockquote>
<h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jstat [option] LVMID [interval] [count]</span><br></pre></td></tr></table></figure>
<p>补充:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">堆内存 &#x3D; 年轻代 + 年老代 + 永久代 + 元数据区</span><br><span class="line">年轻代 &#x3D; Eden区 + 两个Survivor区（From和To）</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; jstat -options</span><br><span class="line"></span><br><span class="line">-class 显示ClassLoad的相关信息；</span><br><span class="line">-compiler 显示JIT编译的相关信息；</span><br><span class="line">-gc 显示和gc相关的堆信息；</span><br><span class="line">-gccapacity 　　 显示各个代的容量以及使用情况；</span><br><span class="line">-gcmetacapacity 显示metaspace的大小</span><br><span class="line">-gcnew 显示新生代信息；</span><br><span class="line">-gcnewcapacity 显示新生代大小和使用情况；</span><br><span class="line">-gcold 显示老年代和永久代的信息；</span><br><span class="line">-gcoldcapacity 显示老年代的大小；</span><br><span class="line">-gcutil　　 显示垃圾收集信息；</span><br><span class="line">-gccause 显示垃圾回收的相关信息（通-gcutil）,同时显示最后一次或当前正在发生的垃圾回收的诱因；</span><br><span class="line">-printcompilation 输出JIT编译的方法信息</span><br></pre></td></tr></table></figure>
<p>参数名称 | 参数说明<br>—|—|—<br>class | 用于查看类加载情况的统计，显示加载class的数量，及所占空间等信息。<br>compiler | 查看HotSpot中即时编译器编译情况的统计<br>gc | 查看JVM中堆的垃圾收集情况的统计，可以显示gc的信息，查看gc的次数，及时间。其中最后五项，分别是young gc的次数，young gc的时间，full gc的次数，full gc的时间，gc的总时间。<br>gccapacity | 查看新生代、老生代及持久代的存储容量情况，可以显示，VM内存中三代（young,old,perm）对象的使用和占用大小<br>gccause | 查看垃圾收集的统计情况（这个和-gcutil选项一样），如果有发生垃圾收集，它还会显示最后一次及当前正在发生垃圾收集的原因<br>gcmetacapacity | 显示关于metaspace大小的统计信息。<br>gcnew | 查看新生代垃圾收集的情况，new对象的信息<br>gcnewcapacity | 用于查看新生代的存储容量情况，new对象的信息及其占用量<br>gcold | 用于查看老生代及持久代发生GC的情况，old对象的信息<br>gcoldcapacity | 用于查看老生代的容量，old对象的信息及其占用量<br>gcpermcapacity | 用于查看持久代的容量，perm对象的信息及其占用量<br>gcutil | 查看新生代、老生代及持代垃圾收集的情况<br>printcompilation | 当前VM执行的信息</p>
<h3 id="参数使用示例"><a href="#参数使用示例" class="headerlink" title="参数使用示例"></a>参数使用示例</h3><ol>
<li>jstat -gc  pid  垃圾回收统计<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@jav-collection01br-p001:~# jstat -gc 1808</span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">1536.0 1536.0 288.0   0.0   346112.0 136222.0  233472.0   151382.5  60416.0 58963.1 6912.0 6587.0  32144   93.009   5      0.469   93.478</span><br><span class="line">- S0C：第一个幸存区的大小</span><br><span class="line"></span><br><span class="line">- S1C：第二个幸存区的大小</span><br><span class="line"></span><br><span class="line">- S0U：第一个幸存区的使用大小</span><br><span class="line"></span><br><span class="line">- S1U：第二个幸存区的使用大小</span><br><span class="line"></span><br><span class="line">- EC：伊甸园区的大小</span><br><span class="line"></span><br><span class="line">- EU：伊甸园区的使用大小</span><br><span class="line"></span><br><span class="line">- OC：老年代大小</span><br><span class="line"></span><br><span class="line">- OU：老年代使用大小</span><br><span class="line"></span><br><span class="line">- MC：方法区大小</span><br><span class="line"></span><br><span class="line">- MU：方法区使用大小</span><br><span class="line"></span><br><span class="line">- CCSC:压缩类空间大小</span><br><span class="line"></span><br><span class="line">- CCSU:压缩类空间使用大小</span><br><span class="line"></span><br><span class="line">- YGC：年轻代垃圾回收次数</span><br><span class="line"></span><br><span class="line">- YGCT：年轻代垃圾回收消耗时间</span><br><span class="line"></span><br><span class="line">- FGC：老年代垃圾回收次数</span><br><span class="line"></span><br><span class="line">- FGCT：老年代垃圾回收消耗时间</span><br><span class="line"></span><br><span class="line">- GCT：垃圾回收消耗总时间</span><br></pre></td></tr></table></figure></li>
<li>jstat -gcutil pid  总垃圾回收统计<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@jav-collection01br-p001:~# jstat -gcutil 1808</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line"> 18.75   0.00  39.38  64.84  97.60  95.30  32144   93.009     5    0.469   93.478</span><br><span class="line"> S0：幸存1区当前使用比例</span><br><span class="line"></span><br><span class="line">S1：幸存2区当前使用比例</span><br><span class="line"></span><br><span class="line">E：伊甸园区使用比例</span><br><span class="line"></span><br><span class="line">O：老年代使用比例</span><br><span class="line"></span><br><span class="line">M：元数据区使用比例</span><br><span class="line"></span><br><span class="line">CCS：压缩使用比例</span><br><span class="line"></span><br><span class="line">YGC：年轻代垃圾回收次数</span><br><span class="line"></span><br><span class="line">FGC：老年代垃圾回收次数</span><br><span class="line"></span><br><span class="line">FGCT：老年代垃圾回收消耗时间</span><br><span class="line"></span><br><span class="line">GCT：垃圾回收消耗总时间</span><br></pre></td></tr></table></figure></li>
<li>jstat -gcnew  pid 新生代垃圾回收统计<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@jav-collection01br-p001:~# jstat -gcnew 1808</span><br><span class="line"> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT</span><br><span class="line">1536.0 1536.0  288.0    0.0 15  15 1536.0 346112.0 136299.9  32144   93.009</span><br><span class="line">- S0C：第一个幸存区大小</span><br><span class="line"></span><br><span class="line">- S1C：第二个幸存区的大小</span><br><span class="line"></span><br><span class="line">- S0U：第一个幸存区的使用大小</span><br><span class="line"></span><br><span class="line">- S1U：第二个幸存区的使用大小</span><br><span class="line"></span><br><span class="line">- TT:对象在新生代存活的次数</span><br><span class="line"></span><br><span class="line">- MTT:对象在新生代存活的最大次数</span><br><span class="line"></span><br><span class="line">- DSS:期望的幸存区大小</span><br><span class="line"></span><br><span class="line">- EC：伊甸园区的大小</span><br><span class="line"></span><br><span class="line">- EU：伊甸园区的使用大小</span><br><span class="line"></span><br><span class="line">- YGC：年轻代垃圾回收次数</span><br><span class="line"></span><br><span class="line">- YGCT：年轻代垃圾回收消耗时间</span><br></pre></td></tr></table></figure></li>
<li>jstat -gccapacity pid 堆内存统计<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 记忆这个命令可以根据单词组合记忆</span><br><span class="line"> -gc &#x3D;&gt; 名称</span><br><span class="line"> capacity &#x3D;&gt; 容量</span><br><span class="line">root@jav-collection01br-p001:~# jstat -gccapacity 1808</span><br><span class="line"> NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC</span><br><span class="line"> 40960.0 349184.0 349184.0 1536.0 1536.0 346112.0    81920.0   699392.0   233472.0   233472.0      0.0 1103872.0  60416.0      0.0 1048576.0   6912.0  32144     5</span><br><span class="line">NGCMN：新生代最小容量</span><br><span class="line"></span><br><span class="line">NGCMX：新生代最大容量</span><br><span class="line"></span><br><span class="line">NGC：当前新生代容量</span><br><span class="line"></span><br><span class="line">S0C：第一个幸存区大小</span><br><span class="line"></span><br><span class="line">S1C：第二个幸存区的大小</span><br><span class="line"></span><br><span class="line">EC：伊甸园区的大小</span><br><span class="line"></span><br><span class="line">OGCMN：老年代最小容量</span><br><span class="line"></span><br><span class="line">OGCMX：老年代最大容量</span><br><span class="line"></span><br><span class="line">OGC：当前老年代大小</span><br><span class="line"></span><br><span class="line">OC:当前老年代大小</span><br><span class="line"></span><br><span class="line">MCMN:最小元数据容量</span><br><span class="line"></span><br><span class="line">MCMX：最大元数据容量</span><br><span class="line"></span><br><span class="line">MC：当前元数据空间大小</span><br><span class="line"></span><br><span class="line">CCSMN：最小压缩类空间大小</span><br><span class="line"></span><br><span class="line">CCSMX：最大压缩类空间大小</span><br><span class="line"></span><br><span class="line">CCSC：当前压缩类空间大小</span><br><span class="line"></span><br><span class="line">YGC：年轻代gc次数</span><br><span class="line"></span><br><span class="line">FGC：老年代GC次数</span><br></pre></td></tr></table></figure></li>
<li>jstat -gcmetacapacity pid   元数据空间统计<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@jav-collection01br-p001:~# jstat -gcmetacapacity 1808</span><br><span class="line">   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT</span><br><span class="line">       0.0  1103872.0    60416.0        0.0  1048576.0     6912.0 32144     5    0.469   93.478</span><br><span class="line">MCMN:最小元数据容量</span><br><span class="line"></span><br><span class="line">MCMX：最大元数据容量</span><br><span class="line"></span><br><span class="line">MC：当前元数据空间大小</span><br><span class="line"></span><br><span class="line">CCSMN：最小压缩类空间大小</span><br><span class="line"></span><br><span class="line">CCSMX：最大压缩类空间大小</span><br><span class="line"></span><br><span class="line">CCSC：当前压缩类空间大小</span><br><span class="line"></span><br><span class="line">YGC：年轻代垃圾回收次数</span><br><span class="line"></span><br><span class="line">FGC：老年代垃圾回收次数</span><br><span class="line"></span><br><span class="line">FGCT：老年代垃圾回收消耗时间</span><br><span class="line"></span><br><span class="line">GCT：垃圾回收消耗总时间</span><br></pre></td></tr></table></figure></li>
<li>jstat -gcnewcapacity pid 新生代内存空间统计<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@jav-collection01br-p001:~# jstat -gcnewcapacity 1808</span><br><span class="line">  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC</span><br><span class="line">   40960.0   349184.0   349184.0 116224.0   1536.0 116224.0   1536.0   348160.0   346112.0 32144     5</span><br><span class="line">NGCMN：新生代最小容量</span><br><span class="line"></span><br><span class="line">NGCMX：新生代最大容量</span><br><span class="line"></span><br><span class="line">NGC：当前新生代容量</span><br><span class="line"></span><br><span class="line">S0CMX：最大幸存1区大小</span><br><span class="line"></span><br><span class="line">S0C：当前幸存1区大小</span><br><span class="line"></span><br><span class="line">S1CMX：最大幸存2区大小</span><br><span class="line"></span><br><span class="line">S1C：当前幸存2区大小</span><br><span class="line"></span><br><span class="line">ECMX：最大伊甸园区大小</span><br><span class="line"></span><br><span class="line">EC：当前伊甸园区大小</span><br><span class="line"></span><br><span class="line">YGC：年轻代垃圾回收次数</span><br><span class="line"></span><br><span class="line">FGC：老年代回收次数</span><br></pre></td></tr></table></figure></li>
<li>jstat -gcoldcapacity pid 老年代内存空间统计<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 每隔2秒采集一次数据</span><br><span class="line">root@jav-collection01br-p001:~# jstat -gcoldcapacity 1808 2000</span><br><span class="line">   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT</span><br><span class="line">    81920.0    699392.0    233472.0    233472.0 32144     5    0.469   93.478</span><br><span class="line">OGCMN：老年代最小容量</span><br><span class="line"></span><br><span class="line">OGCMX：老年代最大容量</span><br><span class="line"></span><br><span class="line">OGC：当前老年代大小</span><br><span class="line"></span><br><span class="line">OC：老年代大小</span><br><span class="line"></span><br><span class="line">YGC：年轻代垃圾回收次数</span><br><span class="line"></span><br><span class="line">FGC：老年代垃圾回收次数</span><br><span class="line"></span><br><span class="line">FGCT：老年代垃圾回收消耗时间</span><br><span class="line"></span><br><span class="line">GCT：垃圾回收消耗总时间</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><p><a href="https://www.cnblogs.com/ityouknow/p/5714703.html" target="_blank" rel="noopener">jvm系列(四):jvm调优-命令大全（jps jstat jmap jhat jstack jinfo） - 纯洁的微笑 - 博客园</a><br><a href="https://blog.csdn.net/u010758410/article/details/80315927" target="_blank" rel="noopener">JVM 堆内存设置原理 - 木子木泗的博客 - CSDN博客</a><br><a href="https://www.jianshu.com/p/ff46acfad03f" target="_blank" rel="noopener">jvm堆内存设置讲解 - 简书</a><br><a href="https://www.jianshu.com/p/845924a1b8f2" target="_blank" rel="noopener">jstat命令总结 - 简书</a><br><a href="https://www.jianshu.com/p/a09e08065720" target="_blank" rel="noopener">阿里员工都是这样排查Java问题的，附工具单 - 简书</a></p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Kong-api-gateway</title>
    <url>/2020/04/20/Kong-api-gateway/</url>
    <content><![CDATA[<h1 id="Kong-api-gateway"><a href="#Kong-api-gateway" class="headerlink" title="Kong-api-gateway"></a>Kong-api-gateway</h1><hr>

<p><a href="https://getkong.org" target="_blank" rel="noopener">Kong官方网站</a></p>
<h2 id="1-Install"><a href="#1-Install" class="headerlink" title="1. Install"></a>1. Install</h2><p><a href="https://konghq.com/install/" target="_blank" rel="noopener">install-kong</a></p>
<h2 id="2-postgresql"><a href="#2-postgresql" class="headerlink" title="2. postgresql"></a>2. postgresql</h2><ol>
<li>安装<br>sudo apt-get install postgresql-9.6<br>安装完成后，默认会：</li>
</ol>
<p>（1）创建名为”postgres”的Linux用户</p>
<p>（2）创建名为”postgres”、不带密码的默认数据库账号作为数据库管理员</p>
<p>（3）创建名为”postgres”的表</p>
<p>安装完成后的一些默认信息如下：</p>
<p>config /etc/postgresql/9.5/main<br>data /var/lib/postgresql/9.5/main<br>locale en_US.UTF-8<br>socket /var/run/postgresql<br>port 5432</p>
<p>安装完后会有PostgreSQL的客户端psql，通过 sudo -u postgres psql 进入，提示符变成： postgres=#<br>在这里可用执行SQL语句和psql的基本命令。可用的基本命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\password：设置密码</span><br><span class="line">\q：退出</span><br><span class="line">\h：查看SQL命令的解释，比如\h select。</span><br><span class="line">\?：查看psql命令列表。</span><br><span class="line">\l：列出所有数据库。</span><br><span class="line">\c [database_name]：连接其他数据库。</span><br><span class="line">\d：列出当前数据库的所有表格。</span><br><span class="line">\d [table_name]：列出某一张表格的结构。</span><br><span class="line">\du：列出所有用户。</span><br><span class="line">\e：打开文本编辑器。</span><br><span class="line">\conninfo：列出当前数据库和连接的信息。</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>修改默认管理员密码<br>以Linux用户”postgres”的身份（此时只有该用户有psql命令）执行psql客户端，进入该客户端的提示符界面（这里系统用户名、数据库用户名、数据库名都为postgres，故可采用简写形式）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -u postgres psql</span><br><span class="line">postgres&#x3D;# alter user postgres with password &#39;123456&#39;;</span><br></pre></td></tr></table></figure>
<p>若要删除该管理员的密码，则可用命令：sudo -u postgres psql -d postgres</p>
</li>
<li><p>配置远程连接<br>安装完成后，默认只能本地才能连接数据库，其他机子访问不了，需要进行配置。（以下示例开放了最大连接权限，实际配置根据你的需要而定）</p>
</li>
<li><p>1 修改监听地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;postgresql&#x2F;9.5&#x2F;main&#x2F;postgresql.conf </span><br><span class="line">将 #listen_addresses &#x3D; &#39;localhost&#39; 的注释去掉并改为 listen_addresses &#x3D; &#39;*&#39;</span><br></pre></td></tr></table></figure></li>
<li><p>修改可访问用户的IP段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;postgresql&#x2F;9.5&#x2F;main&#x2F;pg_hba.conf </span><br><span class="line">在文件末尾添加： host all all 0.0.0.0 0.0.0.0 md5 ，表示允许任何IP连接</span><br></pre></td></tr></table></figure></li>
<li><p>启动数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;postgresql start</span><br></pre></td></tr></table></figure></li>
<li><p>添加用户及授权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运行系统用户&quot;postgres&quot;的psql命令，进入客户端：</span><br><span class="line">sudo -u postgres psql</span><br><span class="line">创建用户&quot;kong&quot;并设置密码：</span><br><span class="line">postgres&#x3D;# create user kong with password &#39;123456&#39;;</span><br><span class="line">创建数据库kong，所有者为kong：</span><br><span class="line">postgres&#x3D;# create database kong owner kong;</span><br><span class="line">将konhg数据库的所有权限赋予kong用户，否则kong只能登录psql，没有任何数据库操作权限：</span><br><span class="line">grant all privileges on database kong to kong;. 添加用户及授权</span><br></pre></td></tr></table></figure></li>
<li><p>查看<br>postgres=# \du 得到用户列表<br>postgres=# \l  得到数据库列表<br>删除<br>postgres=# drop database kong<br>postgres=# drop user kong</p>
</li>
<li><p>常用操作命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建新表 </span><br><span class="line">CREATE TABLE user_tbl(name VARCHAR(20), signup_date DATE);</span><br><span class="line"># 插入数据 </span><br><span class="line">INSERT INTO user_tbl(name, signup_date) VALUES(&#39;张三&#39;, &#39;2013-12-22&#39;);</span><br><span class="line"># 选择记录 </span><br><span class="line">SELECT * FROM user_tbl;</span><br><span class="line"># 更新数据 </span><br><span class="line">UPDATE user_tbl set name &#x3D; &#39;李四&#39; WHERE name &#x3D; &#39;张三&#39;;</span><br><span class="line"># 删除记录 </span><br><span class="line">DELETE FROM user_tbl WHERE name &#x3D; &#39;李四&#39; ;</span><br><span class="line"># 添加栏位 </span><br><span class="line">ALTER TABLE user_tbl ADD email VARCHAR(40);</span><br><span class="line"># 更新结构 </span><br><span class="line">ALTER TABLE user_tbl ALTER COLUMN signup_date SET NOT NULL;</span><br><span class="line"># 更名栏位 </span><br><span class="line">ALTER TABLE user_tbl RENAME COLUMN signup_date TO signup;</span><br><span class="line"># 删除栏位 </span><br><span class="line">ALTER TABLE user_tbl DROP COLUMN email;</span><br><span class="line"># 表格更名 </span><br><span class="line">ALTER TABLE user_tbl RENAME TO backup_tbl;</span><br><span class="line"># 删除表格 </span><br><span class="line">DROP TABLE IF EXISTS backup_tbl;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="3-Kong-Dashboard"><a href="#3-Kong-Dashboard" class="headerlink" title="3. Kong-Dashboard"></a>3. Kong-Dashboard</h2><ul>
<li><a href="https://github.com/pantsel/konga" target="_blank" rel="noopener">Konga</a></li>
<li><a href="https://www.npmjs.com/package/kong-dashboard" target="_blank" rel="noopener">Kong-dashboard-node</a></li>
<li><a href="https://github.com/PGBI/kong-dashboard" target="_blank" rel="noopener">Kong-dashboard-github</a></li>
</ul>
]]></content>
      <categories>
        <category>Kong</category>
      </categories>
      <tags>
        <tag>Kong</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL相关面试</title>
    <url>/2020/04/20/MySQL%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<h2 id="MySQL相关面试"><a href="#MySQL相关面试" class="headerlink" title="MySQL相关面试"></a>MySQL相关面试</h2><p>一、mysql部分</p>
<p>二、django部分</p>
<p>三、Python部分</p>
<p>四、RESTful API设计指南</p>
<p>五、git</p>
<p>六、项目部分</p>
<p>一、MySQL</p>
<pre><code>1、mysql如何做分页

      mysql数据库做分页用limit关键字，它后面跟两个参数startIndex和pageSize


2、mysql引擎有哪些，各自的特点是什么？

     innodb和myisam两个引擎，两者区别是
 innodb支持事物，myisam不支持
 innodb支持外键，myisam不支持
 innodb不支持全文索引，myisam支持全文索引 
 innodb提供提交、回滚、崩溃恢复能力的事物的安全能力，实现并发控制
 myisam提供较高的插入和查询记录的效率，主要用于插入和查询


3、数据库怎么建立索引     </code></pre><p>1<br>create index account_index on <code>table name</code>(<code>字段名</code>(length)<br>       4、一张表多个字段，怎么创建组合索引</p>
<p>1<br>create index account_index on <code>table name</code>(<code>字段名</code>，’字段名’)<br>       5、如何应对数据的高并发，大量的数据计算</p>
<pre><code>      1.创建索引
      2.数据库读写分离，两个数据库，一个作为写，一个作为读
      3. 外键去掉
      4.django中orm表性能相关的
         select_related：一对多使用，查询主动做连表
         prefetch_related：多对多或者一对多的时候使用，不做连表，做多次查询

  6、数据库内连表、左连表、右连表

        内连接是根据某个条件连接两个表共有的数据
        左连接是根据某个条件以及左边的表连接数据，右边的表没有数据的话则为null
        右连接是根据某个条件以及右边的表连接数据，左边的表没有数据的话则为null

   7、视图和表的区别

         视图是已经编译好的sql语句，是基于sql语句的结果集的可视化的表，而表不是
         视图是窗口，表示内容
         视图没有实际的物理记录，而表有
         视图的建立和删除只影响视图本身，不影响对应的表

   8、关系型数据库的特点

        数据集中控制
        数据独立性高
        数据共享性好
        数据冗余度小
        数据结构化
        统一的数据保护能力

   9、mysql数据库都有哪些索引

        普通索引：普通索引仅有一个功能：加速查找
        唯一索引：唯一索引两个功能：加速查找和唯一约束（可含null）
        外键索引：外键索引两个功能：加速查找和唯一约束（不可为null）
        联合索引：联合索引是将n个列组合成一个索引，应用场景：同时使用n列来进行查询

 10、存储过程

         存储过程不允许执行return语句，但是可以通过out参数返回多个值，存储过程一般是作为一个独立的部分来执行，存储过程是一个预编译的SQL语句。

 11、sql优化：

       select句中避免使用 &apos;*&apos;
       减少访问数据库的次数
       删除重复记录
       用where子句替代having子句
       减少对表的查询
       explain  

12、char和vachar区别：

       char是固定长度，存储需要空间12个字节，处理速度比vachar快，费内存空间
       vachar是不固定长度，需要存储空间13个字节，节约存储空间

13、Mechached与redis

       mechached：只支持字符串，不能持久化，数据仅存在内存中，宕机或重启数据将全部失效
                             不能进行分布式扩展，文件无法异步法。
                             优点：mechached进程运行之后，会预申请一块较大的内存空间，自己进行管理。
        redis：支持服务器端的数据类型，redis与memcached相比来说，拥有更多的数据结构和并发支持更丰富的数据操作，可持久化。
                    五大类型数据：string、hash、list、set和有序集合，redis是单进程单线程的。
                    缺点：数据库的容量受到物理内存的限制。

 14、sql注入

          sql注入是比较常见的攻击方式之一，针对编程员编程的疏忽，通过sql语句，实现账号无法登陆，甚至篡改数据库。
          防止：凡涉及到执行sql中有变量时，切记不要用拼接字符串的方法

15、什么是触发器 

          触发器是一种特殊的存储过程，主要是通过事件来触发而被执行的，他可以强化约束，来维护数据库的完整性和一致性，可以跟踪数据内的操作从而不允许未经许可的                 更新和变化，可以联级运算。
          只有表支持触发器，视图不支持触发器

 16、游标是什么？

          是对查询出来的结果集作为一个单元来有效的处理，游标可以定在该单元中的特定行，从结果集的当前行检索一行或多行，可以对结果集当前行做修改，
          一般不使用游标，但是需要逐条处理数据的时候，游标显得十分重要

  17、 数据库支持多有标准的SQL数据类型，重要分为三类

             数值类型（tinyint，int，bigint，浮点数，bit）
             字符串类型（char和vachar，enum，text，set）
             日期类型（date，datetime，timestamp）

   18、mysql慢查询

            慢查询对于跟踪有问题的查询很有用，可以分析出当前程序里哪些sql语句比较耗费资源
            慢查询定义：
                指mysql记录所有执行超过long_query_time参数设定的时间值的sql语句，慢查询日志就是记录这些sql的日志。
                mysql在windows系统中的配置文件一般是my.ini找到mysqld
                log-slow-queries = F:\MySQL\log\mysqlslowquery.log  为慢查询日志存放的位置，一般要有可写权限
                long_query_time = 2  2表示查询超过两秒才记录

    19、memcached命中率

            命中：可以直接通过缓存获取到需要的数据
            不命中：无法直接通过缓存获取到想要的数据，需要再次查询数据库或者执行其他的操作，原因可能是由于缓存中根本不存在，或者缓存已经过期
            缓存的命中率越高则表示使用缓存的收益越高，应额用的性能越好，抗病发能力越强
            运行state命令可以查看memcached服务的状态信息，其中cmd—get表示总的get次数，get—hits表示命中次数，命中率=get—hits / cmd—get

    20、Oracle和MySQL该如何选择，为什么？

             他们都有各自的优点和缺点。考虑到时间因素，我倾向于MySQL
             选择MySQL而不选Oracle的原因
             MySQL开源
             MySQL轻便快捷
             MySQL对命令行和图形界面的支持都很好
             MySQL支持通过Query Browser进行管理

     21、什么情况下适合建立索引？

            1.为经常出现在关键字order by、group by、distinct后面的字段，建立索引
            2.在union等集合操作的结果集字段上，建立索引，其建立索引的目的同上
            3.为经常用作查询选择的字段，建立索引
            4.在经常用作表连接的属性上，建立索引

     22、数据库底层是用什么结构实现的，你大致画一下：

               底层用B+数实现，结构图参考：                                    
                http://blog.csdn.net/cjfeii/article/details/10858721
                http://blog.csdn.net/tonyxf121/article/details/8393545

      23、sql语句应该考虑哪些安全性？

               1.防止sql注入，对特殊字符进行转义，过滤或者使用预编译的sql语句绑定变量
              2.最小权限原则，特别是不要用root账户，为不同的类型的动作或者组建使用不同的账户
              3.当sql运行出错时，不要把数据库返回的错误信息全部显示给用户，以防止泄漏服务器和数据库相关信息

      24、数据库事物有哪几种？

               隔离性、持续性、一致性、原子性

      25、MySQ数据表在什么情况下容易损坏？

                服务器突然断电导致数据文件损坏
                强制关机，没有先关闭mysq服务器等

       26、drop，delete与truncate的区别

                drop直接删除表
                truncate删除表中数据，再插入时自增长id又从1开始 
                delete删除表中数据，可以加where子句

        27、数据库范式

                  1.第一范式：就是无重复的列
                  2.第二范式：就是非主属性非部分依赖于主关键字
                  3.第三范式：就是属性不依赖于其他非主属性（消除冗余）

         28、MySQL锁类型

                   根据锁的类型分：可以分为共享锁、排他锁、意向共享锁和意向排他锁
                   根据锁的粒度分：可以分为行锁、表锁
                   对于mysql而言，事务机制更多是靠底层的存储引擎来实现的，因此，mysql层面只有表锁，
                   而支持事物的innodb存储引起则实现了行锁（在行相应的索引记录上的锁）
                   说明：对于更新操作（读不上锁），只有走索引才可能上行锁
                   MVCC（多版本并发控制）并发控制机制下，任何操作都不会阻塞读取操作，
                   读取操作也不会阻塞任何操作，只因为读不上锁
                    共享锁：由读表操作加上的锁，加锁后其他用户只能获取该表或行的共享锁，不能获取排他锁，
                                  也就是说只能读不能写
                    排他锁：由写表操作加上的锁，加锁后其他用户不能获取该表或该行的任何锁，典型mysql事物中的更新操作
                    意向共享锁（IS）：事物打算给数据行加行共享锁，事物在给一个数据行加共享锁前必须先取得该表的IS锁
                    意向排他锁（IX）：事物打算给数据行加行排他锁，事物在给一个数据行家排他锁前必须先取得该表的IX锁


          29、如何解决MYSQL数据库中文乱码问题？

                   1.在数据库安装的时候指定字符集
                   2.如果在按完了以后可以更改配置文件
                   3.建立数据库时候：指定字符集类型
                   4.建表的时候也指定字符集     

          30、数据库应用系统设计

                  1.规划  
                  2.需求分析
                  3.概念模型设计
                  4.逻辑设计
                  5.物理设计
                  6. 程序编制及调试
                  7.运行及维护     
            ps：数据库常见面试问题总结
                    https://yq.aliyun.com/wenji/     </code></pre>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的经典shell命令整理</title>
    <url>/2020/04/20/Linux%E7%9A%84%E7%BB%8F%E5%85%B8shell%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="Linux的经典shell命令整理"><a href="#Linux的经典shell命令整理" class="headerlink" title="Linux的经典shell命令整理"></a>Linux的经典shell命令整理</h3><ol>
<li>删除0字节文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find -type f -size 0 -exec rm -rf &#123;&#125; \\;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li>查看进程</li>
</ol>
<p>按内存从大到小排列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -e -o “%C : %p : %z : %a”|sort -k5 -nr</span><br></pre></td></tr></table></figure>


<ol start="3">
<li>按cpu利用率从大到小排列<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -e -o “%C : %p : %z : %a”|sort -nr</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="4">
<li>打印说cache里的URL<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -r -a jpg &#x2F;data&#x2F;cache&#x2F;* | strings | grep “http:” | awk -F’http:’ ‘&#123;print “http:”$2;&#125;’</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="5">
<li>查看http的并发请求数及其TCP连接状态：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -n | awk ‘&#x2F;^tcp&#x2F; &#123;++S\[$NF\]&#125; END &#123;for(a in S) print a, S\[a\]&#125;’</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="6">
<li>修改sshd<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i ‘&#x2F;Root&#x2F;s&#x2F;no&#x2F;yes&#x2F;’ &#x2F;etc&#x2F;ssh&#x2F;sshd_config sed在这个文里Root的一行，匹配Root一行，将no替换成yes.</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="7">
<li>如何杀掉mysql进程：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps aux|grep mysql|grep -v grep|awk ‘&#123;print $2&#125;’|xargs kill -9</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>(从中了解到awk的用途)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pgrep mysql |xargs kill -9</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">killall -TERM mysqld</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -9 \&#96;cat &#x2F;usr&#x2F;local&#x2F;apache2&#x2F;logs&#x2F;httpd.pid\&#96;</span><br></pre></td></tr></table></figure>

<p>试试查杀进程PID</p>
<ol start="8">
<li>显示运行3级别开启的服务:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls &#x2F;etc&#x2F;rc3.d&#x2F;S* |cut -c 15-</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>(从中了解到cut的用途，截取数据)</p>
<ol start="9">
<li><p>如何在编写SHELL显示多个信息，用EOF</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF +--------------------------------------------------------------+ | &#x3D;&#x3D;&#x3D; Welcome to Tunoff services &#x3D;&#x3D;&#x3D; | +--------------------------------------------------------------+ EOF</span><br></pre></td></tr></table></figure>
</li>
<li><p>for 的巧用(如给mysql建软链接)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin for i in * do ln &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;$i &#x2F;usr&#x2F;bin&#x2F;$i done</span><br></pre></td></tr></table></figure>
</li>
<li><p>取IP地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig eth0|sed -n &#39;2p&#39;|awk &#39;&#123;print $2&#125;&#39;|cut -c 6-30 或者: ifconfig eth0 |grep &quot;inet addr:&quot; |awk &#39;&#123;print $2&#125;&#39;|cut -c 6- 或者 ifconfig | grep &#39;inet addr:&#39;| grep -v &#39;127.0.0.1&#39; | cut -d: -f2 | awk &#39;&#123; print $1&#125;&#39; 或者： ifconfig eth0 | sed -n &#39;&#x2F;inet &#x2F;&#123;s&#x2F;.\*addr:&#x2F;&#x2F;;s&#x2F; .\*&#x2F;&#x2F;;p&#125;&#39;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>Perl实现获取IP的方法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig -a | perl -ne &#39;if ( m&#x2F;^\\s\*inet (?:addr:)?(\[\\d.\]+).\*?cast&#x2F; ) &#123; print qq($1\\n); exit 0; &#125;&#39;</span><br></pre></td></tr></table></figure>

<ol start="12">
<li><p>内存的大小: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">free -m |grep &quot;Mem&quot; | awk &#39;&#123;print $2&#125;&#39;</span><br></pre></td></tr></table></figure></li>
<li><p>获取nginx的连接IP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -an -t | grep &quot;:80&quot; | grep ESTABLISHED | awk &#39;&#123;printf &quot;%s %s\\n&quot;,$5,$6&#125;&#39; | sort</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看Apache的并发请求数及其TCP连接状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -n | awk &#39;&#x2F;^tcp&#x2F; &#123;++S\[$NF\]&#125; END &#123;for(a in S) print a, S\[a\]&#125;&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>因为同事要统计一下服务器下面所有的jpg的文件的大小,写了个shell给他来统计.原来用xargs实现,但他一次处理一部分,搞的有多个总和….,下面的命令就能解决啦.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -name *.jpg -exec wc -c &#123;&#125; \\;|awk &#39;&#123;print $1&#125;&#39;|awk &#39;&#123;a+&#x3D;$1&#125;END&#123;print a&#125;&#39;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>CPU的数量（多核算多个CPU， cat /proc/cpuinfo |grep -c processor ）越多，系统负载越低，每秒能处理的请求数也越多。</p>
<p>--------------------------------------------------------------------------------------------------------------------</p>
<ol start="16">
<li><p>CPU负载 # cat /proc/loadavg 检查前三个输出值是否超过了系统逻辑CPU的4倍。</p>
</li>
<li><p>CPU负载 # mpstat 1 1 检查%idle是否过低(比如小于5%)</p>
</li>
<li><p>内存空间 # free 检查free值是否过低 也可以用 # cat /proc/meminfo</p>
</li>
<li><p>swap空间 # free 检查swap used值是否过高 如果swap used值过高，进一步检查swap动作是否频繁： # vmstat 1 5 观察si和so值是否较大</p>
</li>
<li><p>磁盘空间 # df -h 检查是否有分区使用率(Use%)过高(比如超过90%) 如发现某个分区空间接近用尽，可以进入该分区的挂载点，用以下命令找出占用空间最多的文件或目录： # du -cks * | sort -rn | head -n 10</p>
</li>
<li><p>磁盘I/O负载 # iostat -x 1 2 检查I/O使用率(%util)是否超过100%</p>
</li>
<li><p>网络负载 # sar -n DEV 检查网络流量(rxbyt/s, txbyt/s)是否过高</p>
</li>
<li><p>网络错误 # netstat -i 检查是否有网络错误(drop fifo colls carrier) 也可以用命令：# cat /proc/net/dev</p>
</li>
<li><p>网络连接数目 # netstat -an | grep -E “^(tcp)” | cut -c 68- | sort | uniq -c | sort -n</p>
</li>
<li><p>进程总数 # ps aux | wc -l 检查进程个数是否正常 (比如超过250)</p>
</li>
<li><p>可运行进程数目 # vmwtat 1 5 列给出的是可运行进程的数目，检查其是否超过系统逻辑CPU的4倍</p>
</li>
<li><p>进程 # top -id 1 观察是否有异常进程出现</p>
</li>
<li><p>网络状态 检查DNS, 网关等是否可以正常连通</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping traceroute nslookup dig</span><br></pre></td></tr></table></figure>
</li>
<li><p>用户 # who | wc -l 检查登录用户是否过多 (比如超过50个) 也可以用命令：# uptime</p>
</li>
<li><p>系统日志 # cat /var/log/rflogview/*errors</p>
</li>
</ol>
<p>检查是否有异常错误记录 也可以搜寻一些异常关键字，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># grep -i error &#x2F;var&#x2F;log&#x2F;messages</span><br><span class="line"># grep -i fail &#x2F;var&#x2F;log&#x2F;messages</span><br><span class="line"># egrep -i &#39;error|warn&#39; &#x2F;var&#x2F;log&#x2F;messages 查看系统异常 32 核心日志</span><br></pre></td></tr></table></figure>
<h1 id="dmesg-检查是否有异常错误记录"><a href="#dmesg-检查是否有异常错误记录" class="headerlink" title="dmesg 检查是否有异常错误记录"></a>dmesg 检查是否有异常错误记录</h1><ol start="33">
<li>系统时间 # date 检查系统时间是否正确</li>
</ol>
<p>当前时间:  <code>date +&quot;%Y-%m-%d %H:%M:%S&quot;</code></p>
<ol start="34">
<li><p>打开文件数目 # lsof | wc -l 检查打开文件总数是否过多</p>
</li>
<li><p>日志 # logwatch ?print 配置/etc/log.d/logwatch.conf，将 Mailto 设置为自己的email 地址，启动mail服务 (sendmail或者postfix)，这样就可以每天收到日志报告了。</p>
</li>
</ol>
<p>缺省logwatch只报告昨天的日志，可以用# logwatch ?print ?range all 获得所有的日志分析结果。</p>
<p>可以用# logwatch ?print ?detail high 获得更具体的日志分析结果(而不仅仅是出错日志)。</p>
<ol start="36">
<li><p>杀掉80端口相关的进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -i :80|grep -v &quot;PID&quot;|awk &#39;&#123;print &quot;kill -9&quot;,$2&#125;&#39;|sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>清除僵死进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -eal | awk &#39;&#123; if ($2 &#x3D;&#x3D; &quot;Z&quot;) &#123;print $4&#125;&#125;&#39; | kill -9</span><br></pre></td></tr></table></figure>
</li>
<li><p>tcpdump 抓包 ，用来防止80端口被人攻击时可以分析数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tcpdump -c 10000 -i eth0 -n dst port 80 &gt; &#x2F;root&#x2F;pkts</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后检查IP的重复数 并从小到大排序 注意 “-t\ +0″ 中间是两个空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># less pkts | awk &#123;&#39;printf $3&quot;\\n&quot;&#39;&#125; | cut -d. -f 1-4 | sort | uniq -c | awk &#123;&#39;printf $1&quot; &quot;$2&quot;\\n&quot;&#39;&#125; | sort -n -t\ +0</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看有多少个活动的php-cgi进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep php-cgi | grep ^tcp | wc -l</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用iptables对应简单攻击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -an | grep -v LISTEN | awk ‘&#123;print $5&#125;’ |grep -v 127.0.0.1|grep -v 本机ip|sed “s&#x2F;::ffff:&#x2F;&#x2F;g”|awk ‘BEGIN &#123; FS&#x3D;”:” &#125; &#123; Num\[$1\]++ &#125; END &#123; for(i in Num) if(Num&gt;8) &#123; print i&#125; &#125;’ |grep ‘\[0-9\]\\&#123;1,3\\&#125;\\.\[0-9\]\\&#123;1,3\\&#125;\\.\[0-9\]\\&#123;1,3\\&#125;\\.\[0-9\]\\&#123;1,3\\&#125;’| xargs -i\[\] iptables -I INPUT -s \[\] -j DROP</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>Num&gt;8部分设定值为阀值，这条句子会自动将netstat -an 中查到的来自同一ＩＰ的超过一定量的连接的列入禁止范围。 基中本机ip改成你的服务器的ip地址</p>
<ol start="42">
<li><p>怎样知道某个进程在哪个CPU上运行？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ps -eo pid,args,psr</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看硬件制造商</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dmidecode -s system-product-name</span><br></pre></td></tr></table></figure>
</li>
<li><p>perl如何编译成字节码，这样在处理复杂项目的时候会更快一点？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perlcc -B -o webseek webseek.pl</span><br></pre></td></tr></table></figure>
</li>
<li><p>统计var目录下文件以M为大小,以列表形式列出来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F;var -type f | xargs ls -s | sort -rn | awk ‘&#123;size&#x3D;$1&#x2F;1024; printf(“%dMb %s\\n”, size,$2);&#125;’ | head</span><br></pre></td></tr></table></figure>
<p>查找var目录下文件大于100M的文件，并统计文件的个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F;var -size +100M -type f | tee file_list | wc -l</span><br></pre></td></tr></table></figure>
</li>
<li><p>sed 查找并替换内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i “s&#x2F;varnish&#x2F;LTCache&#x2F;g” \&#96;grep “Via” -rl &#x2F;usr&#x2F;local&#x2F;src&#x2F;varnish-2.0.4\&#96;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i “s&#x2F;X-Varnish&#x2F;X-LTCache&#x2F;g” \&#96;grep “X-Varnish” -rl &#x2F;usr&#x2F;local&#x2F;src&#x2F;varnish-2.0.4\&#96;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看服务器制造商</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dmidecode -s system-product-name</span><br></pre></td></tr></table></figure>
</li>
<li><p>wget 模拟user-agent抓取网页</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -m -e robots&#x3D;off -U “Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1.6) Gecko&#x2F;20091201 Firefox&#x2F;3.5.6” http:&#x2F;&#x2F;www.example.com&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>统计目录下文件的大小（按M打印显示）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du $1 –max-depth&#x3D;1 | sort -n|awk ‘&#123;printf “%7.2fM —-&gt; %s\\n”,$1&#x2F;1024,$2&#125;’|sed ‘s:&#x2F;.*&#x2F;\\(\[^&#x2F;\]\\&#123;1,\\&#125;\\)$:\\1:g’</span><br></pre></td></tr></table></figure>
</li>
<li><p>关于CND实施几个相关的统计</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">统计一个目录中的目录个数</span><br><span class="line">ls -l | awk ‘&#x2F;^d&#x2F;’ | wc -l</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>统计一个目录中的文件个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l | awk ‘&#x2F;^-&#x2F;’ | wc -l</span><br></pre></td></tr></table></figure>

<p>统计一个目录中的全部文件数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find .&#x2F; -type f -print | wc -l</span><br></pre></td></tr></table></figure>

<p>统计一个目录中的全部子目录数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find .&#x2F; -type d -print | wc -l</span><br></pre></td></tr></table></figure>

<p>统计某类文件的大小:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find .&#x2F; -name “*.jpg” -exec wc -c &#123;&#125; \\;|awk ‘&#123;print $1&#125;’|awk ‘&#123;a+&#x3D;$1&#125;END&#123;print a&#125;’</span><br></pre></td></tr></table></figure>

<ol start="51">
<li><p>查找占用磁盘IO最多的进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -c http:&#x2F;&#x2F;linux.web.psi.ch&#x2F;dist&#x2F;scientific&#x2F;5&#x2F;gfa&#x2F;all&#x2F;dstat-0.6.7-1.rf.noarch.rpm</span><br><span class="line"></span><br><span class="line">dstat -M topio -d -M topbio</span><br></pre></td></tr></table></figure>
</li>
<li><p>去掉第一列（如行号代码）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk ‘&#123;for(i&#x3D;2;i&lt;&#x3D;NF;i++) if(i!&#x3D;NF)&#123;printf $i&quot; &quot;&#125;else&#123;print $i&#125; &#125;&#39; list</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出256中色彩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in &#123;0..255&#125;; do echo -e &quot;\\e\[38;05;$&#123;i&#125;m$&#123;i&#125;&quot;; done | column -c 80 -s &#39; &#39;; echo -e &quot;\\e\[m&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看机器支持内存 机器插内存情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dmidecode |grep -P &quot;Maximum\\s+Capacity&quot;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>机器最大支持内存： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dmidecode |grep -P &quot;Maximum\\s+Capacity&quot;</span><br></pre></td></tr></table></figure>

<ol start="55">
<li><p>查看PHP-CGI占用的内存总数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">total&#x3D;0; for i in \&#96;ps -C php-cgi -o rss&#x3D;\&#96;; do total&#x3D;$(($total+$i)); done; echo &quot;PHP-CGI Memory usage: $total kb&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看主板型号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dmidecode |grep -A 8 &quot;System Information&quot;System Information</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看cpu型号，主频</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &#x2F;proc&#x2F;cpuinfo | grep name | cut -f2 -d: | uniq -c</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看内存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># free -m</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看内存条数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~\]# dmidecode -t memory|grep Size</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看硬盘大小，分区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~\]# df -hFilesystem Size Used Avail Use% Mounted on&#x2F;dev&#x2F;sda3 119G 17G 96G 15% &#x2F;</span><br><span class="line">[root@localhost ~\]# dmesg |grep -i raid</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看网卡</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~\]# lspci | grep -i &#39;eth&#39;05:00.0 Ethernet controller: Intel Corporation 82576 Gigabit Network Connection (rev 01)05:00.1 Ethernet controller: Intel Corporation 82576 Gigabit Network Connection (rev 01)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看2号网络流量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sar -n DEV -f &#x2F;var&#x2F;log&#x2F;sa&#x2F;sa2 |grep eth|less</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看板载显示信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~\]# dmidecode |grep -A 5 &quot;On Board Device Information&quot;On Board Device</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>作者：NetSeek 来源：<a href="http://bbs.linuxtone.org/thread-16-1-1.html" target="_blank" rel="noopener">http://bbs.linuxtone.org/thread-16-1-1.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>SHELL</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SHELL</tag>
      </tags>
  </entry>
  <entry>
    <title>Lsof VS netstat</title>
    <url>/2020/04/20/Lsof-VS-netstat/</url>
    <content><![CDATA[<h2 id="Lsof-VS-netstat"><a href="#Lsof-VS-netstat" class="headerlink" title="Lsof VS netstat"></a>Lsof VS netstat</h2><p>众所周知水果系统内核是有 BSD 血统的 Darwin，OS X 自带的很多 CLI 工具也是 BSD style 的，有一部分使用起来和 Linux 无异，有一部分可以通过 brew 安装 GNU 版本（如 tar），但是 OS X 的 netstat 不能查看使用端口的程序名让我一直很不爽，而且也没找到 GNU 版本，于是去搜了一下解决办法，stackoverflow 上的结论基本都是建议使用 lsof 代替 netstat 进行查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lsof -nP -iTCP:端口号 -sTCP:LISTEN</span><br></pre></td></tr></table></figure>
<ul>
<li>-n 表示不显示主机名</li>
<li>-P 表示不显示端口俗称</li>
<li>不加 sudo 只能查看以当前用户运行的程序</li>
</ul>
<p>另外，还可以通过管道来过滤想要的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lsof -nP -iTCP -sTCP:LISTEN | grep python</span><br></pre></td></tr></table></figure>
<p>基本效果如下：<br>查看当前所有监听的端口以及对应的Command和PID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ lsof -nP -iTCP -sTCP:LISTEN</span><br><span class="line">COMMAND    PID     USER   FD   TYPE             DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class="line">SSH\x20Pr 1553 tonydeng    8u  IPv4 0xee7327e39355d175      0t0  TCP 127.0.0.1:8087 (LISTEN)</span><br><span class="line">SSH\x20Pr 1553 tonydeng    9u  IPv6 0xee7327e38aad6e15      0t0  TCP [::1]:8087 (LISTEN)</span><br><span class="line">java      2978 tonydeng  166u  IPv6 0xee7327e38aad7e35      0t0  TCP *:62622 (LISTEN)</span><br><span class="line">node      3319 tonydeng   31u  IPv4 0xee7327e39f0f8745      0t0  TCP *:4000 (LISTEN)</span><br></pre></td></tr></table></figure>
<p>查看指定端口对应的Command和PID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ lsof -nP -iTCP:4000 -sTCP:LISTEN</span><br><span class="line">COMMAND  PID     USER   FD   TYPE             DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class="line">node    3319 tonydeng   31u  IPv4 0xee7327e39f0f8745      0t0  TCP *:4000 (LISTEN)</span><br></pre></td></tr></table></figure>
<p>PS: 输出占用该端口的 PID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -nP -iTCP:4000 |grep LISTEN|awk &#39;&#123;print $2;&#125;&#39;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux运维高手必备的10个系统命令</title>
    <url>/2020/04/20/Linux%E8%BF%90%E7%BB%B4%E9%AB%98%E6%89%8B%E5%BF%85%E5%A4%87%E7%9A%8410%E4%B8%AA%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Linux运维高手必备的10个系统命令"><a href="#Linux运维高手必备的10个系统命令" class="headerlink" title="Linux运维高手必备的10个系统命令"></a>Linux运维高手必备的10个系统命令</h2><h3 id="下面可能是你不曾用过的十个Linux的命令。相当的有用"><a href="#下面可能是你不曾用过的十个Linux的命令。相当的有用" class="headerlink" title="下面可能是你不曾用过的十个Linux的命令。相当的有用"></a>下面可能是你不曾用过的十个Linux的命令。相当的有用</h3><ol>
<li>pgrep<br>pgrep名字前有个p，我们可以猜到这和进程相关，又是grep，当然这是进程相关的grep命令。不过，这个命令主要是用来列举进程ID的。如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pgrep -u hchen</span><br><span class="line">22441</span><br><span class="line">22444</span><br></pre></td></tr></table></figure>
这个命令相当于：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef | egrep &#39;^hchen&#39; | awk &#39;&#123;print $2&#125;&#39;</span><br></pre></td></tr></table></figure></li>
<li>pstree<br>这个命令可以以树形的方式列出进程。如下所示：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hchen@RHELSVR5 ~]$ pstree</span><br><span class="line">init-+-acpid</span><br><span class="line">     |-auditd-+-python</span><br><span class="line">     |        &#96;-&#123;auditd&#125;</span><br><span class="line">     |-automount---4*[&#123;automount&#125;]</span><br><span class="line">     |-backup.sh---sleep</span><br><span class="line">     |-dbus-daemon</span><br><span class="line">     |-events&#x2F;0</span><br><span class="line">     |-events&#x2F;1</span><br><span class="line">     |-hald---hald-runner---hald-addon-acpi</span><br><span class="line">     |-httpd---10*[httpd]</span><br><span class="line">     |-irqbalance</span><br><span class="line">     |-khelper</span><br><span class="line">     |-klogd</span><br><span class="line">     |-ksoftirqd&#x2F;0</span><br><span class="line">     |-ksoftirqd&#x2F;1</span><br><span class="line">     |-kthread-+-aio&#x2F;0</span><br><span class="line">     |         |-aio&#x2F;1</span><br><span class="line">     |         |-ata&#x2F;0</span><br><span class="line">     |         |-ata&#x2F;1</span><br><span class="line">     |         |-ata_aux</span><br><span class="line">     |         |-cqueue&#x2F;0</span><br><span class="line">     |         |-cqueue&#x2F;1</span><br><span class="line">     |         |-kacpid</span><br><span class="line">     |         |-kauditd</span><br><span class="line">     |         |-kblockd&#x2F;0</span><br><span class="line">     |         |-kblockd&#x2F;1</span><br><span class="line">     |         |-kedac</span><br><span class="line">     |         |-khubd</span><br><span class="line">     |         |-6*[kjournald]</span><br><span class="line">     |         |-kmirrord</span><br><span class="line">     |         |-kpsmoused</span><br><span class="line">     |         |-kseriod</span><br><span class="line">     |         |-kswapd0</span><br><span class="line">     |         |-2*[pdflush]</span><br><span class="line">     |         |-scsi_eh_0</span><br><span class="line">     |         |-scsi_eh_1</span><br><span class="line">     |         |-xenbus</span><br><span class="line">     |         &#96;-xenwatch</span><br><span class="line">     |-migration&#x2F;0</span><br><span class="line">     |-migration&#x2F;1</span><br><span class="line">     |-6*[mingetty]</span><br><span class="line">     |-3*[multilog]</span><br><span class="line">     |-mysqld_safe---mysqld---9*[&#123;mysqld&#125;]</span><br><span class="line">     |-smartd</span><br><span class="line">     |-sshd---sshd---sshd---bash---pstree</span><br><span class="line">     |-svscanboot---svscan-+-3*[supervise---run]</span><br><span class="line">     |                     |-supervise---qmail-send-+-qmail-clean</span><br><span class="line">     |                     |                        |-qmail-lspawn</span><br><span class="line">     |                     |                        &#96;-qmail-rspawn</span><br><span class="line">     |                     &#96;-2*[supervise---tcpserver]</span><br><span class="line">     |-syslogd</span><br><span class="line">     |-udevd</span><br><span class="line">     |-watchdog&#x2F;0</span><br><span class="line">     |-watchdog&#x2F;1</span><br><span class="line">     &#96;-xinetd</span><br></pre></td></tr></table></figure></li>
<li>bc<br>这个命令主要是做一个精度比较高的数学运算的。比如开平方根等。下面是一个我们利用bc命令写的一个脚本（文件名：sqrt）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">if [ $</span><br><span class="line">then</span><br><span class="line">    echo &#39;Usage: sqrt number&#39;</span><br><span class="line">    exit 1</span><br><span class="line">else</span><br><span class="line">    echo -e &quot;sqrt($1)\nquit\n&quot; | bc -q -i</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
于是，我们可以这样使用这个脚本进行平方根运算：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hchen@RHELSVR5]$ .&#x2F;sqrt 36</span><br><span class="line">6</span><br><span class="line">[hchen@RHELSVR5]$ .&#x2F;sqrt 2.0000</span><br><span class="line">1.4142</span><br><span class="line">[hchen@RHELSVR5]$ .&#x2F;sqrt 10.0000</span><br><span class="line">3.1622</span><br></pre></td></tr></table></figure></li>
<li>split<br>如果你有一个很大的文件，你想把其分割成一些小的文件，那么这个命令就是干这件事的了。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hchen@RHELSVR5 applebak]# ls -l largefile.tar.gz</span><br><span class="line">-rw-r--r-- 1 hchen hchen 436774774 04-17 02:00 largefile.tar.gz</span><br><span class="line"></span><br><span class="line">[hchen@RHELSVR5 applebak]# split -b 50m largefile.tar.gz LF_</span><br><span class="line"></span><br><span class="line">[hchen@RHELSVR5]# ls -l LF_*</span><br><span class="line">-rw-r--r-- 1 hchen hchen 52428800 05-10 18:34 LF_aa</span><br><span class="line">-rw-r--r-- 1 hchen hchen 52428800 05-10 18:34 LF_ab</span><br><span class="line">-rw-r--r-- 1 hchen hchen 52428800 05-10 18:34 LF_ac</span><br><span class="line">-rw-r--r-- 1 hchen hchen 52428800 05-10 18:34 LF_ad</span><br><span class="line">-rw-r--r-- 1 hchen hchen 52428800 05-10 18:34 LF_ae</span><br><span class="line">-rw-r--r-- 1 hchen hchen 52428800 05-10 18:35 LF_af</span><br><span class="line">-rw-r--r-- 1 hchen hchen 52428800 05-10 18:35 LF_ag</span><br><span class="line">-rw-r--r-- 1 hchen hchen 52428800 05-10 18:35 LF_ah</span><br><span class="line">-rw-r--r-- 1 hchen hchen 17344374 05-10 18:35 LF_ai</span><br></pre></td></tr></table></figure>
文件合并只需要使用简单的合并就行了，如:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hchen@RHELSVR5]#  cat LF_* &gt;largefile.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>nl<br>nl命令其它和cat命令很像，只不过它会打上行号。如下所示:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hchen@RHELSVR5 include]# nl stdio.h | head -n 10</span><br><span class="line">     1  &#x2F;* Define ISO C stdio on top of C++ iostreams.</span><br><span class="line">     2     Copyright (C) 1991,1994-2004,2005,2006 Free Software Foundation, Inc.</span><br><span class="line">     3     This file is part of the GNU C Library.</span><br><span class="line"></span><br><span class="line">     4     The GNU C Library is free software; you can redistribute it and&#x2F;or</span><br><span class="line">     5     modify it under the terms of the GNU Lesser General Public</span><br><span class="line">     6     License as published by the Free Software Foundation; either</span><br><span class="line">     7     version 2.1 of the License, or (at your option) any later version.</span><br><span class="line"></span><br><span class="line">     8     The GNU C Library is distributed in the hope that it will be useful,</span><br></pre></td></tr></table></figure></li>
<li>mkfifo<br>熟悉Unix的人都应该知道这个是一个创建有名管道的系统调用或命令。平时，我们在命令行上使用竖线“|”把命令串起来可使用无命管道。而我们使用mkfifo则使用的是有名管道。下面是示例:<br>下面是创建一个有名管道:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hchen@RHELSVR5 ~]# mkfifo &#x2F;tmp&#x2F;hchenpipe</span><br><span class="line"></span><br><span class="line">[hchen@RHELSVR5 ~]# ls -l &#x2F;tmp</span><br><span class="line">prw-rw-r-- 1 hchen  hchen  0 05-10 18:58 hchenpipe</span><br></pre></td></tr></table></figure>
然后，我们在一个shell中运行如下命令，这个命令不会返回，除非有人从这个有名管道中把信息读走<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hchen@RHELSVR5 ~]# ls -al &gt; &#x2F;tmp&#x2F;hchenpipe</span><br></pre></td></tr></table></figure>
我们在另一个命令窗口中读取这个管道中的信息：（其会导致上一个命令返回）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hchen@RHELSVR5 ~]# head &#x2F;tmp&#x2F;hchenpipe</span><br><span class="line">drwx------ 8 hchen hchen    4096 05-10 18:27 .</span><br><span class="line">drwxr-xr-x 7 root  root     4096 03-05 00:06 ..</span><br><span class="line">drwxr-xr-x 3 hchen hchen    4096 03-01 18:13 backup</span><br><span class="line">-rw------- 1 hchen hchen     721 05-05 22:12 .bash_history</span><br><span class="line">-rw-r--r-- 1 hchen hchen      24 02-28 22:20 .bash_logout</span><br><span class="line">-rw-r--r-- 1 hchen hchen     176 02-28 22:20 .bash_profile</span><br><span class="line">-rw-r--r-- 1 hchen hchen     124 02-28 22:20 .bashrc</span><br><span class="line">-rw-r--r-- 1 root  root    14002 03-07 00:29 index.htm</span><br><span class="line">-rw-r--r-- 1 hchen hchen   31465 03-01 23:48 index.php</span><br></pre></td></tr></table></figure></li>
<li>ldd<br>这个命令可以知道你的一个可执行文件所使用了动态链接库。如:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hchen@RHELSVR5 ~]# ldd &#x2F;usr&#x2F;bin&#x2F;java</span><br><span class="line">        linux-gate.so.1 &#x3D;&gt;  (0x00cd9000)</span><br><span class="line">        libgij.so.7rh &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libgij.so.7rh (0x00ed3000)</span><br><span class="line">        libgcj.so.7rh &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libgcj.so.7rh (0x00ed6000)</span><br><span class="line">        libpthread.so.0 &#x3D;&gt; &#x2F;lib&#x2F;i686&#x2F;nosegneg&#x2F;libpthread.so.0 (0x00110000)</span><br><span class="line">        librt.so.1 &#x3D;&gt; &#x2F;lib&#x2F;i686&#x2F;nosegneg&#x2F;librt.so.1 (0x009c8000)</span><br><span class="line">        libdl.so.2 &#x3D;&gt; &#x2F;lib&#x2F;libdl.so.2 (0x008b5000)</span><br><span class="line">        libz.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libz.so.1 (0x00bee000)</span><br><span class="line">        libgcc_s.so.1 &#x3D;&gt; &#x2F;lib&#x2F;libgcc_s.so.1 (0x00aa7000)</span><br><span class="line">        libc.so.6 &#x3D;&gt; &#x2F;lib&#x2F;i686&#x2F;nosegneg&#x2F;libc.so.6 (0x0022f000)</span><br><span class="line">        libm.so.6 &#x3D;&gt; &#x2F;lib&#x2F;i686&#x2F;nosegneg&#x2F;libm.so.6 (0x00127000)</span><br><span class="line">        &#x2F;lib&#x2F;ld-linux.so.2 (0x00214000)</span><br></pre></td></tr></table></figure></li>
<li>col<br>这个命令可以让你把man文件转成纯文本文件。如下示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># # man less | col -b &gt; less.txt</span><br></pre></td></tr></table></figure></li>
<li>xmlwf<br>这个命令可以让你检查一下一个XML文档是否是所有的tag都是正常的。如:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hchen@RHELSVR5 ~]# curl &#39;https:&#x2F;&#x2F;coolshell.cn&#x2F;?feed&#x3D;rss2&#39; &gt; cocre.xml</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 64882    0 64882    0     0  86455      0 --:--:-- --:--:-- --:--:-- 2073k</span><br><span class="line">[hchen@RHELSVR5 ~]# xmlwf cocre.xml</span><br><span class="line">[hchen@RHELSVR5 ~]# perl -i -pe &#39;s@&lt;link&gt;@&lt;br&gt;@g&#39; cocre.xml</span><br><span class="line">[hchen@RHELSVR5 ~]# xmlwf cocre.xml</span><br><span class="line">cocre.xml:13:23: mismatched tag</span><br></pre></td></tr></table></figure></li>
<li>lsof<br>可以列出打开了的文件。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@RHELSVR5 ~]# lsof | grep TCP</span><br><span class="line">httpd       548    apache    4u     IPv6   14300967    TCP *:http (LISTEN)</span><br><span class="line">httpd       548    apache    6u     IPv6   14300972    TCP *:https (LISTEN)</span><br><span class="line">httpd       561    apache    4u     IPv6   14300967    TCP *:http (LISTEN)</span><br><span class="line">httpd       561    apache    6u     IPv6   14300972    TCP *:https (LISTEN)</span><br><span class="line">sshd       1764      root    3u     IPv6       4993    TCP *:ssh (LISTEN)</span><br><span class="line">tcpserver  8965      root    3u     IPv4  153795500    TCP *:pop3 (LISTEN)</span><br><span class="line">mysqld    10202     mysql   10u     IPv4   73819697    TCP *:mysql (LISTEN)</span><br><span class="line">sshd      10735      root    3u     IPv6  160731956    TCP 210.51.0.232:ssh-&gt;123.117.239.68:31810 (ESTABLISHED)</span><br><span class="line">sshd      10767     hchen    3u     IPv6  160731956    TCP 210.51.0.232:ssh-&gt;123.117.239.68:31810 (ESTABLISHED)</span><br><span class="line">vsftpd    11095      root    3u     IPv4  152157957    TCP *:ftp (LISTEN)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Python RBAC</title>
    <url>/2020/04/20/Python-RBAC/</url>
    <content><![CDATA[<h2 id="casbin"><a href="#casbin" class="headerlink" title="casbin"></a>casbin</h2><p><a href="https://github.com/casbin/pycasbin" target="_blank" rel="noopener">https://github.com/casbin/pycasbin</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
        <category>RBAC</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置项说明</title>
    <url>/2020/04/20/Nginx%E9%85%8D%E7%BD%AE%E9%A1%B9%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user  www www;</span><br><span class="line">worker_processes  8;</span><br><span class="line">worker_rlimit_nofile 100000; </span><br><span class="line"></span><br><span class="line">error_log  &#x2F;data&#x2F;nginx&#x2F;logs&#x2F;error.log  notice;</span><br><span class="line"></span><br><span class="line">pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;    #epoll是多路复用IO(I&#x2F;O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    #multi_accept on;</span><br><span class="line">    worker_connections  52000;  #单个后台worker process进程的最大并发链接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;  #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">    #charset UTF-8; #设置我们的头文件中的默认的字符集</span><br><span class="line"></span><br><span class="line">#设置日志格式</span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent $request_body  &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    access_log  off;</span><br><span class="line"></span><br><span class="line">#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</span><br><span class="line">    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I&#x2F;O处理速度，降低系统的uptime.</span><br><span class="line">    server_tokens off; #并不会让nginx执行的速度更快，但它可以关闭在错误页面中的nginx版本数字，这样对于安全性是有好处的。</span><br><span class="line">    sendfile       on；#sendfile可以让sendfile()发挥作用。sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)。</span><br><span class="line">    tcp_nopush     on; #告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送</span><br><span class="line">    tcp_nodelay     on;#告诉nginx不要缓存数据，而是一段一段的发送--当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。</span><br><span class="line">#设置超时时间</span><br><span class="line">    keepalive_timeout  10; #给客户端分配keep-alive链接超时时间。服务器将在这个超时时间过后关闭链接</span><br><span class="line">    client_header_timeout 10; #client_header_timeout 和client_body_timeout 设置请求头和请求体(各自)的超时时间。我们也可以把这个设置低些。</span><br><span class="line">    client_body_timeout 10; </span><br><span class="line">    reset_timedout_connection on; #告诉nginx关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。</span><br><span class="line">    send_timeout 10; #指定客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx就会关闭连接</span><br><span class="line"></span><br><span class="line">#开启gzip压缩</span><br><span class="line">gzip on;</span><br><span class="line">gzip_disable &quot;msie6&quot;;</span><br><span class="line"># gzip_static on;</span><br><span class="line">gzip_proxied any;</span><br><span class="line">gzip_min_length 1000;</span><br><span class="line">gzip_comp_level 4;</span><br><span class="line">gzip_types text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;x-javascript text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript;</span><br><span class="line"></span><br><span class="line">#gzip是告诉nginx采用gzip压缩的形式发送数据。这将会减少我们发送的数据量。</span><br><span class="line">#gzip_disable为指定的客户端禁用gzip功能。我们设置成IE6或者更低版本以使我们的方案能够广泛兼容。</span><br><span class="line">#gzip_static告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源。这要求你预先压缩你的文件（在这个例子中被注释掉了），从而允许你使用最高压缩比，这样nginx就不用再压缩这些文件了（想要更详尽的gzip_static的信息，请点击这里）。</span><br><span class="line">#gzip_proxied允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求。</span><br><span class="line">#gzip_min_length设置对数据启用压缩的最少字节数。如果一个请求小于1000字节，我们最好不要压缩它，因为压缩这些小的数据会降低处理此请求的所有进程的速度。</span><br><span class="line">#gzip_comp_level设置数据的压缩等级。这个等级可以是1-9之间的任意数值，9是最慢但是压缩比最大的。我们设置为4，这是一个比较折中的设置。</span><br><span class="line"></span><br><span class="line">open_file_cache max&#x3D;100000 inactive&#x3D;20s;</span><br><span class="line">open_file_cache_valid 30s;</span><br><span class="line">open_file_cache_min_uses 2;</span><br><span class="line">open_file_cache_errors on;</span><br><span class="line">#open_file_cache打开缓存的同时也指定了缓存最大数目，以及缓存的时间。我们可以设置一个相对高的最大时间，这样我们可以在它们不活动超过20秒后清除掉。</span><br><span class="line">#open_file_cache_valid 在open_file_cache中指定检测正确信息的间隔时间。</span><br><span class="line">#open_file_cache_min_uses 定义了open_file_cache中指令参数不活动时间期间里最小的文件数。</span><br><span class="line">#open_file_cache_errors指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件。我们也包括了服务器模块，这些是在不同文件中定义的。如果你的服务器模块不在这些位置，你就得修改这一行来指定正确的位置。</span><br><span class="line"></span><br><span class="line">#设定请求缓冲</span><br><span class="line">    client_max_body_size    8m;</span><br><span class="line">    client_body_buffer_size    512k;</span><br><span class="line">    client_header_buffer_size    32k;</span><br><span class="line">    large_client_header_buffers  4 32k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    proxy_connect_timeout 60;</span><br><span class="line">    proxy_read_timeout 60;</span><br><span class="line">    proxy_send_timeout 60;</span><br><span class="line">    proxy_buffer_size 16k;</span><br><span class="line">    proxy_buffers 6 512k;</span><br><span class="line">    proxy_busy_buffers_size 1024k;</span><br><span class="line">    proxy_temp_file_write_size 512k;</span><br><span class="line"></span><br><span class="line">#设定负载均衡的服务器列表</span><br><span class="line">#weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">    upstream tdx &#123;</span><br><span class="line">     #ip_hash;</span><br><span class="line">         server node1:80 max_fails&#x3D;3 fail_timeout&#x3D;30s weight&#x3D;6;</span><br><span class="line">         server  node2:80 max_fails&#x3D;3 fail_timeout&#x3D;30s weight&#x3D;6; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream test &#123;</span><br><span class="line">     #ip_hash;</span><br><span class="line">         server node1:81 max_fails&#x3D;3 fail_timeout&#x3D;30s weight&#x3D;1;</span><br><span class="line">         server  node2:81 max_fails&#x3D;3 fail_timeout&#x3D;30s weight&#x3D;6; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen  80;</span><br><span class="line">        #server_name  wwww.xxx.com;</span><br><span class="line">        access_log  &#x2F;data&#x2F;nginx&#x2F;logs&#x2F;tdx_access.log  combined;</span><br><span class="line"></span><br><span class="line">#默认请求</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;data&#x2F;nginx&#x2F;htdocs&#x2F;tdx;  #定义服务器的默认网站根目录位置</span><br><span class="line">            index  index.php index.html index.htm; #定义首页索引文件的名称</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;tdx;  #请求转向tdx定义的服务器列表</span><br><span class="line">        proxy_redirect off;   #禁用缓存</span><br><span class="line">        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">        client_max_body_size 10m;  #允许客户端请求的最大单文件字节数</span><br><span class="line">        client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">        proxy_send_timeout 90;</span><br><span class="line">        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span><br><span class="line">        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">        proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">        &#125;</span><br><span class="line">#定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   &#x2F;usr&#x2F;local&#x2F;web_app&#x2F;nginx&#x2F;html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">        root &#x2F;data&#x2F;nginx&#x2F;htdocs&#x2F;tdx;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;tdx;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">#PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置</span><br><span class="line">       # proxy_redirect off;</span><br><span class="line">           # fastcgi_pass   unix:&#x2F;tmp&#x2F;php-fcgi.sock;</span><br><span class="line">           # fastcgi_index  index.php;</span><br><span class="line">           # fastcgi_param  SCRIPT_FILENAME  &#x2F;data&#x2F;nginx&#x2F;htdocs&#x2F;tdx&#x2F;$fastcgi_script_name;</span><br><span class="line">           # include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">#禁止访问.htxxx文件</span><br><span class="line">        location ~ &#x2F;\.ht &#123;</span><br><span class="line">            deny  all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen  81;</span><br><span class="line">        server_name  ip;</span><br><span class="line"></span><br><span class="line">        access_log  &#x2F;data&#x2F;nginx&#x2F;logs&#x2F;test_access.log  combined;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;data&#x2F;nginx&#x2F;htdocs&#x2F;test;</span><br><span class="line">            index  index.php index.html index.htm;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;test;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        client_max_body_size 10m;</span><br><span class="line">        client_body_buffer_size 128k; </span><br><span class="line">        proxy_connect_timeout 90;</span><br><span class="line">        proxy_send_timeout 90;</span><br><span class="line">        proxy_read_timeout 90;</span><br><span class="line">        proxy_buffer_size 4k;</span><br><span class="line">        proxy_buffers 4 32k;</span><br><span class="line">        proxy_busy_buffers_size 64k;</span><br><span class="line">        proxy_temp_file_write_size 64k;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   &#x2F;usr&#x2F;local&#x2F;web_app&#x2F;nginx&#x2F;html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">        root &#x2F;data&#x2F;nginx&#x2F;htdocs&#x2F;test;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;test;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">           #fastcgi_pass   unix:&#x2F;tmp&#x2F;php-fcgi.sock;</span><br><span class="line">           #fastcgi_index  index.php;</span><br><span class="line">           #fastcgi_param  SCRIPT_FILENAME  &#x2F;data&#x2F;nginx&#x2F;htdocs&#x2F;test&#x2F;$fastcgi_script_name;</span><br><span class="line">           #include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ &#x2F;\.ht &#123;</span><br><span class="line">            deny  all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://www.ttlsa.com/nginx/using-nginx-as-http-loadbalancer/" target="_blank" rel="noopener">http://www.ttlsa.com/nginx/using-nginx-as-http-loadbalancer/</a> 负载均衡三种模式区别<br><a href="http://www.ttlsa.com/nginx/nginx-load-balancing-from-theory-to-practice/" target="_blank" rel="noopener">http://www.ttlsa.com/nginx/nginx-load-balancing-from-theory-to-practice/</a> 负载均衡实践<br><a href="http://www.ttlsa.com/nginx/nginx-configure-descriptions/" target="_blank" rel="noopener">http://www.ttlsa.com/nginx/nginx-configure-descriptions/</a>  编译安装nginx参数详细<br><a href="http://www.ttlsa.com/nginx/nginx-battle-ready-optimization-guide/" target="_blank" rel="noopener">http://www.ttlsa.com/nginx/nginx-battle-ready-optimization-guide/</a> 优化指南</p>
<p>http段完整配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">pid &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line">worker_processes auto;</span><br><span class="line">worker_rlimit_nofile 100000;</span><br><span class="line">events &#123;</span><br><span class="line"> worker_connections 2048;</span><br><span class="line"> multi_accept on;</span><br><span class="line"> use epoll;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">  server_tokens off;</span><br><span class="line"> sendfile on;</span><br><span class="line">tcp_nopush on;</span><br><span class="line"> tcp_nodelay on;</span><br><span class="line"> access_log off;</span><br><span class="line"> error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log crit;</span><br><span class="line"> keepalive_timeout 10;</span><br><span class="line"> client_header_timeout 10;</span><br><span class="line"> client_body_timeout 10;</span><br><span class="line">reset_timedout_connection on;</span><br><span class="line"> send_timeout 10;</span><br><span class="line"> limit_conn_zone $binary_remote_addr zone&#x3D;addr:5m;</span><br><span class="line"> limit_conn addr 100;</span><br><span class="line"> include &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line"> default_type text&#x2F;html;</span><br><span class="line">charset UTF-8;</span><br><span class="line">gzip on;</span><br><span class="line"> gzip_disable &quot;msie6&quot;;</span><br><span class="line">gzip_proxied any;</span><br><span class="line">gzip_min_length 1000;</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line"> gzip_types text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;x-javascript text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript;</span><br><span class="line"> open_file_cache max&#x3D;100000 inactive&#x3D;20s;</span><br><span class="line">open_file_cache_valid 30s;</span><br><span class="line">open_file_cache_min_uses 2;</span><br><span class="line">open_file_cache_errors on;</span><br><span class="line"> include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line"> include &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Python可迭代对象、迭代器和生成器(一)</title>
    <url>/2020/04/20/Python%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="Python可迭代对象、迭代器和生成器-一"><a href="#Python可迭代对象、迭代器和生成器-一" class="headerlink" title="Python可迭代对象、迭代器和生成器(一)"></a>Python可迭代对象、迭代器和生成器(一)</h3><p>我们都知道，序列可以迭代。但是，你知道为什么吗？ 本文来探讨一下迭代背后的原理。</p>
<p>序列可以迭代的原因：iter 函数。解释器需要迭代对象 x 时，会自动调用 iter(x)。内置的 iter 函数有以下作用：</p>
<p>(1) 检查对象是否实现了 iter 方法，如果实现了就调用它，获取一个迭代器。 </p>
<p>(2) 如果没有实现 iter 方法，但是实现了 getitem 方法，而且其参数是从零开始的索引，Python 会创建一个迭代器，尝试按顺序（从索引 0 开始）获取元素。 </p>
<p>(3) 如果前面两步都失败，Python 抛出 TypeError 异常，通常会提示“C objectis not iterable”（C 对象不可迭代），其中 C 是目标对象所属的类。</p>
<p>由此我们可以明确知道什么是 可迭代的对象： 使用 iter 内置函数可以获取迭代器的对象。即要么对象实现了能返回迭代器的 iter 方法，要么对象实现了 getitem 方法，而且其参数是从零开始的索引。</p>
<p>下面看一个实现了getitem方法的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Example1:</span><br><span class="line">    def __init__(self, text):</span><br><span class="line">        self.text &#x3D; text</span><br><span class="line">        self.sub_text &#x3D; text.split(&#39; &#39;)</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, index):</span><br><span class="line">        return self.sub_text[index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1 &#x3D; Example1(&quot;Hello,have a beautiful day!&quot;)</span><br><span class="line">for i in obj1:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Hello,have</span><br><span class="line">a</span><br><span class="line">beautiful</span><br><span class="line">day!</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>我们创建了一个类Example1，并且为这个类实现了 getitem 方法，它的实例化对象obj1就是可迭代对象。</p>
<p>下面我们看一个实现 iter 方法的例子，因为用到了迭代器，所以在此我们必须在明确一下迭代器的用法。 标准的迭代器接口有两个方法：</p>
<p><strong>next</strong></p>
<p>返回下一个可用的元素，如果没有元素了，抛出 StopIteration异常。</p>
<p><strong>iter</strong></p>
<p>返回 self，以便在应该使用可迭代对象的地方使用迭代器，例如在 for 循环中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Example2:</span><br><span class="line">    def __init__(self, text):</span><br><span class="line">        self.text &#x3D; text</span><br><span class="line">        self.sub_text &#x3D; text.split(&#39; &#39;)</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return Example2Iterator(self.sub_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Example2Iterator:</span><br><span class="line">    def __init__(self, sub_text):</span><br><span class="line">        self.sub_text &#x3D; sub_text</span><br><span class="line">        self.index &#x3D; 0</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        try:</span><br><span class="line">            subtext &#x3D; self.sub_text[self.index]</span><br><span class="line">        except IndexError:</span><br><span class="line">            raise StopIteration()</span><br><span class="line">        self.index +&#x3D; 1</span><br><span class="line">        return subtext</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br></pre></td></tr></table></figure>
<p>我们创建了Example2类，并为它实现了 iter 方法，此方法返回一个迭代器Example2Iterator。 Example2Iterator实现了我们之前所说的next和iter方法。 实例化对象，并循环输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj2 &#x3D; Example2(&quot;Hello,have a beautiful day!&quot;)</span><br><span class="line">for i in obj2:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Hello,have</span><br><span class="line">a</span><br><span class="line">beautiful</span><br><span class="line">day!</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>可见，和obj1是一样的。</p>
<p>我们通过两种方法实现了一个自己的可迭代对象，再此过程中我们要明确可迭代的对象和迭代器之间的关系：</p>
<p>Python 从可迭代的对象中获取迭代器。</p>
<p>iter方法从我们自己创建的迭代器类中获取迭代器，而getitem方法是python内部自动创建迭代器。</p>
<p>至此，我们明白了如何正确地实现可迭代对象，并且引出了怎样实现迭代器，但是使用迭代器方法（即上面的例子2）的代码量有点大，下面我们来了解一下如何使用更符合 Python习惯的方式实现Example2类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Example3:</span><br><span class="line">    def __init__(self, text):</span><br><span class="line">        self.text &#x3D; text</span><br><span class="line">        self.sub_text &#x3D; text.split(&#39; &#39;)</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        for item in self.sub_text:</span><br><span class="line">            yield item</span><br></pre></td></tr></table></figure>

<p>哦了！就这么简单优雅！不用再单独定义一个迭代器类！ </p>
<p>这里我们使用了yield 关键字， 只要 Python 函数的定义体中有 yield 关键字，该函数就是生成器函数。调用生成器函数时，会返回一个生成器对象。也就是说，生成器函数是生成器工厂。 当然，例子3的代码还可以使用yield from进一步简化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Example4:</span><br><span class="line">    def __init__(self, text):</span><br><span class="line">        self.text &#x3D; text</span><br><span class="line">        self.sub_text &#x3D; text.split(&#39; &#39;)</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        yield from self.sub_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj4 &#x3D; Example4(&quot;Hello,have a beautiful day!&quot;)</span><br><span class="line">for i in obj4:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Hello,have</span><br><span class="line">a</span><br><span class="line">beautiful</span><br><span class="line">day!</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>到这里我们明白了 可迭代对象 和 迭代器，还引申出了生成器，但还有一点没有提，那就是生成器表达式。<br>使用生成器表达式例子4的代码可以修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Example5:</span><br><span class="line">    def __init__(self, text):</span><br><span class="line">        self.text &#x3D; text</span><br><span class="line">        self.sub_text &#x3D; text.split(&#39; &#39;)</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return (item for item in self.sub_text)</span><br></pre></td></tr></table></figure>
<p>在python中，所有生成器都是迭代器。<br>最后，总结一下：</p>
<ul>
<li>什么是可迭代对象？ 可迭代对象要么实现了能返回迭代器的 iter 方法，要么实现了 getitem 方法而且其参数是从零开始的索引。</li>
<li>什么是迭代器？ 迭代器是这样的对象：实现了无参数的 next 方法，返回下一个元素，如果没有元素了，那么抛出 StopIteration 异常；并且实现iter 方法，返回迭代器本身。</li>
<li>什么是生成器？ 生成器是带有 yield 关键字的函数。调用生成器函数时，会返回一个生成器对象。</li>
<li>什么是生成器表达式？ 生成器表达式是创建生成器的简洁句法，这样无需先定义函数再调用。</li>
</ul>
<p><a href="https://mp.weixin.qq.com/s/x1oxunw5buuPqujhZRYdjg" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python后端开发面试总结</title>
    <url>/2020/04/20/Python%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="Python后端开发面试总结"><a href="#Python后端开发面试总结" class="headerlink" title="Python后端开发面试总结"></a>Python后端开发面试总结</h2><h3 id="1-is和-的区别？"><a href="#1-is和-的区别？" class="headerlink" title="1. is和==的区别？"></a>1. is和==的区别？</h3><p>is判断两个引用是否指向的是同一个变量，即内存id是否相等，==则是调用的<strong>eq</strong>方法，一般是用于判断值是否相等，也可以重写<strong>eq</strong>方法实现想要的效果。</p>
<h3 id="2-dict与list的查找复杂度？"><a href="#2-dict与list的查找复杂度？" class="headerlink" title="2. dict与list的查找复杂度？"></a>2. dict与list的查找复杂度？</h3><p>dict用hash实现，查找的时间复杂度是O(1)，list则为O(n)。</p>
<h3 id="3-a-b-c三个装饰器依次装饰函数fun-，装饰器的执行顺序？"><a href="#3-a-b-c三个装饰器依次装饰函数fun-，装饰器的执行顺序？" class="headerlink" title="3. a/b/c三个装饰器依次装饰函数fun()，装饰器的执行顺序？"></a>3. a/b/c三个装饰器依次装饰函数fun()，装饰器的执行顺序？</h3><p>注意装饰器函数本身一般有两层，在装饰的时候外层和内层顺序是相反的，详情可以参考这边文章python 多个装饰器的调用顺序。</p>
<h3 id="4-如何运行一个字符串？"><a href="#4-如何运行一个字符串？" class="headerlink" title="4. 如何运行一个字符串？"></a>4. 如何运行一个字符串？</h3><p>eval和exec。</p>
<h2 id="5-Python多线程能否充分利用CPU多核心，为什么？"><a href="#5-Python多线程能否充分利用CPU多核心，为什么？" class="headerlink" title="5. Python多线程能否充分利用CPU多核心，为什么？"></a>5. Python多线程能否充分利用CPU多核心，为什么？</h2><p>这里回答的是GIL相关的东西，可深可浅，自己把握~</p>
<h3 id="6-什么是上下文管理器？如何实现？"><a href="#6-什么是上下文管理器？如何实现？" class="headerlink" title="6. 什么是上下文管理器？如何实现？"></a>6. 什么是上下文管理器？如何实现？</h3><p>广泛意义上来说，上下文是指程序运行的环境，Python中常见于打开文件或网络连接，其实就是with关键字，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&quot;test.txt&quot;) as file:  </span><br><span class="line">    print(file.read())</span><br></pre></td></tr></table></figure>
<p>可以确保文件在最后会被关闭，只要对一个对象实现了<strong>enter</strong>和<strong>exit</strong>函数，就可以构造自己的上下文管理器了</p>
<h3 id="7-同步-异步-阻塞-非阻塞都是什么？"><a href="#7-同步-异步-阻塞-非阻塞都是什么？" class="headerlink" title="7. 同步/异步/阻塞/非阻塞都是什么？"></a>7. 同步/异步/阻塞/非阻塞都是什么？</h3><p>感觉直接解释概念不好解释，这里我回答的思路是举例子，异步说白了就是任务不需要同步进行，比如用爬虫爬取一个数据，然后再保存数据，接下来再去爬另一个数据，这是同步；异步就是爬虫不用等着数据保存好，爬完一个直接去爬另一个，数据保存的事情交给别的逻辑去慢慢处理；阻塞和非阻塞也是基于此的，同步的情况下会阻塞爬虫，爬虫需要等待数据的保存.(非专业解释)</p>
<h3 id="8-如何判断两个浮点数是否相等？"><a href="#8-如何判断两个浮点数是否相等？" class="headerlink" title="8. 如何判断两个浮点数是否相等？"></a>8. 如何判断两个浮点数是否相等？</h3><p>之前完全没想过这个的问题，我的回答就是按一个差不多的精度去比较，比如到小数点第几位之前都是相等的，就认为两个数相等，或者Math模块里可能有什么方法可以去精确对比，当时是这么回答的，现在查了一下基本也是这个思路，Math模块中有一个isclose函数用来判断两个浮点数的值是否接近或相等.</p>
<h3 id="9-MySQL的索引一般是怎么实现的？"><a href="#9-MySQL的索引一般是怎么实现的？" class="headerlink" title="9. MySQL的索引一般是怎么实现的？"></a>9. MySQL的索引一般是怎么实现的？</h3><p>B-Tree(一般是B+Tree)和Hash，然后再简单介绍一下。</p>
<h3 id="10-对于Flask的实现有了解吗？"><a href="#10-对于Flask的实现有了解吗？" class="headerlink" title="10. 对于Flask的实现有了解吗？"></a>10. 对于Flask的实现有了解吗？</h3><p>只知道WSGI，其余的不清楚，暂时还没去深入看Flask的源码。</p>
<h2 id="Part-二"><a href="#Part-二" class="headerlink" title="Part 二"></a>Part 二</h2><h4 id="1-一个木棍任意截成三段，围成三角形的概率？"><a href="#1-一个木棍任意截成三段，围成三角形的概率？" class="headerlink" title="1. 一个木棍任意截成三段，围成三角形的概率？"></a>1. 一个木棍任意截成三段，围成三角形的概率？</h4><p>咩咩咩？不知道。（回来查了是25%，具体可以自行搜索，反正脱离数学N年是无论如何都想不出来的）。</p>
<h4 id="2-一个函数RAND7-随机返回1-7，使用它构造一个RAND10-函数随机返回10。"><a href="#2-一个函数RAND7-随机返回1-7，使用它构造一个RAND10-函数随机返回10。" class="headerlink" title="2. 一个函数RAND7()随机返回1~7，使用它构造一个RAND10()函数随机返回10。"></a>2. 一个函数RAND7()随机返回1~7，使用它构造一个RAND10()函数随机返回10。</h4><p>一开始写了个函数如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def rand10():  </span><br><span class="line">a &#x3D; rand7() + 3&#x2F;10  </span><br><span class="line">b &#x3D; rand7() - 4  </span><br><span class="line">if b &lt; 0:  </span><br><span class="line">b &#x3D; 0  </span><br><span class="line">return a + b</span><br></pre></td></tr></table></figure>
<p>也是脑袋抽了，想得太简单，这个rand10虽然能返回1~10的随机数，但每个数出现的概率不是1/10，后面时间快到了检查的时候才反应过来。正确的思路是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def rand10():  </span><br><span class="line">while  1:  </span><br><span class="line">       res &#x3D; (rand7()-1)*7+rand7()    \# res等概率随机1~49  </span><br><span class="line">if res &lt; 40: \# 只取出0~39共40个数，每个数出现的概率也是相等的  </span><br><span class="line">return res % 10 \+ 1 \# 随机输出1~10</span><br></pre></td></tr></table></figure>
<h4 id="3-把一段JAVA代码改成Python，并增加单元测试。"><a href="#3-把一段JAVA代码改成Python，并增加单元测试。" class="headerlink" title="3. 把一段JAVA代码改成Python，并增加单元测试。"></a>3. 把一段JAVA代码改成Python，并增加单元测试。</h4><p>JAVA代码本身很简单，即使没学过也能看懂，改后的Python代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MyClass:  </span><br><span class="line">__current &#x3D; 0  </span><br><span class="line">def next(self):  </span><br><span class="line">MyClass.__current +&#x3D; 1  </span><br><span class="line">return MyClass.__current</span><br></pre></td></tr></table></figure>
<p>但是对于单元测试则仅限于听过的地步，需要用到unittest，好像也有别的模块。</p>
<h4 id="4-给定一个数组，按奇数在前升序，偶数在后降序排列，一行代码实现。"><a href="#4-给定一个数组，按奇数在前升序，偶数在后降序排列，一行代码实现。" class="headerlink" title="4. 给定一个数组，按奇数在前升序，偶数在后降序排列，一行代码实现。"></a>4. 给定一个数组，按奇数在前升序，偶数在后降序排列，一行代码实现。</h4><p>没啥好说的，一行代码必然是列表生成式，假设数组是nums，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sorted(\[n for n in nums if n % 2\]) \+ sorted(\[n for n in nums if  not n % 2\], reverse&#x3D;True)</span><br></pre></td></tr></table></figure>

<h3 id="5-实现单例。"><a href="#5-实现单例。" class="headerlink" title="5. 实现单例。"></a>5. 实现单例。</h3><p>单例就是说一个class只能有一个instance，实现的方法有很多，例如改写<strong>new</strong>方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Singleton(object):  </span><br><span class="line">_instance &#x3D; None  </span><br><span class="line">def \_\_new\_\_(cls, \*args, \*\*kw):  </span><br><span class="line">if  not cls._instance:  </span><br><span class="line">           cls.\_instance &#x3D; super(Singleton, cls).\_\_new__(cls, \*args, \*\*kw)    </span><br><span class="line">return cls._instance</span><br></pre></td></tr></table></figure>
<h4 id="6-有一个问答平台，每个用户对一个问题最多只能回答一次，同一个问题最多只能对一个答案点赞；1-设计合适的数据库结构；2-写出SQL获取点赞数最多的10个问题；"><a href="#6-有一个问答平台，每个用户对一个问题最多只能回答一次，同一个问题最多只能对一个答案点赞；1-设计合适的数据库结构；2-写出SQL获取点赞数最多的10个问题；" class="headerlink" title="6. 有一个问答平台，每个用户对一个问题最多只能回答一次，同一个问题最多只能对一个答案点赞；1)设计合适的数据库结构；2)写出SQL获取点赞数最多的10个问题；"></a>6. 有一个问答平台，每个用户对一个问题最多只能回答一次，同一个问题最多只能对一个答案点赞；1)设计合适的数据库结构；2)写出SQL获取点赞数最多的10个问题；</h4><p>我平时也就用数据库查数据，在设计数据库上没有深入研究，因此的我答案就简单写了有哪些表，字段分别是什么，至于题中的条件限制，就交由后台的程序逻辑去处理，而不是在数据库设计层面去限制。因为是自己设计的表结构，SQL本身也就不难。</p>
<h4 id="7-设计一个栈，实现pop-push及max方法，要求能在O-1-时间内取得最大值。"><a href="#7-设计一个栈，实现pop-push及max方法，要求能在O-1-时间内取得最大值。" class="headerlink" title="7. 设计一个栈，实现pop/push及max方法，要求能在O(1)时间内取得最大值。"></a>7. 设计一个栈，实现pop/push及max方法，要求能在O(1)时间内取得最大值。</h4><p>LeetCode原题啊！list怎么能O(1)取得最大值呢，无非是空间换时间，每push一个数就同时记录当前的最大值。</p>
<h4 id="8-手写快排。"><a href="#8-手写快排。" class="headerlink" title="8. 手写快排。"></a>8. 手写快排。</h4><p>呵呵。</p>
<h2 id="其他针对简历的提问"><a href="#其他针对简历的提问" class="headerlink" title="其他针对简历的提问"></a>其他针对简历的提问</h2><h4 id="1-你的网站，你觉得如果访问量上去了，最先出现瓶颈问题的点是哪？怎么优化？"><a href="#1-你的网站，你觉得如果访问量上去了，最先出现瓶颈问题的点是哪？怎么优化？" class="headerlink" title="1. 你的网站，你觉得如果访问量上去了，最先出现瓶颈问题的点是哪？怎么优化？"></a>1. 你的网站，你觉得如果访问量上去了，最先出现瓶颈问题的点是哪？怎么优化？</h4><p>我答的是数据库，因为好多不必要或者可以使用缓存的地方也频繁操作数据库，而且是使用的ORM，但之前从哪看到ORM不能确保对应的SQL语句是最优的，因此可以尝试使用原生SQL或者增加Redis缓存。</p>
<h3 id="2-如果要扩展后台服务器，需要怎么做？"><a href="#2-如果要扩展后台服务器，需要怎么做？" class="headerlink" title="2. 如果要扩展后台服务器，需要怎么做？"></a>2. 如果要扩展后台服务器，需要怎么做？</h3><p>(话说这不是运维的工作么。。。)呃，就是增加服务器啊，然后前面加一层负载均衡，把请求分配给不同的服务器.(那不同的服务器怎么使用你的Session？)再加个Session服务器。</p>
<h3 id="3-我看你平时刷编程题，有遇到什么有意思的题目吗？"><a href="#3-我看你平时刷编程题，有遇到什么有意思的题目吗？" class="headerlink" title="3. 我看你平时刷编程题，有遇到什么有意思的题目吗？"></a>3. 我看你平时刷编程题，有遇到什么有意思的题目吗？</h3><p>LeetCode才开始刷，就举了两道Codewars上的题目，我也真是傻了，真的举了两道有意思(但自己没做好)的题。</p>
<p>其他就无非是一些为什么想做后端开发之类的问题了，个人感觉题目大部分也挺简单的，我的表现也算中规中矩吧，但面试官说我要进一步加强基础知识，具体哪方面(数据库、网络协议、还是Python本身)又语焉不详。</p>
<p><a href="https://mp.weixin.qq.com/s/ULeyIN825L59LF9-CHocKg" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx Rewrite</title>
    <url>/2020/04/20/Nginx-Rewrite/</url>
    <content><![CDATA[<h2 id="Nginx-Rewrite"><a href="#Nginx-Rewrite" class="headerlink" title="Nginx Rewrite"></a>Nginx Rewrite</h2><hr>


<p>网站在使用 Nginx 时都会进行个性化配置满足自己的业务需要，而 URL 重写几乎是每个网站都必做的事情，Nginx 的 URL 重写规则不像 Apache 那样简单直接，逻辑相对要复杂一些，本文将通过例子的方式帮助大家理解 Nginx rewrite 原理，希望能对您有些启发。</p>
<h2 id="Nginx-中重定向的多种方式"><a href="#Nginx-中重定向的多种方式" class="headerlink" title="Nginx 中重定向的多种方式"></a>Nginx 中重定向的多种方式</h2><h3 id="外部重定向"><a href="#外部重定向" class="headerlink" title="外部重定向"></a>外部重定向</h3><p>return 指令返回 301 或 302（return 也可以返回其他状态码），可以放在 server 或 location 块中。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return 301 https:&#x2F;&#x2F;www.mi.com;</span><br><span class="line">or</span><br><span class="line">return 302 https:&#x2F;&#x2F;www.mi.com;</span><br></pre></td></tr></table></figure>

<p>还可以使用 rewrite 指令，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rewrite ^&#x2F;(.*)$   http:&#x2F;&#x2F;www.mi.com&#x2F;$1;</span><br><span class="line">or</span><br><span class="line">rewrite ^&#x2F;(.*)$   http:&#x2F;&#x2F;www.mi.com&#x2F; redirect;</span><br></pre></td></tr></table></figure>
<h3 id="内部重定向"><a href="#内部重定向" class="headerlink" title="内部重定向"></a>内部重定向</h3><p>return + error_page 指令的组合，或 try_files 指令和 rewrite 指令，非常灵活。</p>
<p>本文主要讲解 rewrite 的工作原理，其他指令的使用方法大家可以自行查阅 Nginx 官网。在使用 Nginx 的 rewrite 指令时，flag 可以设置为 last 和 break，这两个 flag 很容易混淆，后面我们会比较这两个 flag 的区别，下面通过示例我们来认识一下 rewrite 指令。</p>
<h2 id="rewrite-语法"><a href="#rewrite-语法" class="headerlink" title="rewrite 语法"></a>rewrite 语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Syntax:    rewrite regex replacement [flag];</span><br><span class="line">Context:   server, location, if</span><br></pre></td></tr></table></figure>
<ul>
<li><p>regex： 对请求的 URI 做正则匹配</p>
</li>
<li><p>replacement：目标 uri 匹配成功后替换的 url</p>
</li>
<li><p>可以使用的 flag 有以下 4 个（flag 也可以为空）:</p>
<ul>
<li><p>redirect：返回 302 临时重定向，客户端地址栏会显示跳转后的地址；</p>
</li>
<li><p>permanent：返回 301 永久重定向，客户端地址栏会显示跳转后的地址；</p>
</li>
<li><p>last：内部重定向，停止处理后续 rewrite 模块中的指令（客户端无感知）；</p>
</li>
<li><p>break：内部重定向，停止处理后续 rewrite 模块中的指令（客户端无感知)。</p>
</li>
</ul>
</li>
</ul>
<h3 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE:"></a>NOTE:</h3><ol>
<li>regex 匹配的是 uri，不包含 hostname 和 query string，默认 query string 是被追加到 replacement 末尾，如果不希望在末尾追加请求的 query string，可以在 replacement 的末尾加一个 “?”。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    rewrite ^&#x2F;mi_one&#x2F;(.*)$  &#x2F;mi&#x2F;$1;</span><br><span class="line">    rewrite ^&#x2F;mi_two&#x2F;(.*)$  &#x2F;mi&#x2F;$1?x&#x3D;0&amp;y&#x3D;1?;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi&#x2F; &#123;        </span><br><span class="line">        echo $uri$is_args$args;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ curl &quot;http:&#x2F;&#x2F;localhost&#x2F;mi_one&#x2F;hello?a&#x3D;1&amp;b&#x3D;2&quot;</span><br><span class="line">output: &#x2F;mi&#x2F;hello?a&#x3D;1&amp;b&#x3D;2</span><br><span class="line"></span><br><span class="line">$ curl &quot;http:&#x2F;&#x2F;localhost&#x2F;mi_two&#x2F;hello?a&#x3D;1&amp;b&#x3D;2&quot;</span><br><span class="line">output: &#x2F;mi&#x2F;hello?x&#x3D;0&amp;y&#x3D;1</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>如果 replacement 是以 “http://“，”https://“ 或 $scheme” 开始的字符串，那么 rewrite 指令停止后面的处理，直接返回给客户端，没有指定 flag 时，与 redirect 效果相同。</p>
</li>
<li><p>没有 flag 的 rewrite 指令根据出现的顺序执行，flag 可以控制指令的执行顺序。</p>
</li>
<li><p>在配置中开启 rewrite_log 指令，日志文件中会记录 rewrite 的匹配过程，有助于调试 rewrite 问题。</p>
</li>
</ol>
<h2 id="Nginx-请求处理流程"><a href="#Nginx-请求处理流程" class="headerlink" title="Nginx 请求处理流程"></a>Nginx 请求处理流程</h2><p>在讲 rewrite 前我们先来简单了解下 Nginx 请求处理流程，为什么需要了解请求处理流程呢？因为 rewrite 操作与其中几个 phase 关系很密切，熟悉了请求处理流程，理解 rewrite 执行逻辑就会很容易。在 Nginx 内部将请求处理划分为 11 个 phase，每个 phase 会执行对应的 handler，这里我们不打算逐个进行讲解。在 11 个 phase 中与 rewrite 指令逻辑有关的只有 4 个，所以在本文我们主要关注 SERVER_REWRITE、FIND_CONFIG、REWRITE 和 POST_REWRITE 这四个 phase。</p>
<p>首先我们要清楚的是：</p>
<ul>
<li><p>server 块中的 rewrite 模块指令在 SERVER_REWRITE 阶段解析；</p>
</li>
<li><p>location 块中的 rewrite 模块指令在 REWRITE 阶段解析；</p>
</li>
<li><p>SERVER_REWRITE - 请求到达后首先处理这个阶段的 rewrite 指令操作</p>
</li>
<li><p>FIND_CONFIG - 根据 SERVER_REWRITE 阶段得到的 uri 查找 location</p>
</li>
<li><p>REWRITE - 确定 location 后执行 locaton 中 rewrite 操作</p>
</li>
<li><p>POST_REWRITE - 根据上一阶段的 uri 重写结果做决策，可能跳回 FIND_CONFIG 阶段重新查找 location，也可能继续执行后边的 phase。例如：在 location 中配置了 rewrite 指令并且指定 flag=break，执行完本条 rewrite 终止后边的 rewrite 匹配，然后执行 PREACCESS 阶段中的 handler。同样的场景下 flag=last，执行完本条 rewrite 终止后边的 rewrite 匹配，然后跳到 FIND_CONFIG 阶段再次查找 location。未指定 flag 的情况与 flag=last 类似，唯一区别是在同一层级中未指定 flag 的 rewrite 语句不会终止后续的 rewrite 匹配。</p>
</li>
</ul>
<h3 id="通过例子理解-rewrite-指令"><a href="#通过例子理解-rewrite-指令" class="headerlink" title="通过例子理解 rewrite 指令"></a>通过例子理解 rewrite 指令</h3><h3 id="1-未指定-flag"><a href="#1-未指定-flag" class="headerlink" title="1.未指定 flag"></a>1.未指定 flag</h3><p>未指定 flag 的 rewrite 会按照出现顺序进行匹配，server 块中 rewrite 匹配完以后根据改写的 uri 查找 location，然后再匹配 location 中的 rewrite，location 中的 rewrite 指令匹配成功后会再次查找 location。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    rewrite ^&#x2F;(.*)$         &#x2F;mi_one&#x2F;$1;</span><br><span class="line">    rewrite ^&#x2F;mi_one&#x2F;(.*)$  &#x2F;mi_two&#x2F;$1;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;        </span><br><span class="line">        echo &quot;This is default location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_one&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_one location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_two&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_two location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ curl http:&#x2F;&#x2F;localhost&#x2F;mi_zero&#x2F;hello</span><br><span class="line">This is mi_two location</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li><p>匹配第一条 rewrite 成功，uri 被改写为 / mi_one/mi_zero/hello，没有指定 flag 的 rewrite 继续匹配后面的 rewrite</p>
</li>
<li><p>匹配第二条 rewrite 成功，此时 uri 被改写为 / mi_two/mi_zero/hello</p>
</li>
<li><p>查找 location，mi_two 被确定为最终的 location</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    rewrite ^&#x2F;(.*)$         &#x2F;mi_one&#x2F;$1;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;        </span><br><span class="line">        echo &quot;This is default location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_one&#x2F; &#123;</span><br><span class="line">        rewrite ^&#x2F;mi_one&#x2F;(.*)$  &#x2F;mi_two&#x2F;$1;        </span><br><span class="line">        echo &quot;This is mi_one location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_two&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_two location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ curl http:&#x2F;&#x2F;localhost&#x2F;hello</span><br><span class="line">This is mi_two location</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>说明：</p>
<ol>
<li><p>匹配 server 块中的 rewrite 成功，uri 被改写为 / mi_one/hello</p>
</li>
<li><p>server 块中只有一条 rewrite 指令，开始查找 location</p>
</li>
<li><p>location mi_one 被找到，开始匹配 location 中 rewrite</p>
</li>
<li><p>location 中的 rewrite 匹配成功，uri 被改写为 / mi_two/hello</p>
</li>
<li><p>再次查找 location，mi_two 被确定为最终使用的 location</p>
</li>
</ol>
<p>再来看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    rewrite ^&#x2F;(.*)$         http:&#x2F;&#x2F;www.mi.com&#x2F;$1;</span><br><span class="line">    rewrite ^&#x2F;mi_one&#x2F;(.*)$  &#x2F;mi_two&#x2F;$1;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;        </span><br><span class="line">        echo &quot;This is default location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_one&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_one location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_two&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_two location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ curl -I http:&#x2F;&#x2F;localhost&#x2F;mi_one&#x2F;hello</span><br><span class="line">http code: 302</span><br><span class="line">Location: http:&#x2F;&#x2F;www.mi.com&#x2F;mi_one&#x2F;hello</span><br></pre></td></tr></table></figure>
<p>说明：<br>匹配第一条 rewrite 成功，由于 replacement 是以 http:// 开始的字符串，所以 rewrite 指令直接返回给客户端 302，并且停止匹配后续的 rewrite。</p>
<h3 id="2-flag-指定为-redirect"><a href="#2-flag-指定为-redirect" class="headerlink" title="2.flag 指定为 redirect"></a>2.flag 指定为 redirect</h3><p>指定 flag 为 redirect 时，rewrite 匹配成功后直接返回给客户端 302，不会继续匹配后续的 rewrite。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    rewrite ^&#x2F;(.*)$         &#x2F;mi_one&#x2F;$1 redirect;</span><br><span class="line">    rewrite ^&#x2F;mi_one&#x2F;(.*)$  &#x2F;mi_two&#x2F;$1;</span><br><span class="line">    rewrite ^&#x2F;mi_two&#x2F;(.*)$  &#x2F;mi_three&#x2F;$1;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;        </span><br><span class="line">        echo &quot;This is default location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_one&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_one location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_two&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_two location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_three&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_three location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ curl -I http:&#x2F;&#x2F;localhost&#x2F;mi_zero&#x2F;hello</span><br><span class="line">http code: 302</span><br><span class="line">Location: http:&#x2F;&#x2F;localhost&#x2F;mi_one&#x2F;mi_zero&#x2F;hello</span><br><span class="line"></span><br><span class="line">$ curl -I http:&#x2F;&#x2F;localhost&#x2F;mi_one&#x2F;hello</span><br><span class="line">http code: 302</span><br><span class="line">Location: http:&#x2F;&#x2F;localhost&#x2F;mi_one&#x2F;mi_one&#x2F;hello</span><br><span class="line"></span><br><span class="line">$ curl -I http:&#x2F;&#x2F;localhost&#x2F;mi_two&#x2F;hello</span><br><span class="line">http code: 302</span><br><span class="line">Location: http:&#x2F;&#x2F;localhost&#x2F;mi_one&#x2F;mi_two&#x2F;hello</span><br></pre></td></tr></table></figure>


<p>再来看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    rewrite ^&#x2F;mi_one&#x2F;(.*)$  &#x2F;mi_two&#x2F;$1;</span><br><span class="line">    rewrite ^&#x2F;mi_two&#x2F;(.*)$  &#x2F;mi_three&#x2F;$1 redirect;</span><br><span class="line">    rewrite ^&#x2F;(.*)$         &#x2F;mi_one&#x2F;$1;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;        </span><br><span class="line">        echo &quot;This is default location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_one&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_one location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_two&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_two location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_three&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_three location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ curl -I http:&#x2F;&#x2F;localhost&#x2F;mi_one&#x2F;hello</span><br><span class="line">http code: 302</span><br><span class="line">Location: http:&#x2F;&#x2F;localhost&#x2F;mi_three&#x2F;hello</span><br><span class="line"></span><br><span class="line">$ curl -I http:&#x2F;&#x2F;localhost&#x2F;mi_two&#x2F;hello</span><br><span class="line">http code: 302</span><br><span class="line">Location: http:&#x2F;&#x2F;localhost&#x2F;mi_three&#x2F;hello</span><br><span class="line"></span><br><span class="line">$ curl http:&#x2F;&#x2F;localhost&#x2F;mi_zero&#x2F;hello</span><br><span class="line">This is mi_one location</span><br></pre></td></tr></table></figure>
<h3 id="3-flag-指定为-permanent"><a href="#3-flag-指定为-permanent" class="headerlink" title="3.flag 指定为 permanent"></a>3.flag 指定为 permanent</h3><p>指定 flag=permanent 时，与 redirect 效果相同，唯一的区别 http code 返回 301。</p>
<h3 id="4-flag-指定为-last"><a href="#4-flag-指定为-last" class="headerlink" title="4.flag 指定为 last"></a>4.flag 指定为 last</h3><p>rewrite 的 last 和 break 这两个 flag 使用场景很多并且也很容易混淆，他们的共同点都会停止当前层级后续的 rewrite 匹配，区别需要分两种情况：第一种使用在 server block 中，last 和 break 没有区别。第二种使用在 location block 中，last 会根据改写的 uri 重新查找 location，break 不会重新查找 location，而是在当前 location 中执行后续的指令。（注：last 和 break 不仅停止 rewrite 的匹配，同时还会停止 Nginx rewrite 模块中其他指令的执行，例如：set、return 指令)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    rewrite ^&#x2F;mi_one&#x2F;(.*)$  &#x2F;mi_two&#x2F;$1 last;</span><br><span class="line">    rewrite ^&#x2F;mi_two&#x2F;(.*)$  &#x2F;mi_three&#x2F;$1;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;        </span><br><span class="line">        echo &quot;This is default location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_one&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_one location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_two&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_two location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_three&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_three location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ curl http:&#x2F;&#x2F;localhost&#x2F;mi_one&#x2F;hello</span><br><span class="line">This is mi_two location</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>匹配第一条 rewrite 成功，uri 被改写为 / mi_two/hello，由于 flag 指定为 last 会停止后续的 rewrite 的匹配（仅停止 server block 中的 rewrite 匹配），所以会根据改写的 uri 查找 location</li>
</ol>
<p>再来看一个 last 在 location block 中使用的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    rewrite ^&#x2F;(.*)$  &#x2F;mi_one&#x2F;$1;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;        </span><br><span class="line">        echo &quot;This is default location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_one&#x2F; &#123;</span><br><span class="line">        rewrite ^&#x2F;(.*)$             &#x2F;mi_three&#x2F;$1 last;</span><br><span class="line">        rewrite ^&#x2F;mi_three&#x2F;(.*)$    &#x2F;;        </span><br><span class="line">        </span><br><span class="line">        echo &quot;This is mi_one location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_two&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_two location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_three&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_three location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ curl http:&#x2F;&#x2F;localhost&#x2F;hello</span><br><span class="line">This is mi_three location</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li><p>匹配 server block 中第一条 rewrite 成功，uri 被改写为 / mi_one/hello</p>
</li>
<li><p>查找 location，mi_one 被确定为使用的 location</p>
</li>
<li><p>匹配 location block 中的 rewrite，location 中的第一条 rewrite 匹配成功，uri 被改写为 / mi_three/mi_one/hello，由于 flag 指定为 last，所以停止 location 中后续的 rewrite 匹配，此时再根据 uri=/mi_three/mi_one/hello 查找 location，最终 mi_three 被确定为使用的 location</p>
</li>
</ol>
<h3 id="5-flag-指定为-break"><a href="#5-flag-指定为-break" class="headerlink" title="5.flag 指定为 break"></a>5.flag 指定为 break</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    rewrite ^&#x2F;mi_one&#x2F;(.*)$  &#x2F;mi_two&#x2F;$1 break;</span><br><span class="line">    rewrite ^&#x2F;mi_two&#x2F;(.*)$  &#x2F;mi_three&#x2F;$1;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;        </span><br><span class="line">        echo &quot;This is default location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_one&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_one location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_two&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_two location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_three&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_three location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ curl http:&#x2F;&#x2F;localhost&#x2F;mi_one&#x2F;hello</span><br><span class="line">This is mi_two location</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li><p>匹配 server block 中第一条 rewrite 成功，uri 被改写为 / mi_two/hello，由于 flag 指定为 break 所以会停止 server block 中后续的 rewrite 匹配，根据 uri=/mi_two/hello 查找 location，最终 mi_two 被确定为使用的 location</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    rewrite ^&#x2F;(.*)$  &#x2F;mi_one&#x2F;$1;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;        </span><br><span class="line">        echo &quot;This is default location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_one&#x2F; &#123;</span><br><span class="line">        rewrite ^&#x2F;(.*)$         &#x2F;mi_three&#x2F;$1 break;</span><br><span class="line">        rewrite ^&#x2F;mi_two&#x2F;(.*)$  &#x2F;;        </span><br><span class="line">        </span><br><span class="line">        echo &quot;This is mi_one location&quot;;        </span><br><span class="line">        echo &quot;uri: $&#123;uri&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_two&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_two location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;mi_three&#x2F; &#123;        </span><br><span class="line">        echo &quot;This is mi_three location&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ curl http:&#x2F;&#x2F;localhost&#x2F;hello</span><br><span class="line">This is mi_one location</span><br><span class="line">uri: &#x2F;mi_three&#x2F;mi_one&#x2F;hello</span><br></pre></td></tr></table></figure>
<p>说明：</p>
</li>
<li><p>匹配 server block 中第一条 rewrite 成功，uri 被改写为 / mi_one/hello</p>
</li>
<li><p>根据 uri=/mi_one/hello 查找 location，mi_one 被确定为使用的 location</p>
</li>
<li><p>匹配 location block 中的 rewrite，location 中的第一条 rewrite 匹配成功，uri 被改写为 / mi_three/mi_one/hello，由于 flag 指定为 break，所以停止 location 中后续的 rewrite 匹配，并且把当前 location 作为最终使用的 location，不会重新查找 location（last 会继续查找 location）</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 Nginx 的配置中可以实现简单的编程，理解起来相对有点难度，通过阅读此文希望能对你有些启发，能够根据项目需求可以配置更复杂的 rewrite 规则。想要更深入的理解 rewrite，还需要大家自己动手实践。</p>
<h2 id="FYI"><a href="#FYI" class="headerlink" title="FYI"></a>FYI</h2><p><a href="https://github.com/agile6v/awesome-nginx" target="_blank" rel="noopener">https://github.com/agile6v/awesome-nginx</a></p>
<p><a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_rewrite_module.html</a></p>
<p><a href="https://www.nginx.com/blog/creating-nginx-rewrite-rules/" target="_blank" rel="noopener">https://www.nginx.com/blog/creating-nginx-rewrite-rules/</a></p>
<p><a href="https://www.nginx.com/blog/converting-apache-to-nginx-rewrite-rules" target="_blank" rel="noopener">https://www.nginx.com/blog/converting-apache-to-nginx-rewrite-rules</a></p>
<p><a href="http://www.thegeekstuff.com/2017/08/nginx-rewrite-examples/" target="_blank" rel="noopener">http://www.thegeekstuff.com/2017/08/nginx-rewrite-examples/</a></p>
<p><a href="http://winginx.com/en/htaccess" target="_blank" rel="noopener">http://winginx.com/en/htaccess</a></p>
<p><a href="https://w3techs.com/technologies/overview/web_server/all" target="_blank" rel="noopener">https://w3techs.com/technologies/overview/web_server/all</a></p>
<p><a href="http://nginx.org/en/docs/dev/development_guide.html#httpphases" target="_blank" rel="noopener">http://nginx.org/en/docs/dev/development_guide.html#httpphases</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中更优雅的日志记录方案</title>
    <url>/2020/04/20/Python-%E4%B8%AD%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<blockquote class="blockquote-center">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>


<h2 id="Python-中更优雅的日志记录方案"><a href="#Python-中更优雅的日志记录方案" class="headerlink" title="Python 中更优雅的日志记录方案"></a>Python 中更优雅的日志记录方案</h2><p>在 Python 中，一般情况下我们可能直接用自带的 logging 模块来记录日志，包括我之前的时候也是一样。在使用时我们需要配置一些 Handler、Formatter 来进行一些处理，比如把日志输出到不同的位置，或者设置一个不同的输出格式，或者设置日志分块和备份。但其实个人感觉 logging 用起来其实并不是那么好用，其实主要还是配置较为繁琐.</p>
<h2 id="常见使用"><a href="#常见使用" class="headerlink" title="常见使用"></a>常见使用</h2><p>首先看看 logging 常见的解决方案吧，我一般会配置输出到文件、控制台和 Elasticsearch。输出到控制台就仅仅是方便直接查看的；输出到文件是方便直接存储，保留所有历史记录的备份；输出到 Elasticsearch，直接将 Elasticsearch 作为存储和分析的中心，使用 Kibana 可以非常方便地分析和查看运行情况。<br>所以在这里我基本会对 logging 做如下的封装写法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mport logging</span><br><span class="line">import sys</span><br><span class="line">from os import makedirs</span><br><span class="line">from os.path import dirname, exists</span><br><span class="line"></span><br><span class="line">from cmreslogging.handlers import CMRESHandler</span><br><span class="line"></span><br><span class="line">loggers &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">LOG_ENABLED &#x3D; True  # 是否开启日志</span><br><span class="line">LOG_TO_CONSOLE &#x3D; True  # 是否输出到控制台</span><br><span class="line">LOG_TO_FILE &#x3D; True  # 是否输出到文件</span><br><span class="line">LOG_TO_ES &#x3D; True  # 是否输出到 Elasticsearch</span><br><span class="line"></span><br><span class="line">LOG_PATH &#x3D; &#39;.&#x2F;runtime.log&#39;  # 日志文件路径</span><br><span class="line">LOG_LEVEL &#x3D; &#39;DEBUG&#39;  # 日志级别</span><br><span class="line">LOG_FORMAT &#x3D; &#39;%(levelname)s - %(asctime)s - process: %(process)d - %(filename)s - %(name)s - %(lineno)d - %(module)s - %(message)s&#39;  # 每条日志输出格式</span><br><span class="line">ELASTIC_SEARCH_HOST &#x3D; &#39;eshost&#39;  # Elasticsearch Host</span><br><span class="line">ELASTIC_SEARCH_PORT &#x3D; 9200  # Elasticsearch Port</span><br><span class="line">ELASTIC_SEARCH_INDEX &#x3D; &#39;runtime&#39;  # Elasticsearch Index Name</span><br><span class="line">APP_ENVIRONMENT &#x3D; &#39;dev&#39;  # 运行环境，如测试环境还是生产环境</span><br><span class="line"></span><br><span class="line">def get_logger(name&#x3D;None):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    get logger by name</span><br><span class="line">    :param name: name of logger</span><br><span class="line">    :return: logger</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    global loggers</span><br><span class="line"></span><br><span class="line">    if not name: name &#x3D; __name__</span><br><span class="line"></span><br><span class="line">    if loggers.get(name):</span><br><span class="line">        return loggers.get(name)</span><br><span class="line"></span><br><span class="line">    logger &#x3D; logging.getLogger(name)</span><br><span class="line">    logger.setLevel(LOG_LEVEL)</span><br><span class="line"></span><br><span class="line">    # 输出到控制台</span><br><span class="line">    if LOG_ENABLED and LOG_TO_CONSOLE:</span><br><span class="line">        stream_handler &#x3D; logging.StreamHandler(sys.stdout)</span><br><span class="line">        stream_handler.setLevel(level&#x3D;LOG_LEVEL)</span><br><span class="line">        formatter &#x3D; logging.Formatter(LOG_FORMAT)</span><br><span class="line">        stream_handler.setFormatter(formatter)</span><br><span class="line">        logger.addHandler(stream_handler)</span><br><span class="line"></span><br><span class="line">    # 输出到文件</span><br><span class="line">    if LOG_ENABLED and LOG_TO_FILE:</span><br><span class="line">        # 如果路径不存在，创建日志文件文件夹</span><br><span class="line">        log_dir &#x3D; dirname(log_path)</span><br><span class="line">        if not exists(log_dir): makedirs(log_dir)</span><br><span class="line">        # 添加 FileHandler</span><br><span class="line">        file_handler &#x3D; logging.FileHandler(log_path, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">        file_handler.setLevel(level&#x3D;LOG_LEVEL)</span><br><span class="line">        formatter &#x3D; logging.Formatter(LOG_FORMAT)</span><br><span class="line">        file_handler.setFormatter(formatter)</span><br><span class="line">        logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">    # 输出到 Elasticsearch</span><br><span class="line">    if LOG_ENABLED and LOG_TO_ES:</span><br><span class="line">        # 添加 CMRESHandler</span><br><span class="line">        es_handler &#x3D; CMRESHandler(hosts&#x3D;[&#123;&#39;host&#39;: ELASTIC_SEARCH_HOST, &#39;port&#39;: ELASTIC_SEARCH_PORT&#125;],</span><br><span class="line">                                  # 可以配置对应的认证权限</span><br><span class="line">                                  auth_type&#x3D;CMRESHandler.AuthType.NO_AUTH,  </span><br><span class="line">                                  es_index_name&#x3D;ELASTIC_SEARCH_INDEX,</span><br><span class="line">                                  # 一个月分一个 Index</span><br><span class="line">                                  index_name_frequency&#x3D;CMRESHandler.IndexNameFrequency.MONTHLY,</span><br><span class="line">                                  # 额外增加环境标识</span><br><span class="line">                                  es_additional_fields&#x3D;&#123;&#39;environment&#39;: APP_ENVIRONMENT&#125;  </span><br><span class="line">                                  )</span><br><span class="line">        es_handler.setLevel(level&#x3D;LOG_LEVEL)</span><br><span class="line">        formatter &#x3D; logging.Formatter(LOG_FORMAT)</span><br><span class="line">        es_handler.setFormatter(formatter)</span><br><span class="line">        logger.addHandler(es_handler)</span><br><span class="line"></span><br><span class="line">    # 保存到全局 loggers</span><br><span class="line">    loggers[name] &#x3D; logger</span><br><span class="line">    return logger</span><br></pre></td></tr></table></figure>
<p>定义完了怎么使用呢？只需要使用定义的方法获取一个 logger，然后 log 对应的内容即可:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger &#x3D; get_logger()</span><br><span class="line">logger.debug(&#39;this is a message&#39;)</span><br></pre></td></tr></table></figure>
<p>运行结果如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEBUG - 2019-10-11 22:27:35,923 - process: 99490 - logger.py - __main__ - 81 - logger - this is a message</span><br></pre></td></tr></table></figure>
<p>我们看看这个定义的基本实现吧。首先这里一些常量是用来定义 <code>logging</code> 模块的一些基本属性的，比如 LOG_ENABLED 代表是否开启日志功能，<code>LOG_TO_E</code>S 代表是否将日志输出到 Elasticsearch，另外还有很多其他的日志基本配置，如 <code>LOG_FORMAT</code> 配置了日志每个条目输出的基本格式，另外还有一些连接的必要信息。这些变量可以和运行时的命令行或环境变量对接起来，可以方便地实现一些开关和配置的更换。</p>
<p>然后定义了这么一个 <code>get_logger</code> 方法，接收一个参数 name。首先该方法拿到 name 之后，会到全局的 loggers 变量里面查找，loggers 变量是一个全局字典，如果有已经声明过的 logger，直接将其获取返回即可，不用再将其二次初始化。如果 loggers 里面没有找到 name 对应的 logger，那就进行创建即可。创建 logger 之后，可以为其添加各种对应的 Handler，如输出到控制台就用 StreamHandler，输出到文件就用 FileHandler 或 RotatingFileHandler，输出到 Elasticsearch 就用 CMRESHandler，分别配置好对应的信息即可。</p>
<p>最后呢，将新建的 logger 保存到全局的 loggers 里面并返回即可，这样如果有同名的 logger 便可以直接查找 loggers 直接返回了。<br>在这里依赖了额外的输出到 Elasticsearch 的包，叫做 CMRESHandler，它可以支持将日志输出到 Elasticsearch 里面，如果要使用的话可以安装一下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install CMRESHandler</span><br></pre></td></tr></table></figure>
<p>其 GitHub 地址是：<code>https://github.com/cmanaha/python-elasticsearch-logger</code>，具体的使用方式可以看看它的官方说明，如配置认证信息，配置 Index 分隔信息等等。<br>好，上面就是我之前常用的 logging 配置，通过如上的配置，我就可以实现将 logging 输出到三个位置，并可以实现对应的效果。比如输出到 Elasticsearch 之后，我就可以非常方便地使用 Kibana 来查看当前运行情况，ERROR Log 的比例等等.<br>也可以在它的基础上做更进一步的统计分析.</p>
<h2 id="loguru"><a href="#loguru" class="headerlink" title="loguru"></a>loguru</h2><p>上面的实现方式已经是一个较为可行的配置方案了。然而，我还是会感觉到有些 Handler 配起来麻烦，尤其是新建一个项目的很多时候懒得去写一些配置。即使是不用上文的配置，用最基本的几行 logging 配置，像如下的通用配置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level &#x3D; logging.INFO,format &#x3D; &#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)</span><br><span class="line">logger &#x3D; logging.getLogger(__name__)</span><br></pre></td></tr></table></figure>
<p>我也懒得去写，感觉并不是一个优雅的实现方式。<br>有需求就有动力啊，这不，就有人实现了这么一个库，叫做 loguru，可以将 log 的配置和使用更加简单和方便。<br>下面我们来看看它到底是怎么用的吧.</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先，这个库的安装方式很简单，就用基本的 pip 安装即可，Python 3 版本的安装如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install loguru</span><br></pre></td></tr></table></figure>
<p>安装完毕之后，我们就可以在项目里使用这个 loguru 库了.</p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>那么这个库怎么来用呢？我们先用一个实例感受下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from loguru import logger</span><br><span class="line"></span><br><span class="line">logger.debug(&#39;this is a debug message&#39;)</span><br></pre></td></tr></table></figure>
<p>看到了吧，不需要配置什么东西，直接引入一个 logger，然后调用其 debug 方法即可。</p>
<p>在 loguru 里面有且仅有一个主要对象，那就是 logger，loguru 里面有且仅有一个 logger，而且它已经被提前配置了一些基础信息，比如比较友好的格式化、文本颜色信息等等。</p>
<p>上面的代码运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-10-13 22:46:12.367 | DEBUG    | __main__:&lt;module&gt;:4 - this is a debug message</span><br></pre></td></tr></table></figure>
<p>可以看到其默认的输出格式是上面的内容，有时间、级别、模块名、行号以及日志信息，不需要手动创建 logger，直接使用即可，另外其输出还是彩色的，看起来会更加友好。</p>
<p>以上的日志信息是直接输出到控制台的，并没有输出到其他的地方，如果想要输出到其他的位置，比如存为文件，我们只需要使用一行代码声明即可。</p>
<p>例如将结果同时输出到一个 runtime.log 文件里面，可以这么写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from loguru import logger</span><br><span class="line"></span><br><span class="line">logger.add(&#39;runtime.log&#39;)</span><br><span class="line">logger.debug(&#39;this is a debug&#39;)</span><br></pre></td></tr></table></figure>
<p>很简单吧，我们也不需要再声明一个 FileHandler 了，就一行 add 语句搞定，运行之后会发现目录下 runtime.log 里面同样出现了刚刚控制台输出的 DEBUG 信息。</p>
<p>上面就是一些基本的使用，但这还远远不够，下面我们来详细了解下它的一些功能模块.</p>
<h2 id="详细使用"><a href="#详细使用" class="headerlink" title="详细使用"></a>详细使用</h2><p>既然是日志，那么最常见的就是输出到文件了。loguru 对输出到文件的配置有非常强大的支持，比如支持输出到多个文件，分级别分别输出，过大创建新文件，过久自动删除等等。</p>
<p>下面我们分别看看这些怎样来实现，这里基本上就是 add 方法的使用介绍。因为这个 add 方法就相当于给 logger 添加了一个 Handler，它给我们暴露了许多参数来实现 Handler 的配置，下面我们来详细介绍下。<br>首先看看它的方法定义吧:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def add(</span><br><span class="line">        self,</span><br><span class="line">        sink,</span><br><span class="line">        *,</span><br><span class="line">        level&#x3D;_defaults.LOGURU_LEVEL,</span><br><span class="line">        format&#x3D;_defaults.LOGURU_FORMAT,</span><br><span class="line">        filter&#x3D;_defaults.LOGURU_FILTER,</span><br><span class="line">        colorize&#x3D;_defaults.LOGURU_COLORIZE,</span><br><span class="line">        serialize&#x3D;_defaults.LOGURU_SERIALIZE,</span><br><span class="line">        backtrace&#x3D;_defaults.LOGURU_BACKTRACE,</span><br><span class="line">        diagnose&#x3D;_defaults.LOGURU_DIAGNOSE,</span><br><span class="line">        enqueue&#x3D;_defaults.LOGURU_ENQUEUE,</span><br><span class="line">        catch&#x3D;_defaults.LOGURU_CATCH,</span><br><span class="line">        **kwargs</span><br><span class="line">    ):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>看看它的源代码，它支持这么多的参数，如 level、format、filter、color 等等。</p>
<blockquote>
<p>sink<br>另外我们还注意到它有个非常重要的参数 sink，我们看看官方文档：<code>https://loguru.readthedocs.io/en/stable/api/logger.html#sink</code>，可以了解到通过 sink 我们可以传入多种不同的数据结构，汇总如下:</p>
</blockquote>
<ul>
<li>sink 可以传入一个 file 对象，例如 sys.stderr 或者 open(‘file.log’, ‘w’) 都可以。</li>
<li>sink 可以直接传入一个 str 字符串或者 pathlib.Path 对象，其实就是代表文件路径的，如果识别到是这种类型，它会自动创建对应路径的日志文件并将日志输出进去。</li>
<li>sink 可以是一个方法，可以自行定义输出实现。</li>
<li>sink 可以是一个 logging 模块的 Handler，比如 FileHandler、StreamHandler 等等，或者上文中我们提到的 CMRESHandler 照样也是可以的，这样就可以实现自定义 Handler 的配置。</li>
<li>sink 还可以是一个自定义的类，具体的实现规范可以参见官方文档.<br>所以说，刚才我们所演示的输出到文件，仅仅给它传了一个 str 字符串路径，他就给我们创建了一个日志文件，就是这个原理。</li>
</ul>
<blockquote>
<blockquote>
<p>format, filter, level<br>下面我们再了解下它的其他参数，例如 format、filter、level 等等。<br>其实它们的概念和格式和 logging 模块都是基本一样的了，例如这里使用 format、filter、level 来规定输出的格式:</p>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.add(&#39;runtime.log&#39;, format&#x3D;&quot;&#123;time&#125; &#123;level&#125; &#123;message&#125;&quot;, filter&#x3D;&quot;my_module&quot;, level&#x3D;&quot;INFO&quot;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>删除sink<br>另外添加 sink 之后我们也可以对其进行删除，相当于重新刷新并写入新的内容。<br>删除的时候根据刚刚 add 方法返回的 id 进行删除即可，看下面的例子:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from loguru import logger</span><br><span class="line"></span><br><span class="line">trace &#x3D; logger.add(&#39;runtime.log&#39;)</span><br><span class="line">logger.debug(&#39;this is a debug message&#39;)</span><br><span class="line">logger.remove(trace)</span><br><span class="line">logger.debug(&#39;this is another debug message&#39;)</span><br></pre></td></tr></table></figure>
<p>看这里，我们首先 add 了一个 sink，然后获取它的返回值，赋值为 trace。随后输出了一条日志，然后将 trace 变量传给 remove 方法，再次输出一条日志，看看结果是怎样的。<br>控制台输出如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">019-10-13 23:18:26.469 | DEBUG    | __main__:&lt;module&gt;:4 - this is a debug message</span><br><span class="line">2019-10-13 23:18:26.469 | DEBUG    | __main__:&lt;module&gt;:6 - this is another debug message</span><br></pre></td></tr></table></figure>
<p>日志文件 runtime.log 内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-10-13 23:18:26.469 | DEBUG    | __main__:&lt;module&gt;:4 - this is a debug message</span><br></pre></td></tr></table></figure>
<p>可以发现，在调用 remove 方法之后，确实将历史 log 删除了。<br>这样我们就可以实现日志的刷新重新写入操作。</p>
<blockquote>
<p>rotation 配置<br>用了 loguru 我们还可以非常方便地使用 rotation 配置，比如我们想一天输出一个日志文件，或者文件太大了自动分隔日志文件，我们可以直接使用 add 方法的 rotation 参数进行配置。<br>我们看看下面的例子：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.add(&#39;runtime_&#123;time&#125;.log&#39;, rotation&#x3D;&quot;500 MB&quot;)</span><br></pre></td></tr></table></figure>
<p>通过这样的配置我们就可以实现每 500MB 存储一个文件，每个 log 文件过大就会新创建一个 log 文件。我们在配置 log 名字时加上了一个 time 占位符，这样在生成时可以自动将时间替换进去，生成一个文件名包含时间的 log 文件。<br>另外我们也可以使用 rotation 参数实现定时创建 log 文件，例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.add(&#39;runtime_&#123;time&#125;.log&#39;, rotation&#x3D;&#39;00:00&#39;)</span><br></pre></td></tr></table></figure>
<p>这样就可以实现每天 0 点新创建一个 log 文件输出了。<br>另外我们也可以配置 log 文件的循环时间，比如每隔一周创建一个 log 文件，写法如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.add(&#39;runtime_&#123;time&#125;.log&#39;, rotation&#x3D;&#39;1 week&#39;)</span><br></pre></td></tr></table></figure>
<p>这样我们就可以实现一周创建一个 log 文件了。</p>
<blockquote>
<p>retention 配置<br>很多情况下，一些非常久远的 log 对我们来说并没有什么用处了，它白白占据了一些存储空间，不清除掉就会非常浪费。retention 这个参数可以配置日志的最长保留时间。<br>比如我们想要设置日志文件最长保留 10 天，可以这么来配置:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.add(&#39;runtime.log&#39;, retention&#x3D;&#39;10 days&#39;)</span><br></pre></td></tr></table></figure>
<p>这样 log 文件里面就会保留最新 10 天的 log，妈妈再也不用担心 log 沉积的问题啦。</p>
<blockquote>
<p>compression 配置<br>loguru 还可以配置文件的压缩格式，比如使用 zip 文件格式保存，示例如下:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.add(&#39;runtime.log&#39;, compression&#x3D;&#39;zip&#39;)</span><br></pre></td></tr></table></figure>
<p>这样可以更加节省存储空间。</p>
<blockquote>
<p>字符串格式化<br>loguru 在输出 log 的时候还提供了非常友好的字符串格式化功能，像这样:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger.info(&#39;If you are using Python &#123;&#125;, prefer &#123;feature&#125; of course!&#39;, 3.6, feature&#x3D;&#39;f-strings&#39;)</span><br></pre></td></tr></table></figure>
<p>这样在添加参数就非常方便了。</p>
<blockquote>
<p>Traceback 记录<br>在很多情况下，如果遇到运行错误，而我们在打印输出 log 的时候万一不小心没有配置好 Traceback 的输出，很有可能我们就没法追踪错误所在了。<br>但用了 loguru 之后，我们用它提供的装饰器就可以直接进行 Traceback 的记录，类似这样的配置即可:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@logger.catch</span><br><span class="line">def my_function(x, y, z):</span><br><span class="line">    # An error? It&#39;s caught anyway!</span><br><span class="line">    return 1 &#x2F; (x + y + z)</span><br></pre></td></tr></table></figure>
<p>我们做个测试，我们在调用时三个参数都传入 0，直接引发除以 0 的错误，看看会出现什么情况:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">my_function(0, 0, 0)</span><br></pre></td></tr></table></figure>
<p>运行完毕之后，可以发现 log 里面就出现了 Traceback 信息，而且给我们输出了当时的变量值，真的是不能再赞了！结果如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; File &quot;run.py&quot;, line 15, in &lt;module&gt;</span><br><span class="line">    my_function(0, 0, 0)</span><br><span class="line">    └ &lt;function my_function at 0x1171dd510&gt;</span><br><span class="line"></span><br><span class="line">  File &quot;&#x2F;private&#x2F;var&#x2F;py&#x2F;logurutest&#x2F;demo5.py&quot;, line 13, in my_function</span><br><span class="line">    return 1 &#x2F; (x + y + z)</span><br><span class="line">                │   │   └ 0</span><br><span class="line">                │   └ 0</span><br><span class="line">                └ 0</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>
<p>因此，用 loguru 可以非常方便地实现日志追踪，debug 效率可能要高上十倍了？<br>另外 loguru 还有很多很多强大的功能，这里就不再一一展开讲解了，更多的内容大家可以看看 loguru 的官方文档详细了解一下：<code>https://loguru.readthedocs.io/en/stable/index.html</code><br>看完之后，是时候把自己的 logging 模块替换成 loguru 啦！</p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python在字典中将键映射到多个值上</title>
    <url>/2020/04/20/Python%E5%9C%A8%E5%AD%97%E5%85%B8%E4%B8%AD%E5%B0%86%E9%94%AE%E6%98%A0%E5%B0%84%E5%88%B0%E5%A4%9A%E4%B8%AA%E5%80%BC%E4%B8%8A/</url>
    <content><![CDATA[<h2 id="Python在字典中将键映射到多个值上"><a href="#Python在字典中将键映射到多个值上" class="headerlink" title="Python在字典中将键映射到多个值上"></a>Python在字典中将键映射到多个值上</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>我们想要一个能将键（key）能映射到多个值的字典（即所谓的一键多值字典multidict）。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>字典是一种关联容器。每个键都映射到单独的值上。如果想让键映射到多个值，需要将这多个值保存到另一个容器如列表或集合中。例如，可能会像这样创建字典：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; &#123;</span><br><span class="line">    &#39;a&#39; : [1, 2, 3],</span><br><span class="line">    &#39;b&#39; : [4, 5]</span><br><span class="line">&#125;</span><br><span class="line">e &#x3D; &#123;</span><br><span class="line">    &#39;a&#39; : &#123;1, 2, 3&#125;,</span><br><span class="line">    &#39;b&#39; : &#123;4, 5&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要使用列表还是集合完全取决于应用的意图。如果希望保留元素插入的顺序，就用列表。如果希望消除重复元素（且不在意它们的顺序），就用集合。<br>为了能方便的创建这样的字典，可以利用collections模块中的defaultdict类。defaultdict的一个特点就是它会自动初始化第一个值，这样只需关注添加元素即可。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line">d &#x3D; defaultdict(list)</span><br><span class="line">d[&#39;a&#39;].append(1)</span><br><span class="line">d[&#39;a&#39;].append(2)</span><br><span class="line">d[&#39;a&#39;].append(3)</span><br><span class="line">d[&#39;b&#39;].append(4)</span><br><span class="line">d[&#39;b&#39;].append(5)</span><br><span class="line">print(d) # outputs : defaultdict(&lt;class &#39;list&#39;&gt;, &#123;&#39;a&#39;: [1, 2, 3], &#39;b&#39;: [4, 5]&#125;)</span><br><span class="line">d &#x3D; defaultdict(set)</span><br><span class="line">d[&#39;a&#39;].add(1)</span><br><span class="line">d[&#39;a&#39;].add(2)</span><br><span class="line">d[&#39;a&#39;].add(3)</span><br><span class="line">d[&#39;b&#39;].add(4)</span><br><span class="line">d[&#39;b&#39;].add(5)</span><br><span class="line">print(d) # outputs : defaultdict(&lt;class &#39;set&#39;&gt;, &#123;&#39;a&#39;: &#123;1, 2, 3&#125;, &#39;b&#39;: &#123;4, 5&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p>关于defaultdict，需要注意的一个地方是，它会自动创建字典表项以待稍后的访问(即使这些表项当前在字典中还没有找到),例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line">d &#x3D; defaultdict(list)</span><br><span class="line">if d[&#39;a&#39;]:</span><br><span class="line">    pass</span><br><span class="line">print(d) # outputs : defaultdict(&lt;class &#39;list&#39;&gt;, &#123;&#39;a&#39;: []&#125;)</span><br></pre></td></tr></table></figure>
<p>如果不想要这个功能，可以在普通的字典上调用setdefault()方法来取代。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line">d &#x3D; &#123;&#125;</span><br><span class="line">d.setdefault(&#39;a&#39;, []).append(1)</span><br><span class="line">d.setdefault(&#39;a&#39;, []).append(2)</span><br><span class="line">d.setdefault(&#39;a&#39;, []).append(3)</span><br><span class="line">d.setdefault(&#39;b&#39;, []).append(4)</span><br><span class="line">d.setdefault(&#39;b&#39;, []).append(5)</span><br><span class="line">print(d) # outputs : &#123;&#39;a&#39;: [1, 2, 3], &#39;b&#39;: [4, 5]&#125;</span><br></pre></td></tr></table></figure>
<p>然后，总感觉使用setdefault()有点不自然，更别提每次调用它时都会创建一个初始值的新实例了（例子中的空列表[]）。</p>
<h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h3><p>原则上，构建一个一键多值字典是很容易的。但是试着自己对第一个值做初始化操作，这就会变得很杂乱。例如，可能会写下这样的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; &#123;&#125;</span><br><span class="line">for key, value in pairs:</span><br><span class="line">    if key not in d:</span><br><span class="line">        d[key] &#x3D; value</span><br><span class="line">    d[key].append(value)</span><br><span class="line">&#96;&#96;&#96;    </span><br><span class="line">使用defaultdict后代码会清晰很多：</span><br></pre></td></tr></table></figure>
<p>d = defaultdict(list)<br>for key, value in pairs:<br>    d[key].append(value)</p>
<pre><code>
[原文地址](http://www.revotu.com/mapping-keys-to-multiple-values-in-a-dictionary.html)</code></pre>]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基于列表实现数据结构栈stack和队列queue</title>
    <url>/2020/04/20/Python%E5%9F%BA%E4%BA%8E%E5%88%97%E8%A1%A8%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%88stack%E5%92%8C%E9%98%9F%E5%88%97queue/</url>
    <content><![CDATA[<h2 id="Python基于列表实现数据结构栈stack和队列queue"><a href="#Python基于列表实现数据结构栈stack和队列queue" class="headerlink" title="Python基于列表实现数据结构栈stack和队列queue"></a>Python基于列表实现数据结构栈stack和队列queue</h2><h3 id="python中栈的实现"><a href="#python中栈的实现" class="headerlink" title="python中栈的实现"></a>python中栈的实现</h3><p>栈是一种后进先出（LIFO）的数据结构，只能在一端（栈顶）插入和删除元素，而python中的列表的append()方法对应的就是向栈顶添加元素，列表的pop()方法对应的就是弹出栈顶元素，因此，python中的列表可以作为栈这种数据结构。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; stack &#x3D; [3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; stack.append(6)</span><br><span class="line">&gt;&gt;&gt; stack.append(7)</span><br><span class="line">&gt;&gt;&gt; stack</span><br><span class="line">[3, 4, 5, 6, 7]</span><br><span class="line">&gt;&gt;&gt; stack.pop()</span><br><span class="line">7</span><br><span class="line">&gt;&gt;&gt; stack.pop()</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; stack.pop()</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; stack.pop()</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; stack</span><br><span class="line">[3]</span><br></pre></td></tr></table></figure>

<h3 id="python中队列的实现"><a href="#python中队列的实现" class="headerlink" title="python中队列的实现"></a>python中队列的实现</h3><p>队列是一种先进先出（FIFO）的数据结构，在一端（队尾）插入元素，在另一端（队首）删除元素。而如果用列表实现这种数据结构不是很高效，原因在于在列表尾插入和删除元素是很快的（时间复杂度O(1)），而在列表头插入元素是很慢的（时间复杂度O(n)），因为在列表头部插入和删除元素，列表中其余所有元素都要移动。<br>为了实现队列，用collections.deque双端队列，可以在两端快速的插入和删除元素（时间复杂度都是O(1)）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import deque</span><br><span class="line">&gt;&gt;&gt; queue &#x3D; deque([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;])</span><br><span class="line">&gt;&gt;&gt; queue.append(&#39;D&#39;)</span><br><span class="line">&gt;&gt;&gt; queue.append(&#39;E&#39;)</span><br><span class="line">&gt;&gt;&gt; queue</span><br><span class="line">deque([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;])</span><br><span class="line">&gt;&gt;&gt; queue.popleft()</span><br><span class="line">&#39;A&#39;</span><br><span class="line">&gt;&gt;&gt; queue.popleft()</span><br><span class="line">&#39;B&#39;</span><br><span class="line">&gt;&gt;&gt; queue.popleft()</span><br><span class="line">&#39;C&#39;</span><br><span class="line">&gt;&gt;&gt; queue.popleft()</span><br><span class="line">&#39;D&#39;</span><br><span class="line">&gt;&gt;&gt; queue</span><br><span class="line">deque([&#39;E&#39;])</span><br></pre></td></tr></table></figure>
<p>双端队列collections.deque也是基于列表实现的，由此可以看出基础的数据结构，在Python中通常无需我们自己实现，基于python现有的强大的数据类型，很容易构造出我们想要的数据结构。</p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python合并两个字典成一个新字典的几种方法分析比较</title>
    <url>/2020/04/20/Python%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E5%AD%97%E5%85%B8%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%B0%E5%AD%97%E5%85%B8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%E5%88%86%E6%9E%90%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<h2 id="Python合并两个字典成一个新字典的几种方法分析比较"><a href="#Python合并两个字典成一个新字典的几种方法分析比较" class="headerlink" title="Python合并两个字典成一个新字典的几种方法分析比较"></a>Python合并两个字典成一个新字典的几种方法分析比较</h2><p>两个字典如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d1 &#x3D; &#123;&#39;name&#39; : &#39;revotu&#39;, &#39;age&#39; : 99&#125;</span><br><span class="line">&gt;&gt;&gt; d2 &#x3D; &#123;&#39;age&#39; : 24, &#39;sex&#39; : &#39;male&#39;&#125;</span><br></pre></td></tr></table></figure>
<p>合并后的结果如下（即，key相同时后面字典值覆盖前面字典）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;&#39;sex&#39;: &#39;male&#39;, &#39;name&#39;: &#39;revotu&#39;, &#39;age&#39;: 24&#125;</span><br></pre></td></tr></table></figure>
<p>首先，说明字典并不支持+加法运算：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d1 + d2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unsupported operand type(s) for +: &#39;dict&#39; and &#39;dict&#39;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>现总结如下几种方法以及简要分析比较。</p>
<ol>
<li><p>多次更新<br>下面是最简单的合并字典的方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; &#123;&#125;</span><br><span class="line">&gt;&gt;&gt; d.update(d1)</span><br><span class="line">&gt;&gt;&gt; d.update(d2)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>首先创建一个空字典，并使用update方法向字典中添加元素。注意，先添加的是d1，以保证后面添加的d2重复键会覆盖d1。<br>此方法满足了我们的要求，而且清晰明确，可是三行代码总感觉不够Pythonic。</p>
</blockquote>
</li>
<li><p>先复制，后更新<br>先复制d1字典创建一个新字典，然后使用d2来更新前面创建的新字典。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; d1.copy()</span><br><span class="line">&gt;&gt;&gt; d.update(d2)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对比方法一，这种复制d1的方法，更明显的表现出d1作为默认值。</p>
</blockquote>
</li>
<li><p>字典构造器<br>还可以使用字典的构造器dict()复制字典，然后再更新：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; dict(d1)</span><br><span class="line">&gt;&gt;&gt; d.update(d2)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>与方法二很相似，但是没有方法二直接明了。</p>
</blockquote>
</li>
<li><p>关键字参数hack<br>你可能见过下面这个巧妙的解决办法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; dict(d1 , **d2)</span><br></pre></td></tr></table></figure>
<p>只有一行代码，看上去很酷，但是有一个问题，这种hack技巧只有在字典的键是字符串时才有效。</p>
<blockquote>
<p>看上去很cool，但是不通用，字典的键必须是字符串才可以用这种关键字参数方法。</p>
</blockquote>
</li>
<li><p>字典推导式<br>可以用字典推导式解决此问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; &#123;k:v for d in [d1, d2] for k,v in d.items()&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>字典推导式方法满足要求，只是嵌套的字典推导式，不那么清晰，不易于理解。</p>
</blockquote>
</li>
<li><p>元素拼接<br>我们从每个字典中获取一个元素列表，将列表拼接起来，然后再用拼接的列表构造字典：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; dict(list(d1.items()) + list(d2.items()))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>而且，d2的元素在列表后面，所以在键重复时可以覆盖d1。如果在Python2中，items()方法本身返回的就是列表，无需用list()转成列表。</p>
</blockquote>
</li>
</ol>
<p>元素拼接在构造字典可以满足要求，只是看上去代码有些重复。</p>
<ol start="7">
<li><p>元素并集<br>在Python3中，字典返回的是视图对象，键的视图对象是一个类似集合的对象，如果字典中的值可以保证是唯一的可哈希的，此时items返回的视图对象也是一个类似集合的对象：</p>
<figure class="highlight plain"><figcaption><span>d </span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; 这种方法挺有意思，可是并不准确，因为集合是无序的，键重复时不能保证谁覆盖谁，而且字典中的值通常也是不可哈希的，当然也就不能返回一个类似集合的对象。</span><br><span class="line"></span><br><span class="line">8. chain items</span><br><span class="line">目前为止，我们讨论的解决方案中，最符合Python语言习惯而且只有一行代码实现的，是创建两个items的列表，然后拼接成字典。</span><br><span class="line">我们可以用itertools.chain来简化items拼接过程：</span><br><span class="line">&#96;&#96;&#96;&gt;&gt;&gt; d &#x3D; dict(chain(d1.items(), d2.items()))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种方案很不错，可能比另外创建两个不必要的列表更高效。</p>
</blockquote>
</li>
<li><p>ChainMap<br>collections.ChainMap可以将多个字典或映射，在逻辑上将它们合并为一个单独的映射结构：</p>
<figure class="highlight plain"><figcaption><span>from collections import ChainMap</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; dict(ChainMap(d1, d2))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种方法也很pythonic，而且也是通用方法。</p>
</blockquote>
</li>
<li><p>字典拆分<br>在Python3.5+中，可以使用一种全新的字典合并方式：</p>
<figure class="highlight plain"><figcaption><span>d </span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; 这行代码很pythonic，如果是你的python版本是3.5+，用这种方法是很不错的选择。</span><br><span class="line"></span><br><span class="line">### 总结</span><br><span class="line">上面说了十种可以合并两个字典成一个新字典的方式，具体用哪个取决于你。</span><br><span class="line">如果使用的是Python3.5+的版本，那么字典拆分这种新语法应该很适合你：</span><br></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<blockquote>
<p>d = {*<em>d1, *</em>d2}</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code></code></pre></li>
</ol>
<p><a href="http://www.revotu.com/python-merge-two-dicts-into-one-dict.html#more" target="_blank" rel="noopener">原文博客</a>  </p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python如何递归删除空文件夹</title>
    <url>/2020/04/20/Python%E5%A6%82%E4%BD%95%E9%80%92%E5%BD%92%E5%88%A0%E9%99%A4%E7%A9%BA%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<h2 id="Python如何递归删除空文件夹"><a href="#Python如何递归删除空文件夹" class="headerlink" title="Python如何递归删除空文件夹"></a>Python如何递归删除空文件夹</h2><p>Python如何递归删除空文件夹，这个问题很常见。但大多数人的解决办法都是自己实现递归函数解决这个问题，其实根本不用那么麻烦。Python中的os.walk提供了一种从内到外的遍历目录树的方法（设置topdown=False），这样由内到外判断当前目录树下是否有文件和文件夹，如果都没有则意味着当前目录树为空文件夹，os.rmdir删除即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Recursively Remove Empty Directories</span><br><span class="line">import os</span><br><span class="line">for root, dirs, files in os.walk(path, topdown&#x3D;False):</span><br><span class="line">    if not files and not dirs:</span><br><span class="line">        os.rmdir(root)</span><br><span class="line">&#96;&#96;&#96;        </span><br><span class="line">如果在遍历文件夹同时，先做了一些操作，比如删除文件操作os.remove，然后再判断此时文件夹是否为空，为空则删除。需要用os.listdir判断当前文件夹是否为空，因为dirs和files还是刚进入当前文件夹root时得到的。</span><br></pre></td></tr></table></figure>
<p>#Recursively Remove Empty Directories, During do something like os.remove(file)<br>import os<br>for root, dirs, files in os.walk(path, topdown=False):<br>    # do something like os.remove(file)<br>    if not os.listdir(root):<br>        os.rmdir(root)<br>```        </p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python操作MySQL</title>
    <url>/2020/04/20/Python%E6%93%8D%E4%BD%9CMySQL/</url>
    <content><![CDATA[<h2 id="Python操作MySQL"><a href="#Python操作MySQL" class="headerlink" title="Python操作MySQL"></a>Python操作MySQL</h2><h3 id="一-python操作数据库介绍"><a href="#一-python操作数据库介绍" class="headerlink" title="一. python操作数据库介绍"></a>一. python操作数据库介绍</h3><p>Python 标准数据库接口为 Python DB-API，Python DB-API为开发人员提供了数据库应用编程接口。<br>Python 数据库接口支持非常多的数据库，你可以选择适合你项目的数据库：</p>
<ul>
<li>GadFly</li>
<li>mSQL</li>
<li>MySQL</li>
<li>PostgreSQL</li>
<li>Microsoft SQL Server 2000</li>
<li>Informix</li>
<li>Interbase</li>
<li>Oracle</li>
<li>Sybase</li>
<li>…<br>你可以访问<a href="https://wiki.python.org/moin/DatabaseInterfaces" target="_blank" rel="noopener">Python数据库接口及API</a>查看详细的支持数据库列表。<br>不同的数据库你需要下载不同的DB API模块，例如你需要访问Oracle数据库和Mysql数据，你需要下载Oracle和MySQL数据库模块。<br>DB-API 是一个规范. 它定义了一系列必须的对象和数据库存取方式, 以便为各种各样的底层数据库系统和多种多样的数据库接口程序提供一致的访问接口 。<br>Python的DB-API，为大多数的数据库实现了接口，使用它连接各数据库后，就可以用相同的方式操作各数据库。</li>
</ul>
<p>Python DB-API使用流程：<br>引入 API 模块。<br>获取与数据库的连接。<br>执行SQL语句和存储过程。<br>关闭数据库连接。</p>
<h2 id="二-python操作MySQL模块"><a href="#二-python操作MySQL模块" class="headerlink" title="二. python操作MySQL模块"></a>二. python操作MySQL模块</h2><p>Python操作MySQL主要使用两种方式：</p>
<ol>
<li>DB模块(原生SQL) <ul>
<li>PyMySQL(支持python2.x/3.x)</li>
<li>MySQLdb(目前仅支持python2.x)</li>
</ul>
</li>
<li>ORM框架<ul>
<li>SQLAchemy<h3 id="2-1-PyMySQL模块"><a href="#2-1-PyMySQL模块" class="headerlink" title="2.1 PyMySQL模块"></a>2.1 PyMySQL模块</h3>本文主要介绍PyMySQL模块,MySQLdb使用方式类似</li>
</ul>
</li>
</ol>
<h4 id="2-1-1-安装PyMySQL"><a href="#2-1-1-安装PyMySQL" class="headerlink" title="2.1.1 安装PyMySQL"></a>2.1.1 安装PyMySQL</h4><p>PyMySQL是一个Python编写的MySQL驱动程序，让我们可以用Python语言操作MySQL数据库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install PyMySQL</span><br></pre></td></tr></table></figure>

<h3 id="2-2-基本使用"><a href="#2-2-基本使用" class="headerlink" title="2.2 基本使用"></a>2.2 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;5&#x2F;13</span><br><span class="line"></span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 创建连接</span><br><span class="line">conn &#x3D; pymysql.connect(host&#x3D;&quot;127.0.0.1&quot;, port&#x3D;3306, user&#x3D;&#39;zff&#39;, passwd&#x3D;&#39;zff123&#39;, db&#x3D;&#39;zff&#39;, charset&#x3D;&#39;utf8mb4&#39;)</span><br><span class="line"></span><br><span class="line"># 创建游标(查询数据返回为元组格式)</span><br><span class="line"># cursor &#x3D; conn.cursor()</span><br><span class="line"></span><br><span class="line"># 创建游标(查询数据返回为字典格式)</span><br><span class="line">cursor &#x3D; conn.cursor(pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"># 1. 执行SQL,返回受影响的行数</span><br><span class="line">effect_row1 &#x3D; cursor.execute(&quot;select * from USER&quot;)</span><br><span class="line"></span><br><span class="line"># 2. 执行SQL,返回受影响的行数,一次插入多行数据</span><br><span class="line">effect_row2 &#x3D; cursor.executemany(&quot;insert into USER (NAME) values(%s)&quot;, [(&quot;jack&quot;), (&quot;boom&quot;), (&quot;lucy&quot;)])  # 3</span><br><span class="line"></span><br><span class="line"># 查询所有数据,返回数据为元组格式</span><br><span class="line">result &#x3D; cursor.fetchall()</span><br><span class="line"></span><br><span class="line"># 增&#x2F;删&#x2F;改均需要进行commit提交,进行保存</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"># 关闭游标</span><br><span class="line">cursor.close()</span><br><span class="line"></span><br><span class="line"># 关闭连接</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line">print(result)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">[&#123;&#39;id&#39;: 6, &#39;name&#39;: &#39;boom&#39;&#125;, &#123;&#39;id&#39;: 5, &#39;name&#39;: &#39;jack&#39;&#125;, &#123;&#39;id&#39;: 7, &#39;name&#39;: &#39;lucy&#39;&#125;, &#123;&#39;id&#39;: 4, &#39;name&#39;: &#39;tome&#39;&#125;, &#123;&#39;id&#39;: 3, &#39;name&#39;: &#39;zff&#39;&#125;, &#123;&#39;id&#39;: 1, &#39;name&#39;: &#39;zhaofengfeng&#39;&#125;, &#123;&#39;id&#39;: 2, &#39;name&#39;: &#39;zhaofengfeng02&#39;&#125;]</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-获取最新创建的数据自增ID"><a href="#2-3-获取最新创建的数据自增ID" class="headerlink" title="2.3 获取最新创建的数据自增ID"></a>2.3 获取最新创建的数据自增ID</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;5&#x2F;13</span><br><span class="line"></span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 创建连接</span><br><span class="line">conn &#x3D; pymysql.connect(host&#x3D;&quot;127.0.0.1&quot;, port&#x3D;3306, user&#x3D;&#39;zff&#39;, passwd&#x3D;&#39;zff123&#39;, db&#x3D;&#39;zff&#39;, charset&#x3D;&#39;utf8mb4&#39;)</span><br><span class="line"></span><br><span class="line"># 创建游标(查询数据返回为元组格式)</span><br><span class="line">cursor &#x3D; conn.cursor()</span><br><span class="line"></span><br><span class="line"># 获取新创建数据自增ID</span><br><span class="line">effect_row &#x3D; cursor.executemany(&quot;insert into USER (NAME)values(%s)&quot;, [(&quot;eric&quot;)])</span><br><span class="line"></span><br><span class="line"># 增删改均需要进行commit提交</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"># 关闭游标</span><br><span class="line">cursor.close()</span><br><span class="line"></span><br><span class="line"># 关闭连接</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line">new_id &#x3D; cursor.lastrowid</span><br><span class="line">print(new_id)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">8</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-查询操作"><a href="#2-4-查询操作" class="headerlink" title="2.4 查询操作"></a>2.4 查询操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;5&#x2F;13</span><br><span class="line"></span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 创建连接</span><br><span class="line">conn &#x3D; pymysql.connect(host&#x3D;&quot;127.0.0.1&quot;, port&#x3D;3306, user&#x3D;&#39;zff&#39;, passwd&#x3D;&#39;zff123&#39;, db&#x3D;&#39;zff&#39;, charset&#x3D;&#39;utf8mb4&#39;)</span><br><span class="line"></span><br><span class="line"># 创建游标</span><br><span class="line">cursor &#x3D; conn.cursor()</span><br><span class="line"></span><br><span class="line">cursor.execute(&quot;select * from USER&quot;)</span><br><span class="line"></span><br><span class="line"># 获取第一行数据</span><br><span class="line">row_1 &#x3D; cursor.fetchone()</span><br><span class="line"></span><br><span class="line"># 获取前n行数据</span><br><span class="line">row_2 &#x3D; cursor.fetchmany(3)</span><br><span class="line">#</span><br><span class="line"># # 获取所有数据</span><br><span class="line">row_3 &#x3D; cursor.fetchall()</span><br><span class="line"></span><br><span class="line"># 关闭游标</span><br><span class="line">cursor.close()</span><br><span class="line"></span><br><span class="line"># 关闭连接</span><br><span class="line">conn.close()</span><br><span class="line">print(row_1)</span><br><span class="line">print(row_2)</span><br><span class="line">print(row_3)</span><br></pre></td></tr></table></figure>
<p>⚠️ 在fetch数据时按照顺序进行，可以使用cursor.scroll(num,mode)来移动游标位置，如：</p>
<ul>
<li>cursor.scroll(1,mode=’relative’)  # 相对当前位置移动</li>
<li>cursor.scroll(2,mode=’absolute’)  # 相对绝对位置移动</li>
</ul>
<h3 id="2-5-防止SQL注入"><a href="#2-5-防止SQL注入" class="headerlink" title="2.5 防止SQL注入"></a>2.5 防止SQL注入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;5&#x2F;13</span><br><span class="line"></span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 创建连接</span><br><span class="line">conn &#x3D; pymysql.connect(host&#x3D;&quot;127.0.0.1&quot;, port&#x3D;3306, user&#x3D;&#39;zff&#39;, passwd&#x3D;&#39;zff123&#39;, db&#x3D;&#39;zff&#39;, charset&#x3D;&#39;utf8mb4&#39;)</span><br><span class="line"></span><br><span class="line"># 创建游标</span><br><span class="line">cursor &#x3D; conn.cursor()</span><br><span class="line"></span><br><span class="line"># 存在sql注入情况(不要用格式化字符串的方式拼接SQL)</span><br><span class="line">sql &#x3D; &quot;insert into USER (NAME) values(&#39;%s&#39;)&quot; % (&#39;zhangsan&#39;,)</span><br><span class="line">effect_row &#x3D; cursor.execute(sql)</span><br><span class="line"></span><br><span class="line"># 正确方式一</span><br><span class="line"># execute函数接受一个元组&#x2F;列表作为SQL参数,元素个数只能有1个</span><br><span class="line">sql &#x3D; &quot;insert into USER (NAME) values(%s)&quot;</span><br><span class="line">effect_row1 &#x3D; cursor.execute(sql, [&#39;wang6&#39;])</span><br><span class="line">effect_row2 &#x3D; cursor.execute(sql, (&#39;wang7&#39;,))</span><br><span class="line"></span><br><span class="line"># 正确方式二</span><br><span class="line">sql &#x3D; &quot;insert into USER (NAME) values(%(name)s)&quot;</span><br><span class="line">effect_row1 &#x3D; cursor.execute(sql, &#123;&#39;name&#39;: &#39;wudalang&#39;&#125;)</span><br><span class="line"></span><br><span class="line"># 写入插入多行数据</span><br><span class="line">effect_row2 &#x3D; cursor.executemany(&quot;insert into USER (NAME) values(%s)&quot;, [(&#39;ermazi&#39;), (&#39;dianxiaoer&#39;)])</span><br><span class="line"></span><br><span class="line"># 提交</span><br><span class="line">conn.commit()</span><br><span class="line"># 关闭游标</span><br><span class="line">cursor.close()</span><br><span class="line"># 关闭连接</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<p>这样，SQL操作就更安全了。如果需要更详细的文档参考PyMySQL文档吧。不过好像这些SQL数据库的实现还不太一样，PyMySQL的参数占位符使用%s这样的C格式化符，而Python自带的sqlite3模块的占位符好像是问号(?)。因此在使用其他数据库的时候还是仔细阅读文档吧。<br><a href="https://pymysql.readthedocs.io/en/latest/" target="_blank" rel="noopener">Welcome to PyMySQL’s documentation</a></p>
<h2 id="三-数据库连接池"><a href="#三-数据库连接池" class="headerlink" title="三. 数据库连接池"></a>三. 数据库连接池</h2><p>上文中的方式存在一个问题,单线程情况下可以满足,程序需要频繁的创建释放连接来完成对数据库的操作,那么,我们的程序/脚本在多线程情况下会引发什么问题呢?此时,我们就需要使用数据库连接池来解决这个问题!</p>
<h3 id="3-1-DBUtils模块"><a href="#3-1-DBUtils模块" class="headerlink" title="3.1 DBUtils模块"></a>3.1 DBUtils模块</h3><p>DBUtils是Python的一个用于实现数据库连接池的模块。</p>
<p>此连接池有两种连接模式：</p>
<ul>
<li>为每个线程创建一个连接，线程即使调用了close方法，也不会关闭，只是把连接重新放到连接池，供自己线程再次使用。当线程终止时，连接才会自动关闭</li>
<li>创建一批连接到连接池，供所有线程共享使用(推荐使用)</li>
</ul>
<h3 id="3-2-模式一"><a href="#3-2-模式一" class="headerlink" title="3.2 模式一"></a>3.2 模式一</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;5&#x2F;13</span><br><span class="line"></span><br><span class="line">from DBUtils.PersistentDB import PersistentDB</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">POOL &#x3D; PersistentDB(</span><br><span class="line">    creator&#x3D;pymysql,  # 使用链接数据库的模块</span><br><span class="line">    maxusage&#x3D;None,  # 一个链接最多被重复使用的次数，None表示无限制</span><br><span class="line">    setsession&#x3D;[],  # 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span><br><span class="line">    ping&#x3D;0,</span><br><span class="line">    # ping MySQL服务端，检查是否服务可用。# 如：0 &#x3D; None &#x3D; never, 1 &#x3D; default &#x3D; whenever it is requested, 2 &#x3D; when a cursor is created, 4 &#x3D; when a query is executed, 7 &#x3D; always</span><br><span class="line">    closeable&#x3D;False,</span><br><span class="line">    # 如果为False时， conn.close() 实际上被忽略，供下次使用，再线程关闭时，才会自动关闭链接。如果为True时， conn.close()则关闭链接，那么再次调用pool.connection时就会报错，因为已经真的关闭了连接（pool.steady_connection()可以获取一个新的链接）</span><br><span class="line">    threadlocal&#x3D;None,  # 本线程独享值得对象，用于保存链接对象，如果链接对象被重置</span><br><span class="line">    host&#x3D;&#39;127.0.0.1&#39;,</span><br><span class="line">    port&#x3D;3306,</span><br><span class="line">    user&#x3D;&#39;zff&#39;,</span><br><span class="line">    password&#x3D;&#39;zff123&#39;,</span><br><span class="line">    database&#x3D;&#39;zff&#39;,</span><br><span class="line">    charset&#x3D;&#39;utf8&#39;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    conn &#x3D; POOL.connection(shareable&#x3D;False)</span><br><span class="line">    cursor &#x3D; conn.cursor()</span><br><span class="line">    cursor.execute(&#39;select * from USER&#39;)</span><br><span class="line">    result &#x3D; cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result &#x3D; func()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-模式二"><a href="#3-2-模式二" class="headerlink" title="3.2 模式二"></a>3.2 模式二</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;5&#x2F;13</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">import pymysql</span><br><span class="line">import threading</span><br><span class="line">from DBUtils.PooledDB import PooledDB, SharedDBConnection</span><br><span class="line"></span><br><span class="line">POOL &#x3D; PooledDB(</span><br><span class="line">    creator&#x3D;pymysql,  # 使用链接数据库的模块</span><br><span class="line">    maxconnections&#x3D;6,  # 连接池允许的最大连接数，0和None表示不限制连接数</span><br><span class="line">    mincached&#x3D;2,  # 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span><br><span class="line">    maxcached&#x3D;5,  # 链接池中最多闲置的链接，0和None不限制</span><br><span class="line">    maxshared&#x3D;3,</span><br><span class="line">    # 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span><br><span class="line">    blocking&#x3D;True,  # 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span><br><span class="line">    maxusage&#x3D;None,  # 一个链接最多被重复使用的次数，None表示无限制</span><br><span class="line">    setsession&#x3D;[],  # 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span><br><span class="line">    ping&#x3D;0,</span><br><span class="line">    # ping MySQL服务端，检查是否服务可用。# 如：0 &#x3D; None &#x3D; never, 1 &#x3D; default &#x3D; whenever it is requested, 2 &#x3D; when a cursor is created, 4 &#x3D; when a query is executed, 7 &#x3D; always</span><br><span class="line">    host&#x3D;&#39;127.0.0.1&#39;,</span><br><span class="line">    port&#x3D;3306,</span><br><span class="line">    user&#x3D;&#39;zff&#39;,</span><br><span class="line">    password&#x3D;&#39;zff123&#39;,</span><br><span class="line">    database&#x3D;&#39;zff&#39;,</span><br><span class="line">    charset&#x3D;&#39;utf8&#39;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    # 检测当前正在运行连接数的是否小于最大链接数，如果不小于则：等待或报raise TooManyConnections异常</span><br><span class="line">    # 否则</span><br><span class="line">    # 则优先去初始化时创建的链接中获取链接 SteadyDBConnection。</span><br><span class="line">    # 然后将SteadyDBConnection对象封装到PooledDedicatedDBConnection中并返回。</span><br><span class="line">    # 如果最开始创建的链接没有链接，则去创建一个SteadyDBConnection对象，再封装到PooledDedicatedDBConnection中并返回。</span><br><span class="line">    # 一旦关闭链接后，连接就返回到连接池让后续线程继续使用。</span><br><span class="line">    conn &#x3D; POOL.connection()</span><br><span class="line"></span><br><span class="line">    # print(&#39;连接被拿走了&#39;, conn._con)</span><br><span class="line">    # print(&#39;池子里目前有&#39;, POOL._idle_cache, &#39;\r\n&#39;)</span><br><span class="line"></span><br><span class="line">    cursor &#x3D; conn.cursor()</span><br><span class="line">    cursor.execute(&#39;select * from USER&#39;)</span><br><span class="line">    result &#x3D; cursor.fetchall()</span><br><span class="line">    conn.close()</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result &#x3D; func()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>⚠️ 由于pymysql、MySQLdb等threadsafety值为1，所以该模式连接池中的线程会被所有线程共享,因此是线程安全的。<br>如果没有连接池，使用pymysql来连接数据库时，单线程应用完全没有问题，但如果涉及到多线程应用那么就需要加锁，一旦加锁那么连接势必就会排队等待，当请求比较多时，性能就会降低了。</p>
<h3 id="3-3-加锁"><a href="#3-3-加锁" class="headerlink" title="3.3 加锁"></a>3.3 加锁</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;5&#x2F;13</span><br><span class="line"></span><br><span class="line">import pymysql</span><br><span class="line">import threading</span><br><span class="line">from threading import RLock</span><br><span class="line"></span><br><span class="line">LOCK &#x3D; RLock()</span><br><span class="line">CONN &#x3D; pymysql.connect(host&#x3D;&#39;127.0.0.1&#39;,</span><br><span class="line">                       port&#x3D;3306,</span><br><span class="line">                       user&#x3D;&#39;zff&#39;,</span><br><span class="line">                       password&#x3D;&#39;zff123&#39;,</span><br><span class="line">                       database&#x3D;&#39;zff&#39;,</span><br><span class="line">                       charset&#x3D;&#39;utf8&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def task(arg):</span><br><span class="line">    with LOCK:</span><br><span class="line">        cursor &#x3D; CONN.cursor()</span><br><span class="line">        cursor.execute(&#39;select * from USER &#39;)</span><br><span class="line">        result &#x3D; cursor.fetchall()</span><br><span class="line">        cursor.close()</span><br><span class="line"></span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in range(10):</span><br><span class="line">    t &#x3D; threading.Thread(target&#x3D;task, args&#x3D;(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>

<h3 id="3-4-无锁-报错"><a href="#3-4-无锁-报错" class="headerlink" title="3.4 无锁(报错)"></a>3.4 无锁(报错)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;5&#x2F;13</span><br><span class="line"></span><br><span class="line">import pymysql</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">CONN &#x3D; pymysql.connect(host&#x3D;&#39;127.0.0.1&#39;,</span><br><span class="line">                       port&#x3D;3306,</span><br><span class="line">                       user&#x3D;&#39;zff&#39;,</span><br><span class="line">                       password&#x3D;&#39;zff123&#39;,</span><br><span class="line">                       database&#x3D;&#39;zff&#39;,</span><br><span class="line">                       charset&#x3D;&#39;utf8&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def task(arg):</span><br><span class="line">    cursor &#x3D; CONN.cursor()</span><br><span class="line">    cursor.execute(&#39;select * from USER &#39;)</span><br><span class="line">    # cursor.execute(&#39;select sleep(10)&#39;)</span><br><span class="line">    result &#x3D; cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in range(10):</span><br><span class="line">    t &#x3D; threading.Thread(target&#x3D;task, args&#x3D;(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>
<p>此时可以在数据库中查看连接情况: show status like ‘Threads%’;</p>
<h2 id="四-数据库连接池结合pymsql使用"><a href="#四-数据库连接池结合pymsql使用" class="headerlink" title="四. 数据库连接池结合pymsql使用"></a>四. 数据库连接池结合pymsql使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat sql_helper.py</span><br><span class="line"></span><br><span class="line">import pymysql</span><br><span class="line">import threading</span><br><span class="line">from DBUtils.PooledDB import PooledDB, SharedDBConnection</span><br><span class="line">POOL &#x3D; PooledDB(</span><br><span class="line">    creator&#x3D;pymysql,  # 使用链接数据库的模块</span><br><span class="line">    maxconnections&#x3D;20,  # 连接池允许的最大连接数，0和None表示不限制连接数</span><br><span class="line">    mincached&#x3D;2,  # 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span><br><span class="line">    maxcached&#x3D;5,  # 链接池中最多闲置的链接，0和None不限制</span><br><span class="line">    #maxshared&#x3D;3,  # 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span><br><span class="line">    blocking&#x3D;True,  # 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span><br><span class="line">    maxusage&#x3D;None,  # 一个链接最多被重复使用的次数，None表示无限制</span><br><span class="line">    setsession&#x3D;[],  # 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span><br><span class="line">    ping&#x3D;0,</span><br><span class="line">    # ping MySQL服务端，检查是否服务可用。# 如：0 &#x3D; None &#x3D; never, 1 &#x3D; default &#x3D; whenever it is requested, 2 &#x3D; when a cursor is created, 4 &#x3D; when a query is executed, 7 &#x3D; always</span><br><span class="line">    host&#x3D;&#39;192.168.11.38&#39;,</span><br><span class="line">    port&#x3D;3306,</span><br><span class="line">    user&#x3D;&#39;root&#39;,</span><br><span class="line">    passwd&#x3D;&#39;apNXgF6RDitFtDQx&#39;,</span><br><span class="line">    db&#x3D;&#39;m2day03db&#39;,</span><br><span class="line">    charset&#x3D;&#39;utf8&#39;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def connect():</span><br><span class="line">    # 创建连接</span><br><span class="line">    # conn &#x3D; pymysql.connect(host&#x3D;&#39;192.168.11.38&#39;, port&#x3D;3306, user&#x3D;&#39;root&#39;, passwd&#x3D;&#39;apNXgF6RDitFtDQx&#39;, db&#x3D;&#39;m2day03db&#39;)</span><br><span class="line">    conn &#x3D; POOL.connection()</span><br><span class="line">    # 创建游标</span><br><span class="line">    cursor &#x3D; conn.cursor(pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">    return conn,cursor</span><br><span class="line"></span><br><span class="line">def close(conn,cursor):</span><br><span class="line">    # 关闭游标</span><br><span class="line">    cursor.close()</span><br><span class="line">    # 关闭连接</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">def fetch_one(sql,args):</span><br><span class="line">    conn,cursor &#x3D; connect()</span><br><span class="line">    # 执行SQL，并返回收影响行数</span><br><span class="line">    effect_row &#x3D; cursor.execute(sql,args)</span><br><span class="line">    result &#x3D; cursor.fetchone()</span><br><span class="line">    close(conn,cursor)</span><br><span class="line"></span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line">def fetch_all(sql,args):</span><br><span class="line">    conn, cursor &#x3D; connect()</span><br><span class="line"></span><br><span class="line">    # 执行SQL，并返回收影响行数</span><br><span class="line">    cursor.execute(sql,args)</span><br><span class="line">    result &#x3D; cursor.fetchall()</span><br><span class="line"></span><br><span class="line">    close(conn, cursor)</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line">def insert(sql,args):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    创建数据</span><br><span class="line">    :param sql: 含有占位符的SQL</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    conn, cursor &#x3D; connect()</span><br><span class="line"></span><br><span class="line">    # 执行SQL，并返回收影响行数</span><br><span class="line">    effect_row &#x3D; cursor.execute(sql,args)</span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    close(conn, cursor)</span><br><span class="line"></span><br><span class="line">def delete(sql,args):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    创建数据</span><br><span class="line">    :param sql: 含有占位符的SQL</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    conn, cursor &#x3D; connect()</span><br><span class="line"></span><br><span class="line">    # 执行SQL，并返回收影响行数</span><br><span class="line">    effect_row &#x3D; cursor.execute(sql,args)</span><br><span class="line"></span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    close(conn, cursor)</span><br><span class="line"></span><br><span class="line">    return effect_row</span><br><span class="line"></span><br><span class="line">def update(sql,args):</span><br><span class="line">    conn, cursor &#x3D; connect()</span><br><span class="line"></span><br><span class="line">    # 执行SQL，并返回收影响行数</span><br><span class="line">    effect_row &#x3D; cursor.execute(sql, args)</span><br><span class="line"></span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    close(conn, cursor)</span><br><span class="line"></span><br><span class="line">    return effect_row</span><br></pre></td></tr></table></figure>
<p>PS: 可以利用静态方法封装到一个类中,方便使用</p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python类中的特殊成员</title>
    <url>/2020/04/20/Python%E7%B1%BB%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98/</url>
    <content><![CDATA[<h2 id="Python类中的特殊成员"><a href="#Python类中的特殊成员" class="headerlink" title="Python类中的特殊成员"></a>Python类中的特殊成员</h2><blockquote>
<p>Python Version: 3.5+</p>
</blockquote>
<p><strong>init</strong><br>构造方法，每个对象被实例化出来的时候都将首先去执行<strong>init</strong>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A:</span><br><span class="line">	def __init__(self):</span><br><span class="line">		print(&quot;在创建对象的时候会首先自动执行__init__&quot;)</span><br><span class="line">&#96;&#96;&#96;        </span><br><span class="line">__del__</span><br><span class="line">析构方法，每个对象在被垃圾回收机制回收之前执行的方法</span><br></pre></td></tr></table></figure>
<p>class A:<br>    def <strong>del</strong>(self):<br>        print(“在对象销毁之前会执行<strong>del</strong>“)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__doc__</span><br><span class="line">类的描述信息</span><br></pre></td></tr></table></figure>
<p>class A:<br>    “””我是A类的描述信息”””<br>    pass</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__module__</span><br><span class="line">表示当前操作的对象在哪个模块</span><br></pre></td></tr></table></figure>
<p>class A:<br>    “””我是A类的描述信息”””<br>    pass</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">from lib import A</span><br><span class="line">a &#x3D; A()</span><br><span class="line">print(a.__module__)</span><br></pre></td></tr></table></figure>
<p><strong>class</strong><br>表示当前操作的对象的类是什么</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">a &#x3D; A()</span><br><span class="line">print(a.__class__)</span><br></pre></td></tr></table></figure>
<p><strong>call</strong><br>类名后面加括号表示创建一个对象；如果在对象后面加括号，就需要使用<strong>call</strong>方法了，如果不定义这个方法，在执行对象()的时候就会报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A:</span><br><span class="line"></span><br><span class="line">    def __call__(self, *args, **kwargs):</span><br><span class="line">        print(&quot;call&quot;)</span><br><span class="line"></span><br><span class="line">a &#x3D; A()</span><br><span class="line">a()</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">call</span><br></pre></td></tr></table></figure>
<p>创建对象的时候首先执行<strong>init</strong>,在对象被调用的时候执行<strong>call</strong></p>
<p>也可以在一行执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; A()()</span><br></pre></td></tr></table></figure>
<p><strong>str</strong><br>print对象的时候显示的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A:</span><br><span class="line">	pass</span><br><span class="line"></span><br><span class="line">a &#x3D; A()</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">&lt;__main__.A object at 0x101b77128&gt;</span><br></pre></td></tr></table></figure>
<p>在没有定义<strong>str</strong>的情况下，输出的是a对象的内存地址信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A:</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &quot;A~&quot;</span><br><span class="line"></span><br><span class="line">a &#x3D; A()</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">A~</span><br></pre></td></tr></table></figure>
<p>str的应用实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class B:</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">b &#x3D; B(&quot;ps&quot;)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">ps</span><br></pre></td></tr></table></figure>
<p>str类型转换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class B:</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">b &#x3D; B(&quot;ps&quot;)</span><br><span class="line">ret &#x3D; str(b)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>
<p>str(b)和print()都会自动去调用b对象中的<strong>str</strong>方法</p>
<p><strong>dict</strong><br>对象的dict<br>在对象中默认已经有dict，不需要自定义。该方法用来获取对象中所有封装的对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class B:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">b &#x3D; B(&quot;ps&quot;, 26)</span><br><span class="line">print(b.__dict__)</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">&#123;&#39;age&#39;: 26, &#39;name&#39;: &#39;ps&#39;&#125;</span><br></pre></td></tr></table></figure>
<p>类的dict<br>列出类中所有可以调用的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class B:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">b &#x3D; B(&quot;ps&quot;, 26)</span><br><span class="line">print(B.__dict__)</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">&#123;&#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;B&#39; objects&gt;, &#39;__module__&#39;: &#39;__main__&#39;, &#39;__str__&#39;: &lt;function B.__str__ at 0x10137b730&gt;, &#39;__init__&#39;: &lt;function B.__init__ at 0x10137b6a8&gt;, &#39;__doc__&#39;: None, &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;B&#39; objects&gt;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>add</strong><br>当执行一个对象 + 一个对象的时候，就会自动去执行这个方法</p>
<p>注意，执行的是第一个对象的add方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A:</span><br><span class="line">    def __init__(self, num):</span><br><span class="line">        self.num &#x3D; num</span><br><span class="line"></span><br><span class="line">    def __add__(self, other):</span><br><span class="line">        return self.num + other.num</span><br><span class="line"></span><br><span class="line">class B:</span><br><span class="line">    def __init__(self, num):</span><br><span class="line">        self.num &#x3D; num        </span><br><span class="line">a &#x3D; A(5)</span><br><span class="line">b &#x3D; B(9)</span><br><span class="line">c &#x3D; a + b</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>
<p><strong>getitem</strong> <strong>setitem</strong> <strong>delitem</strong><br>用于索引操作，如字典。以上分别表示获取、设置、删除数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; &#123;&quot;k&quot;: &quot;v&quot;&#125;</span><br><span class="line">print(d[&quot;k&quot;])</span><br><span class="line">d[&quot;k&quot;] &#x3D; &quot;vv&quot;</span><br><span class="line">del d[&quot;k&quot;]</span><br></pre></td></tr></table></figure>
<p>上面的代码展示了一个字典对象的取值、赋值和删除的操作。在自定义的类中，也可以实现类似于字典这样的操作<br>对象后面加小括号是执行<strong>call</strong>方法，那么对象后面加中括号又是怎样处理的呢？</p>
<p>使用key进行的操作<br>取值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class B:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, item):</span><br><span class="line">        print(&quot;执行了getitem方法&quot;, item)</span><br><span class="line"></span><br><span class="line">b &#x3D; B(&quot;ps&quot;, 26)</span><br><span class="line">b[&quot;name&quot;]</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">执行了getitem方法 name</span><br></pre></td></tr></table></figure>
<p>赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class B:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, item):</span><br><span class="line">        print(&quot;执行了getitem方法&quot;, item)</span><br><span class="line"></span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        print(&quot;你要为%s重新赋值为%s&quot; % (key, value))</span><br><span class="line"></span><br><span class="line">b &#x3D; B(&quot;ps&quot;, 26)</span><br><span class="line">print(b.name)</span><br><span class="line">b[&quot;name&quot;] &#x3D; &quot;lr&quot;</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">ps</span><br></pre></td></tr></table></figure>
<p>你要为name重新赋值为lr<br>删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class B:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, item):</span><br><span class="line">        print(&quot;执行了getitem方法&quot;, item)</span><br><span class="line"></span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        print(&quot;你要为%s重新赋值为%s&quot; % (key, value))</span><br><span class="line"></span><br><span class="line">    def __delitem__(self, key):</span><br><span class="line">        print(&quot;你要删除%s&quot; % key)</span><br><span class="line"></span><br><span class="line">b &#x3D; B(&quot;ps&quot;, 26)</span><br><span class="line">del b[&quot;age&quot;]</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">你要删除age</span><br></pre></td></tr></table></figure>
<p>在web开发中，自定义session框架的时候会用到</p>
<p>使用下标进行的操作<br>使用下标和使用key的形式类似，使用key， item接收的是一个字符串，使用下标， item接收的是一个int类型的数字，可以在方法体内通过判断传递过来数据的数据类型来进行对应的操作</p>
<p>使用切片的操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l &#x3D; [1,2,3,4,5,6,7,8,9]</span><br><span class="line">l[1:5:2]</span><br></pre></td></tr></table></figure>
<p>在Python2.x中使用<strong>getslice</strong> <strong>setslice</strong> <strong>delslice</strong>来实现切片的操作，但是Python3.x中被遗弃，所有切片的功能都集中在了<strong>getitem</strong> <strong>setitem</strong> <strong>delitem</strong>中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class B:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, item):</span><br><span class="line">        # print(&quot;执行了getitem方法&quot;, item)</span><br><span class="line">        print(type(item))</span><br><span class="line"></span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        print(&quot;你要为%s重新赋值为%s&quot; % (key, value))</span><br><span class="line"></span><br><span class="line">    def __delitem__(self, key):</span><br><span class="line">        print(&quot;你要删除%s&quot; % key)</span><br><span class="line"></span><br><span class="line">b &#x3D; B(&quot;ps&quot;, 26)</span><br><span class="line">b[&quot;name&quot;]</span><br><span class="line">b[1]</span><br><span class="line">b[1:5:2]</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">&lt;class &#39;str&#39;&gt;</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&lt;class &#39;slice&#39;&gt;</span><br></pre></td></tr></table></figure>
<p>item为slice时表示调用了切片的操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class B:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, item):</span><br><span class="line">        print(&quot;起点索引&quot;, item.start)</span><br><span class="line">        print(&quot;终点索引&quot;, item.stop)</span><br><span class="line">        print(&quot;步长&quot;, item.step)</span><br><span class="line">        return &quot;haha&quot;</span><br><span class="line"></span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        print(&quot;你要为%s重新赋值为%s&quot; % (key, value))</span><br><span class="line"></span><br><span class="line">    def __delitem__(self, key):</span><br><span class="line">        print(&quot;你要删除%s&quot; % key)</span><br><span class="line"></span><br><span class="line">b &#x3D; B(&quot;ps&quot;, 26)</span><br><span class="line">ret &#x3D; b[1:5:2]</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">起点索引 1</span><br><span class="line">终点索引 5</span><br><span class="line">步长 2</span><br><span class="line">haha</span><br></pre></td></tr></table></figure>
<p>相对应的，取值可以通过判断item的类型做相应的操作，赋值和删除也可以通过判断key的类型来进行想对应的切片操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class B:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, item):</span><br><span class="line">        print(&quot;起点索引&quot;, item.start)</span><br><span class="line">        print(&quot;终点索引&quot;, item.stop)</span><br><span class="line">        print(&quot;步长&quot;, item.step)</span><br><span class="line">        return &quot;haha&quot;</span><br><span class="line"></span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        print(&quot;起点索引&quot;, key.start)</span><br><span class="line">        print(&quot;终点索引&quot;, key.stop)</span><br><span class="line">        print(&quot;步长&quot;, key.step)</span><br><span class="line">        print(&quot;新值为&quot;, value)</span><br><span class="line"></span><br><span class="line">    def __delitem__(self, key):</span><br><span class="line">        print(&quot;起点索引&quot;, key.start)</span><br><span class="line">        print(&quot;终点索引&quot;, key.stop)</span><br><span class="line">        print(&quot;步长&quot;, key.step)</span><br><span class="line"></span><br><span class="line">b &#x3D; B(&quot;ps&quot;, 26)</span><br><span class="line">print(&quot;切片取值&quot;)</span><br><span class="line">ret &#x3D; b[1:5:2]</span><br><span class="line"></span><br><span class="line">print(&quot;切片赋值&quot;)</span><br><span class="line">b[1:5:2] &#x3D; &quot;hehe&quot;</span><br><span class="line"></span><br><span class="line">print(&quot;切片删除&quot;)</span><br><span class="line">print(ret)</span><br><span class="line">del b[1:5:2]</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">切片取值</span><br><span class="line">起点索引 1</span><br><span class="line">终点索引 5</span><br><span class="line">步长 2</span><br><span class="line">切片赋值</span><br><span class="line">起点索引 1</span><br><span class="line">终点索引 5</span><br><span class="line">步长 2</span><br><span class="line">新值为 hehe</span><br><span class="line">切片删除</span><br><span class="line">haha</span><br><span class="line">起点索引 1</span><br><span class="line">终点索引 5</span><br><span class="line">步长 2</span><br></pre></td></tr></table></figure>
<p><strong>iter</strong><br>一个自定义类实例化的对象，默认是不可迭代的，在类中使用<strong>iter</strong>方法后，对象就变成了可迭代对象。当对象被迭代时，会自动调用iter方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">a &#x3D; A()</span><br><span class="line">for i in a:</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line">------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;Users&#x2F;lvrui&#x2F;PycharmProjects&#x2F;untitled&#x2F;8&#x2F;c8.py&quot;, line 5, in &lt;module&gt;</span><br><span class="line">    for i in a:</span><br><span class="line">TypeError: &#39;A&#39; object is not iterable</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A:</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter([1, 2])  # return了一个可迭代对象</span><br><span class="line"></span><br><span class="line">a &#x3D; A()</span><br><span class="line">for i in a:</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line">------------</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A:</span><br><span class="line">    def __iter__(self):  # 返回了一个生成器</span><br><span class="line">        yield 1</span><br><span class="line">        yield 2</span><br><span class="line"></span><br><span class="line">a &#x3D; A()</span><br><span class="line">for i in a:</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line">------------</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<p>先去a对象中找到iter方法执行，并拿到返回值进行迭代</p>
<p><strong>new</strong> <strong>metaclass</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A(object):</span><br><span class="line"> </span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass     </span><br><span class="line"></span><br><span class="line">a &#x3D; A()   # a是通过A类实例化的对象</span><br></pre></td></tr></table></figure>
<p>上述代码中，a 是通过 A 类实例化的对象，其实，不仅 a 是一个对象，A类本身也是一个对象，因为在Python中一切事物都是对象。</p>
<p>如果按照一切事物都是对象的理论：a对象是通过执行A类的构造方法创建，那么A类对象应该也是通过执行某个类的构造方法创建。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print type(a) # 输出：&lt;class &#39;__main__.A&#39;&gt;     表示，a对象由A类创建</span><br><span class="line">print type(A) # 输出：&lt;type &#39;type&#39;&gt;              表示，A类对象由type类创建</span><br></pre></td></tr></table></figure>
<p>所以，a对象是A类的一个实例，A类对象是type类的一个实例，即：A类对象是通过type类的构造方法创建</p>
<p>那么，创建类就可以有两种方式：</p>
<ul>
<li>普通方式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A(object):</span><br><span class="line"> </span><br><span class="line">    def func(self):</span><br><span class="line">        print(&quot;ps&quot;)</span><br><span class="line">&#96;&#96;&#96;        </span><br><span class="line">- 特殊方式（type类的构造函数）</span><br></pre></td></tr></table></figure>
def func(self):<br>  print(“ps”)</li>
</ul>
<p>A = type(‘A’,(object,), {‘func’: func})<br>#type第一个参数：类名<br>#type第二个参数：当前类的基类<br>#type第三个参数：类的成员</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">–&gt; 类是由type类实例化产生</span><br><span class="line"></span><br><span class="line">那么问题来了，类默认是由 type 类实例化产生，type类中如何实现的创建类？类又是如何创建对象？</span><br><span class="line"></span><br><span class="line">答：类中有一个属性__metaclass__ 其用来表示该类由谁来实例化创建，所以，我们可以为__metaclass__设置一个type类的派生类，从而查看类创建的过程:</span><br><span class="line">![类创建的过程](https:&#x2F;&#x2F;note.youdao.com&#x2F;yws&#x2F;api&#x2F;personal&#x2F;file&#x2F;WEB469fc5ed373325db33598c76c5c2e865?method&#x3D;download&amp;shareKey&#x3D;387854780b812acd0ae47ca87a1d2b69)</span><br></pre></td></tr></table></figure>
<p>class MyType(type):</p>
<pre><code>def __init__(self, what, bases=None, dict=None):
    super(MyType, self).__init__(what, bases, dict)

def __call__(self, *args, **kwargs):
    obj = self.__new__(self, *args, **kwargs)

    self.__init__(obj)</code></pre><p>class A(object):</p>
<pre><code>__metaclass__ = MyType

def __init__(self, name):
    self.name = name

def __new__(cls, *args, **kwargs):
    return object.__new__(cls, *args, **kwargs)</code></pre><h1 id="第一阶段：解释器从上到下执行代码创建A类"><a href="#第一阶段：解释器从上到下执行代码创建A类" class="headerlink" title="第一阶段：解释器从上到下执行代码创建A类"></a>第一阶段：解释器从上到下执行代码创建A类</h1><h1 id="第二阶段：通过A类创建a对象"><a href="#第二阶段：通过A类创建a对象" class="headerlink" title="第二阶段：通过A类创建a对象"></a>第二阶段：通过A类创建a对象</h1><p>a = A()</p>
<pre><code>
[原文地址](https://docs.lvrui.io/2016/07/03/Python%E7%B1%BB%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98/)  


</code></pre>]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python小技巧和有趣的内置函数</title>
    <url>/2020/04/20/Python%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%92%8C%E6%9C%89%E8%B6%A3%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="Python小技巧和有趣的内置函数"><a href="#Python小技巧和有趣的内置函数" class="headerlink" title="Python小技巧和有趣的内置函数"></a>Python小技巧和有趣的内置函数</h2><blockquote>
<p>一个python小技巧的集合和一些很有用的Python内置函数,这些函数简直是屌爆了，我认为每个 Pythoner 都应该知道这些函数。</p>
</blockquote>
<h3 id="1-1-拆箱"><a href="#1-1-拆箱" class="headerlink" title="1.1 拆箱"></a>1.1 拆箱</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b, c &#x3D; 1, 2, 3  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 2, 3)  </span><br><span class="line">&gt;&gt;&gt; a, b, c &#x3D; [1, 2, 3]  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 2, 3)  </span><br><span class="line">&gt;&gt;&gt; a, b, c &#x3D; (2 * i + 1  for i in range(3))  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 3, 5)  </span><br><span class="line">&gt;&gt;&gt; a, (b, c), d &#x3D; [1, (2, 3), 4]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; b  </span><br><span class="line">2  </span><br><span class="line">&gt;&gt;&gt; c  </span><br><span class="line">3  </span><br><span class="line">&gt;&gt;&gt; d  </span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h3 id="1-2-拆箱变量交换"><a href="#1-2-拆箱变量交换" class="headerlink" title="1.2 拆箱变量交换"></a>1.2 拆箱变量交换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b &#x3D; 1, 2  </span><br><span class="line">&gt;&gt;&gt; a, b &#x3D; b, a  </span><br><span class="line">&gt;&gt;&gt; a, b  </span><br><span class="line">(2, 1)</span><br></pre></td></tr></table></figure>
<h3 id="1-3-扩展拆箱-只兼容python3"><a href="#1-3-扩展拆箱-只兼容python3" class="headerlink" title="1.3 扩展拆箱(只兼容python3)"></a>1.3 扩展拆箱(只兼容python3)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a, *b, c &#x3D; [1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; b  </span><br><span class="line">[2, 3, 4]  </span><br><span class="line">&gt;&gt;&gt; c  </span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<h3 id="1-4-负数索引"><a href="#1-4-负数索引" class="headerlink" title="1.4 负数索引"></a>1.4 负数索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[-1]  </span><br><span class="line">10  </span><br><span class="line">&gt;&gt;&gt; a[-3]  </span><br><span class="line">8</span><br></pre></td></tr></table></figure>
<h3 id="1-5-切割列表"><a href="#1-5-切割列表" class="headerlink" title="1.5 切割列表"></a>1.5 切割列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[2:8]  </span><br><span class="line">[2, 3, 4, 5, 6, 7]</span><br></pre></td></tr></table></figure>
<h3 id="1-6-负数索引切割列表"><a href="#1-6-负数索引切割列表" class="headerlink" title="1.6 负数索引切割列表"></a>1.6 负数索引切割列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[-4:-2]  </span><br><span class="line">[7, 8]</span><br></pre></td></tr></table></figure>
<h3 id="1-7指定步长切割列表"><a href="#1-7指定步长切割列表" class="headerlink" title="1.7指定步长切割列表"></a>1.7指定步长切割列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::2]  </span><br><span class="line">[0, 2, 4, 6, 8, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::3]  </span><br><span class="line">[0, 3, 6, 9]  </span><br><span class="line">&gt;&gt;&gt; a[2:8:2]  </span><br><span class="line">[2, 4, 6]</span><br></pre></td></tr></table></figure>
<h3 id="1-8-负数步长切割列表"><a href="#1-8-负数步长切割列表" class="headerlink" title="1.8 负数步长切割列表"></a>1.8 负数步长切割列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::-1]  </span><br><span class="line">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]  </span><br><span class="line">&gt;&gt;&gt; a[::-2]  </span><br><span class="line">[10, 8, 6, 4, 2, 0]</span><br></pre></td></tr></table></figure>
<h3 id="1-9-列表切割赋值"><a href="#1-9-列表切割赋值" class="headerlink" title="1.9 列表切割赋值"></a>1.9 列表切割赋值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[2:3] &#x3D; [0, 0]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 2, 0, 0, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[1:1] &#x3D; [8, 9]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 8, 9, 2, 0, 0, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[1:-1] &#x3D; []  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 5]</span><br></pre></td></tr></table></figure>
<h3 id="1-10-命名列表切割方式"><a href="#1-10-命名列表切割方式" class="headerlink" title="1.10 命名列表切割方式"></a>1.10 命名列表切割方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; LASTTHREE &#x3D; slice(-3, None)  </span><br><span class="line">&gt;&gt;&gt; LASTTHREE  </span><br><span class="line">slice(-3, None, None)  </span><br><span class="line">&gt;&gt;&gt; a[LASTTHREE]  </span><br><span class="line">[3, 4, 5]</span><br></pre></td></tr></table></figure>
<h3 id="1-11-列表以及迭代器的压缩和解压缩"><a href="#1-11-列表以及迭代器的压缩和解压缩" class="headerlink" title="1.11 列表以及迭代器的压缩和解压缩"></a>1.11 列表以及迭代器的压缩和解压缩</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]  </span><br><span class="line">&gt;&gt;&gt; b &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]  </span><br><span class="line">&gt;&gt;&gt; z &#x3D; zip(a, b)  </span><br><span class="line">&gt;&gt;&gt; z  </span><br><span class="line">[(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]  </span><br><span class="line">&gt;&gt;&gt; zip(*z)  </span><br><span class="line">[(1, 2, 3), (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)]</span><br></pre></td></tr></table></figure>
<h3 id="1-12-列表相邻元素压缩器"><a href="#1-12-列表相邻元素压缩器" class="headerlink" title="1.12 列表相邻元素压缩器"></a>1.12 列表相邻元素压缩器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6]  </span><br><span class="line">&gt;&gt;&gt; zip(*([iter(a)] * 2))  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent &#x3D; lambda a, k: zip(*([iter(a)] * k))  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 3)  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 2)  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 1)  </span><br><span class="line">[(1,), (2,), (3,), (4,), (5,), (6,)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; zip(a[::2], a[1::2])  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; zip(a[::3], a[1::3], a[2::3])  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; group_adjacent &#x3D; lambda a, k: zip(*(a[i::k] for i in range(k)))  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 3)  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 2)  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 1)  </span><br><span class="line">[(1,), (2,), (3,), (4,), (5,), (6,)]</span><br></pre></td></tr></table></figure>
<h3 id="1-13-在列表中用压缩器和迭代器滑动取值窗口"><a href="#1-13-在列表中用压缩器和迭代器滑动取值窗口" class="headerlink" title="1.13 在列表中用压缩器和迭代器滑动取值窗口"></a>1.13 在列表中用压缩器和迭代器滑动取值窗口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def n_grams(a, n):  </span><br><span class="line">... z &#x3D; [iter(a[i:]) for i in range(n)]  </span><br><span class="line">... return zip(*z)  </span><br><span class="line">...  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 3)  </span><br><span class="line">[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 2)  </span><br><span class="line">[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 4)  </span><br><span class="line">[(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)]</span><br></pre></td></tr></table></figure>
<h3 id="用压缩器反转字典"><a href="#用压缩器反转字典" class="headerlink" title="用压缩器反转字典"></a>用压缩器反转字典</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;  </span><br><span class="line">&gt;&gt;&gt; m.items()  </span><br><span class="line">[(&#39;a&#39;, 1), (&#39;c&#39;, 3), (&#39;b&#39;, 2), (&#39;d&#39;, 4)]  </span><br><span class="line">&gt;&gt;&gt; zip(m.values(), m.keys())  </span><br><span class="line">[(1, &#39;a&#39;), (3, &#39;c&#39;), (2, &#39;b&#39;), (4, &#39;d&#39;)]  </span><br><span class="line">&gt;&gt;&gt; mi &#x3D; dict(zip(m.values(), m.keys()))  </span><br><span class="line">&gt;&gt;&gt; mi  </span><br><span class="line">&#123;1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-15-列表展开"><a href="#1-15-列表展开" class="headerlink" title="1.15 列表展开"></a>1.15 列表展开</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [[1, 2], [3, 4], [5, 6]]  </span><br><span class="line">&gt;&gt;&gt; list(itertools.chain.from_iterable(a))  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; sum(a, [])  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; [x for l in a for x in l]  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]  </span><br><span class="line">&gt;&gt;&gt; [x for l1 in a for l2 in l1 for x in l2]  </span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, [3, 4], [[5, 6], [7, 8]]]  </span><br><span class="line">&gt;&gt;&gt; flatten &#x3D; lambda x: [y for l in x for y in flatten(l)] if type(x) is list else [x]  </span><br><span class="line">&gt;&gt;&gt; flatten(a)  </span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure>
<h3 id="1-16-生成器表达式"><a href="#1-16-生成器表达式" class="headerlink" title="1.16 生成器表达式"></a>1.16 生成器表达式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; g &#x3D; (x ** 2  for x in xrange(10))  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">0  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">4  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">9  </span><br><span class="line">&gt;&gt;&gt; sum(x ** 3  for x in xrange(10))  </span><br><span class="line">2025  </span><br><span class="line">&gt;&gt;&gt; sum(x ** 3  for x in xrange(10) if x % 3 &#x3D;&#x3D; 1)  </span><br><span class="line">408</span><br></pre></td></tr></table></figure>
<h3 id="1-17-字典推导"><a href="#1-17-字典推导" class="headerlink" title="1.17 字典推导"></a>1.17 字典推导</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: x ** 2  for x in range(5)&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: &#39;A&#39; + str(x) for x in range(10)&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;0: &#39;A0&#39;, 1: &#39;A1&#39;, 2: &#39;A2&#39;, 3: &#39;A3&#39;, 4: &#39;A4&#39;, 5: &#39;A5&#39;, 6: &#39;A6&#39;, 7: &#39;A7&#39;, 8: &#39;A8&#39;, 9: &#39;A9&#39;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-18-用字典推导反转字典"><a href="#1-18-用字典推导反转字典" class="headerlink" title="1.18 用字典推导反转字典"></a>1.18 用字典推导反转字典</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;&#39;d&#39;: 4, &#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;  </span><br><span class="line">&gt;&gt;&gt; &#123;v: k for k, v in m.items()&#125;  </span><br><span class="line">&#123;1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-19-命名元组"><a href="#1-19-命名元组" class="headerlink" title="1.19 命名元组"></a>1.19 命名元组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Point &#x3D; collections.namedtuple(&#39;Point&#39;, [&#39;x&#39;, &#39;y&#39;])  </span><br><span class="line">&gt;&gt;&gt; p &#x3D; Point(x&#x3D;1.0, y&#x3D;2.0)  </span><br><span class="line">&gt;&gt;&gt; p  </span><br><span class="line">Point(x&#x3D;1.0, y&#x3D;2.0)  </span><br><span class="line">&gt;&gt;&gt; p.x  </span><br><span class="line">1.0  </span><br><span class="line">&gt;&gt;&gt; p.y  </span><br><span class="line">2.0</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://python.jobbole.com/63320/" target="_blank" rel="noopener">更多请查看原文</a>  </p>
</blockquote>
<h3 id="函数部分"><a href="#函数部分" class="headerlink" title="函数部分"></a>函数部分</h3><h3 id="all-iterable"><a href="#all-iterable" class="headerlink" title="all(iterable)"></a>all(iterable)</h3><p>如果可迭代的对象(数组，字符串，列表等，下同)中的元素都是true(或者为空)的话返回True</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_all &#x3D; True  </span><br><span class="line">for item in iterable:  </span><br><span class="line">if  not item:  </span><br><span class="line">_all &#x3D; False  </span><br><span class="line">break  </span><br><span class="line">if _all:  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure>
<p>更简便的写法是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if all(iterable):  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure>

<h3 id="any-iterable"><a href="#any-iterable" class="headerlink" title="any(iterable)"></a>any(iterable)</h3><p>如果可迭代的对象中任何一个元素为true的话返回True,如果可迭代的对象为空则返回False</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_any &#x3D; False  </span><br><span class="line">for item in iterable:  </span><br><span class="line">if item:  </span><br><span class="line">_any &#x3D; True  </span><br><span class="line">break  </span><br><span class="line">if _any:  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure>
<p>更简便的写法是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if any(iterable):  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure>
<h3 id="cmp-x-y"><a href="#cmp-x-y" class="headerlink" title="cmp(x, y)"></a>cmp(x, y)</h3><p>比较两个对象 x 和 y , x &lt; y 的时候返回负数， x ==y 的时候返回 0， x &gt; y 的时候返回正数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def compare(x,y):  </span><br><span class="line">if x &lt; y:  </span><br><span class="line">return -1  </span><br><span class="line">elif x &#x3D;&#x3D; y:  </span><br><span class="line">return  0  </span><br><span class="line">else:  </span><br><span class="line">return  1</span><br></pre></td></tr></table></figure>
<p>你完全可以使用一句 cmp(x, y) 来替代。</p>
<h3 id="dict-arg"><a href="#dict-arg" class="headerlink" title="dict([arg])"></a>dict([arg])</h3><p>使用 arg 提供的条目生成一个新的字典。<br>arg 通常是未知的，但是它很方便！比如说，如果我们想把一个含两个元组的列表转换成一个字典，我们可以这么做。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l &#x3D; [(&#39;Knights&#39;, &#39;Ni&#39;), (&#39;Monty&#39;, &#39;Python&#39;), (&#39;SPAM&#39;, &#39;SPAAAM&#39;)]  </span><br><span class="line">d &#x3D; dict()  </span><br><span class="line">for tuple in l:  </span><br><span class="line">   d[tuple[0]] &#x3D; tuple[1]  </span><br><span class="line"># &#123;&#39;Knights&#39;: &#39;Ni&#39;, &#39;Monty&#39;: &#39;Python&#39;, &#39;SPAM&#39;: &#39;SPAAAM&#39;&#125;</span><br></pre></td></tr></table></figure>
<p>或者这样:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l &#x3D; [(&#39;Knights&#39;, &#39;Ni&#39;), (&#39;Monty&#39;, &#39;Python&#39;), (&#39;SPAM&#39;, &#39;SPAAAM&#39;)]  </span><br><span class="line">d &#x3D; dict(l) # &#123;&#39;Knights&#39;: &#39;Ni&#39;, &#39;Monty&#39;: &#39;Python&#39;, &#39;SPAM&#39;: &#39;SPAAAM&#39;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="enumerate-iterable-start-0"><a href="#enumerate-iterable-start-0" class="headerlink" title="enumerate(iterable [,start=0])"></a>enumerate(iterable [,start=0])</h3><p>我真的是超级喜欢这个!如果你以前写过C语言，那么你可能会这么写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in range(len(list)):  </span><br><span class="line"># do stuff with list[i], for example, print it  </span><br><span class="line">print i, list[i]</span><br></pre></td></tr></table></figure>
<p>噢,不用那么麻烦!你可以使用enumerate()来提高可读性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i, item in enumerate(list):  </span><br><span class="line"># so stuff with item, for example print it  </span><br><span class="line">print i, item</span><br></pre></td></tr></table></figure>
<h3 id="isinstance-object-classinfo"><a href="#isinstance-object-classinfo" class="headerlink" title="isinstance(object, classinfo)"></a>isinstance(object, classinfo)</h3><p>如果 object 参数是 classinfo 参数的一个实例或者子类(直接或者间接)的话返回 True<br>当你想检验一个对象的类型的时候,第一个想到的应该是使用type()函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if type(obj) &#x3D;&#x3D; type(dict):  </span><br><span class="line"># do stuff  </span><br><span class="line">elif type(obj) &#x3D;&#x3D; type(list):  </span><br><span class="line"># do other stuff  </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>或者你可以这么写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if isinstance(obj, dict):  </span><br><span class="line"># do stuff  </span><br><span class="line">elif isinstance(obj, list):  </span><br><span class="line"># do other stuff  </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="pow-x-y-z"><a href="#pow-x-y-z" class="headerlink" title="pow(x, y [,z])"></a>pow(x, y [,z])</h3><p>返回 x 的 y 次幂(如果 z 存在的话则以 z 为模)。<br>如果你想计算 x 的 y 次方，以 z 为模，那么你可以这么写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mod &#x3D; (x ** y) % z</span><br></pre></td></tr></table></figure>
<p>但是当 x=1234567， y=4567676， z=56 的时候我的电脑足足跑了 64 秒！<br>不要用 ** 和 % 了，使用 pow(x, y, z) 吧！这个例子可以写成 pow(1234567, 4567676, 56) ，只用了 0.034 秒就出了结果！</p>
<h3 id="zip-iterable"><a href="#zip-iterable" class="headerlink" title="zip([iterable, ])"></a>zip([iterable, ])</h3><p>这个函数返回一个含元组的列表，具体请看例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l1 &#x3D; (&#39;You gotta&#39;, &#39;the&#39;)  </span><br><span class="line">l2 &#x3D; (&#39;love&#39;, &#39;built-in&#39;)  </span><br><span class="line">out &#x3D; []  </span><br><span class="line">if len(l1) &#x3D;&#x3D; len(l2):  </span><br><span class="line">for i in range(len(l1)):  </span><br><span class="line">       out.append((l1[i], l2[i]))  </span><br><span class="line"># out &#x3D; [(&#39;You gotta&#39;, &#39;love&#39;), (&#39;the&#39;, &#39;built-in)]</span><br></pre></td></tr></table></figure>
<p>或者这么写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l1 &#x3D; [&#39;You gotta&#39;, &#39;the&#39;]  </span><br><span class="line">l2 &#x3D; [&#39;love&#39;, &#39;built-in&#39;]  </span><br><span class="line">out &#x3D; zip(l1, l2) # [(&#39;You gotta&#39;, &#39;love&#39;), (&#39;the&#39;, &#39;built-in)]</span><br></pre></td></tr></table></figure>
<p>如果你想得到倒序的话加上 * 操作符就可以了:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print zip(*out)  </span><br><span class="line"># [(&#39;You gotta&#39;, &#39;the&#39;), (&#39;love&#39;, &#39;built-in&#39;)]</span><br></pre></td></tr></table></figure>

<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Python 内置函数很方便，它们很快并且经过了优化，所以它们可能效率更高。<br>我真心认为每个 Python 开发者都应该好好看看内置函数的文档(引言部分)。<br>忘了说了，在 itertools 模块中有很多很不错的函数。</p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title> Mysql 表设计规范及开发</title>
    <url>/2020/04/20/Mysql-%E8%A1%A8%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%E5%8F%8A%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="Mysql-规范"><a href="#Mysql-规范" class="headerlink" title="Mysql 规范"></a>Mysql 规范</h2><p>1.命名规范<br>(1)库名、表名、字段名必须使用小写字母,并采用下划线分割。</p>
<p>(2)库名、表名、字段名禁止超过32个字符。</p>
<p>(3)库名、表名、字段名必须见名知意。命名与业务、产品线等相关联。</p>
<p>(4)库名、表名、字段名禁止使用MySQL保留字。</p>
<p>(5)表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（1 表示是， 0 表示否）</p>
<p>(6)表名不使用复数名词</p>
<p>(7)临时库、表名必须以tmp为前缀,并以日期为后缀。例如 tmp_test01_20130704。</p>
<p>(8)备份库、表必须以bak为前缀,并以日期为后缀。例如 bak_test01_20130704。</p>
<p>2.基础规范<br>(1)使用INNODB存储引擎。</p>
<p>(2)表字符集使用utf8字符集。如果要使用表情，那么使用 utf8mb4 来进行存储.</p>
<p>(3)所有表都需要添加注释;所有字段都需要增加注释。推荐采用英文标点,避免出现乱码。</p>
<p>(4)禁止在数据库中存储图片、文件等大数据。</p>
<p>(5)每张表数据量建议控制在5000W以内。</p>
<p>(6)禁止在线上做数据库压力测试。</p>
<p>(7)禁止从测试、开发环境直连生产数据库。</p>
<p>3.库表设计<br>(1)禁止使用分区表。</p>
<p>(2)将大字段、访问频率低的字段拆分到单独的表中存储,分离冷热数据。</p>
<p>(3)按日期时间分表需符合YYYY[MM][DD][HH]格式,例如2013071601。年份必须用4位数字表示。例如按日散表user_20110209、 按月散表user_201102。</p>
<p>(4)采用合适的分库分表策略。例如千库十表、十库百表等。</p>
<p>4.字段设计<br>(1)建议使用UNSIGNED存储非负数值。</p>
<p>(2)建议使用INT UNSIGNED存储IPV4。</p>
<p>(3)用DECIMAL代替FLOAT和DOUBLE存储精确浮点数。例如与货币、金融相关的数据。</p>
<p>(4)INT类型固定占用4字节存储,例如INT(4)仅代表显示字符宽度为4位,不代表存储长度。</p>
<p>(5)区分使用TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT数据类型。例如取值范围为0-80时,使用TINYINT UNSIGNED。</p>
<p>(6)强烈建议使用TINYINT来代替ENUM类型。</p>
<p>(7)尽可能不使用TEXT、BLOB类型。</p>
<p>(8)禁止在数据库中存储明文密码。</p>
<p>(9)使用VARBINARY存储大小写敏感的变长字符串或二进制内容。</p>
<p>(10)使用尽可能小的VARCHAR字段。VARCHAR(N)中的N表示字符数而非字节数。</p>
<p>(11)区分使用DATETIME和TIMESTAMP。存储年使用YEAR类型。存储日期使用DATE类型。 存储时间(精确到秒)建议使用TIMESTAMP类型。</p>
<p>(12)所有字段均定义为NOT NULL。</p>
<p>(13)字段允许适当冗余，以提高性能</p>
<p> 5.索引规范<br>(1)单张表中索引数量不超过5个。</p>
<p>(2)单个索引中的字段数不超过5个。</p>
<p>(3)索引名必须全部使用小写。</p>
<p>(4)非唯一索引按照“idx_字段名称[_字段名称]”进用行命名。例如idx_age_name。</p>
<p>(5)唯一索引按照“uniq_字段名称[_字段名称]”进用行命名。例如uniq_age_name。</p>
<p>(6)组合索引建议包含所有字段名,过长的字段名可以采用缩写形式。例如idx_age_name_add。</p>
<p>(7)表必须有主键,推荐使用UNSIGNED自增列作为主键。</p>
<p>(8)唯一键由3个以下字段组成,并且字段都是整形时,可使用唯一键作为主键。其他情况下,建议使用自增列或发号器作主键。</p>
<p>(9)禁止冗余索引。</p>
<p>(10)禁止重复索引。</p>
<p>(11)禁止使用外键。</p>
<p>(12)联表查询时,JOIN列的数据类型必须相同,并且要建立索引。</p>
<p>(13)不在低基数列上建立索引,例如“性别”。</p>
<p>(14)选择区分度大的列建立索引。组合索引中,区分度大的字段放在最前。</p>
<p>(15)对字符串使用前缀索引,前缀索引长度不超过8个字符。</p>
<p>(16)不对过长的VARCHAR字段建立索引。建议优先考虑前缀索引,或添加CRC32或MD5伪列并建立索引。</p>
<p>(17)合理创建联合索引,(a,b,c) 相当于 (a) 、(a,b) 、(a,b,c)。</p>
<p>(18)合理使用覆盖索引减少IO,避免排序。</p>
<p>6.SQL设计<br>(1)使用prepared statement,可以提升性能并避免SQL注入。</p>
<p>(2)使用IN代替OR。SQL语句中IN包含的值不应过多,应少于1000个。</p>
<p>(3)禁止隐式转换。数值类型禁止加引号;字符串类型必须加引号。</p>
<p>(4)避免使用JOIN和子查询。必要时推荐用JOIN代替子查询。超过3个表严禁join</p>
<p>(5)禁止在MySQL中进行数学运算和函数运算。</p>
<p>(6)减少与数据库交互次数,尽量采用批量SQL语句。</p>
<p>(7)拆分复杂SQL为多个小SQL,避免大事务。</p>
<p>(8)获取大量数据时,建议分批次获取数据,每次获取数据少于2000条,结果集应小于1M。</p>
<p>(9)使用UNION ALL代替UNION。</p>
<p>(10)统计行数使用COUNT(*)。</p>
<p>(11)SELECT只获取必要的字段,禁止使用SELECT *。</p>
<p>(12)SQL中避免出现now()、rand()、sysdate()、current_user()等不确定结果的函数。</p>
<p>13)INSERT语句必须指定字段列表,禁止使用 INSERT INTO TABLE()。</p>
<p>(14)禁止单条SQL语句同时更新多个表。</p>
<p>(15)禁止使用存储过程、触发器、视图、自定义函数等。</p>
<p>(16)建议使用合理的分页方式以提高分页效率。</p>
<p>(17)禁止在从库上执行后台管理和统计类功能的QUERY,必要时申请统计类从库。</p>
<p>(18)程序应有捕获SQL异常的处理机制,必要时通过rollback显式回滚。</p>
<p>(19)重要SQL必须被索引:update、delete的where条件列、order by、group by、distinct字段、多表join字段。</p>
<p>(20)禁止使用%前导查询,例如:like “%abc”,无法利用到索引。</p>
<p>(21)禁止使用负向查询,例如 not in、!=、not like。</p>
<p>(22)使用EXPLAIN判断SQL语句是否合理使用索引,尽量避免extra列出现:Using File Sort、Using Temporary。</p>
<p>(23)禁止使用order by rand()。</p>
<p>7.行为规范<br>(1)表结构变更必须通知DBA进行审核。</p>
<p>(2)禁止有super权限的应用程序账号存在。</p>
<p>(3)禁止有DDL、DCL权限的应用程序账号存在。</p>
<p>(4)重要项目的数据库方案选型和设计必须提前通知DBA参与。</p>
<p>(5)批量导入、导出数据必须通过DBA审核,并在执行过程中观察服务。</p>
<p>(6)批量更新数据,如UPDATE、DELETE操作,必须DBA进行审核,并在执行过程中观察服务。</p>
<p>(7)产品出现非数据库导致的故障时,如被攻击,必须及时通DBA,便于维护服务稳定。</p>
<p>(8)业务部门程序出现BUG等影响数据库服务的问题,必须及时通知DBA,便于维护服务稳定。</p>
<p>(9)业务部门推广活动或上线新功能,必须提前通知DBA进行服务和访问量评估,并留出必要时间以便DBA完成扩容。</p>
<p>(10)出现业务部门人为误操作导致数据丢失,需要恢复数据的,必须第一时间通知DBA,并提供准确时间点、 误操作语句等重要线索。</p>
<p>(11)提交线上建表改表需求,必须详细注明涉及到的所有SQL语句(包括INSERT、DELETE、UPDATE),便于DBA进⾏行审核和优化。</p>
<p>(12)对同一个表的多次alter操作必须合并为一次操作。</p>
<p>(13)不要在MySQL数据库中存放业务逻辑。</p>
<p>8.FAQ<br>1.库名、表名、字段名必须使用小写字母,并采用下划线分割。<br>a)MySQL有配置参数lower_case_table_names,不可动态更改,linux系统默认为 0,即库表名以实际情况存储,大小写敏感。如果是1,以小写存储,大小写不敏感。如果是2,以实际情况存储,但以小写比较。</p>
<p>b)如果大小写混合使用,可能存在abc,Abc,ABC等多个表共存,容易导致混乱。</p>
<p>c)字段名显式区分大小写,但实际使用不区分,即不可以建立两个名字一样但大小写不一样的字段。</p>
<p>d)为了统一规范, 库名、表名、字段名使用小写字母。</p>
<p>2.库名、表名、字段名禁止超过32个字符。<br>库名、表名、字段名支持最多64个字符,但为了统一规范、易于辨识以及减少传输量,禁止超过32个字符。 </p>
<p>3.使用INNODB存储引擎。<br>INNODB引擎是MySQL5.5版本以后的默认引擘,支持事务、行级锁,有更好的数据恢复能力、更好的并发性能,同时对多核、大内存、SSD等硬件支持更好,支持数据热备份等,因此INNODB相比MyISAM有明显优势。</p>
<p>4.库名、表名、字段名禁止使用MySQL保留字。<br>当库名、表名、字段名等属性含有保留字时,SQL语句必须用反引号引用属性名称,这将使得SQL语句书写、SHELL脚本中变量的转义等变得非常复杂。</p>
<p>5.禁止使用分区表。<br>分区表对分区键有严格要求;分区表在表变大后,执行DDL、SHARDING、单表恢复等都变得更加困难。因此禁止使用分区表,并建议业务端手动SHARDING。</p>
<p>6.建议使用UNSIGNED存储非负数值。<br>同样的字节数,非负存储的数值范围更大。如TINYINT有符号为 -128-127,无符号为0-255。</p>
<p>7.建议使用INT UNSIGNED存储IPV4。<br>UNSINGED INT存储IP地址占用4字节,CHAR(15)则占用15字节。另外,计算机处理整数类型比字符串类型快。使用INT UNSIGNED而不是CHAR(15)来存储IPV4地址,通过MySQL函数inet_ntoa和inet_aton来进行转化。IPv6地址目前没有转化函数,需要使用DECIMAL或两个BIGINT来存储。</p>
<p>例如:</p>
<p>SELECT INET_ATON(‘209.207.224.40’); 3520061480</p>
<p>SELECT INET_NTOA(3520061480); 209.207.224.40</p>
<p>8.强烈建议使用TINYINT来代替ENUM类型。<br>ENUM类型在需要修改或增加枚举值时,需要在线DDL,成本较大;ENUM列值如果含有数字类型,可能会引起默认值混淆。</p>
<p>9.使用VARBINARY存储大小写敏感的变长字符串或二进制内容。<br>VARBINARY默认区分大小写,没有字符集概念,速度快。</p>
<p>10.INT类型固定占用4字节存储,例如INT(4)仅代表显示字符宽度为4位,不代表存储长度。<br>数值类型括号后面的数字只是表示宽度而跟存储范围没有关系,比如INT(3)默认显示3位,空格补齐,超出时正常显示,python、java客户端等不具备这个功能。</p>
<p>11.区分使用DATETIME和TIMESTAMP。存储年使用YEAR类型。存储日期使用DATE类型。 存储时间(精确到秒)建议使用TIMESTAMP类型。<br>DATETIME和TIMESTAMP都是精确到秒,优先选择TIMESTAMP,因为TIMESTAMP只有4个字节,而DATETIME8个字节。同时TIMESTAMP具有自动赋值以及自动更新的特性。注意:在5.5和之前的版本中,如果一个表中有多个timestamp列,那么最多只能有一列能具有自动更新功能。</p>
<p>如何使用TIMESTAMP的自动赋值属性?<br>a)自动初始化,并自动更新: column1 TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</p>
<p>b)只是自动初始化: column1 TIMESTAMP DEFAULT CURRENT_TIMESTAMP</p>
<p>c)自动更新,初始化的值为0: column1 TIMESTAMP DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP</p>
<p>d)初始化的值为0: column1 TIMESTAMP DEFAULT 0</p>
<p>12.所有字段均定义为NOT NULL。<br>a)对表的每一行,每个为NULL的列都需要额外的空间来标识。</p>
<p>b)B树索引时不会存储NULL值,所以如果索引字段可以为NULL,索引效率会下降。</p>
<p>c)建议用0、特殊值或空串代替NULL值。</p>
<p>13.将大字段、访问频率低的字段拆分到单独的表中存储,分离冷热数据。<br>有利于有效利用缓存,防止读入无用的冷数据,较少磁盘IO,同时保证热数据常驻内存提高缓存命中率。 </p>
<p>14.禁止在数据库中存储明文密码。<br>采用加密字符串存储密码，并保证密码不可解密，同时采用随机字符串加盐保证密码安全。防止数据库数据被公司内部人员或黑客获取后，采用字典攻击等方式暴力破解用户密码。</p>
<p>15.表必须有主键,推荐使用UNSIGNED自增列作为主键。<br>表没有主键,INNODB会默认设置隐藏的主键列;没有主键的表在定位数据行的时候非常困难,也会降低基于行复制的效率。</p>
<p>16.禁止冗余索引。<br>索引是双刃剑,会增加维护负担,增大IO压力。(a,b,c)、(a,b),后者为冗余索引。可以利用前缀索引来达到加速目的,减轻维护负担。</p>
<p>17.禁止重复索引。<br>primary key a;uniq index a;重复索引增加维护负担、占用磁盘空间,同时没有任何益处。</p>
<p>18.不在低基数列上建立索引,例如“性别”。<br>大部分场景下,低基数列上建立索引的精确查找,相对于不建立索引的全表扫描没有任何优势,而且增大了IO负担。</p>
<p>19.合理使用覆盖索引减少IO,避免排序。<br>覆盖索引能从索引中获取需要的所有字段,从而避免回表进行二次查找,节省IO。INNODB存储引擎中, secondary index(非主键索引,又称为辅助索引、二级索引)没有直接存储行地址,而是存储主键值。如果用户需要查询secondary index中所不包含的数据列,则需要先通过secondary index查找到主键值,然后再通过主键查询到其他数据列,因此需要查询两次。覆盖索引则可以在一个索引中获取所有需要的数据,因此效率较高。主键查询是天然的覆盖索引。例如SELECT email,uid FROM user_email WHERE uid=xx,如果uid 不是主键,适当时候可以将索引添加为index(uid,email),以获得性能提升。</p>
<p>20.用IN代替OR。SQL语句中IN包含的值不应过多,应少于1000个。<br>IN是范围查找,MySQL内部会对IN的列表值进行排序后查找,比OR效率更高。</p>
<p>21.表字符集使用UTF8,必要时可申请使用UTF8MB4字符集。<br>a)UTF8字符集存储汉字占用3个字节,存储英文字符占用一个字节。</p>
<p>b)UTF8统一而且通用,不会出现转码出现乱码风险。</p>
<p>c)如果遇到EMOJ等表情符号的存储需求,可申请使用UTF8MB4字符集。</p>
<p>22.用UNION ALL代替UNION。<br>UNION ALL不需要对结果集再进行排序。</p>
<p>23.禁止使用order by rand()。<br>order by rand()会为表增加一个伪列,然后用rand()函数为每一行数据计算出rand()值,然后基于该行排序, 这通常都会生成磁盘上的临时表,因此效率非常低。建议先使用rand()函数获得随机的主键值,然后通过主键获取数据。</p>
<p>24.建议使用合理的分页方式以提高分页效率。<br>第一种分页写法：</p>
<p>select *<br>  from t<br> where thread_id = 771025<br>   and deleted = 0<br> order by gmt_create asc limit 0, 15;</p>
<p> 原理：一次性根据过滤条件取出所有字段进行排序返回。</p>
<p> 数据访问开销=索引IO+索引全部记录结果对应的表数据IO</p>
<p> 缺点：该种写法越翻到后面执行效率越差，时间越长，尤其表数据量很大的时候。</p>
<p>适用场景：当中间结果集很小（10000行以下）或者查询条件复杂（指涉及多个不同查询字段或者多表连接）时适用。</p>
<p>第二种分页写法：</p>
<p>select t.* from (</p>
<pre><code>select id from t

 where thread_id = 771025 and deleted = 0 order by gmt_create asc limit 0, 15) a, t </code></pre><p> where a.id = t.id;</p>
<p>前提：假设t表主键是id列，且有覆盖索引secondary key:(thread_id, deleted, gmt_create)</p>
<p>原理：先根据过滤条件利用覆盖索引取出主键id进行排序，再进行join操作取出其他字段。</p>
<p>数据访问开销=索引IO+索引分页后结果（例子中是15行）对应的表数据IO。</p>
<p>优点：每次翻页消耗的资源和时间都基本相同，就像翻第一页一样。</p>
<p>适用场景：当查询和排序字段（即where子句和order by子句涉及的字段）有对应覆盖索引时，且中间结果集很大的情况时适用。</p>
<p>25.SELECT只获取必要的字段,禁止使用SELECT *。<br>减少网络带宽消耗;</p>
<p>能有效利用覆盖索引;</p>
<p>表结构变更对程序基本无影响。</p>
<p>26.SQL中避免出现now()、rand()、sysdate()、current_user()等不确定结果的函数。<br>语句级复制场景下,引起主从数据不一致;不确定值的函数,产生的SQL语句无法利用QUERY CACHE。 </p>
<p>27.采用合适的分库分表策略。例如千库十表、十库百表等。<br>采用合适的分库分表策略,有利于业务发展后期快速对数据库进行水平拆分,同时分库可以有效利用MySQL的多线程复制特性。</p>
<p>28.减少与数据库交互次数,尽量采用批量SQL语句。<br>使用下面的语句来减少和db的交互次数:</p>
<p>a)INSERT … ON DUPLICATE KEY UPDATE</p>
<p>b)REPLACE INTO</p>
<p>c)INSERT IGNORE</p>
<p>d)INSERT INTO VALUES()</p>
<p>29.拆分复杂SQL为多个小SQL,避免大事务。<br>简单的SQL容易使用到MySQL的QUERY CACHE;减少锁表时间特别是MyISAM;可以使用多核CPU。</p>
<p>30.对同一个表的多次alter操作必须合并为一次操作。<br>mysql对表的修改绝大部分操作都需要锁表并重建表,而锁表则会对线上业务造成影响。为减少这种影响,必须把对表的多次alter操作合并为一次操作。例如,要给表t增加一个字段b,同时给已有的字段aa建立索引, 通常的做法分为两步:</p>
<p>alter table t add column b varchar(10);</p>
<p>然后增加索引:</p>
<p>alter table t add index idx_aa(aa);</p>
<p>正确的做法是:</p>
<p>alter table t add column b varchar(10),add index idx_aa(aa);</p>
<p>31.避免使用存储过程、触发器、视图、自定义函数等。<br>这些高级特性有性能问题,以及未知BUG较多。业务逻辑放到数据库会造成数据库的DDL、SCALE OUT、 SHARDING等变得更加困难。</p>
<p>32.禁止有super权限的应用程序账号存在。<br>安全第一。super权限会导致read only失效,导致较多诡异问题而且很难追踪。</p>
<p>33.提交线上建表改表需求,必须详细注明涉及到的所有SQL语句(包括INSERT、DELETE、UPDATE),便于DBA进行审核和优化。<br>并不只是SELECT语句需要用到索引。UPDATE、DELETE都需要先定位到数据才能执行变更。因此需要业务提供所有的SQL语句便于DBA审核。</p>
<p>34.不要在MySQL数据库中存放业务逻辑。<br>数据库是有状态的服务,变更复杂而且速度慢,如果把业务逻辑放到数据库中,将会限制业务的快速发展。建议把业务逻辑提前,放到前端或中间逻辑层,而把数据库作为存储层,实现逻辑与存储的分离。</p>
<h2 id="数据库开发规范"><a href="#数据库开发规范" class="headerlink" title="数据库开发规范"></a>数据库开发规范</h2><hr>
<p>建表栗子：</p>
<p>CREATE TABLE user (<br><code>id</code> bigint(11) NOT NULL AUTO_INCREMENT,<br><code>user_id</code> bigint(11) NOT NULL COMMENT ‘用户id<br>PRIMARY KEY (<code>id</code>),<br>UNIQUE KEY <code>ind_user_id</code> (<code>user_id</code>),<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=’网站用户基本信息’;</p>
<hr>
<p>inception强制限制</p>
<p>建表&amp;索引</p>
<p>1．表必须有主键，主键为ID,类型int 或者 bigint。<br>解读：<br>a,无主键的表，在row模式下主从延迟更高。<br>b,主键要选择较短的数据类型，Innodb引擎普通索引都会保存主键的值，主键小则索引小。</p>
<p>2, 建表时，列没有注释时报错。表没有注释时报错。</p>
<p>3, 禁止使用中文或者特殊字符或者SQL保留字。</p>
<p>4，不支持：分区表。仅支持字符集：utf8mb4,utf8。</p>
<p>5，单表索引个数不超过15个，复合索引列值不超过5个。</p>
<p>6，支持列设置字符集，支持列值为空。支持BLOB字段，不支持enum set bit。支持外键。（不建议使用BLOB, 不建议使用外键）</p>
<p>7，当char类型的长度大于36，就必须将其转换为VARCHAR。</p>
<p>8，timestamp设置为not null之后，默认值不能为’0000-00-00 00:00:00’。</p>
<p>9，id 为主键时，不能设置默认值</p>
<p>数据修改</p>
<p>1，数据修改禁止使用LIMIT，Order By，在DML语句中没有WHERE条件时，报错。</p>
<p>2，禁止单次修改超过1亿行。</p>
<p>3，drop truncate操作不支持。</p>
<p>4，delete需要写where条件。</p>
<hr>
<p>非强制，强烈建议。</p>
<ol>
<li>库，表，字段名称一律小写。下划线分隔。</li>
</ol>
<p>2．禁止使用procedure、view、trigger、Event。<br>解读：业务逻辑放到服务层相比procedure具备更好的扩展性，也降低DB的复杂度。Event显著增加数据库切换难度。</p>
<p>3．禁止使用BLOB。<br>解读：大文件，大照片，DB的读策略一般不缓存。</p>
<p>4，禁止使用外键。<br>解读：通过业务逻辑来解决主外键关系已经是主流了。</p>
<p>5．命名使用英文单词，避免拼音。表名称不能用双引号包含。<br>栗子：t_shiwu, t_foods。你看着选吧。</p>
<p>6.用DECIMAL代替FLOAT和DOUBLE存储精确浮点数。</p>
<ol start="7">
<li><p>金额相关的数据类型建议设置为bigint，以分计算。<br>解读： 不同的标准计算出来的总金额可能不一致。这可是银子。</p>
</li>
<li><p>线上数据只保留固定周期的数据（例如：半年），超过10G的表强制归档。<br>解读：线上数据越少，突然导致的性能问题越少。</p>
</li>
</ol>
<p>9．每个表增加最后更新时间。<br>update_time timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT ‘最后更新时间’<br>解读：数据组要求做增量更新用，此字段也无需维护。</p>
<ol start="10">
<li>新的应用访问DB请告之应用的功能，连接数，重要性等，降低因为缺乏沟通造成的潜在风险。<br>解读：新的mysql版本DBA会控制单用户默认连接数300，避免因程序bug导致的连接风暴。</li>
</ol>
<hr>
<p>性能规范</p>
<ol>
<li><p>只使用btree索引。<br>解读：简单，高效。</p>
</li>
<li><p>查询的字段建议创建索引。特别是在选择性高的列。<br>解读：SELECT、UPDATE、DELETE语句的WHERE条件列；2、多表JOIN的字段。</p>
</li>
<li><p>不在低基数列上建立索引，例如‘性别’。<br>解读：举个栗子：<br>0到100，索引查询1，选择度高，走索引。<br>100个人，50男，50女，选择度低，走索引性能比全表扫描更差，所以选择全表扫描。<br>全表扫描： 加载多个数据块到内存。<br>索引： 加载单个索引块，指针到数据块，加载数据块。</p>
</li>
</ol>
<p>4.避免冗余或重复索引。<br>解读：联合索引IX_a_b_c(a,b,c) 相当于 (a) 、(a,b) 、(a,b,c)，那么索引 (a) 、(a,b) 就是多余的。<br>但是不相当于(b)、（b,c）。</p>
<p>5.不使用SELECT *，只获取必要的字段。<br>解读：<br>消耗CPU和IO、消耗网络带宽；<br>无法使用覆盖索引。</p>
<p>6.避免数据类型不一致。<br>SELECT * FROM t WHERE id = ‘19’;<br>SELECT * FROM t WHERE id = 19;</p>
<p>8.禁止使用INSERT INTO t_xxx VALUES(xxx)，必须显示指定插入的列属性。<br>解读：容易在增加或者删除字段后出现程序BUG</p>
<p>9.禁止在WHERE条件的属性上使用函数或者表达式。<br>解读：SELECT uid FROM t_user WHERE from_unixtime(day)&gt;=’2017-02-15’ 会导致全表扫描<br>正确的写法是：SELECT uid FROM t_user WHERE day&gt;= unix_timestamp(‘2017-02-15 00:00:00’)</p>
<ol start="10">
<li><p>别用函数在字段上，这样不走索引。<br>数字存储：<br>性能差：FROM_UNIXTIME(pay_time) &gt;= curdate()<br>性能好：pay_time &gt;= UNIX_TIMESTAMP(CURDATE())</p>
</li>
<li><p>关键性能点减少表关联，解耦。这样方便拆分。<br>栗子：<br>很多业务都是围绕用户来的，所有很多线上业务都用用户表关联。长此以往，系统就变的不可拆分，而且臃肿。<br>正确的姿势因为是从接口获取用户数据，这样就没有强制的关联关系，方便业务拆分和扩展。</p>
</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python文件内容按行读取到列表中</title>
    <url>/2020/04/20/Python%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%8C%89%E8%A1%8C%E8%AF%BB%E5%8F%96%E5%88%B0%E5%88%97%E8%A1%A8%E4%B8%AD/</url>
    <content><![CDATA[<h2 id="Python文件内容按行读取到列表中"><a href="#Python文件内容按行读取到列表中" class="headerlink" title="Python文件内容按行读取到列表中"></a>Python文件内容按行读取到列表中</h2><h3 id="示例文件内容如下"><a href="#示例文件内容如下" class="headerlink" title="示例文件内容如下:"></a>示例文件内容如下:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">Python</span><br></pre></td></tr></table></figure>
<p>通常来讲，我们如果只是迭代文件对象每一行，并做一些处理，是不需要将文件对象转成列表的，因为文件对象本身可迭代，而且是按行迭代：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;somefile&#39;, &#39;r&#39;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        print(line, end&#x3D;&#39;&#39;)</span><br><span class="line">        </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">Python</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="转换为列表进行操作"><a href="#转换为列表进行操作" class="headerlink" title="转换为列表进行操作"></a>转换为列表进行操作</h3><ol>
<li>包含换行符</li>
</ol>
<ul>
<li>方式一<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;somefile&#39;,&#39;r&#39;) as f:</span><br><span class="line">    content &#x3D; list(f)</span><br><span class="line">    print(content)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">[&#39;Hello\n&#39;, &#39;World\n&#39;, &#39;Python&#39;]</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li>
<li>方式二<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;somefile&#39;,&#39;r&#39;) as f:</span><br><span class="line">    content &#x3D; f.readlines()</span><br><span class="line">    print(content)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">[&#39;Hello\n&#39;, &#39;World\n&#39;, &#39;Python&#39;]</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
其中，content结果都是没有去掉每一行行尾的换行符的(somefile.txt文件中最后一行本来就没有换行符)</li>
</ul>
<ol start="2">
<li>去掉换行符</li>
</ol>
<ul>
<li>方式一<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;somefile&#39;,&#39;r&#39;) as f:</span><br><span class="line">    content &#x3D; f.read().splitlines()</span><br><span class="line">    print(content)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">[&#39;Hello&#39;, &#39;World&#39;, &#39;Python&#39;]</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li>
<li>方式二<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;somefile&#39;,&#39;r&#39;) as f:</span><br><span class="line">    content &#x3D; [line.rstrip(&#39;\n&#39;) for line in f]</span><br><span class="line">    print(content)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">[&#39;Hello&#39;, &#39;World&#39;, &#39;Python&#39;]</span><br><span class="line">&quot;&quot;&quot;    </span><br><span class="line">&#96;&#96;&#96;    </span><br><span class="line">其中，content结果都是去掉每一行行尾的换行符</span><br><span class="line"></span><br><span class="line">3. 去掉行首行尾的空白字符</span><br></pre></td></tr></table></figure>
with open(‘somefile’,’r’) as f:<br>  content = [line.strip() for line in f]<br>  print(content)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 按行读取文件内容并得到当前行号</span><br><span class="line">文件对象是可迭代的（按行迭代），使用enumerate()即可在迭代的同时，得到数字索引(行号),enumerate()的默认数字初始值是0，如需指定1为起始，可以设置其第二个参数：</span><br></pre></td></tr></table></figure>
with open(‘somefile’, ‘r’) as f:<br>  for number, line in enumerate(f,start=1):<pre><code>print(number, line, end=&apos;&apos;)</code></pre>“””<br>1 Hello<br>2 World<br>3 Python<br>“””<pre><code>
</code></pre></li>
</ul>
<p><a href="http://www.revotu.com/read-file-to-list-by-line.html#more" target="_blank" rel="noopener">参考博客</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python面试题一</title>
    <url>/2020/04/20/Python%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80/</url>
    <content><![CDATA[<h2 id="Python面试题一"><a href="#Python面试题一" class="headerlink" title="Python面试题一"></a>Python面试题一</h2><h3 id="二-django"><a href="#二-django" class="headerlink" title="二. django"></a>二. django</h3><pre><code>  1、中间件

       中间件一般做认证或批量请求处理，django中的中间件，其实是一个类，在请求和结束后，django会根据自己的规则在合适的时机执行中间件中相应的方法，
             如请求过来 执行process_request, view，process_response方法

 2、Django、Tornado、Flask各自的优势

      Django：Django无socket，django的目的是简便，快速开发，并遵循MVC设计，多个组件可以很方便的以“插件”形式服务于整个框架，
                      django有许多功能强大的第三方插件。django具有很强的可扩展性。
      Tornado：它是非阻塞式服务器，而且速度相当快，得力于其 非阻塞的方式和对epoll的运用，Future对象，缺点：没有session，需要自定制
      Flask：是一个微型的web框架，配合SQLALchemy来使用，jinja2模板， werkzeug接口                  

  3、 django版本，Python版本，linux版本

                  django：1.11
           Python：3.5
           linux：6.8
  4、django的template的注释是什么样子的

        单行：
        多行注释：{%comment%}

  5、django怎么弄并发的

        nginx+uwsig为django提供高并发，nginx的并发能力超过，单台并发能力过完，在纯静态的web服务中更是突出其优越的地方，由于底层使用epoll异步IO模型进行处理。

 6、tornodo的ioloop知道是什么吗？

      事件循环

 7、select_related和prefetch_related，Q和F

        select_related：一对多使用，查询主动做连表
        prefetch_related：多对多或者一对多的时候使用，不做连表，做多次查询
        Q：用于构造复杂查询条件
        F：更新时用于获取原来的值，专门取对象中某一列进行操作

 8、什么是ORM？

       ORM，即Object-Relational Mapping（对象关系映射），它的作用是在关系型数据库和业务实体对象之间做一个映射
       ORM优缺点：
           优点：摆脱复杂的SQL操作，适应快速开发，让数据结果变得简单，数据库迁移成本更低
           缺点：性能较差，不适用于大型应用，复杂的SQL操作还需要通过SQL语句实现

 9、CORS跨域资源共享

        首先会发送&quot;预检&quot;opption&quot;，请求，如果&quot;预检&quot;成功，则发送真实数据。

10、Django的Form主要具有以下功能？

        生成HTMl标签，验证用户数据 is_vaild，HTML Form提交保留上次提交数据，初始化页面显示内容

11、CBV和FBV

        CBV在指定的类上面加上装饰器或在此方法上面添加装饰器 @method_decorator,并继承view

12、cookie及session

         cookie：是保留在客户端上面的一组键值对，cookie不是很安全，别人可以分析存放在本地的cookie
         session：是保存在服务器上面的一组键值对，依赖与cookie，安全指数比cookie高

 13、django的请求生命周期

           请求来了先到uwsgi，把请求做一部分分装给django框架，然后经过所有的中间件，路由，视图，视图处理再返回给中间件，中间件在返回给uwsgi，在返回给用户。

 14、uwsgi和wsgi

    wsgi：是web服务器网关接口，是pyhton应用程序或框架和web服务器之间的一种接口，其广泛使用的是django框架。
    uwsgi：是一个web服务器，它实现了wsgi协议，Nginx中HttpUwsgiModule的作用是与Uwsgi服务器进行交换</code></pre><p>  15、解释下django - debug -toolbar的使用</p>
<pre><code>使用django开发站点时，可以使用django-debug-toolbar来进行调试，在settings.py中添加 &apos;debug—toolbar.midleware.Debug ToolbarMiddleware&apos;到项目的MIDDLEWARE_CLASSES内。</code></pre><p>三、Python部分<br>        1、 <strong>new</strong>.<strong>init</strong>区别，如何实现单例模式，有什么优点</p>
<pre><code>    __new__是一个静态方法，__init__是一个实例方法
    __new__返回一个创建的实例，__init__什么都不返回
    __new__返回一个cls的实例时后面的__init__才能被调用
    当创建一个新实例时调用__new__，初始化一个实例时调用__init__

2、深浅拷贝

    浅拷贝只是增加了一个指针指向一个存在的地址，而深拷贝是增加一个指针并且开辟了新的内存，这个增加的指针指向这个新的内存，
    采用浅拷贝的情况，释放内存，会释放同一内存，深拷贝就不会出现释放同一内存的错误

3、HTTP/IP相关协议，分别位于哪层

      http协议是超文本传输协议，http协议是基于TCP/IP通信协议来传递数据
      http协议工作与c/s架构上，浏览器作为http的客户端通过URL向http服务端即web服务器发送所用请求。web服务器收到所有请求后，向客户端发送响应信息，
      http特点是短连接，无状态

        地址栏键输入URL，按下回车之后经历了什么？
        1.浏览器向DNS服务器请求解析该URL中的域名所对应的IP地址
        2.解析出IP地址后，根据IP地址和默认端口80，和服务器建立TCP连接
        3.浏览器发出读取文件的http请求，该请求报文作为TCP三次握手的第三个报文的数据发送给服务器
        4.服务器对浏览器请求做出响应，并把对应的html文件发送给浏览器
        5.释放TCP连接
        6.浏览器将该HMTL渲染并显示内容

4、TCP/UDP区别

       TCP协议是面向连接，保证高可靠性（数据无丢失，数据无失序，数据无错误，数据无重复达到）传输层协议
       UDP：数据丢失，无秩序的传输层协议（qq基于udp协议）

5、webscoket

      websocket是基于http协议的，可持续化连接
       轮询：浏览器每隔几秒就发送一次请求，询问服务器是否有新消息
       长轮询：客户端发起连接后，如果没有消息，就一直不返回response给客户端，直到有消息返回，返回完之后，客户端再次发起连接

6、RabbitMQ:

      服务器端有Erlang语言来编写，支持多种客户端，只会ajax，用于分布式系统中存储转发消息，在易用性、扩展性、高可用性的方面不俗。
      connection是RabbitMQ的socket连接，它封装了socket部分相关协议逻辑
      connectionFactroy为connection的制造工厂
      channel是我们与RabbitMQ打交道的最重要的一个接口，大部分的业务操作是在chaanel这个接口中完成，包括定义Queue、定义Exchange、
       绑定Queue与Exchange,发布消息等

7、装饰器

     调用装饰器其实是一个闭包函数，为其他函数添加附加功能，不修改被修改的源代码和不修改被修饰的方式，装饰器的返回值也是一个函数对象。
     比如：插入日志、性能测试、事物处理、缓存、权限验证等，有了装饰器，就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。

8、闭包

   1.必须有一个内嵌函数
   2.内嵌函数必须引用外部函数的变量（该函数包含对外作用域而不是全局作用域名字的引用）
   3.外部函数的返回值必须是内嵌函数

9、迭代器与生成器

     迭代可迭代对象对应_iter_（方法）和迭代器对应_next_（方法）的一个过程
     生成器：包括含有yield这个关键字，生成器也是迭代器，调动next把函数变成迭代器。

10、classmethod，staticmethod，property

         类方法：将类的函数转换成类方法，函数上装饰@classmethod会将函数的自动传值参数改成cls
         静态方法：此方法相当于给类扩展一个功能，将类内的函数实例化，给类或对象使用，此时类内的函数就是普通函数，不管是类还是实例化的对象都可以使用
         实例化：类的实例化就会产生一个实例（对象），可以理解为类（）把虚拟的东西实例化，得到具体存在的值

11、常用的状态码           

        200--服务器成功返回网页
        204--请求收到,但返回信息为空
        304--客户端已经执行了GET,但文件未变化
        400--错误请求，如语法错误
        403--无权限访问
        404--请求的页面不存在
        500--服务器产生内部错误
12、多进程，多线程，协程，GIL

        GIL:全局解释器锁，是锁在cpython解释器上，导致同一时刻，同一进程只能有一个线程被执行
        多进程：多进程模块multiprocessing来实现，cpu密集型，IO计算型可以用多进程
        多线程：多线程模块threading来实现，IO密集型，多线程可以提高效率
        协程：依赖于geenlet，对于多线程应用。cpu通过切片的方式来切换线程间的执行，遇到IO操作自动切换，线程切换时需要耗时，
                                 而协成好处没有切换的消耗，没有锁定概念。
        进程：是资源管理单位，进行是相互独立的，实现并发和并发
        线程：是最小的执行单位，线程的出现为了降低上下文切换的消耗，提供系统的并发性

13、IO多路复用/异步非阻塞

         IO多路复用：通过一种机制，可以监听多个描述符 select/poll/epoll
         select：连接数受限，查找配对速度慢，数据由内核拷贝到用户态
         poll：改善了连接数，但是还是查找配对速度慢，数据由内核拷贝到用户态
         epoll：epoll是linux下多路复用IO接口，是select/poll的增强版，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率
        异步非阻塞：异步体现在回调上，回调就是有消息返回时告知一声儿进程进行处理。非阻塞就是不等待，不需要进程等待下去，
                              继续执行其他操作，不管其他进程的状态。

14、PEP8规范，规范的好处是什么？

        1.缩进：4个空实现缩进，尽量不使用Tab
        2.行：没行最大长度不超过79，换行可以使用反斜杠
        3.命名规范：
        4.注释规范：

15、range-and-xrange

       都在循环时使用，xrange内存性能更好，xrange用法与range完全相同，range一个生成list对象，xrange是生成器

16、with上下文机制原理

         _enter_和_exit_，上下文管理协议，即with语句，为了让一个对象兼容with语句，必须在这个对象类中声明_enter_和_exit_方法，
         使用with语句的目的就是把代码块放入with中执行，with结束后，自动完成清理工作，无须收到干预

17、经典类、新式类

        经典类遵循：深度优先，python2中
        新式类遵循：广度优先，Python3中

 18、有没有一个工具可以帮助查找Python的bug和进行静态的代码分析？

         PyChecker是一个Python代码的静态分析工具，它可以帮助查找Python代码的bug，会对代码的复杂度和格式提出警告，
                Pylint是另外一个工具可以进行codingstandard检查  

  19、 Python是如何进行内存管理的

           1.对象引用计数：
                引用计数增加的情况：
                     来保持追踪内存中的对象，所有对象都用引用计数，一个对象分配一个新名称
                     将其放入一个容器中（列表，字典，元祖）
                 引用计数减少的情况：
                      使用del语句对对象别名显示的销毁
                      引用超出作用域或被重新赋值
                      sys.getrefcount()函数可以获得对象的当前引用计数
             2.标记-清除机制


             3.分代技术

  20、什么是python？使用python有什么好处？

          python是一种编程语言，它有对象、模块、线程、异常处理和自动内存管理。它简洁，简单、方便、容易扩展、有许多自带的数据结果，而且它开源

  21、什么是pickling和unpickling？

         Pickle模块读入任何python对象，将它们转换成字符串，然后使用dump函数将其转储到一个文件中——这个过程叫做pickling
         反之从存储的字符串文件中提取原始python对象的过程，叫做unpickling

  22、python是如何被解释的？

         Python是一种解释性语言，它的源代码可以直接运行，Python解释器会将源代码转换成中间语言，之后再翻译成机器码再执行

  23、数组和元祖之间的区别是什么？

         数组和元祖之间的区别：数组内容可以被修改，而元祖内容是只读的，不可被修改的，另外元祖可以被哈希，比如作为字典的key

  24、参数按值传递和引用传递是怎么实现的？

         python中的一切都是类，所有的变量都是一个对象的引用。引用的值是由函数确定的，因此无法被改变，但是如果一个对象是可以被修改的，你可以改动对象

  25、Python都有哪些自带的数据结构？

         Python自带的数据结构分为可变和不可变的：可变的有：数组、集合、字典，不可变的是：字符串、元祖、整数

  26、什么是python的命名空间？

         在python中，所有的名字都存在于一个空间中，它们在改空间中存在和被操作——这就是命名空间，它就好像一个盒子，在每个变量名字都对应装着一个对象，
                  当查询变量的时候，会从该盒子里面寻找相应的对象

  27、python中的unittest是什么？

         在python中，unittest是python中的单元测试框架，它拥有支持共享搭建、自动测试、在测试中暂停代码、将不同测试迭代成一组

  28、*args与**kwargs

         *args代表位置参数，它会接收任意多个参数并把这些参数作为元祖传递给函数。**kwargs代表的关键字参数，返回的是字典，位置参数一定要放在关键字前面

  29、在Python中什么是slicing？

         slicing是一种在有序的对象类型中（数组、元祖、字符串）节选某一段的语法

  30、中的docstring是什么？

        Python中文档字符串被称为docstring，它在Python中的作用是为函数、模块和类注释生成文档

  31、os与sys区别：

          os是模块负责程序与操作系统的交互，提供了访问操作系统底层的接口
          sys模块是负责程序与python解释器的交互，提供了一系列的函数和变量，用于操控Python时运行的环境
  32、实现一个单例模式

                    _new_（）在 _init_（）之前被调用，用于生成实例对象。利用这个方法和类的属性的特点可以实现设计模式的单例模式。
           单例模式是指创建唯一对象，单例模式设计的类只能实例，实例化1个对象
           class Singleton(object):
                __instance=None
                def __init__(self):
                    pass
                def __new__(cls, *args, **kwargs):
                    if Singleton.__instance is None:
                        Singleton.__instance=object.__new__(cls,*args,**kwargs)
                    return Singleton.__instance</code></pre>]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ-1使用</title>
    <url>/2020/04/20/RabbitMQ-1%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一-RabbitMQ-1"><a href="#一-RabbitMQ-1" class="headerlink" title="一. RabbitMQ-1"></a>一. RabbitMQ-1</h2><h3 id="什么叫消息队列"><a href="#什么叫消息队列" class="headerlink" title="什么叫消息队列"></a>什么叫消息队列</h3><p>消息（Message）是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串，也可以更复杂，可能包含嵌入对象。<br>消息队列（Message Queue）是一种应用间的通信方式，消息发送后可以立即返回，由消息系统来确保消息的可靠传递。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。</p>
<h3 id="为何使用消息队列"><a href="#为何使用消息队列" class="headerlink" title="为何使用消息队列"></a>为何使用消息队列</h3><p>从上面的描述中可以看出消息队列是一种应用间的异步协作机制，那什么时候需要使用 MQ 呢?<br>以常见的订单系统为例，用户点击【下单】按钮之后的业务逻辑可能包括：扣减库存、生成相应单据、发红包、发短信通知。在业务发展初期这些逻辑可能放在一起同步执行，随着业务的发展订单量增长，需要提升系统服务的性能，这时可以将一些不需要立即生效的操作拆分出来异步执行，比如发放红包、发短信通知等。这种场景下就可以用 MQ ，在下单的主流程（比如扣减库存、生成相应单据）完成之后发送一条消息到 MQ 让主流程快速完结，而由另外的单独线程拉取MQ的消息（或者由 MQ 推送消息），当发现 MQ 中有发红包或发短信之类的消息时，执行相应的业务逻辑。<br><a href="https://blog.csdn.net/whoamiyang/article/details/54954780" target="_blank" rel="noopener">详细</a></p>
<h3 id="RabbitMQ介绍"><a href="#RabbitMQ介绍" class="headerlink" title="RabbitMQ介绍"></a>RabbitMQ介绍</h3><p>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。<br>rabbitMQ是一款基于AMQP协议的消息中间件，它能够在应用之间提供可靠的消息传输。在易用性，扩展性，高可用性上表现优秀。使用消息中间件利于应用之间的解耦，生产者（客户端）无需知道消费者（服务端）的存在。而且两端可以使用不同的语言编写，大大提供了灵活性。<br><a href="https://www.rabbitmq.com/tutorials/tutorial-one-python.html" target="_blank" rel="noopener">中文文档</a></p>
<h2 id="二-rabbitMQ安装"><a href="#二-rabbitMQ安装" class="headerlink" title="二. rabbitMQ安装"></a>二. rabbitMQ安装</h2><h3 id="2-1-Linux"><a href="#2-1-Linux" class="headerlink" title="2.1 Linux"></a>2.1 Linux</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装配置epel源</span><br><span class="line">   $ rpm -ivh http:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;6&#x2F;i386&#x2F;epel-release-6-8.noarch.rpm</span><br><span class="line"> </span><br><span class="line">安装erlang</span><br><span class="line">   $ yum -y install erlang</span><br><span class="line"> </span><br><span class="line">安装RabbitMQ</span><br><span class="line">   $ yum -y install rabbitmq-server</span><br><span class="line">注意：service rabbitmq-server start&#x2F;stop</span><br></pre></td></tr></table></figure>
<h3 id="2-2-Mac"><a href="#2-2-Mac" class="headerlink" title="2.2 Mac"></a>2.2 Mac</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># brew install rabbitmq</span><br><span class="line"># export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;sbin</span><br><span class="line"># rabbitmq-server</span><br></pre></td></tr></table></figure>
<h3 id="2-2-rabbitMQ工作模型"><a href="#2-2-rabbitMQ工作模型" class="headerlink" title="2.2 rabbitMQ工作模型"></a>2.2 rabbitMQ工作模型</h3><h4 id="2-2-1-简单模式"><a href="#2-2-1-简单模式" class="headerlink" title="2.2.1 简单模式"></a>2.2.1 简单模式</h4><p>示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ######################### 生产者 #########################</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import pika</span><br><span class="line">connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters( host&#x3D;&#39;localhost&#39;))</span><br><span class="line"></span><br><span class="line">channel &#x3D; connection.channel()</span><br><span class="line"></span><br><span class="line">channel.queue_declare(queue&#x3D;&#39;hello&#39;)</span><br><span class="line"></span><br><span class="line">channel.basic_publish(exchange&#x3D;&#39;&#39;,</span><br><span class="line">                      routing_key&#x3D;&#39;hello&#39;,</span><br><span class="line">                      body&#x3D;&#39;Hello World!&#39;)</span><br><span class="line"></span><br><span class="line">print(&quot; [x] Sent &#39;Hello World!&#39;&quot;)</span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ########################## 消费者 ##########################</span><br><span class="line"> </span><br><span class="line">connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters(host&#x3D;&#39;localhost&#39;))</span><br><span class="line">channel &#x3D; connection.channel()</span><br><span class="line"> </span><br><span class="line">channel.queue_declare(queue&#x3D;&#39;hello&#39;)</span><br><span class="line"> </span><br><span class="line">def callback(ch, method, properties, body):</span><br><span class="line">    print(&quot; [x] Received %r&quot; % body)</span><br><span class="line"> </span><br><span class="line"># 需要producer确认之后在删除消息内容的时候需要将no_ack置为False </span><br><span class="line">channel.basic_consume( callback,</span><br><span class="line">                       queue&#x3D;&#39;hello&#39;,</span><br><span class="line">                       no_ack&#x3D;True)</span><br><span class="line"> </span><br><span class="line">print(&#39; [*] Waiting for messages. To exit press CTRL+C&#39;)</span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure>
<h3 id="相关参数说明"><a href="#相关参数说明" class="headerlink" title="相关参数说明"></a>相关参数说明</h3><blockquote>
<p>no-ack ＝ False，如果消费者遇到情况(its channel is closed, connection is closed, or TCP connection is lost)挂掉了，那么，RabbitMQ会重新将该任务添加到队列中。</p>
</blockquote>
<ul>
<li>回调函数中的<code>ch.basic_ack(delivery_tag=method.delivery_tag)</code></li>
<li>basic_comsume中的<code>no_ack=False</code></li>
</ul>
<ol>
<li>消息接收端应该这么写<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pika</span><br><span class="line"></span><br><span class="line">connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class="line">        host&#x3D;&#39;10.211.55.4&#39;))</span><br><span class="line">channel &#x3D; connection.channel()</span><br><span class="line"></span><br><span class="line">channel.queue_declare(queue&#x3D;&#39;hello&#39;)</span><br><span class="line"></span><br><span class="line">def callback(ch, method, properties, body):</span><br><span class="line">    print(&quot; [x] Received %r&quot; % body)</span><br><span class="line">    import time</span><br><span class="line">    time.sleep(10)</span><br><span class="line">    print &#39;ok&#39;</span><br><span class="line">    ch.basic_ack(delivery_tag &#x3D; method.delivery_tag)</span><br><span class="line"></span><br><span class="line">channel.basic_consume(callback,</span><br><span class="line">                      queue&#x3D;&#39;hello&#39;,</span><br><span class="line">                      no_ack&#x3D;False)</span><br><span class="line"></span><br><span class="line">print(&#39; [*] Waiting for messages. To exit press CTRL+C&#39;)</span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure></li>
<li>durable:消息不丢失<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 生产者</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import pika</span><br><span class="line"></span><br><span class="line">connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters(host&#x3D;&#39;10.211.55.4&#39;))</span><br><span class="line">channel &#x3D; connection.channel()</span><br><span class="line"></span><br><span class="line"># make message persistent</span><br><span class="line">channel.queue_declare(queue&#x3D;&#39;hello&#39;, durable&#x3D;True)</span><br><span class="line"></span><br><span class="line">channel.basic_publish(exchange&#x3D;&#39;&#39;,</span><br><span class="line">                      routing_key&#x3D;&#39;hello&#39;,</span><br><span class="line">                      body&#x3D;&#39;Hello World!&#39;,</span><br><span class="line">                      properties&#x3D;pika.BasicProperties(</span><br><span class="line">                          delivery_mode&#x3D;2, # make message persistent</span><br><span class="line">                      ))</span><br><span class="line">print(&quot; [x] Sent &#39;Hello World!&#39;&quot;)</span><br><span class="line">connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 消费者</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import pika</span><br><span class="line"></span><br><span class="line">connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters(host&#x3D;&#39;10.211.55.4&#39;))</span><br><span class="line">channel &#x3D; connection.channel()</span><br><span class="line"></span><br><span class="line"># make message persistent</span><br><span class="line">channel.queue_declare(queue&#x3D;&#39;hello&#39;, durable&#x3D;True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def callback(ch, method, properties, body):</span><br><span class="line">    print(&quot; [x] Received %r&quot; % body)</span><br><span class="line">    import time</span><br><span class="line">    time.sleep(10)</span><br><span class="line">    print &#39;ok&#39;</span><br><span class="line">    ch.basic_ack(delivery_tag &#x3D; method.delivery_tag)</span><br><span class="line"></span><br><span class="line">channel.basic_consume(callback,</span><br><span class="line">                      queue&#x3D;&#39;hello&#39;,</span><br><span class="line">                      no_ack&#x3D;False)</span><br><span class="line"></span><br><span class="line">print(&#39; [*] Waiting for messages. To exit press CTRL+C&#39;)</span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure></li>
<li>消息获取顺序<br>默认消息队列里的数据是按照顺序被消费者拿走，例如：消费者1 去队列中获取 奇数 序列的任务，消费者1去队列中获取 偶数 序列的任务。<br>channel.basic_qos(prefetch_count=1) 表示谁来谁获取消费就分发给消费者，不再按照奇偶数排列<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import pika</span><br><span class="line"></span><br><span class="line">connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters(host&#x3D;&#39;10.211.55.4&#39;))</span><br><span class="line">channel &#x3D; connection.channel()</span><br><span class="line"></span><br><span class="line"># make message persistent</span><br><span class="line">channel.queue_declare(queue&#x3D;&#39;hello&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def callback(ch, method, properties, body):</span><br><span class="line">    print(&quot; [x] Received %r&quot; % body)</span><br><span class="line">    import time</span><br><span class="line">    time.sleep(10)</span><br><span class="line">    print &#39;ok&#39;</span><br><span class="line">    ch.basic_ack(delivery_tag &#x3D; method.delivery_tag)</span><br><span class="line"></span><br><span class="line">channel.basic_qos(prefetch_count&#x3D;1)</span><br><span class="line"></span><br><span class="line">channel.basic_consume(callback,</span><br><span class="line">                      queue&#x3D;&#39;hello&#39;,</span><br><span class="line">                      no_ack&#x3D;False)</span><br><span class="line"></span><br><span class="line">print(&#39; [*] Waiting for messages. To exit press CTRL+C&#39;)</span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure>
<h2 id="三-exchange交换机模型"><a href="#三-exchange交换机模型" class="headerlink" title="三. exchange交换机模型"></a>三. exchange交换机模型</h2><h3 id="3-1-发布订阅"><a href="#3-1-发布订阅" class="headerlink" title="3.1 发布订阅"></a>3.1 发布订阅</h3><img src="https://images2015.cnblogs.com/blog/425762/201607/425762-20160717140730998-2143093474.png" alt="模型图"><br>发布订阅和简单的消息队列区别在于，发布订阅会将消息发送给所有的订阅者，而消息队列中的数据被消费一次便消失。所以，RabbitMQ实现发布和订阅时，会为每一个订阅者创建一个队列，而发布者发布消息时，会将消息放置在所有相关队列中。<br>exchange_type = fanout<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 生产者</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import pika</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class="line">        host&#x3D;&#39;localhost&#39;))</span><br><span class="line">channel &#x3D; connection.channel()</span><br><span class="line"></span><br><span class="line">channel.exchange_declare(exchange&#x3D;&#39;logs&#39;,</span><br><span class="line">                         exchange_type&#x3D;&#39;fanout&#39;)</span><br><span class="line"></span><br><span class="line">message &#x3D; &#39; &#39;.join(sys.argv[1:]) or &quot;info: Hello World!&quot;</span><br><span class="line">channel.basic_publish(exchange&#x3D;&#39;logs&#39;,</span><br><span class="line">                      routing_key&#x3D;&#39;&#39;,</span><br><span class="line">                      body&#x3D;message)</span><br><span class="line">print(&quot; [x] Sent %r&quot; % message)</span><br><span class="line">connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 消费者</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import pika</span><br><span class="line"></span><br><span class="line">connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class="line">        host&#x3D;&#39;localhost&#39;))</span><br><span class="line">channel &#x3D; connection.channel()</span><br><span class="line"></span><br><span class="line">channel.exchange_declare(exchange&#x3D;&#39;logs&#39;,</span><br><span class="line">                         exchange_type&#x3D;&#39;fanout&#39;)</span><br><span class="line"></span><br><span class="line">result &#x3D; channel.queue_declare(exclusive&#x3D;True)</span><br><span class="line">queue_name &#x3D; result.method.queue</span><br><span class="line"></span><br><span class="line">channel.queue_bind(exchange&#x3D;&#39;logs&#39;,</span><br><span class="line">                   queue&#x3D;queue_name)</span><br><span class="line"></span><br><span class="line">print(&#39; [*] Waiting for logs. To exit press CTRL+C&#39;)</span><br><span class="line"></span><br><span class="line">def callback(ch, method, properties, body):</span><br><span class="line">    print(&quot; [x] %r&quot; % body)</span><br><span class="line"></span><br><span class="line">channel.basic_consume(callback,</span><br><span class="line">                      queue&#x3D;queue_name,</span><br><span class="line">                      no_ack&#x3D;True)</span><br><span class="line"></span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure>
<h3 id="3-2-关键字发送"><a href="#3-2-关键字发送" class="headerlink" title="3.2 关键字发送"></a>3.2 关键字发送</h3><img src="https://images2015.cnblogs.com/blog/425762/201607/425762-20160717140748795-1181706200.png" alt="模型图"><br>exchange_type = direct<br>之前示例，发送消息时明确指定某个队列并向其中发送消息，RabbitMQ还支持根据关键字发送，即：队列绑定关键字，发送者将数据根据关键字发送到消息exchange，exchange根据 关键字 判定应该将数据发送至指定队列。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import pika</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class="line">        host&#x3D;&#39;localhost&#39;))</span><br><span class="line">channel &#x3D; connection.channel()</span><br><span class="line"></span><br><span class="line">channel.exchange_declare(exchange&#x3D;&#39;direct_logs&#39;,</span><br><span class="line">                         exchange_type&#x3D;&#39;direct&#39;)</span><br><span class="line"></span><br><span class="line">result &#x3D; channel.queue_declare(exclusive&#x3D;True)</span><br><span class="line">queue_name &#x3D; result.method.queue</span><br><span class="line"></span><br><span class="line">severities &#x3D; sys.argv[1:]</span><br><span class="line">if not severities:</span><br><span class="line">    sys.stderr.write(&quot;Usage: %s [info] [warning] [error]\n&quot; % sys.argv[0])</span><br><span class="line">    sys.exit(1)</span><br><span class="line"></span><br><span class="line">for severity in severities:</span><br><span class="line">    channel.queue_bind(exchange&#x3D;&#39;direct_logs&#39;,</span><br><span class="line">                       queue&#x3D;queue_name,</span><br><span class="line">                       routing_key&#x3D;severity)</span><br><span class="line"></span><br><span class="line">print(&#39; [*] Waiting for logs. To exit press CTRL+C&#39;)</span><br><span class="line"></span><br><span class="line">def callback(ch, method, properties, body):</span><br><span class="line">    print(&quot; [x] %r:%r&quot; % (method.routing_key, body))</span><br><span class="line"></span><br><span class="line">channel.basic_consume(callback,</span><br><span class="line">                      queue&#x3D;queue_name,</span><br><span class="line">                      no_ack&#x3D;True)</span><br><span class="line"></span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure>
<h3 id="3-3-模糊匹配"><a href="#3-3-模糊匹配" class="headerlink" title="3.3 模糊匹配"></a>3.3 模糊匹配</h3><img src="https://images2015.cnblogs.com/blog/425762/201607/425762-20160717140807232-1395723247.png" alt="模型图"><br>exchange_type = topic</li>
</ol>
<p>发送者路由值              队列中<br><a href="http://www.weshuke.python" target="_blank" rel="noopener">www.weshuke.python</a>          old.*  – 不匹配<br>age.weshuke.python          old.#  – 匹配<br>在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入”路由值“和 ”关键字“进行匹配，匹配成功，则将数据发送到指定队列。</p>
<ul>
<li># 表示可以匹配 0 个 或 多个 单词</li>
<li>*  表示只能匹配 一个 单词<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import pika</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class="line">        host&#x3D;&#39;localhost&#39;))</span><br><span class="line">channel &#x3D; connection.channel()</span><br><span class="line"></span><br><span class="line">channel.exchange_declare(exchange&#x3D;&#39;topic_logs&#39;,</span><br><span class="line">                         exchange_type&#x3D;&#39;topic&#39;)</span><br><span class="line"></span><br><span class="line">result &#x3D; channel.queue_declare(exclusive&#x3D;True)</span><br><span class="line">queue_name &#x3D; result.method.queue</span><br><span class="line"></span><br><span class="line">binding_keys &#x3D; sys.argv[1:]</span><br><span class="line">if not binding_keys:</span><br><span class="line">    sys.stderr.write(&quot;Usage: %s [binding_key]...\n&quot; % sys.argv[0])</span><br><span class="line">    sys.exit(1)</span><br><span class="line"></span><br><span class="line">for binding_key in binding_keys:</span><br><span class="line">    channel.queue_bind(exchange&#x3D;&#39;topic_logs&#39;,</span><br><span class="line">                       queue&#x3D;queue_name,</span><br><span class="line">                       routing_key&#x3D;binding_key)</span><br><span class="line"></span><br><span class="line">print(&#39; [*] Waiting for logs. To exit press CTRL+C&#39;)</span><br><span class="line"></span><br><span class="line">def callback(ch, method, properties, body):</span><br><span class="line">    print(&quot; [x] %r:%r&quot; % (method.routing_key, body))</span><br><span class="line"></span><br><span class="line">channel.basic_consume(callback,</span><br><span class="line">                      queue&#x3D;queue_name,</span><br><span class="line">                      no_ack&#x3D;True)</span><br><span class="line"></span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure>
<h2 id="基于RabbitMQ的RPC"><a href="#基于RabbitMQ的RPC" class="headerlink" title="基于RabbitMQ的RPC"></a>基于RabbitMQ的RPC</h2><h3 id="Callback-queue-回调队列"><a href="#Callback-queue-回调队列" class="headerlink" title="Callback queue 回调队列"></a>Callback queue 回调队列</h3>一个客户端向服务器发送请求，服务器端处理请求后，将其处理结果保存在一个存储体中。而客户端为了获得处理结果，那么客户在向服务器发送请求时，同时发送一个回调队列地址<code>reply_to</code>。<h3 id="Correlation-id-关联标识"><a href="#Correlation-id-关联标识" class="headerlink" title="Correlation id 关联标识"></a>Correlation id 关联标识</h3>一个客户端可能会发送多个请求给服务器，当服务器处理完后，客户端无法辨别在回调队列中的响应具体和那个请求时对应的。为了处理这种情况，客户端在发送每个请求时，同时会附带一个独有<code>correlation_id</code>属性，这样客户端在回调队列中根据<code>correlation_id</code>字段的值就可以分辨此响应属于哪个请求。</li>
</ul>
<ol>
<li>客户端发送请求：某个应用将请求信息交给客户端，然后客户端发送RPC请求，在发送RPC请求到RPC请求队列时，客户端至少发送带有reply_to以及correlation_id两个属性的信息</li>
<li>服务器端工作流： 等待接受客户端发来RPC请求，当请求出现的时候，服务器从RPC请求队列中取出请求，然后处理后，将响应发送到reply_to指定的回调队列中.</li>
<li>客户端接受处理结果： 客户端等待回调队列中出现响应，当响应出现时，它会根据响应中correlation_id字段的值，将其返回给对应的应用.</li>
</ol>
<h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import pika</span><br><span class="line"></span><br><span class="line"># 建立连接，服务器地址为localhost，可指定ip地址</span><br><span class="line">connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class="line">        host&#x3D;&#39;localhost&#39;))</span><br><span class="line"></span><br><span class="line"># 建立会话</span><br><span class="line">channel &#x3D; connection.channel()</span><br><span class="line"></span><br><span class="line"># 声明RPC请求队列</span><br><span class="line">channel.queue_declare(queue&#x3D;&#39;rpc_queue&#39;)</span><br><span class="line"></span><br><span class="line"># 数据处理方法</span><br><span class="line">def fib(n):</span><br><span class="line">    if n &#x3D;&#x3D; 0:</span><br><span class="line">        return 0</span><br><span class="line">    elif n &#x3D;&#x3D; 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return fib(n-1) + fib(n-2)</span><br><span class="line"></span><br><span class="line"># 对RPC请求队列中的请求进行处理</span><br><span class="line">def on_request(ch, method, props, body):</span><br><span class="line">    n &#x3D; int(body)</span><br><span class="line"></span><br><span class="line">    print(&quot; [.] fib(%s)&quot; % n)</span><br><span class="line"></span><br><span class="line">    # 调用数据处理方法</span><br><span class="line">    response &#x3D; fib(n)</span><br><span class="line"></span><br><span class="line">    # 将处理结果(响应)发送到回调队列</span><br><span class="line">    ch.basic_publish(exchange&#x3D;&#39;&#39;,</span><br><span class="line">                     routing_key&#x3D;props.reply_to,</span><br><span class="line">                     properties&#x3D;pika.BasicProperties(correlation_id &#x3D; \</span><br><span class="line">                                                         props.correlation_id),</span><br><span class="line">                     body&#x3D;str(response))</span><br><span class="line">    ch.basic_ack(delivery_tag &#x3D; method.delivery_tag)</span><br><span class="line"></span><br><span class="line"># 负载均衡，同一时刻发送给该服务器的请求不超过一个</span><br><span class="line">channel.basic_qos(prefetch_count&#x3D;1)</span><br><span class="line"></span><br><span class="line">channel.basic_consume(on_request, queue&#x3D;&#39;rpc_queue&#39;)</span><br><span class="line"></span><br><span class="line">print(&quot; [x] Awaiting RPC requests&quot;)</span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">import pika</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line">class FibonacciRpcClient(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        ”“”</span><br><span class="line">        客户端启动时，创建回调队列，会开启会话用于发送RPC请求以及接受响应</span><br><span class="line">        </span><br><span class="line">        “”“</span><br><span class="line">        </span><br><span class="line">        # 建立连接，指定服务器的ip地址</span><br><span class="line">        self.connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class="line">                host&#x3D;&#39;localhost&#39;))</span><br><span class="line">                </span><br><span class="line">        # 建立一个会话，每个channel代表一个会话任务</span><br><span class="line">        self.channel &#x3D; self.connection.channel()</span><br><span class="line">        </span><br><span class="line">        # 声明回调队列，再次声明的原因是，服务器和客户端可能先后开启，该声明是幂等的，多次声明，但只生效一次</span><br><span class="line">        result &#x3D; self.channel.queue_declare(exclusive&#x3D;True)</span><br><span class="line">        # 将次队列指定为当前客户端的回调队列</span><br><span class="line">        self.callback_queue &#x3D; result.method.queue</span><br><span class="line">        </span><br><span class="line">        # 客户端订阅回调队列，当回调队列中有响应时，调用&#96;on_response&#96;方法对响应进行处理; </span><br><span class="line">        self.channel.basic_consume(self.on_response, no_ack&#x3D;True,</span><br><span class="line">                                   queue&#x3D;self.callback_queue)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 对回调队列中的响应进行处理的函数</span><br><span class="line">    def on_response(self, ch, method, props, body):</span><br><span class="line">        if self.corr_id &#x3D;&#x3D; props.correlation_id:</span><br><span class="line">            self.response &#x3D; body</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 发出RPC请求</span><br><span class="line">    def call(self, n):</span><br><span class="line">    </span><br><span class="line">        # 初始化 response</span><br><span class="line">        self.response &#x3D; None</span><br><span class="line">        </span><br><span class="line">        #生成correlation_id </span><br><span class="line">        self.corr_id &#x3D; str(uuid.uuid4())</span><br><span class="line">        </span><br><span class="line">        # 发送RPC请求内容到RPC请求队列&#96;rpc_queue&#96;，同时发送的还有&#96;reply_to&#96;和&#96;correlation_id&#96;</span><br><span class="line">        self.channel.basic_publish(exchange&#x3D;&#39;&#39;,</span><br><span class="line">                                   routing_key&#x3D;&#39;rpc_queue&#39;,</span><br><span class="line">                                   properties&#x3D;pika.BasicProperties(</span><br><span class="line">                                         reply_to &#x3D; self.callback_queue,</span><br><span class="line">                                         correlation_id &#x3D; self.corr_id,</span><br><span class="line">                                         ),</span><br><span class="line">                                   body&#x3D;str(n))</span><br><span class="line">                                   </span><br><span class="line">        </span><br><span class="line">        while self.response is None:</span><br><span class="line">            self.connection.process_data_events()</span><br><span class="line">        return int(self.response)</span><br><span class="line"></span><br><span class="line"># 建立客户端</span><br><span class="line">fibonacci_rpc &#x3D; FibonacciRpcClient()</span><br><span class="line"></span><br><span class="line"># 发送RPC请求</span><br><span class="line">print(&quot; [x] Requesting fib(30)&quot;)</span><br><span class="line">response &#x3D; fibonacci_rpc.call(30)</span><br><span class="line">print(&quot; [.] Got %r&quot; % response)</span><br></pre></td></tr></table></figure>


<p><a href="http://www.cnblogs.com/yuanchenqi/articles/8507109.html" target="_blank" rel="noopener">原文链接</a></p>
]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>SHELL 获取网卡流量</title>
    <url>/2020/04/20/SHELL-%E8%8E%B7%E5%8F%96%E7%BD%91%E5%8D%A1%E6%B5%81%E9%87%8F/</url>
    <content><![CDATA[<h2 id="SHELL-获取网卡流量"><a href="#SHELL-获取网卡流量" class="headerlink" title="SHELL 获取网卡流量"></a>SHELL 获取网卡流量</h2><h3 id="1-版本一"><a href="#1-版本一" class="headerlink" title="1. 版本一"></a>1. 版本一</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">#使用方法</span><br><span class="line">usage()</span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;useage: $0 ethname intervel&quot;</span><br><span class="line">  exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#网口配置</span><br><span class="line">if [ $# -gt 1 ];then</span><br><span class="line">  ethname&#x3D;$1</span><br><span class="line">  num&#x3D;&#96;ifconfig|grep $&#123;ethname&#125;|wc -l&#96;</span><br><span class="line">  if [ $num -gt 0 ];then</span><br><span class="line">   ethname&#x3D;$1</span><br><span class="line">  else</span><br><span class="line">    echo &quot;Can&#39;t find $ethname,Please Check&quot;</span><br><span class="line">    exit 1</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#时间配置</span><br><span class="line">intervel&#x3D;1</span><br><span class="line">if [ $# -gt 0 ]; then</span><br><span class="line">  interval&#x3D;$2</span><br><span class="line">  test&#x3D;&#96;expr &quot;$interval&quot; \* 0&#96;</span><br><span class="line">  if [ &quot;$test&quot; !&#x3D; &quot;0&quot; ]; then </span><br><span class="line">        echo &quot;Invalid &lt;interval&gt; param &#39;$interval&#39; . It should be a integer number. Usage: $0 ethname intervel&quot;</span><br><span class="line">        exit -1  </span><br><span class="line">  fi</span><br><span class="line">  if [ $interval -lt 1 ]; then</span><br><span class="line">        echo &quot;Invalid &lt;interval&gt; param &#39;$interval&#39; . It should be &gt; 0 (seconds). Usage: $0 ethname intervel&quot;</span><br><span class="line">        exit -1</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#函数判断</span><br><span class="line">if [ $# -ne 2 ]</span><br><span class="line">then</span><br><span class="line"> usage</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;$0 is starting,Device is $1,Intervel is $2&quot;</span><br><span class="line">echo -e &quot;\n&quot;</span><br><span class="line"></span><br><span class="line">typeset Rev old_Rev</span><br><span class="line"></span><br><span class="line">eth&#x3D;$1</span><br><span class="line">intervel&#x3D;$2</span><br><span class="line"></span><br><span class="line">old_Rev&#x3D;&#96;cat &#x2F;proc&#x2F;net&#x2F;dev|grep $eth| awk &#39;&#123;print $1&#125;&#39;| awk -F : &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">old_Send&#x3D;&#96;cat &#x2F;proc&#x2F;net&#x2F;dev|grep $eth|awk &#39;&#123;print $9&#125;&#39;&#96;</span><br><span class="line">#echo &quot;old_Rev is $old_Rev&quot;</span><br><span class="line">#echo &quot;Old_send is $old_Send&quot;</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line"> do</span><br><span class="line"> sleep $intervel</span><br><span class="line"></span><br><span class="line"> Rev&#x3D;&#96;cat &#x2F;proc&#x2F;net&#x2F;dev|grep $eth|awk &#39;&#123;print $1&#125;&#39;|awk -F : &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line"> Send&#x3D;&#96;cat &#x2F;proc&#x2F;net&#x2F;dev|grep $eth|awk &#39;&#123;print $9&#125;&#39;&#96;</span><br><span class="line">#echo &quot;Rev is $Rev&quot;</span><br><span class="line">#echo &quot;Send is $Send&quot;</span><br><span class="line"></span><br><span class="line"> diff_1&#x3D;&#96;awk -v Rev&#x3D;$Rev -v old_Rev&#x3D;$old_Rev -v intervel&#x3D;$intervel &#39;BEGIN&#123;printf &quot;Receive is %6.2f&quot;, ( Rev - old_Rev ) &#x2F; 1024 &#x2F; 1024 &#x2F; intervel * 8&#125;&#39;&#96;</span><br><span class="line"></span><br><span class="line"> diff_2&#x3D;&#96;awk -v Send&#x3D;$Send -v old_Send&#x3D;$old_Send -v intervel&#x3D;$intervel &#39;BEGIN&#123;printf &quot;Send is %6.2f&quot;, ( Send - old_Send ) &#x2F; 1024 &#x2F; 1024 &#x2F; intervel * 8&#125;&#39;&#96; </span><br><span class="line"></span><br><span class="line"> echo &quot;&#96;date +&#39;%Y-%m-%d %H:%M:%S&#39;&#96; Speed: IN $&#123;diff_1&#125; mbps OUT $&#123;diff_2&#125; mbps&quot;</span><br><span class="line"></span><br><span class="line"> old_Rev&#x3D;$Rev</span><br><span class="line"> old_Send&#x3D;$Send</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h3 id="2-版本二"><a href="#2-版本二" class="headerlink" title="2. 版本二"></a>2. 版本二</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#network</span><br><span class="line">#by rocdk890</span><br><span class="line">while : ; do</span><br><span class="line">      time&#x3D;&#96;date +%m&quot;-&quot;%d&quot; &quot;%k&quot;:&quot;%M&#96;</span><br><span class="line">      day&#x3D;&#96;date +%m&quot;-&quot;%d&#96;</span><br><span class="line">      port&#x3D;&#96;ifconfig |grep em|awk &#39;&#123;print $1&#125;&#39;&#96;</span><br><span class="line">      rx_before&#x3D;&#96;ifconfig $port|sed -n &quot;8&quot;p|awk &#39;&#123;print $2&#125;&#39;|cut -c7-&#96;</span><br><span class="line">      tx_before&#x3D;&#96;ifconfig $port|sed -n &quot;8&quot;p|awk &#39;&#123;print $6&#125;&#39;|cut -c7-&#96;</span><br><span class="line">      sleep 2</span><br><span class="line">      rx_after&#x3D;&#96;ifconfig $port|sed -n &quot;8&quot;p|awk &#39;&#123;print $2&#125;&#39;|cut -c7-&#96;</span><br><span class="line">      tx_after&#x3D;&#96;ifconfig $port|sed -n &quot;8&quot;p|awk &#39;&#123;print $6&#125;&#39;|cut -c7-&#96;</span><br><span class="line">      rx_result&#x3D;$[(rx_after-rx_before)&#x2F;256]</span><br><span class="line">      tx_result&#x3D;$[(tx_after-tx_before)&#x2F;256]</span><br><span class="line">      echo &quot;$time Now_In_Speed: &quot;$rx_result&quot;kbps Now_OUt_Speed: &quot;$tx_result&quot;kbps&quot;</span><br><span class="line">      sleep 2</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SHELL</category>
      </categories>
      <tags>
        <tag>SHELL</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ-2使用</title>
    <url>/2020/04/20/RabbitMQ-2%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="RabbitMQ-2"><a href="#RabbitMQ-2" class="headerlink" title="RabbitMQ-2"></a>RabbitMQ-2</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>RabbitMQ：接受消息再传递消息，可以视为一个”邮局”。发送者和接受者通过队列来进行交互，队列的大小可以视为无限的，多个发送者可以发生给一个队列，多个接收者也可以从一个队列中接受消息。</p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p>rabbitmq使用的协议是amqp，用于python的推荐客户端是pika</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pika -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure>
<p>生产者：send.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pika     # 建立一个连接</span><br><span class="line">connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters( &#39;localhost&#39;))  # 连接本地的RabbitMQ服务器</span><br><span class="line">channel &#x3D; connection.channel()      # 获得channel</span><br></pre></td></tr></table></figure>
<p>这里链接的是本机的，如果想要连接其他机器上的服务器，只要填入地址或主机名即可。<br>接下来我们开始发送消息了，注意要确保接受消息的队列是存在的，否则rabbitmq就丢弃掉该消息.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.queue_declare(queue&#x3D;&#39;hello&#39;)    # 在RabbitMQ中创建hello这个队列</span><br><span class="line">channel.basic_publish(exchange&#x3D;&#39;&#39;,      # 使用默认的exchange来发送消息到队列</span><br><span class="line">                  routing_key&#x3D;&#39;hello&#39;,  # 发送到该队列 hello 中</span><br><span class="line">                  body&#x3D;&#39;Hello World!&#39;)  # 消息内容</span><br><span class="line"> connection.close() # 关闭 同时flush</span><br></pre></td></tr></table></figure>
<p>RabbitMQ默认需要1GB的空闲磁盘空间，否则发送会失败。<br>这时已在本地队列hello中存放了一个消息，如果使用 rabbitmqctl list_queues 可看到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello 1</span><br></pre></td></tr></table></figure>
<p>说明有一个hello队列 里面存放了一个消息<br>消费者：receive.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pika</span><br><span class="line">connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters( &#39;localhost&#39;))</span><br><span class="line">channel &#x3D; connection.channel()</span><br></pre></td></tr></table></figure>
<p>还是先链接到服务器，和之前发送时相同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.queue_declare(queue&#x3D;&#39;hello&#39;)  # 此处就是声明了 来确保该队列 hello 存在 可以多次声明 这里主要是为了防止接受程序先运行时出错</span><br><span class="line"></span><br><span class="line">def callback(ch, method, properties, body):  # 用于接收到消息后的回调</span><br><span class="line">    print(&quot; [x] Received %r&quot; % body)</span><br><span class="line"></span><br><span class="line">channel.basic_consume(callback,</span><br><span class="line">                      queue&#x3D;&#39;hello&#39;,  # 收指定队列hello的消息</span><br><span class="line">                      no_ack&#x3D;True)  #在处理完消息后不发送ack给服务器</span><br><span class="line">channel.start_consuming()  # 启动消息接受 这会进入一个死循环</span><br></pre></td></tr></table></figure>
<h2 id="工作队列-任务队列"><a href="#工作队列-任务队列" class="headerlink" title="工作队列(任务队列)"></a>工作队列(任务队列)</h2><p>工作队列是用于分发耗时任务给多个工作进程的。不立即做那些耗费资源的任务（需要等待这些任务完成），而是安排这些任务之后执行。例如我们把task作为message发送到队列里，启动工作进程来接受并最终执行，且可启动多个工作进程来工作。这适用于web应用，即不应在一个http请求的处理窗口内完成复杂任务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">routing_key&#x3D;&#39;task_queue&#39;,</span><br><span class="line">                 body&#x3D;message,</span><br><span class="line">                 properties&#x3D;pika.BasicProperties(</span><br><span class="line">                    delivery_mode &#x3D; 2, # 使得消息持久化</span><br><span class="line">                 ))</span><br></pre></td></tr></table></figure>
<p>分配消息的方式为 轮询 即每个工作进程获得相同的消息数。</p>
<h2 id="消息ack"><a href="#消息ack" class="headerlink" title="消息ack"></a>消息ack</h2><p>如果消息分配给某个工作进程，但是该工作进程未处理完成就崩溃了，可能该消息就丢失了，因为rabbitmq一旦把一个消息分发给工作进程，它就把该消息删掉了。<br>为了预防消息丢失，rabbitmq提供了ack，即工作进程在收到消息并处理后，发送ack给rabbitmq，告知rabbitmq这时候可以把该消息从队列中删除了。如果工作进程挂掉了，rabbitmq没有收到ack，那么会把该消息 重新分发给其他工作进程。不需要设置timeout，即使该任务需要很长时间也可以处理。<br>ack默认是开启的，之前我们的工作进程显示指定了<code>no_ack=True</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.basic_consume(callback, queue&#x3D;&#39;hello&#39;)  # 会启用ack</span><br></pre></td></tr></table></figure>
<p>带ack的callback:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def callback(ch, method, properties, body): </span><br><span class="line">    print &quot; [x] Received %r&quot; % (body,)</span><br><span class="line">    time.sleep( body.count(&#39;.&#39;) )</span><br><span class="line">    print &quot; [x] Done&quot;</span><br><span class="line">    ch.basic_ack(delivery_tag &#x3D; method.delivery_tag)  # 发送ack</span><br></pre></td></tr></table></figure>
<h2 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h2><p>但是，有时RabbitMQ重启了，消息也会丢失。可在创建队列时设置持久化：<br>(队列的性质一旦确定无法改变）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.queue_declare(queue&#x3D;&#39;task_queue&#39;, durable&#x3D;True)</span><br></pre></td></tr></table></figure>
<p>同时在发送消息时也得设置该消息的持久化属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.basic_publish(exchange&#x3D;&#39;&#39;,</span><br><span class="line">routing_key&#x3D;&quot;task_queue&quot;,</span><br><span class="line">body&#x3D;message,</span><br><span class="line">properties&#x3D;pika.BasicProperties(</span><br><span class="line">delivery_mode &#x3D; 2, # make message persistent</span><br><span class="line">))</span><br></pre></td></tr></table></figure>
<p>但是，如果在RabbitMQ刚接收到消息还没来得及存储，消息还是会丢失。同时，RabbitMQ也不是在接受到每个消息都进行存盘操作。如果还需要更完善的保证，需要使用publisher confirm。</p>
<h2 id="公平的消息分发"><a href="#公平的消息分发" class="headerlink" title="公平的消息分发"></a>公平的消息分发</h2><p>轮询模式的消息分发可能并不公平，例如奇数的消息都是繁重任务的话，某些进程则会一直运行繁 重任务。即使某工作进程上有积压的消息未处理，如很多都没发ack，但是RabbitMQ还是会按照顺序发消息给它。可以在接受进程中加设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.basic_qos(prefetch_count&#x3D;1)</span><br></pre></td></tr></table></figure>
<p>告知RabbitMQ，这样在一个工作进程没回发ack情况下是不会再分配消息给它。</p>
<h2 id="群发"><a href="#群发" class="headerlink" title="群发"></a>群发</h2><p>一般情况下，一条消息是发送给一个工作进程，然后完成，有时想把一条消息同时发送给多个进程：</p>
<h3 id="exchange"><a href="#exchange" class="headerlink" title="exchange"></a>exchange</h3><p>发送者是不是直接发送消息到队列中的，事实上发生者根本不知道消息会发送到那个队列，发送者只能把消息发送到exchange里。exchange一方面收生产者的消息，另一方面把他们推送到队列中。所以作为exchange，它需要知道当收到消息时它需要做什么，是应该把它加到一个特殊的队列中还是放到很多的队列中，或者丢弃。exchange有direct、topic、headers、fanout等种类，而群发使用的即fanout。之前在发布消息时，exchange的值为 ‘’ 即使用default exchange。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.exchange_declare(exchange&#x3D;&#39;logs&#39;, type&#x3D;&#39;fanout&#39;)  # 该exchange会把消息发送给所有它知道的队列中</span><br></pre></td></tr></table></figure>
<h3 id="临时队列"><a href="#临时队列" class="headerlink" title="临时队列"></a>临时队列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; channel.queue_declare()  # 创建一个随机队列</span><br><span class="line">result &#x3D; channel.queue_declare(exclusive&#x3D;True)  # 创建一个随机队列，同时在没有接收者连接该队列后则销毁它</span><br><span class="line">queue_name &#x3D; result.method.queue</span><br></pre></td></tr></table></figure>
<p>这样result.method.queue即是队列名称，在发送或接受时即可使用。</p>
<h3 id="绑定exchange和队列"><a href="#绑定exchange和队列" class="headerlink" title="绑定exchange和队列"></a>绑定exchange和队列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.queue_bind(exchange&#x3D;&#39;logs&#39;,</span><br><span class="line">               queue&#x3D;&#39;hello&#39;)</span><br></pre></td></tr></table></figure>
<p>logs在发送消息时给hello也发一份。<br>在发送消息时使用刚刚创建的logs exchange</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.basic_publish(exchange&#x3D;&#39;logs&#39;,</span><br><span class="line">                  routing_key&#x3D;&#39;&#39;,</span><br><span class="line">                  body&#x3D;message)</span><br></pre></td></tr></table></figure>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>之前已经使用过bind，即建立exchange和queue的关系(该队列对来自该exchange的消息有兴趣)bind时可另外指定routing_key选项。</p>
<h2 id="使用direct-exchange"><a href="#使用direct-exchange" class="headerlink" title="使用direct exchange"></a>使用direct exchange</h2><p>将对应routing key的消息发送到绑定相同routing key的队列中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.exchange_declare(exchange&#x3D;&#39;direct_logs&#39;,</span><br><span class="line">                     type&#x3D;&#39;direct&#39;)</span><br></pre></td></tr></table></figure>
<p>发送函数，发布不同severity的消息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.basic_publish(exchange&#x3D;&#39;direct_logs&#39;,</span><br><span class="line">                  routing_key&#x3D;severity,</span><br><span class="line">                  body&#x3D;message)</span><br></pre></td></tr></table></figure>
<h2 id="使用topic-exchange"><a href="#使用topic-exchange" class="headerlink" title="使用topic exchange"></a>使用topic exchange</h2><p>之前使用的direct exchange 只能绑定一个routing key，可以使用这种可以拿.隔开routing key的topic exchange，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;stock.usd.nyse&quot; &quot;nyse.vmw&quot;</span><br></pre></td></tr></table></figure>
<p>和direct exchange一样，在接受者那边绑定的key与发送时指定的routing key相同即可，另外有些特殊的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 代表1个单词</span><br><span class="line">* # 代表0个或多个单词</span><br></pre></td></tr></table></figure>
<p>如果发送者发出的routing key都是3个部分的，如：celerity.colour.species。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Q1: *.orange.* 对应的是中间的colour都为orange的</span><br><span class="line">Q2: *.*.rabbit  对应的是最后部分的species为rabbit的</span><br><span class="line">lazy.# 对应的是第一部分是lazy的</span><br></pre></td></tr></table></figure>
<p>qucik.orange.rabbit Q1 Q2都可接收到，quick.orange.fox 只有Q1能接受到，对于lazy.pink.rabbit虽然匹配到了Q2两次，但是只会发送一次。如果绑定时直接绑定#，则会收到所有的。</p>
<h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>在远程机器上运行一个函数然后获得结果。</p>
<h3 id="１-客户端启动-同时设置一个临时队列用于接受回调，绑定该队列"><a href="#１-客户端启动-同时设置一个临时队列用于接受回调，绑定该队列" class="headerlink" title="１.客户端启动　同时设置一个临时队列用于接受回调，绑定该队列"></a>１.客户端启动　同时设置一个临时队列用于接受回调，绑定该队列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.connection &#x3D; pika.BlockingConnection(pika.ConnectionParameters(</span><br><span class="line">            host&#x3D;&#39;localhost&#39;))</span><br><span class="line">    self.channel &#x3D; self.connection.channel()</span><br><span class="line">    result &#x3D; self.channel.queue_declare(exclusive&#x3D;True)</span><br><span class="line">    self.callback_queue &#x3D; result.method.queue</span><br><span class="line">    self.channel.basic_consume(self.on_response, no_ack&#x3D;True,</span><br><span class="line">                               queue&#x3D;self.callback_queue)</span><br></pre></td></tr></table></figure>
<h3 id="２-客户端发送rpc请求，同时附带reply-to对应回调队列，correlation-id设置为每个请求的唯一id（虽然说可以为每一次RPC请求都创建一个回调队列，但是这样效率不高，如果一个客户端只使用一个队列，则需要使用correlation-id来匹配是哪个请求），之后阻塞在回调队列直到收到回复"><a href="#２-客户端发送rpc请求，同时附带reply-to对应回调队列，correlation-id设置为每个请求的唯一id（虽然说可以为每一次RPC请求都创建一个回调队列，但是这样效率不高，如果一个客户端只使用一个队列，则需要使用correlation-id来匹配是哪个请求），之后阻塞在回调队列直到收到回复" class="headerlink" title="２.客户端发送rpc请求，同时附带reply_to对应回调队列，correlation_id设置为每个请求的唯一id（虽然说可以为每一次RPC请求都创建一个回调队列，但是这样效率不高，如果一个客户端只使用一个队列，则需要使用correlation_id来匹配是哪个请求），之后阻塞在回调队列直到收到回复"></a>２.客户端发送rpc请求，同时附带reply_to对应回调队列，correlation_id设置为每个请求的唯一id（虽然说可以为每一次RPC请求都创建一个回调队列，但是这样效率不高，如果一个客户端只使用一个队列，则需要使用correlation_id来匹配是哪个请求），之后阻塞在回调队列直到收到回复</h3><p>注意: 如果收到了非法的correlation_id直接丢弃即可，因为有这种情况–服务器已经发了响应但是还没发ack就挂了，等一会服务器重启了又会重新处理该任务，又发了一遍相应，但是这时那个请求已经被处理掉了.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.basic_publish(exchange&#x3D;&#39;&#39;,</span><br><span class="line">                       routing_key&#x3D;&#39;rpc_queue&#39;,</span><br><span class="line">                       properties&#x3D;pika.BasicProperties(</span><br><span class="line">                             reply_to &#x3D; self.callback_queue,</span><br><span class="line">                             correlation_id &#x3D; self.corr_id,</span><br><span class="line">                             ),</span><br><span class="line">                       body&#x3D;str(n))  # 发出调用</span><br><span class="line"></span><br><span class="line">while self.response is None:  # 这边就相当于阻塞了</span><br><span class="line">    self.connection.process_data_events()  # 查看回调队列</span><br><span class="line">return int(self.response)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>请求会发送到rpc_queue队列  </li>
<li>RPC服务器从rpc_queue中取出，执行，发送回复<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.basic_consume(on_request, queue&#x3D;&#39;rpc_queue&#39;)  # 绑定 等待请求</span><br><span class="line"></span><br><span class="line"># 处理之后：</span><br><span class="line">ch.basic_publish(exchange&#x3D;&#39;&#39;,</span><br><span class="line">                 routing_key&#x3D;props.reply_to,</span><br><span class="line">                 properties&#x3D;pika.BasicProperties(correlation_id &#x3D; \</span><br><span class="line">                                                     props.correlation_id),</span><br><span class="line">                 body&#x3D;str(response))  # 发送回复到回调队列</span><br><span class="line">ch.basic_ack(delivery_tag &#x3D; method.delivery_tag)  # 发送ack</span><br></pre></td></tr></table></figure></li>
<li>客户端从回调队列中取出数据，检查correlation_id，执行相应操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if self.corr_id &#x3D;&#x3D; props.correlation_id:</span><br><span class="line">        self.response &#x3D; body</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><a href="https://www.cnblogs.com/yuanchenqi/articles/8510585.html" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言实现工厂方法设计模式</title>
    <url>/2020/04/20/Python%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="Python语言实现工厂方法设计模式"><a href="#Python语言实现工厂方法设计模式" class="headerlink" title="Python语言实现工厂方法设计模式"></a>Python语言实现工厂方法设计模式</h2><blockquote>
<p>根据软件设计原则中开放封闭原则的指导思想, 一个类写好后，尽量不要修改里面的内容, 而是通过添加新的继承应对变化, 简单工厂不符合这个设计原则, 所以本篇文章将使用伪代码介绍工厂方法设计模式的使用</p>
</blockquote>
<p>背景: 现公司监控系统报警需要对接企业微信公众号, 由于未认证企业微信推送消息的限制, 默认每天推送条数上限为6000条, 考虑到报警系统多, 规则没有收敛, 接收的人员多, 每天6000条可能不够用, 所以需要创建多个未认证的企业微信账号用于发送报警信息. 我们将以此需求为背景, 演示工厂方法的设计模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class WeChat:</span><br><span class="line"></span><br><span class="line">    def send_message(self, content):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def send_image(self, imageid):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AccountA(WeChat):</span><br><span class="line"></span><br><span class="line">    def send_message(self, content):</span><br><span class="line">        print(&quot;使用企业微信账号A推送信息: &quot;, content)</span><br><span class="line"></span><br><span class="line">    def send_image(self, imageid):</span><br><span class="line">        print(&quot;使用企业微信账号A推送图片: &quot;, imageid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AccountB(WeChat):</span><br><span class="line"></span><br><span class="line">    def send_message(self, content):</span><br><span class="line">        print(&quot;使用企业微信账号B推送信息: &quot;, content)</span><br><span class="line"></span><br><span class="line">    def send_image(self, imageid):</span><br><span class="line">        print(&quot;使用企业微信账号B推送图片: &quot;, imageid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class WeChatFactory:</span><br><span class="line"></span><br><span class="line">    def create_wechat(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AccountAFactory(WeChatFactory):</span><br><span class="line"></span><br><span class="line">    def create_wechat(self):</span><br><span class="line">        return AccountA()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AccountBFactory(WeChatFactory):</span><br><span class="line"></span><br><span class="line">    def create_wechat(self):</span><br><span class="line">        return AccountB()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">	# 实例化账号A</span><br><span class="line">    wechat_factory_a &#x3D; AccountAFactory()</span><br><span class="line">	# 创建账号A的微信对象</span><br><span class="line">    wechat1 &#x3D; wechat_factory_a.create_wechat()</span><br><span class="line">    wechat2 &#x3D; wechat_factory_a.create_wechat()</span><br><span class="line">    wechat3 &#x3D; wechat_factory_a.create_wechat()</span><br><span class="line">	# 使用账号A对象发送信息</span><br><span class="line">    wechat1.send_message(content&#x3D;&quot;haha&quot;)</span><br><span class="line">    wechat2.send_message(content&#x3D;&quot;hehe&quot;)</span><br><span class="line">    wechat3.send_message(content&#x3D;&quot;xixi&quot;)</span><br><span class="line"></span><br><span class="line">	# 实例化账号B</span><br><span class="line">    wechat_factory_b &#x3D; AccountBFactory()</span><br><span class="line">	# 创建账号B的微信对象</span><br><span class="line">    wechat4 &#x3D; wechat_factory_b.create_wechat()</span><br><span class="line">    wechat5 &#x3D; wechat_factory_b.create_wechat()</span><br><span class="line">	# 使用账号B对象发送信息</span><br><span class="line">    wechat4.send_message(content&#x3D;&quot;heihei&quot;)</span><br><span class="line">    wechat5.send_message(content&#x3D;&quot;pupu&quot;)</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用企业微信账号A推送信息:  haha</span><br><span class="line">使用企业微信账号A推送信息:  hehe</span><br><span class="line">使用企业微信账号A推送信息:  xixi</span><br><span class="line">使用企业微信账号B推送信息:  heihei</span><br><span class="line">使用企业微信账号B推送信息:  pupu</span><br></pre></td></tr></table></figure>
<p>如果此时, 两个微信账号都不够用了, 需要增加第三个账号时, 所有的类都不需要修改, 只需创建新的类即可, 符合开放封闭原则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class AccountC(WeChat):</span><br><span class="line"></span><br><span class="line">    def send_message(self, content):</span><br><span class="line">        print(&quot;使用企业微信账号C推送信息: &quot;, content)</span><br><span class="line"></span><br><span class="line">    def send_image(self, imageid):</span><br><span class="line">        print(&quot;使用企业微信账号C推送图片: &quot;, imageid)</span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">class AccountCFactory(WeChatFactory):</span><br><span class="line"></span><br><span class="line">    def create_wechat(self):</span><br><span class="line">        return AccountC()</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>SqlAlchemy玩转MySQL</title>
    <url>/2020/04/20/SqlAlchemy%E7%8E%A9%E8%BD%ACMySQL/</url>
    <content><![CDATA[<h2 id="SqlAlchemy玩转MySQL"><a href="#SqlAlchemy玩转MySQL" class="headerlink" title="SqlAlchemy玩转MySQL"></a>SqlAlchemy玩转MySQL</h2><h3 id="一-ORM框架"><a href="#一-ORM框架" class="headerlink" title="一. ORM框架"></a>一. ORM框架</h3><ol>
<li>Web 开发中，一个重要的组成部分便是数据库了。Web 程序中最常用的莫过于关系型数据库了，也称 SQL 数据库。另外，文档数据库（如 mongodb）、键值对数据库（如 redis）近几年也逐渐在 web 开发中流行起来，我们习惯把这两种数据库称为 NoSQL 数据库。</li>
<li>大多数的关系型数据库引擎（比如 MySQL、Postgres 和 SQLite）都有对应的 Python 包。在这里，我们不直接使用这些数据库引擎提供的 Python 包，而是使用对象关系映射（Object-Relational Mapper, ORM）框架，它将低层的数据库操作指令抽象成高层的面向对象操作。也就是说，如果我们直接使用数据库引擎，我们就要写 SQL 操作语句，但是，如果我们使用了 ORM 框架，我们对诸如表、文档此类的数据库实体就可以简化成对 Python 对象的操作。</li>
<li>Python 中最广泛使用的 ORM 框架是 SQLAlchemy，它是一个很强大的关系型数据库框架，不仅支持高层的 ORM，也支持使用低层的 SQL 操作，另外，它也支持多种数据库引擎，如 MySQL、Postgres 和 SQLite 等。</li>
</ol>
<h3 id="二-介绍"><a href="#二-介绍" class="headerlink" title="二. 介绍"></a>二. 介绍</h3><p>SQLAlchemy是一个基于Python实现的ORM框架。该框架建立在 DB API之上，使用关系对象映射进行数据库操作，简言之：将类和对象转换成SQL，然后使用数据库模块调用DB-API执行SQL并获取执行结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install sqlalchemy</span><br></pre></td></tr></table></figure>
<p>由于sqlalchemy模块依赖于第三方DB-API模块,因此,我们还需要安装数据库模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<h3 id="三-框架基本结构"><a href="#三-框架基本结构" class="headerlink" title="三. 框架基本结构"></a>三. 框架基本结构</h3><p>组成部分：<br>Engine，框架的引擎<br>Connection Pooling ，数据库连接池<br>Dialect，选择连接数据库的DB API种类<br>Schema/Types，架构和类型<br>SQL Exprression Language，SQL表达式语言  </p>
<h3 id="四-连接串"><a href="#四-连接串" class="headerlink" title="四. 连接串"></a>四. 连接串</h3><p>SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：<br>|数据库引擎|URL|<br>|—-|—-|<br>|MySQL-Pytho|mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;|<br>|pymysql| mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;]|<br>|MySQL-Connector|mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;|<br>|Postgres|postgresql://username:password@hostname/database|<br>|SQLite (Unix)|sqlite:////absolute/path/to/database|<br>|SQLite (Windows)|sqlite:///c:/absolute/path/to/database|<br>|cx_Oracle|oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value…]|<br>上面的表格中，username 和 password 表示登录数据库的用户名和密码，hostname 表示 SQL 服务所在的主机，可以是本地主机（localhost）也可以是远程服务器，database 表示要使用的数据库。有一点需要注意的是，SQLite 数据库不需要使用服务器，它使用硬盘上的文件名作为 database。<br><a href="http://docs.sqlalchemy.org/en/latest/dialects/index.html" target="_blank" rel="noopener">更多</a></p>
<h3 id="五-使用"><a href="#五-使用" class="headerlink" title="五. 使用"></a>五. 使用</h3><h4 id="5-1-执行原生SQL"><a href="#5-1-执行原生SQL" class="headerlink" title="5.1 执行原生SQL"></a>5.1 执行原生SQL</h4><ul>
<li>方式一<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">import threading</span><br><span class="line">import sqlalchemy</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">from sqlalchemy.engine.base import Engine</span><br><span class="line"></span><br><span class="line">engine &#x3D; create_engine(</span><br><span class="line">    &quot;mysql+pymysql:&#x2F;&#x2F;zff:zff123@127.0.0.1:3306&#x2F;zff?charset&#x3D;utf8&quot;,</span><br><span class="line">    max_overflow&#x3D;0,  # 超过连接池大小外最多创建的连接</span><br><span class="line">    pool_size&#x3D;5,  # 连接池大小</span><br><span class="line">    pool_timeout&#x3D;30,  # 池中没有线程最多等待的时间，否则报错</span><br><span class="line">    pool_recycle&#x3D;-1  # 多久之后对线程池中的线程进行一次连接的回收(重置)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">def task(arg):</span><br><span class="line">    conn &#x3D; engine.raw_connection()</span><br><span class="line">    cursor &#x3D; conn.cursor()</span><br><span class="line">    cursor.execute(</span><br><span class="line">        &quot;select * from USER &quot;</span><br><span class="line">    )</span><br><span class="line">    result &#x3D; cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in range(20):</span><br><span class="line">    t &#x3D; threading.Thread(target&#x3D;task, args&#x3D;(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure></li>
<li>方式二<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line"></span><br><span class="line">engine &#x3D; create_engine(&quot;mysql+pymysql:&#x2F;&#x2F;zff:zff123@127.0.0.1:3306&#x2F;zff&quot;, max_overflow&#x3D;0, pool_size&#x3D;5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def task(arg):</span><br><span class="line">    conn &#x3D; engine.contextual_connect()</span><br><span class="line">    with conn:</span><br><span class="line">        cur &#x3D; conn.execute(</span><br><span class="line">            &quot;select * from USER &quot;</span><br><span class="line">        )</span><br><span class="line">        result &#x3D; cur.fetchall()</span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in range(20):</span><br><span class="line">    t &#x3D; threading.Thread(target&#x3D;task, args&#x3D;(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure></li>
<li>方式三<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line"></span><br><span class="line">engine &#x3D; create_engine(&quot;mysql+pymysql:&#x2F;&#x2F;zff:zff123@127.0.0.1:3306&#x2F;zff&quot;, max_overflow&#x3D;0, pool_size&#x3D;5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def task(arg):</span><br><span class="line">    cur &#x3D; engine.execute(&quot;select * from USER &quot;)</span><br><span class="line">    # cur &#x3D; engine.execute(&quot;select sleep(10)&quot;)</span><br><span class="line">    result &#x3D; cur.fetchall()</span><br><span class="line">    cur.close()</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in range(20):</span><br><span class="line">    t &#x3D; threading.Thread(target&#x3D;task, args&#x3D;(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>
⚠️ 查看连接 show status like ‘Threads%’;</li>
</ul>
<h3 id="六-ORM使用"><a href="#六-ORM使用" class="headerlink" title="六. ORM使用"></a>六. ORM使用</h3><h4 id="6-1-创建数据库表"><a href="#6-1-创建数据库表" class="headerlink" title="6.1 创建数据库表"></a>6.1 创建数据库表</h4><ul>
<li><p>单表示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">from sqlalchemy.ext.declarative import declarative_base</span><br><span class="line">from sqlalchemy import Column, Integer, String, Text, ForeignKey, DateTime, UniqueConstraint, Index</span><br><span class="line"></span><br><span class="line"># 基类</span><br><span class="line">Base &#x3D; declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Users(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;users&#39;</span><br><span class="line"></span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    name &#x3D; Column(String(32), index&#x3D;True, nullable&#x3D;False)</span><br><span class="line">    email &#x3D; Column(String(32), unique&#x3D;True)</span><br><span class="line">    ctime &#x3D; Column(DateTime, default&#x3D;datetime.datetime.now)</span><br><span class="line">    # extra &#x3D; Column(Text, nullable&#x3D;True)</span><br><span class="line"></span><br><span class="line">    __table_args__ &#x3D; (</span><br><span class="line">        # UniqueConstraint(&#39;id&#39;, &#39;name&#39;, name&#x3D;&#39;uix_id_name&#39;),   # 联合唯一索引</span><br><span class="line">        # Index(&#39;ix_id_name&#39;, &#39;name&#39;, &#39;email&#39;),                 # 联合索引</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def init_db():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    根据类创建数据库表</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    engine &#x3D; create_engine(</span><br><span class="line">        &quot;mysql+pymysql:&#x2F;&#x2F;zff:zff123@127.0.0.1:3306&#x2F;zff?charset&#x3D;utf8&quot;,</span><br><span class="line">        max_overflow&#x3D;0,   # 超过连接池大小外最多创建的连接</span><br><span class="line">        pool_size&#x3D;5,      # 连接池大小</span><br><span class="line">        pool_timeout&#x3D;30,  # 池中没有线程最多等待的时间，否则报错</span><br><span class="line">        pool_recycle&#x3D;-1   # 多久之后对线程池中的线程进行一次连接的回收（重置）</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    Base.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def drop_db():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    根据类删除数据库表</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    engine &#x3D; create_engine(</span><br><span class="line">        &quot;mysql+pymysql:&#x2F;&#x2F;zff:zff123@127.0.0.1:3306&#x2F;zff?charset&#x3D;utf8&quot;,</span><br><span class="line">        max_overflow&#x3D;0,   # 超过连接池大小外最多创建的连接</span><br><span class="line">        pool_size&#x3D;5,      # 连接池大小</span><br><span class="line">        pool_timeout&#x3D;30,  # 池中没有线程最多等待的时间，否则报错</span><br><span class="line">        pool_recycle&#x3D;-1   # 多久之后对线程池中的线程进行一次连接的回收（重置）</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    Base.metadata.drop_all(engine)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    drop_db()</span><br><span class="line">    init_db()</span><br></pre></td></tr></table></figure></li>
<li><p>FK/M2M示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">from sqlalchemy.ext.declarative import declarative_base</span><br><span class="line">from sqlalchemy import Column, Integer, String, Text, ForeignKey, DateTime, UniqueConstraint, Index</span><br><span class="line">from sqlalchemy.orm import relationship</span><br><span class="line"></span><br><span class="line">Base &#x3D; declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ##################### 单表示例 #########################</span><br><span class="line">class Users(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;users&#39;</span><br><span class="line"></span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    name &#x3D; Column(String(32), index&#x3D;True)</span><br><span class="line">    age &#x3D; Column(Integer, default&#x3D;18)</span><br><span class="line">    email &#x3D; Column(String(32), unique&#x3D;True)</span><br><span class="line">    ctime &#x3D; Column(DateTime, default&#x3D;datetime.datetime.now)</span><br><span class="line">    extra &#x3D; Column(Text, nullable&#x3D;True)</span><br><span class="line"></span><br><span class="line">    __table_args__ &#x3D; (</span><br><span class="line">        # UniqueConstraint(&#39;id&#39;, &#39;name&#39;, name&#x3D;&#39;uix_id_name&#39;),</span><br><span class="line">        # Index(&#39;ix_id_name&#39;, &#39;name&#39;, &#39;extra&#39;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Hosts(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;hosts&#39;</span><br><span class="line"></span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    name &#x3D; Column(String(32), index&#x3D;True)</span><br><span class="line">    ctime &#x3D; Column(DateTime, default&#x3D;datetime.datetime.now)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ##################### 一对多示例 #########################</span><br><span class="line">class Hobby(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;hobby&#39;</span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    caption &#x3D; Column(String(50), default&#x3D;&#39;篮球&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Person(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;person&#39;</span><br><span class="line">    nid &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    name &#x3D; Column(String(32), index&#x3D;True, nullable&#x3D;True)</span><br><span class="line">    hobby_id &#x3D; Column(Integer, ForeignKey(&quot;hobby.id&quot;))</span><br><span class="line"></span><br><span class="line">    # 与生成表结构无关，仅用于查询方便</span><br><span class="line">    hobby &#x3D; relationship(&quot;Hobby&quot;, backref&#x3D;&#39;pers&#39;)  # backref 反向查询</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ##################### 多对多示例 #########################</span><br><span class="line"></span><br><span class="line">class Server2Group(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;server2group&#39;</span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True, autoincrement&#x3D;True)  # 自增主键</span><br><span class="line">    server_id &#x3D; Column(Integer, ForeignKey(&#39;server.id&#39;))</span><br><span class="line">    group_id &#x3D; Column(Integer, ForeignKey(&#39;group.id&#39;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Group(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;group&#39;</span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    name &#x3D; Column(String(64), unique&#x3D;True, nullable&#x3D;False)</span><br><span class="line"></span><br><span class="line">    # 与生成表结构无关，仅用于查询方便</span><br><span class="line">    servers &#x3D; relationship(&#39;Server&#39;, secondary&#x3D;&#39;server2group&#39;, backref&#x3D;&#39;groups&#39;)  # secondary: 指定关系表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Server(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;server&#39;</span><br><span class="line"></span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True, autoincrement&#x3D;True)</span><br><span class="line">    hostname &#x3D; Column(String(64), unique&#x3D;True, nullable&#x3D;False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def init_db():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    根据类创建数据库表</span><br><span class="line">    :return: </span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    engine &#x3D; create_engine(</span><br><span class="line">        &quot;mysql+pymysql:&#x2F;&#x2F;zff:zff123@127.0.0.1:3306&#x2F;zff?charset&#x3D;utf8&quot;,</span><br><span class="line">        max_overflow&#x3D;0,  # 超过连接池大小外最多创建的连接</span><br><span class="line">        pool_size&#x3D;5,  # 连接池大小</span><br><span class="line">        pool_timeout&#x3D;30,  # 池中没有线程最多等待的时间，否则报错</span><br><span class="line">        pool_recycle&#x3D;-1  # 多久之后对线程池中的线程进行一次连接的回收（重置）</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    Base.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def drop_db():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    根据类删除数据库表</span><br><span class="line">    :return: </span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    engine &#x3D; create_engine(</span><br><span class="line">        &quot;mysql+pymysql:&#x2F;&#x2F;zff:zff123@127.0.0.1:3306&#x2F;zff?charset&#x3D;utf8&quot;,</span><br><span class="line">        max_overflow&#x3D;0,  # 超过连接池大小外最多创建的连接</span><br><span class="line">        pool_size&#x3D;5,  # 连接池大小</span><br><span class="line">        pool_timeout&#x3D;30,  # 池中没有线程最多等待的时间，否则报错</span><br><span class="line">        pool_recycle&#x3D;-1  # 多久之后对线程池中的线程进行一次连接的回收（重置）</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    Base.metadata.drop_all(engine)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    drop_db()</span><br><span class="line">    init_db()</span><br></pre></td></tr></table></figure>
<p>指定关联列: hobby = relationship(“Hobby”, backref=’pers’,foreign_keys=”Person.hobby_id”)</p>
<h4 id="6-1-ORM基本使用"><a href="#6-1-ORM基本使用" class="headerlink" title="6.1 ORM基本使用"></a>6.1 ORM基本使用</h4></li>
<li><p>初步使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;5&#x2F;14</span><br><span class="line"></span><br><span class="line">from sqlalchemy.orm import sessionmaker</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">from models import *</span><br><span class="line"></span><br><span class="line">engine &#x3D; create_engine(&quot;mysql+pymysql:&#x2F;&#x2F;zff:zff123@127.0.0.1:3306&#x2F;zff?charset&#x3D;utf8&quot;, max_overflow&#x3D;0, pool_size&#x3D;5)</span><br><span class="line">Session &#x3D; sessionmaker(bind&#x3D;engine)</span><br><span class="line"></span><br><span class="line"># 每次执行数据库操作时，都需要创建一个session</span><br><span class="line">session &#x3D; Session()</span><br><span class="line"></span><br><span class="line"># ############# 执行ORM操作 #############</span><br><span class="line">obj1 &#x3D; Users(name&#x3D;&quot;tome&quot;, age&#x3D;19, email&#x3D;&quot;tome163@163.com&quot;)</span><br><span class="line">session.add(obj1)</span><br><span class="line"></span><br><span class="line"># 提交事务</span><br><span class="line">session.commit()</span><br><span class="line"># 关闭session</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></li>
<li><p>原生SQL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sqlalchemy.orm import sessionmaker</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">from sqlalchemy.sql import text</span><br><span class="line">from models import *</span><br><span class="line"></span><br><span class="line">engine &#x3D; create_engine(&quot;mysql+pymysql:&#x2F;&#x2F;zff:zff123@127.0.0.1:3306&#x2F;zff?charset&#x3D;utf8&quot;, max_overflow&#x3D;0, pool_size&#x3D;5)</span><br><span class="line">Session &#x3D; sessionmaker(bind&#x3D;engine)</span><br><span class="line"></span><br><span class="line">session &#x3D; Session()</span><br><span class="line"></span><br><span class="line"># 查询</span><br><span class="line"># cursor &#x3D; session.execute(&#39;select * from users&#39;)</span><br><span class="line"># result &#x3D; cursor.fetchall()</span><br><span class="line"></span><br><span class="line"># 添加</span><br><span class="line">with engine.connect() as con:</span><br><span class="line">    data &#x3D; (&#123;&#39;name&#39;: &#39;zhangsan&#39;, &#39;age&#39;: 20, &#39;value&#39;: &#39;zhangsan163@163.com&#39;&#125;,</span><br><span class="line">            &#123;&#39;name&#39;: &#39;lisi&#39;, &#39;age&#39;: 20, &#39;value&#39;: &#39;li163@163.com&#39;&#125;)</span><br><span class="line">    statement &#x3D; text(&quot;&quot;&quot;insert into users(name,age,email) values(:name,:age,:value)&quot;&quot;&quot;)</span><br><span class="line">    for line in data:</span><br><span class="line">        cursor &#x3D; con.execute(statement, **line)</span><br><span class="line"></span><br><span class="line">print(cursor.lastrowid)</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></li>
<li><p>基本增删改查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sqlalchemy.orm import sessionmaker</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">from sqlalchemy.sql import text</span><br><span class="line">from models import *</span><br><span class="line"></span><br><span class="line">engine &#x3D; create_engine(&quot;mysql+pymysql:&#x2F;&#x2F;zff:zff123@127.0.0.1:3306&#x2F;zff?charset&#x3D;utf8&quot;, max_overflow&#x3D;0, pool_size&#x3D;5)</span><br><span class="line">Session &#x3D; sessionmaker(bind&#x3D;engine)</span><br><span class="line"></span><br><span class="line">session &#x3D; Session()</span><br><span class="line"></span><br><span class="line"># 1. ################ 添加 ################</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">obj1 &#x3D; Users(name&#x3D;&quot;jack&quot;, age&#x3D;19, email&#x3D;&quot;jak163@163.com&quot;)</span><br><span class="line">session.add(obj1)</span><br><span class="line"></span><br><span class="line">session.add_all([</span><br><span class="line">    Users(name&#x3D;&quot;wang&quot;, age&#x3D;19, email&#x3D;&quot;wang163@163.com&quot;),</span><br><span class="line">    Users(name&#x3D;&quot;lucy&quot;, age&#x3D;19, email&#x3D;&quot;lucy@163.com&quot;),</span><br><span class="line">    Hosts(name&#x3D;&quot;jav-pingtai03br-p002.gru1.blue.net&quot;),</span><br><span class="line">])</span><br><span class="line">session.commit()</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 2. ################ 删除 ################</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">session.query(Users).filter(Users.id &gt; 2).delete()</span><br><span class="line">session.commit()</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 3. ################ 修改 ################</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">session.query(Users).filter(Users.id &gt; 0).update(&#123;&quot;name&quot; : &quot;shuke&quot;&#125;)</span><br><span class="line">session.query(Users).filter(Users.id &gt; 0).update(&#123;Users.name: Users.name + &quot;163&quot;&#125;, synchronize_session&#x3D;False)</span><br><span class="line">session.query(Users).filter(Users.id &gt; 0).update(&#123;&quot;age&quot;: Users.age + 1&#125;, synchronize_session&#x3D;&quot;evaluate&quot;)</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line"># sqlalchemy 利用 session 执行 delete 时有一个 synchronize_session 参数用来说明 session 删除对象时需要执行的策略，共三个选项：</span><br><span class="line">1. False</span><br><span class="line">不同步 session，如果被删除的 objects 已经在 session 中存在，在 session commit 或者 expire_all 之前，这些被删除的对象都存在 session 中。</span><br><span class="line">不同步可能会导致获取被删除 objects 时出错。</span><br><span class="line"></span><br><span class="line"># 2. fetch</span><br><span class="line">删除之前从 db 中匹配被删除的对象并保存在 session 中，然后再从 session 中删除，这样做是为了让 session 的对象管理 identity_map 得知被删除的对象究竟是哪些以便更新引用关系。</span><br><span class="line"></span><br><span class="line"># 3. evaluate</span><br><span class="line"># 默认值。根据当前的 query criteria 扫描 session 中的 objects，如果不能正确执行则抛出错误，这句话也可以理解为，如果 session 中原本就没有这些被删除的 objects，扫描当然不会发生匹配，相当于匹配未正确执行。</span><br><span class="line">注意这里报错只会在特定 query criteria 时报错，比如 in 操作。</span><br><span class="line"></span><br><span class="line">session.query(Users).filter(Users.id.in_([1,2,3])).delete()</span><br><span class="line">sqlalchemy.exc.InvalidRequestError: Could not evaluate current criteria in Python. Specify &#39;fetch&#39; or False for the synchronize_session parameter.</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 3. ################ 查询 ################</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">r1 &#x3D; session.query(Users).all()</span><br><span class="line">r2 &#x3D; session.query(Users.name.label(&#39;username&#39;), Users.age).all()   # 别名</span><br><span class="line">r3 &#x3D; session.query(Users).filter(Users.name &#x3D;&#x3D; &quot;shuke&quot;).all()</span><br><span class="line">r4 &#x3D; session.query(Users).filter_by(name&#x3D;&#39;shuke&#39;).all()</span><br><span class="line">r5 &#x3D; session.query(Users).filter_by(name&#x3D;&#39;shuke&#39;).first()</span><br><span class="line">r6 &#x3D; session.query(Users).filter(text(&quot;id&lt;:value and name&#x3D;:name&quot;)).params(value&#x3D;2, name&#x3D;&#39;shuke&#39;).order_by(Users.id).all()</span><br><span class="line">r7 &#x3D; session.query(Users).from_statement(text(&quot;SELECT * FROM users where name&#x3D;:name&quot;)).params(name&#x3D;&#39;shuke&#39;).all()</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># filter和filter_by的区别</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">filter_by用于简单的列名查询，如：</span><br><span class="line">db.users.filter_by(name&#x3D;&#39;Joe&#39;)</span><br><span class="line"></span><br><span class="line">filter对于上面的代码可以这样写：</span><br><span class="line">db.users.filter(db.users.name &#x3D;&#x3D; &#39;Joe&#39;)</span><br><span class="line"></span><br><span class="line">对于复杂的查询使用filter，如：</span><br><span class="line">db.users.filter(or_(db.users.name &#x3D;&#x3D; &#39;Ryan&#39;, db.users.country &#x3D;&#x3D; &#39;England&#39;))</span><br><span class="line"></span><br><span class="line">注意: filter_by使用的是赋值 &#x3D;, 而filter使用的是判断 &#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">另外：查询时使用like这样写： items &#x3D; session.query.filter(Users.name &#x3D;&#x3D; current_user, Users.title.like(&#39;%&#39; + keyword + &#39;%&#39;)).all()</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></li>
<li><p>常用操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 条件</span><br><span class="line">ret &#x3D; session.query(Users).filter_by(name&#x3D;&#39;shuke&#39;).all()</span><br><span class="line">ret &#x3D; session.query(Users).filter(Users.id &gt; 1, Users.name &#x3D;&#x3D; &#39;eric&#39;).all()</span><br><span class="line">ret &#x3D; session.query(Users).filter(Users.id.between(1, 3), Users.name &#x3D;&#x3D; &#39;eric&#39;).all()</span><br><span class="line">ret &#x3D; session.query(Users).filter(Users.id.in_([1, 3, 4])).all()</span><br><span class="line">ret &#x3D; session.query(Users).filter(~Users.id.in_([1, 3, 4])).all()</span><br><span class="line">ret &#x3D; session.query(Users).filter(Users.id.in_(session.query(Users.id).filter_by(name&#x3D;&#39;eric&#39;))).all()</span><br><span class="line"></span><br><span class="line"># 条件 AND &#x2F; OR</span><br><span class="line">from sqlalchemy import and_, or_</span><br><span class="line"></span><br><span class="line">ret &#x3D; session.query(Users).filter(and_(Users.id &gt; 3, Users.name &#x3D;&#x3D; &#39;eric&#39;)).all()</span><br><span class="line">ret &#x3D; session.query(Users).filter(or_(Users.id &lt; 3, Users.name &#x3D;&#x3D; &#39;shuke&#39;)).all()</span><br><span class="line">ret &#x3D; session.query(Users).filter(</span><br><span class="line">    or_(</span><br><span class="line">        Users.id &lt; 2,</span><br><span class="line">        and_(Users.name &#x3D;&#x3D; &#39;eric&#39;, Users.id &gt; 3),</span><br><span class="line">        Users.extra !&#x3D; &quot;&quot;</span><br><span class="line">    )).all()</span><br><span class="line"></span><br><span class="line"># 通配符</span><br><span class="line">ret &#x3D; session.query(Users).filter(Users.name.like(&#39;e%&#39;)).all()</span><br><span class="line">ret &#x3D; session.query(Users).filter(~Users.name.like(&#39;e%&#39;)).all()  # 取反</span><br><span class="line"></span><br><span class="line"># 限制</span><br><span class="line">ret &#x3D; session.query(Users)[1:2]  # limit</span><br><span class="line"></span><br><span class="line"># 排序</span><br><span class="line">ret &#x3D; session.query(Users).order_by(Users.name.desc()).all()  # 按降序排列</span><br><span class="line">ret &#x3D; session.query(Users).order_by(Users.name.desc(), Users.id.asc()).all()  # 根据name按降序排列，再根据id升序排列</span><br><span class="line"></span><br><span class="line"># 分组</span><br><span class="line">from sqlalchemy.sql import func</span><br><span class="line"></span><br><span class="line">ret &#x3D; session.query(Users).group_by(Users.extra).all()</span><br><span class="line">ret &#x3D; session.query(</span><br><span class="line">    func.max(Users.id),</span><br><span class="line">    func.sum(Users.id),</span><br><span class="line">    func.min(Users.id)).group_by(Users.name).all()</span><br><span class="line"></span><br><span class="line">ret &#x3D; session.query(</span><br><span class="line">    func.max(Users.id),</span><br><span class="line">    func.sum(Users.id),</span><br><span class="line">    func.min(Users.id)).group_by(Users.name).having(func.min(Users.id) &gt; 2).all()</span><br><span class="line"></span><br><span class="line"># 连表查询</span><br><span class="line">默认是innerjoin</span><br><span class="line"># 直接让两个表联合。这里join默认是innerjoin，这里没有写他们的对应关系，它们在内部自己找。</span><br><span class="line"># 它是怎么找的呢，在创建表的时候，有类型是foreignkey，是根据它来找的。</span><br><span class="line">ret &#x3D; session.query(Person).join(Favor).all()</span><br><span class="line">相当于sql语句,两个表通过on，来关联</span><br><span class="line"></span><br><span class="line">a.  查看sql</span><br><span class="line">sql &#x3D; session.query(Person).join(Favor)</span><br><span class="line">print(sql)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">inner join打印sql，只打印person表所有字段信息，不打印favor表</span><br><span class="line">SELECT person.nid AS person_nid, person.name AS person_name, person.favor_id AS person_favor_id</span><br><span class="line">FROM person JOIN favor ON favor.nid &#x3D; person.favor_id</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">b. isouter&#x3D;True即left join</span><br><span class="line">ret1 &#x3D; session.query(Person).join(Favor,isouter&#x3D;True).all()</span><br><span class="line">sql1 &#x3D; session.query(Person).join(Favor,isouter&#x3D;True)</span><br><span class="line">print(sql1)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">打印sql，只打印person表所有字段的信息，但是没有打印favor表</span><br><span class="line">SELECT person.nid AS person_nid, person.name AS person_name, person.favor_id AS person_favor_id</span><br><span class="line">FROM person LEFT OUTER JOIN favor ON favor.nid &#x3D; person.favor_id</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">c. 两张表的信息都打印出来</span><br><span class="line">ret2 &#x3D; session.query(Person, Favor).join(Favor, isouter&#x3D;True).all()</span><br><span class="line">print(ret2)</span><br><span class="line">sql2 &#x3D; session.query(Person, Favor).join(Favor, isouter&#x3D;True)</span><br><span class="line">print(sql2)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">left join,打印结果：打印person和favor两张表的所有字段。</span><br><span class="line">[(&lt;__main__.Person object at 0x0000000003B34FD0&gt;, 1-white), (&lt;__main__.Person object at 0x0000000003B69BE0&gt;, 2-blue),</span><br><span class="line">(&lt;__main__.Person object at 0x0000000003B69C50&gt;, 2-blue)]</span><br><span class="line"></span><br><span class="line">left join,打印sql：打印person和favor两张表的所有字段。</span><br><span class="line">SELECT person.nid AS person_nid, person.name AS person_name, person.favor_id AS person_favor_id,</span><br><span class="line">favor.nid AS favor_nid, favor.caption AS favor_caption</span><br><span class="line">FROM person LEFT OUTER JOIN favor ON favor.nid &#x3D; person.favor_id</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">d. 联表，只打印某些字段</span><br><span class="line">ret3 &#x3D; session.query(Person.name,Favor.caption).join(Favor,isouter&#x3D;True).all()</span><br><span class="line">print(ret3)</span><br><span class="line">sql3 &#x3D; session.query(Person.name,Favor.caption).join(Favor,isouter&#x3D;True)</span><br><span class="line">print(sql3)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">left join,打印结果：某些指定字段值</span><br><span class="line">[(&#39;qiaomei0&#39;, &#39;white&#39;), (&#39;qiaomei1&#39;, &#39;blue&#39;), (&#39;qiaomei2&#39;, &#39;blue&#39;)]</span><br><span class="line">left join,打印sql：某些指定字段值</span><br><span class="line">SELECT person.name AS person_name, favor.caption AS favor_caption</span><br><span class="line">FROM person LEFT OUTER JOIN favor ON favor.nid &#x3D; person.favor_id</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># 关联子查询</span><br><span class="line">subqry &#x3D; session.query(func.count(Server.id).label(&quot;sid&quot;)).filter(Server.id &#x3D;&#x3D; Group.id).correlate(Group).as_scalar()</span><br><span class="line">result &#x3D; session.query(Group.name, subqry)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">SELECT &#96;group&#96;.name AS group_name, (SELECT count(server.id) AS sid </span><br><span class="line">FROM server </span><br><span class="line">WHERE server.id &#x3D; &#96;group&#96;.id) AS anon_1 </span><br><span class="line">FROM &#96;group&#96;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 组合</span><br><span class="line">q1 &#x3D; session.query(Users.name).filter(Users.id &gt; 2)</span><br><span class="line">q2 &#x3D; session.query(Favor.caption).filter(Favor.nid &lt; 2)</span><br><span class="line">ret &#x3D; q1.union(q2).all()</span><br><span class="line"></span><br><span class="line">q1 &#x3D; session.query(Users.name).filter(Users.id &gt; 2)</span><br><span class="line">q2 &#x3D; session.query(Favor.caption).filter(Favor.nid &lt; 2)</span><br><span class="line">ret &#x3D; q1.union_all(q2).all()</span><br></pre></td></tr></table></figure>
</li>
<li><p>联表查询(一对多,基于relationship操作ForeignKey)</p>
</li>
</ul>
<ol>
<li>正向查询<br>多对一，多的那端开始查，也就是foreignkey写在哪里，从哪里查。<br>使用上面的方法非常麻烦，我们用更高效的方法。<br>只要在表里加上这一句话：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">favor &#x3D; relationship(&quot;Favor&quot;, backref&#x3D;&#39;pers&#39;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;person&#39;</span><br><span class="line">    nid &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    name &#x3D; Column(String(32), index&#x3D;True, nullable&#x3D;True)</span><br><span class="line">    favor_id &#x3D; Column(Integer, ForeignKey(&quot;favor.nid&quot;))</span><br><span class="line">    # 与生成表结构无关，仅用于查询方便</span><br><span class="line">    favor &#x3D; relationship(&quot;Favor&quot;, backref&#x3D;&#39;pers&#39;)</span><br><span class="line"> </span><br><span class="line">    # obj代指的是Person表的每一行数据</span><br><span class="line">    # obj.favor代指favor对象，obj.favor.nid就拿到了Person关联的favor对象的id。</span><br><span class="line">    # 所以你不用做联表，它内部帮你做联表。</span><br><span class="line">ret &#x3D; session.query(Person).all()</span><br><span class="line">for obj in ret:     # 每个obj就是一行数据。</span><br><span class="line"> </span><br><span class="line">    print(obj.nid,obj.name,obj.favor_id,obj.favor,obj.favor.nid,obj.favor.caption)</span><br></pre></td></tr></table></figure></li>
<li>反向查询<br>多对一，从一的那端开始查，也就是从没写foreignkey的表里反查。<br>多对一，从一的那端反查。<br>Person和Favor是多对一，假如查询喜欢蓝色的所有人。Favor的caption为blue的所有对应的Person</li>
</ol>
<p>传统方式，反向查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ret3 &#x3D; session.query(Person.name,Favor.caption).join(Favor,isouter&#x3D;True).filter(Favor.caption &#x3D;&#x3D; &#39;blue&#39;).all()</span><br></pre></td></tr></table></figure>
<p>Person表里，写了backref=’pers’,就相当于在favor表里加了个字段pers,实际是不存在的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">favor &#x3D; relationship(&quot;Favor&quot;, backref&#x3D;&#39;pers&#39;)</span><br></pre></td></tr></table></figure>
<p>如下: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;person&#39;</span><br><span class="line">    nid &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    name &#x3D; Column(String(32), index&#x3D;True, nullable&#x3D;True)</span><br><span class="line">    favor_id &#x3D; Column(Integer, ForeignKey(&quot;favor.nid&quot;))</span><br><span class="line">    # 与生成表结构无关，仅用于查询方便</span><br><span class="line">    favor &#x3D; relationship(&quot;Favor&quot;, backref&#x3D;&#39;pers&#39;)</span><br><span class="line"> </span><br><span class="line">class Favor(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;favor&#39;</span><br><span class="line">    nid &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    caption &#x3D; Column(String(50), default&#x3D;&#39;red&#39;, unique&#x3D;True)</span><br><span class="line">    # Person表里写的：backref&#x3D;&#39;pers&#39;,相当于在这里加上字段pers。只是用于查询，不会修改表结构。</span><br><span class="line">    # pers &#x3D; 。。。。。。。。</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;%s-%s&quot; %(self.nid, self.caption)</span><br></pre></td></tr></table></figure>
<p>你可以直接通过Favor对象的pers字段找到跟这个颜色关联的所有person,在数据库里没有真实的字段对应的，只是帮你生成sql语句而已。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 新方式，反向查询</span><br><span class="line">obj &#x3D; session.query(Favor).filter(Favor.caption&#x3D;&#x3D;&#39;blue&#39;).first()    # 先找到caption为blue的Favor对象</span><br><span class="line">print(obj.nid)</span><br><span class="line">print(obj.caption)</span><br><span class="line">print(obj.pers)</span><br><span class="line"> </span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">打印结果：</span><br><span class="line">2</span><br><span class="line">blue</span><br><span class="line">[&lt;__main__.Person object at 0x0000000003B5BBE0&gt;, &lt;__main__.Person object at 0x0000000003B5BC50&gt;]</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>
<p>Foreignkey(一对多总结)<br>Foreignkey和relationship要成对写在一个表里。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;person&#39;</span><br><span class="line">    nid &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    name &#x3D; Column(String(32), index&#x3D;True, nullable&#x3D;True)</span><br><span class="line">    favor_id &#x3D; Column(Integer, ForeignKey(&quot;favor.nid&quot;))</span><br><span class="line">    # 与生成表结构无关，仅用于查询方便</span><br><span class="line">    favor &#x3D; relationship(&quot;Favor&quot;, backref&#x3D;&#39;pers&#39;)</span><br><span class="line">&#96;&#96;&#96;    </span><br><span class="line">Person对Favor 是多对一的关系，foreignkey加在了多的那端(Person表)</span><br><span class="line">Person对象.favor.favor的字段：叫做正向查找</span><br><span class="line">Favor对象.pers.person的字段：反向查找</span><br><span class="line"></span><br><span class="line">- M2M(基于relationship的m2m关系)</span><br></pre></td></tr></table></figure>
<p>import time<br>import threading</p>
<p>from sqlalchemy.ext.declarative import declarative_base<br>from sqlalchemy import Column, Integer, String, ForeignKey, UniqueConstraint, Index<br>from sqlalchemy.orm import sessionmaker, relationship<br>from sqlalchemy import create_engine<br>from sqlalchemy.sql import text<br>from sqlalchemy.engine.result import ResultProxy<br>from db import Users, Hosts, Hobby, Person, Group, Server, Server2Group</p>
<p>engine = create_engine(“mysql+pymysql://root:<a href="mailto:123@127.0.0.1">123@127.0.0.1</a>:3306/s6?charset=utf8”, max_overflow=0, pool_size=5)<br>Session = sessionmaker(bind=engine)<br>session = Session()</p>
<h1 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h1><p>“””<br>session.add_all([<br>    Server(hostname=’c1.com’),<br>    Server(hostname=’c2.com’),<br>    Group(name=’A组’),<br>    Group(name=’B组’),<br>])<br>session.commit()</p>
<p>s2g = Server2Group(server_id=1, group_id=1)<br>session.add(s2g)<br>session.commit()</p>
<p>gp = Group(name=’C组’)<br>gp.servers = [Server(hostname=’c3.com’),Server(hostname=’c4.com’)]<br>session.add(gp)<br>session.commit()</p>
<p>ser = Server(hostname=’c6.com’)<br>ser.groups = [Group(name=’F组’),Group(name=’G组’)]<br>session.add(ser)<br>session.commit()<br>“””</p>
<h1 id="使用relationship正向查询"><a href="#使用relationship正向查询" class="headerlink" title="使用relationship正向查询"></a>使用relationship正向查询</h1><p>“””<br>v = session.query(Group).first()<br>print(v.name)<br>print(v.servers)<br>“””</p>
<h1 id="使用relationship反向查询"><a href="#使用relationship反向查询" class="headerlink" title="使用relationship反向查询"></a>使用relationship反向查询</h1><p>“””<br>v = session.query(Server).first()<br>print(v.hostname)<br>print(v.groups)<br>“””<br>session.close()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 多线程执行示例</span><br></pre></td></tr></table></figure>
<p>import time<br>import threading<br>from sqlalchemy.ext.declarative import declarative_base<br>from sqlalchemy import Column, Integer, String, ForeignKey, UniqueConstraint, Index<br>from sqlalchemy.orm import sessionmaker, relationship<br>from sqlalchemy import create_engine<br>from db import Users</p>
<p>engine = create_engine(“mysql+pymysql://root:<a href="mailto:123@127.0.0.1">123@127.0.0.1</a>:3306/s6”, max_overflow=0, pool_size=5)<br>Session = sessionmaker(bind=engine)</p>
<p>def task(arg):<br>    session = Session()<br>    obj1 = Users(name=”shuke”)<br>    session.add(obj1)<br>    session.commit()</p>
<p>for i in range(10):<br>    t = threading.Thread(target=task, args=(i,))<br>    t.start()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 基于scoped_session使得线程安全</span><br><span class="line">基于ThreadLocal实现</span><br></pre></td></tr></table></figure>
<p>from sqlalchemy.orm import sessionmaker<br>from sqlalchemy import create_engine<br>from sqlalchemy.orm import scoped_session<br>from models import Users</p>
<p>engine = create_engine(“mysql+pymysql://root:<a href="mailto:123@127.0.0.1">123@127.0.0.1</a>:3306/s6”, max_overflow=0, pool_size=5)<br>Session = sessionmaker(bind=engine)</p>
<p>“””</p>
<h1 id="线程安全，基于本地线程实现每个线程用同一个session"><a href="#线程安全，基于本地线程实现每个线程用同一个session" class="headerlink" title="线程安全，基于本地线程实现每个线程用同一个session"></a>线程安全，基于本地线程实现每个线程用同一个session</h1><h1 id="特殊的：scoped-session中有原来方法的Session中的一下方法："><a href="#特殊的：scoped-session中有原来方法的Session中的一下方法：" class="headerlink" title="特殊的：scoped_session中有原来方法的Session中的一下方法："></a>特殊的：scoped_session中有原来方法的Session中的一下方法：</h1><p>public_methods = (<br>    ‘<strong>contains</strong>‘, ‘<strong>iter</strong>‘, ‘add’, ‘add_all’, ‘begin’, ‘begin_nested’,<br>    ‘close’, ‘commit’, ‘connection’, ‘delete’, ‘execute’, ‘expire’,<br>    ‘expire_all’, ‘expunge’, ‘expunge_all’, ‘flush’, ‘get_bind’,<br>    ‘is_modified’, ‘bulk_save_objects’, ‘bulk_insert_mappings’,<br>    ‘bulk_update_mappings’,<br>    ‘merge’, ‘query’, ‘refresh’, ‘rollback’,<br>    ‘scalar’<br>)</p>
<p>“””<br>session = scoped_session(Session)</p>
<h1 id="执行ORM操作"><a href="#执行ORM操作" class="headerlink" title="############# 执行ORM操作"></a>############# 执行ORM操作</h1><p>obj1 = Users(name=”shuke”)<br>session.add(obj1)</p>
<h1 id="提交事务"><a href="#提交事务" class="headerlink" title="提交事务"></a>提交事务</h1><p>session.commit()</p>
<h1 id="关闭session"><a href="#关闭session" class="headerlink" title="关闭session"></a>关闭session</h1><p>session.close()</p>
<pre><code>

参考资料:
[Flask-SQLAlchemy-武沛齐-博客园](http://www.cnblogs.com/wupeiqi/articles/8259356.html)  
[mysql和SQLAlchemy-博客园](https://www.cnblogs.com/wangqiaomei/p/5721523.html)  
[使用flask-sqlalchemy玩转MySQL | Wing&apos;s Tech Space](https://wing324.github.io/2017/02/25/%E4%BD%BF%E7%94%A8flask-sqlalchemy%E7%8E%A9%E8%BD%ACMySQL/)  
[Flask-Migrate的使用 | Wing&apos;s Tech Space](https://wing324.github.io/2017/02/26/Flask-Migrate%E7%9A%84%E4%BD%BF%E7%94%A8/)





























</code></pre>]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger介绍</title>
    <url>/2020/04/20/Swagger%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="Swagger介绍"><a href="#Swagger介绍" class="headerlink" title="Swagger介绍"></a>Swagger介绍</h2><blockquote>
<p>Swagger是一种REST APIs的简单但强大的表示方式，标准的，语言无关，这种表示方式不但人可读，而且机器可读。可以作为REST APIs的交互式文档，也可以作为REST APIs的形式化的接口描述，生成客户端和服务端的代码。<br> <a href="https://swagger.io/" target="_blank" rel="noopener">官网</a><br> <a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="noopener">GitHub - swagger-api/swagger-ui</a>)<br> <a href="https://github.com/swagger-api/swagger-editor" target="_blank" rel="noopener">GitHub - swagger-api/swagger-editor: Swagger Editor</a><br> <a href="https://github.com/Swagger2Markup/swagger2markup" target="_blank" rel="noopener">GitHub - Swagger2Markup/swagger2markup: Swagger2Markup</a>  </p>
</blockquote>
<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>在没有产品经理或者项目经理的情况下，对于前端和后端打交道来说，无非就是对接口的争争吵吵，字段多多少少的事。大多时候前端都喜欢直接使用后端提供的接口，而后端有时候却不知道前端到底要什么数据，就这样，Swagger这样的神器被我找到了，对于Swagger高级的应用，比如集成到IDE中自动生成文档,支持GO/python/Java等多种语言的IDE集成环境!</p>
<h3 id="2-Swagger-UI和Swagger-Editor"><a href="#2-Swagger-UI和Swagger-Editor" class="headerlink" title="2. Swagger UI和Swagger Editor"></a>2. Swagger UI和Swagger Editor</h3><ol>
<li>swagger ui是一个API在线文档生成和测试的利器,目前发现最好用的。</li>
</ol>
<ul>
<li>支持API自动生成同步的在线文档</li>
<li>这些文档可用于项目内部API审核</li>
<li>方便测试人员了解API</li>
<li>这些文档可作为客户产品文档的一部分进行发布</li>
<li>支持API规范生成代码，生成的客户端和服务器端骨架代码可以加速开发和测试速度</li>
</ul>
<ol start="2">
<li>使用Swagger Editor编写API文档</li>
</ol>
<ul>
<li>Swagger Editor上的是基于yaml/JSON的语法</li>
</ul>
<h3 id="3-为什么选择Swagger"><a href="#3-为什么选择Swagger" class="headerlink" title="3. 为什么选择Swagger"></a>3. 为什么选择Swagger</h3><ol>
<li>使用Swagger UI生成的界面比Javadoc生成的界面美观</li>
<li>swagger可以实时同步API文档(代码修改后，文档同步修改)</li>
<li>swagger解析速度快，效率高(使用轻量级数据交换格式JSON)</li>
<li>对现有SpringMVC工程支持友好</li>
<li>Swagger可以充当前后端交流的重要桥梁，方便快捷。很实用。</li>
<li>Swagger项目允许你生产，显示和消费你自己的RESTful服务。不需要代理和第三方服务。是一个依赖自由的资源集合，它能通过Swagger-API动态的生成漂亮的文档和沙盒,因为Swagger-UI没有依赖，你可以把他部署到任何服务器环境或者是你自己的机器</li>
</ol>
<h3 id="4-Swagger组件介绍"><a href="#4-Swagger组件介绍" class="headerlink" title="4. Swagger组件介绍"></a>4. Swagger组件介绍</h3><ol>
<li>部署安装略,可自行在github中查找,建议使用Docker方式安装部署,简单方便;</li>
<li>Swagger生态工具组件较多,本文主要介绍Swagger-Editor以及Swagger-UI的使用,Editor用于生成各语言客户端/服务端的依赖文件,UI部分主要针对客户端工具生成的swagger.json或swagger.yml文件进行接口的查看和接口测试;</li>
<li>Swagger也有支持生成MarkDown文档格式的组件(Swagger2Markup);<br>PS: Swgger UI的站点域名要和发送请求的域名一样,不然浏览器会报跨域错误。</li>
<li>示例Demo<br><a href="http://10.21.26.240:81/" target="_blank" rel="noopener">Swagger Editor</a><br><a href="http://10.21.26.240" target="_blank" rel="noopener">Swagger UI</a>  </li>
</ol>
<h3 id="5-Swagger-Editor使用说明"><a href="#5-Swagger-Editor使用说明" class="headerlink" title="5. Swagger Editor使用说明"></a>5. Swagger Editor使用说明</h3><h4 id="5-1-我们可以在Swagger-Editor中编辑swagger-json-swagger-yaml文件-编写项目的API-编写完成后下载文件-通过Swagger-UI进行展示和调试相关操作"><a href="#5-1-我们可以在Swagger-Editor中编辑swagger-json-swagger-yaml文件-编写项目的API-编写完成后下载文件-通过Swagger-UI进行展示和调试相关操作" class="headerlink" title="5.1 我们可以在Swagger Editor中编辑swagger.json/swagger.yaml文件,编写项目的API,编写完成后下载文件,通过Swagger UI进行展示和调试相关操作;"></a>5.1 我们可以在Swagger Editor中编辑swagger.json/swagger.yaml文件,编写项目的API,编写完成后下载文件,通过Swagger UI进行展示和调试相关操作;</h4><p>Swagger API语法说明:   <a href="https://huangwenchao.gitbooks.io/swagger/content/" target="_blank" rel="noopener">参考-Swagger从入门到精通</a>  </p>
<h4 id="5-2-如何下载文件"><a href="#5-2-如何下载文件" class="headerlink" title="5.2 如何下载文件?"></a>5.2 如何下载文件?</h4><p><img src="https://note.youdao.com/yws/api/personal/file/WEB1525428cb3824945193555edd9a8dc3b?method=download&shareKey=84d50c122964b88eda3ec345c896515d" alt="Swagger-json/Swagger-yaml">  </p>
<h4 id="5-3-下载CLient包"><a href="#5-3-下载CLient包" class="headerlink" title="5.3 下载CLient包?"></a>5.3 下载CLient包?</h4><p><img src="https://note.youdao.com/yws/api/personal/file/WEBbb49e77b2635fcf8fd33179488526763?method=download&shareKey=a5191b45239cdf1c76c23727074e0c4c" alt="Swagger-cleint">  </p>
<h3 id="6-Swagger-UI"><a href="#6-Swagger-UI" class="headerlink" title="6. Swagger UI"></a>6. Swagger UI</h3><p>主要用于展示Swagger-json/Swagger-yaml文件内容<br><img src="https://note.youdao.com/yws/api/personal/file/WEBabf5c04995f32e14e0092062760de81a?method=download&shareKey=f725621241eb4e9bb7ab95d5b5f73318" alt="Web接口展示"><br><img src="https://note.youdao.com/yws/api/personal/file/WEB5cdc68f7e2d3f84f766a18c34adf2e94?method=download&shareKey=41b341528ab6e9d0bbf981adcbb79c6a" alt="Web接口测试">  </p>
]]></content>
      <categories>
        <category>swagger</category>
      </categories>
      <tags>
        <tag>swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>Web框架本质</title>
    <url>/2020/04/20/Web%E6%A1%86%E6%9E%B6%E6%9C%AC%E8%B4%A8/</url>
    <content><![CDATA[<h2 id="Web框架本质"><a href="#Web框架本质" class="headerlink" title="Web框架本质"></a>Web框架本质</h2><p>众所周知，对于所有的Web应用，本质上其实就是一个socket服务端，用户的浏览器其实就是一个socket客户端。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;4&#x2F;22</span><br><span class="line"></span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def handle_request(client):</span><br><span class="line">    # 获取客户端发送的数据</span><br><span class="line">    buf &#x3D; client.recv(1024)</span><br><span class="line">    # 回复客户端的请求</span><br><span class="line">    client.send(b&quot;HTTP&#x2F;1.1 200 OK\r\n\r\n&quot;)</span><br><span class="line">    client.send(b&quot;Hello, shuke&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 创建socket对象</span><br><span class="line">    sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.bind((&#39;localhost&#39;, 9000))</span><br><span class="line">    sock.listen(5)</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        # 监听socket，等待请求的到来</span><br><span class="line">        connection, address &#x3D; sock.accept()</span><br><span class="line">        handle_request(connection)</span><br><span class="line">        # 关闭连接</span><br><span class="line">        connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">$ curl http:&#x2F;&#x2F;localhost:9000</span><br><span class="line">Hello, shuke</span><br></pre></td></tr></table></figure>
<p>上述通过socket来实现了其本质，而对于真实开发中的python web程序来说，一般会分为两部分：服务器程序和应用程序。服务器程序负责对socket服务器进行封装，并在请求到来时，对请求的各种数据进行整理。应用程序则负责具体的逻辑处理。为了方便应用程序的开发，就出现了众多的Web框架，例如：Django、Flask、web.py 等。不同的框架有不同的开发方式，但是无论如何，开发出的应用程序都要和服务器程序配合，才能为用户提供服务。这样，服务器程序就需要为不同的框架提供不同的支持。这样混乱的局面无论对于服务器还是框架，都是不好的。对服务器来说，需要支持各种不同框架，对框架来说，只有支持它的服务器才能被开发出的应用使用。这时候，标准化就变得尤为重要。我们可以设立一个标准，只要服务器程序支持这个标准，框架也支持这个标准，那么他们就可以配合使用。一旦标准确定，双方各自实现。这样，服务器可以支持更多支持标准的框架，框架也可以使用更多支持标准的服务器。</p>
<p>WSGI（Web Server Gateway Interface）是一种规范，它定义了使用python编写的web app与web server之间接口格式，实现web app与web server间的解耦。</p>
<p>python标准库提供的独立WSGI服务器称为wsgiref</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from wsgiref.simple_server import make_server</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def RunServer(environ, start_response):</span><br><span class="line">    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text&#x2F;html&#39;)])</span><br><span class="line">    return [bytes(&#39;&lt;h1&gt;Hello, web!&lt;&#x2F;h1&gt;&#39;, encoding&#x3D;&#39;utf-8&#39;), ]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    httpd &#x3D; make_server(&#39;&#39;, 8000, RunServer)</span><br><span class="line">    print(&quot;Serving HTTP on port 8000...&quot;)</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure>
<h2 id="自定义框架"><a href="#自定义框架" class="headerlink" title="自定义框架"></a>自定义框架</h2><p>一. 框架<br>通过python标准库提供的wsgiref模块开发一个自己的Web框架</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">#coding:utf-8</span><br><span class="line">from wsgiref.simple_server import make_server</span><br><span class="line"> </span><br><span class="line">def index():</span><br><span class="line">    return &#39;index&#39;</span><br><span class="line"> </span><br><span class="line">def login():</span><br><span class="line">    return &#39;login&#39;</span><br><span class="line"> </span><br><span class="line">def routers():</span><br><span class="line">     </span><br><span class="line">    urlpatterns &#x3D; (</span><br><span class="line">        (&#39;&#x2F;index&#x2F;&#39;,index),</span><br><span class="line">        (&#39;&#x2F;login&#x2F;&#39;,login),</span><br><span class="line">    )</span><br><span class="line">     </span><br><span class="line">    return urlpatterns</span><br><span class="line"> </span><br><span class="line">def RunServer(environ, start_response):</span><br><span class="line">    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text&#x2F;html&#39;)])</span><br><span class="line">    url &#x3D; environ[&#39;PATH_INFO&#39;]</span><br><span class="line">    urlpatterns &#x3D; routers()</span><br><span class="line">    func &#x3D; None</span><br><span class="line">    for item in urlpatterns:</span><br><span class="line">        if item[0] &#x3D;&#x3D; url:</span><br><span class="line">            func &#x3D; item[1]</span><br><span class="line">            break</span><br><span class="line">    if func:</span><br><span class="line">        return func()</span><br><span class="line">    else:</span><br><span class="line">        return &#39;404 not found&#39;</span><br><span class="line">     </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    httpd &#x3D; make_server(&#39;&#39;, 8000, RunServer)</span><br><span class="line">    print &quot;Serving HTTP on port 8000...&quot;</span><br><span class="line">    httpd.serve_forever()</span><br><span class="line">&#96;&#96;&#96;    </span><br><span class="line">2、模板引擎</span><br><span class="line"></span><br><span class="line">在上一步骤中，对于所有的login、index均返回给用户浏览器一个简单的字符串，在现实的Web请求中一般会返回一个复杂的符合HTML规则的字符串，所以我们一般将要返回给用户的HTML写在指定文件中，然后再返回,如：</span><br></pre></td></tr></table></figure>
<h1 id="cat-index-html"><a href="#cat-index-html" class="headerlink" title="cat index.html"></a>cat index.html</h1><!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>
</head>
<body>
    <h1>Index</h1>

</body>
</html>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"># cat login.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"> </span><br><span class="line">from wsgiref.simple_server import make_server</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def index():</span><br><span class="line">    # return &#39;index&#39;</span><br><span class="line">    f &#x3D; open(&#39;index.html&#39;)</span><br><span class="line">    data &#x3D; f.read()</span><br><span class="line">    return data</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def login():</span><br><span class="line">    # return &#39;login&#39;</span><br><span class="line">    f &#x3D; open(&#39;login.html&#39;)</span><br><span class="line">    data &#x3D; f.read()</span><br><span class="line">    return data</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def routers():</span><br><span class="line"> </span><br><span class="line">    urlpatterns &#x3D; (</span><br><span class="line">        (&#39;&#x2F;index&#x2F;&#39;, index),</span><br><span class="line">        (&#39;&#x2F;login&#x2F;&#39;, login),</span><br><span class="line">    )</span><br><span class="line"> </span><br><span class="line">    return urlpatterns</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def run_server(environ, start_response):</span><br><span class="line">    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text&#x2F;html&#39;)])</span><br><span class="line">    url &#x3D; environ[&#39;PATH_INFO&#39;]</span><br><span class="line">    urlpatterns &#x3D; routers()</span><br><span class="line">    func &#x3D; None</span><br><span class="line">    for item in urlpatterns:</span><br><span class="line">        if item[0] &#x3D;&#x3D; url:</span><br><span class="line">            func &#x3D; item[1]</span><br><span class="line">            break</span><br><span class="line">    if func:</span><br><span class="line">        return func()</span><br><span class="line">    else:</span><br><span class="line">        return &#39;404 not found&#39;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    httpd &#x3D; make_server(&#39;&#39;, 8000, run_server)</span><br><span class="line">    print &quot;Serving HTTP on port 8000...&quot;</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure>
对于上述代码，虽然可以返回给用户HTML的内容以现实复杂的页面，但是还是存在问题：如何给用户返回动态内容？
- 自定义一套特殊的语法，进行替换
- 使用开源工具jinja2，遵循其指定语法
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat index.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;% for item in user_list %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"> </span><br><span class="line">from wsgiref.simple_server import make_server</span><br><span class="line">from jinja2 import Template</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def index():</span><br><span class="line">    # return &#39;index&#39;</span><br><span class="line"> </span><br><span class="line">    # template &#x3D; Template(&#39;Hello &#123;&#123; name &#125;&#125;!&#39;)</span><br><span class="line">    # result &#x3D; template.render(name&#x3D;&#39;John Doe&#39;)</span><br><span class="line"> </span><br><span class="line">    f &#x3D; open(&#39;index.html&#39;)</span><br><span class="line">    result &#x3D; f.read()</span><br><span class="line">    template &#x3D; Template(result)</span><br><span class="line">    data &#x3D; template.render(name&#x3D;&#39;John Doe&#39;, user_list&#x3D;[&#39;alex&#39;, &#39;eric&#39;])</span><br><span class="line">    return data.encode(&#39;utf-8&#39;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def login():</span><br><span class="line">    # return &#39;login&#39;</span><br><span class="line">    f &#x3D; open(&#39;login.html&#39;)</span><br><span class="line">    data &#x3D; f.read()</span><br><span class="line">    return data</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def routers():</span><br><span class="line"> </span><br><span class="line">    urlpatterns &#x3D; (</span><br><span class="line">        (&#39;&#x2F;index&#x2F;&#39;, index),</span><br><span class="line">        (&#39;&#x2F;login&#x2F;&#39;, login),</span><br><span class="line">    )</span><br><span class="line"> </span><br><span class="line">    return urlpatterns</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def run_server(environ, start_response):</span><br><span class="line">    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text&#x2F;html&#39;)])</span><br><span class="line">    url &#x3D; environ[&#39;PATH_INFO&#39;]</span><br><span class="line">    urlpatterns &#x3D; routers()</span><br><span class="line">    func &#x3D; None</span><br><span class="line">    for item in urlpatterns:</span><br><span class="line">        if item[0] &#x3D;&#x3D; url:</span><br><span class="line">            func &#x3D; item[1]</span><br><span class="line">            break</span><br><span class="line">    if func:</span><br><span class="line">        return func()</span><br><span class="line">    else:</span><br><span class="line">        return &#39;404 not found&#39;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    httpd &#x3D; make_server(&#39;&#39;, 8000, run_server)</span><br><span class="line">    print &quot;Serving HTTP on port 8000...&quot;</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure>
遵循jinja2的语法规则，其内部会对指定的语法进行相应的替换，从而达到动态的返回内容;
对于模板引擎的本质，参考: [白话tornado源码之褪去模板外衣的前戏](http://www.cnblogs.com/wupeiqi/p/4592637.html)


<p><a href="http://www.cnblogs.com/wupeiqi/articles/5237672.html" target="_blank" rel="noopener">原文</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s知识图谱</title>
    <url>/2020/04/20/k8s%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
    <content><![CDATA[<p><img src="/2020/04/20/k8s%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/k8s%E5%9B%BE%E8%B0%B1.webp" alt="k8s知识图谱"></p>
<img src="/2020/04/20/k8s%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/k8s%E5%9B%BE%E8%B0%B1.webp" class title="k8s知识图谱">]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket小试牛刀</title>
    <url>/2020/04/20/WebSocket%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/</url>
    <content><![CDATA[<h2 id="WebSocket小试牛刀"><a href="#WebSocket小试牛刀" class="headerlink" title="WebSocket小试牛刀"></a>WebSocket小试牛刀</h2><h2 id="一-为什么需要WebSocket"><a href="#一-为什么需要WebSocket" class="headerlink" title="一. 为什么需要WebSocket?"></a>一. 为什么需要WebSocket?</h2><h3 id="1-1-初次接触-WebSocket-的人，都会问同样的问题：我们已经有了-HTTP-协议，为什么还需要另一个协议？"><a href="#1-1-初次接触-WebSocket-的人，都会问同样的问题：我们已经有了-HTTP-协议，为什么还需要另一个协议？" class="headerlink" title="1.1 初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？"></a>1.1 初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？</h3><p>WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）首先HTTP有1.1和1.0之说，也就是所谓的keep-alive，把多个HTTP请求合并为一个，但是Websocket其实是一个新协议，跟HTTP协议基本没有关系，只是为了兼容现有浏览器的握手规范而已，也就是说它是HTTP协议上的一种补充.<br>答案其实很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起,特别是短链接,无状态,请求在获取相应信息之后立刻断开连接.</p>
<h3 id="1-2-那么-WebSocet到底是什么呢-它能带来什么好处？"><a href="#1-2-那么-WebSocet到底是什么呢-它能带来什么好处？" class="headerlink" title="1.2 那么,WebSocet到底是什么呢?它能带来什么好处？"></a>1.2 那么,WebSocet到底是什么呢?它能带来什么好处？</h3><p>Websocket是什么样的协议，具体有什么优点首先，Websocket是一个持久化的协议，相对于HTTP这种非持久的协议来说。<br>简单的举个例子吧，用目前应用比较广泛的PHP生命周期来解释。</p>
<ul>
<li>HTTP的生命周期通过Request来界定，也就是一个Request 一个Response，那么在HTTP1.0中，这次HTTP请求就结束了。</li>
<li>在HTTP1.1中进行了改进，使得有一个keep-alive，也就是说，在一个HTTP连接中，可以发送多个Request，接收多个Response。但是请记住 Request = Response,在HTTP中永远是这样，也就是说一个request只能有一个response。而且这个response也是被动的，不能主动发起。</li>
</ul>
<h4 id="1-3-教练，你BB了这么多，跟Websocket有什么关系呢？"><a href="#1-3-教练，你BB了这么多，跟Websocket有什么关系呢？" class="headerlink" title="1.3 教练，你BB了这么多，跟Websocket有什么关系呢？"></a>1.3 教练，你BB了这么多，跟Websocket有什么关系呢？</h4><p>好吧，我正准备说Websocket呢。。首先Websocket是基于HTTP协议的，或者说借用了HTTP的协议来完成一部分握手。在握手阶段是一样的,以下涉及专业技术内容，不想看的可以跳过.<br>首先我们来看个典型的Websocket握手</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;chat HTTP&#x2F;1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw&#x3D;&#x3D;</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">Origin: http:&#x2F;&#x2F;example.com</span><br></pre></td></tr></table></figure>
<p>熟悉HTTP的童鞋可能发现了，这段类似HTTP协议的握手请求中，多了几个东西。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br></pre></td></tr></table></figure>
<p>这个就是Websocket的核心了，告诉Apache、Nginx等服务器：注意啦，窝发起的是Websocket协议，快点帮我找到对应的助理处理~不是那个老土的HTTP:)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw&#x3D;&#x3D;</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure>
<p>首先，Sec-WebSocket-Key 是一个Base64 encode的值，这个是浏览器随机生成的，告诉服务器：泥煤，不要忽悠窝，我要验证尼是不是真的是Websocket助理。然后，Sec_WebSocket-Protocol 是一个用户定义的字符串，用来区分同URL下，不同的服务所需要的协议。简单理解：今晚我要服务A，别搞错啦<del>最后，Sec-WebSocket-Version 是告诉服务器所使用的Websocket Draft（协议版本），在最初的时候，Websocket协议还在 Draft 阶段，各种奇奇怪怪的协议都有，而且还有很多期奇奇怪怪不同的东西，什么Firefox和Chrome用的不是一个版本之类的，当初Websocket协议太多可是一个大难题。。不过现在还好，已经定下来啦</del>大家都使用的一个东西~ 脱水：服务员，我要的是13岁的噢→_→<br>然后服务器会返回下列东西，表示已经接受到请求， 成功建立Websocket啦！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk&#x3D;</span><br><span class="line">Sec-WebSocket-Protocol: chat</span><br></pre></td></tr></table></figure>
<p>这里开始就是HTTP最后负责的区域了，告诉客户，我已经成功切换协议啦~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br></pre></td></tr></table></figure>
<p>依然是固定的，告诉客户端即将升级的是Websocket协议，而不是mozillasocket，lurnarsocket或者shitsocket。然后，Sec-WebSocket-Accept 这个则是经过服务器确认，并且加密过后的 Sec-WebSocket-Key。服务器：好啦好啦，知道啦，给你看我的ID CARD来证明行了吧。。后面的，Sec-WebSocket-Protocol 则是表示最终使用的协议。至此，HTTP已经完成它所有工作了，接下来就是完全按照Websocket协议进行了。<br>⚠️ : WebSocket两个重要的流程: 1. 握手; 2. 加密;</p>
<h2 id="二-剖析WebSocket请求流程"><a href="#二-剖析WebSocket请求流程" class="headerlink" title="二. 剖析WebSocket请求流程"></a>二. 剖析WebSocket请求流程</h2><p>下面讲使用Python编写Socket服务端，一步一步分析请求过程!!!</p>
<h3 id="2-1-服务端"><a href="#2-1-服务端" class="headerlink" title="2.1 服务端"></a>2.1 服务端</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">sock.bind((&#39;127.0.0.1&#39;, 8002))</span><br><span class="line">sock.listen(5)</span><br><span class="line"># 等待用户连接</span><br><span class="line">conn, address &#x3D; sock.accept()</span><br></pre></td></tr></table></figure>
<p>启动Socket服务器后，等待用户【连接】，然后进行收发数据。</p>
<h3 id="2-2-客户端连接"><a href="#2-2-客户端连接" class="headerlink" title="2.2 客户端连接"></a>2.2 客户端连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;WebSocket协议学习&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        &#x2F;&#x2F; 向 127.0.0.1:8002 发送一个WebSocket请求</span><br><span class="line">        var socket &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;127.0.0.1:8002&quot;);</span><br><span class="line">        socket.onmessage &#x3D; function (event) &#123;</span><br><span class="line">        &#x2F;* 服务器端向客户端发送数据时，自动执行(回掉函数) *&#x2F;</span><br><span class="line">        var response &#x3D; event.data;</span><br><span class="line">        console.log(response);</span><br><span class="line">    &#125;;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>当客户端向服务端发送连接请求时，不仅连接还会发送[握手]信息，并等待服务端响应，至此连接才创建成功！</p>
<h3 id="2-3-建立连接"><a href="#2-3-建立连接" class="headerlink" title="2.3 建立连接"></a>2.3 建立连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line"> </span><br><span class="line">sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">sock.bind((&#39;127.0.0.1&#39;, 8002))</span><br><span class="line">sock.listen(5)</span><br><span class="line"># 获取客户端socket对象</span><br><span class="line">conn, address &#x3D; sock.accept()</span><br><span class="line"># 获取客户端的【握手】信息</span><br><span class="line">data &#x3D; conn.recv(1024)</span><br><span class="line">...</span><br><span class="line">conn.send(&#39;响应【握手】信息&#39;)</span><br></pre></td></tr></table></figure>
<p>请求和响应的【握手】信息需要遵循规则:</p>
<ol>
<li>从请求【握手】信息中提取 Sec-WebSocket-Key</li>
<li>利用magic_string 和 Sec-WebSocket-Key 进行hmac1加密，再进行base64加密</li>
<li>将加密结果响应给客户端<br>⚠️ ：magic string为：258EAFA5-E914-47DA-95CA-C5AB0DC85B11<br>请求【握手】信息格式为:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;chatsocket HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:8002</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Origin: http:&#x2F;&#x2F;localhost:63342</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">Sec-WebSocket-Key: mnwFxiOlctXFN&#x2F;DeMt1Amg&#x3D;&#x3D;</span><br><span class="line">Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</span><br></pre></td></tr></table></figure>
<h3 id="2-4-提取Sec-WebSocket-Key值并加密："><a href="#2-4-提取Sec-WebSocket-Key值并加密：" class="headerlink" title="2.4 提取Sec-WebSocket-Key值并加密："></a>2.4 提取Sec-WebSocket-Key值并加密：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import base64</span><br><span class="line">import hashlib</span><br><span class="line"> </span><br><span class="line">def get_headers(data):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    将请求头格式化成字典</span><br><span class="line">    :param data:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    header_dict &#x3D; &#123;&#125;</span><br><span class="line">    data &#x3D; str(data, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line"> </span><br><span class="line">    for i in data.split(&#39;\r\n&#39;):</span><br><span class="line">        print(i)</span><br><span class="line">    header, body &#x3D; data.split(&#39;\r\n\r\n&#39;, 1)</span><br><span class="line">    header_list &#x3D; header.split(&#39;\r\n&#39;)</span><br><span class="line">    for i in range(0, len(header_list)):</span><br><span class="line">        if i &#x3D;&#x3D; 0:</span><br><span class="line">            if len(header_list[i].split(&#39; &#39;)) &#x3D;&#x3D; 3:</span><br><span class="line">                header_dict[&#39;method&#39;], header_dict[&#39;url&#39;], header_dict[&#39;protocol&#39;] &#x3D; header_list[i].split(&#39; &#39;)</span><br><span class="line">        else:</span><br><span class="line">            k, v &#x3D; header_list[i].split(&#39;:&#39;, 1)</span><br><span class="line">            header_dict[k] &#x3D; v.strip()</span><br><span class="line">    return header_dict</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">sock.bind((&#39;127.0.0.1&#39;, 8002))</span><br><span class="line">sock.listen(5)</span><br><span class="line"> </span><br><span class="line">conn, address &#x3D; sock.accept()</span><br><span class="line">data &#x3D; conn.recv(1024)</span><br><span class="line">headers &#x3D; get_headers(data) # 提取请求头信息</span><br><span class="line"># 对请求头中的sec-websocket-key进行加密</span><br><span class="line">response_tpl &#x3D; &quot;HTTP&#x2F;1.1 101 Switching Protocols\r\n&quot; \</span><br><span class="line">      &quot;Upgrade:websocket\r\n&quot; \</span><br><span class="line">      &quot;Connection: Upgrade\r\n&quot; \</span><br><span class="line">      &quot;Sec-WebSocket-Accept: %s\r\n&quot; \</span><br><span class="line">      &quot;WebSocket-Location: ws:&#x2F;&#x2F;%s%s\r\n\r\n&quot;</span><br><span class="line">magic_string &#x3D; &#39;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#39;</span><br><span class="line">value &#x3D; headers[&#39;Sec-WebSocket-Key&#39;] + magic_string</span><br><span class="line">ac &#x3D; base64.b64encode(hashlib.sha1(value.encode(&#39;utf-8&#39;)).digest())</span><br><span class="line">response_str &#x3D; response_tpl % (ac.decode(&#39;utf-8&#39;), headers[&#39;Host&#39;], headers[&#39;url&#39;])</span><br><span class="line"># 响应【握手】信息</span><br><span class="line">conn.send(bytes(response_str, encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="三-客户端和服务端收发数据"><a href="#三-客户端和服务端收发数据" class="headerlink" title="三. 客户端和服务端收发数据"></a>三. 客户端和服务端收发数据</h2><p>客户端和服务端传输数据时，需要对数据进行【封包】和【解包】。客户端的JavaScript类库已经封装【封包】和【解包】过程，但Socket服务端需要手动实现。</p>
<h3 id="3-1-第一步：获取客户端发送的数据【解包】"><a href="#3-1-第一步：获取客户端发送的数据【解包】" class="headerlink" title="3.1 第一步：获取客户端发送的数据【解包】"></a>3.1 第一步：获取客户端发送的数据【解包】</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 基于python实现的解包</span><br><span class="line"></span><br><span class="line">info &#x3D; conn.recv(8096)</span><br><span class="line">payload_len &#x3D; info[1] &amp; 127</span><br><span class="line">if payload_len &#x3D;&#x3D; 126:</span><br><span class="line">    extend_payload_len &#x3D; info[2:4]</span><br><span class="line">    mask &#x3D; info[4:8]</span><br><span class="line">    decoded &#x3D; info[8:]</span><br><span class="line">elif payload_len &#x3D;&#x3D; 127:</span><br><span class="line">    extend_payload_len &#x3D; info[2:10]</span><br><span class="line">    mask &#x3D; info[10:14]</span><br><span class="line">    decoded &#x3D; info[14:]</span><br><span class="line">else:</span><br><span class="line">    extend_payload_len &#x3D; None</span><br><span class="line">    mask &#x3D; info[2:6]</span><br><span class="line">    decoded &#x3D; info[6:]</span><br><span class="line"></span><br><span class="line">bytes_list &#x3D; bytearray()</span><br><span class="line">for i in range(len(decoded)):</span><br><span class="line">    chunk &#x3D; decoded[i] ^ mask[i % 4]</span><br><span class="line">    bytes_list.append(chunk)</span><br><span class="line">body &#x3D; str(bytes_list, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">print(body)</span><br></pre></td></tr></table></figure>
<h3 id="3-2-解包详细过程"><a href="#3-2-解包详细过程" class="headerlink" title="3.2 解包详细过程:"></a>3.2 解包详细过程:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-------+-+-------------+-------------------------------+</span><br><span class="line">|F|R|R|R| opcode|M| Payload len |    Extended payload length    |</span><br><span class="line">|I|S|S|S|  (4)  |A|     (7)     |             (16&#x2F;64)           |</span><br><span class="line">|N|V|V|V|       |S|             |   (if payload len&#x3D;&#x3D;126&#x2F;127)   |</span><br><span class="line">| |1|2|3|       |K|             |                               |</span><br><span class="line">+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +</span><br><span class="line">|     Extended payload length continued, if payload len &#x3D;&#x3D; 127  |</span><br><span class="line">+ - - - - - - - - - - - - - - - +-------------------------------+</span><br><span class="line">|                               |Masking-key, if MASK set to 1  |</span><br><span class="line">+-------------------------------+-------------------------------+</span><br><span class="line">| Masking-key (continued)       |          Payload Data         |</span><br><span class="line">+-------------------------------- - - - - - - - - - - - - - - - +</span><br><span class="line">:                     Payload Data continued ...                :</span><br><span class="line">+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +</span><br><span class="line">|                     Payload Data continued ...                |</span><br><span class="line">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<h4 id="3-2-1-官方解释"><a href="#3-2-1-官方解释" class="headerlink" title="3.2.1 官方解释"></a>3.2.1 官方解释</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The MASK bit simply tells whether the message is encoded. Messages from the client must be masked, so your server should expect this to be 1. (In fact, section 5.1 of the spec says that your server must disconnect from a client if that client sends an unmasked message.) When sending a frame back to the client, do not mask it and do not set the mask bit. We&#39;ll explain masking later. Note: You have to mask messages even when using a secure socket.RSV1-3 can be ignored, they are for extensions.</span><br><span class="line"></span><br><span class="line">The opcode field defines how to interpret the payload data: 0x0 for continuation, 0x1 for text (which is always encoded in UTF-8), 0x2 for binary, and other so-called &quot;control codes&quot; that will be discussed later. In this version of WebSockets, 0x3 to 0x7 and 0xB to 0xF have no meaning.</span><br><span class="line"></span><br><span class="line">The FIN bit tells whether this is the last message in a series. If it&#39;s 0, then the server will keep listening for more parts of the message; otherwise, the server should consider the message delivered. More on this later.</span><br><span class="line"></span><br><span class="line">Decoding Payload Length</span><br><span class="line"></span><br><span class="line">To read the payload data, you must know when to stop reading. That&#39;s why the payload length is important to know. Unfortunately, this is somewhat complicated. To read it, follow these steps:</span><br><span class="line"></span><br><span class="line">Read bits 9-15 (inclusive) and interpret that as an unsigned integer. If it&#39;s 125 or less, then that&#39;s the length; you&#39;re done. If it&#39;s 126, go to step 2. If it&#39;s 127, go to step 3.</span><br><span class="line">Read the next 16 bits and interpret those as an unsigned integer. You&#39;re done.</span><br><span class="line">Read the next 64 bits and interpret those as an unsigned integer (The most significant bit MUST be 0). You&#39;re done.</span><br><span class="line">Reading and Unmasking the Data</span><br><span class="line"></span><br><span class="line">If the MASK bit was set (and it should be, for client-to-server messages), read the next 4 octets (32 bits); this is the masking key. Once the payload length and masking key is decoded, you can go ahead and read that number of bytes from the socket. Let&#39;s call the data ENCODED, and the key MASK. To get DECODED, loop through the octets (bytes a.k.a. characters for text data) of ENCODED and XOR the octet with the (i modulo 4)th octet of MASK. In pseudo-code (that happens to be valid JavaScript):</span><br><span class="line"></span><br><span class="line">var DECODED &#x3D; &quot;&quot;;</span><br><span class="line">for (var i &#x3D; 0; i &lt; ENCODED.length; i++) &#123;</span><br><span class="line">    DECODED[i] &#x3D; ENCODED[i] ^ MASK[i % 4];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Now you can figure out what DECODED means depending on your application.</span><br></pre></td></tr></table></figure>
<h3 id="3-3-向客户端发送数据【封包】"><a href="#3-3-向客户端发送数据【封包】" class="headerlink" title="3.3 向客户端发送数据【封包】"></a>3.3 向客户端发送数据【封包】</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def send_msg(conn, msg_bytes):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    WebSocket服务端向客户端发送消息</span><br><span class="line">    :param conn: 客户端连接到服务器端的socket对象,即： conn,address &#x3D; socket.accept()</span><br><span class="line">    :param msg_bytes: 向客户端发送的字节</span><br><span class="line">    :return: </span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    import struct</span><br><span class="line"></span><br><span class="line">    token &#x3D; b&quot;\x81&quot;</span><br><span class="line">    length &#x3D; len(msg_bytes)</span><br><span class="line">    if length &lt; 126:</span><br><span class="line">        token +&#x3D; struct.pack(&quot;B&quot;, length)</span><br><span class="line">    elif length &lt;&#x3D; 0xFFFF:</span><br><span class="line">        token +&#x3D; struct.pack(&quot;!BH&quot;, 126, length)</span><br><span class="line">    else:</span><br><span class="line">        token +&#x3D; struct.pack(&quot;!BQ&quot;, 127, length)</span><br><span class="line"></span><br><span class="line">    msg &#x3D; token + msg_bytes</span><br><span class="line">    conn.send(msg)</span><br><span class="line">    return True</span><br></pre></td></tr></table></figure>

<h2 id="四-基于python实现简单示例"><a href="#四-基于python实现简单示例" class="headerlink" title="四. 基于python实现简单示例"></a>四. 基于python实现简单示例</h2><h3 id="4-1-基于Python-socket实现的WebSocket服务端"><a href="#4-1-基于Python-socket实现的WebSocket服务端" class="headerlink" title="4.1 基于Python socket实现的WebSocket服务端"></a>4.1 基于Python socket实现的WebSocket服务端</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;5&#x2F;12</span><br><span class="line"></span><br><span class="line">import socket</span><br><span class="line">import hashlib</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">def get_headers(data):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    将请求头格式化成字典</span><br><span class="line">    :param data:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    header_dict &#x3D; &#123;&#125;</span><br><span class="line">    data &#x3D; str(data, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">    header, body &#x3D; data.split(&#39;\r\n\r\n&#39;, 1)</span><br><span class="line">    header_list &#x3D; header.split(&#39;\r\n&#39;)</span><br><span class="line">    for i in range(0, len(header_list)):</span><br><span class="line">        if i &#x3D;&#x3D; 0:</span><br><span class="line">            if len(header_list[i].split(&#39; &#39;)) &#x3D;&#x3D; 3:</span><br><span class="line">                header_dict[&#39;method&#39;], header_dict[&#39;url&#39;], header_dict[&#39;protocol&#39;] &#x3D; header_list[i].split(&#39; &#39;)</span><br><span class="line">        else:</span><br><span class="line">            k, v &#x3D; header_list[i].split(&#39;:&#39;, 1)</span><br><span class="line">            header_dict[k] &#x3D; v.strip()</span><br><span class="line">    return header_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def send_msg(conn, msg_bytes):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    WebSocket服务端向客户端发送消息</span><br><span class="line">    :param conn: 客户端连接到服务器端的socket对象,即： conn,address &#x3D; socket.accept()</span><br><span class="line">    :param msg_bytes: 向客户端发送的字节</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    import struct</span><br><span class="line"></span><br><span class="line">    token &#x3D; b&quot;\x81&quot;</span><br><span class="line">    length &#x3D; len(msg_bytes)</span><br><span class="line">    if length &lt; 126:</span><br><span class="line">        token +&#x3D; struct.pack(&quot;B&quot;, length)</span><br><span class="line">    elif length &lt;&#x3D; 0xFFFF:</span><br><span class="line">        token +&#x3D; struct.pack(&quot;!BH&quot;, 126, length)</span><br><span class="line">    else:</span><br><span class="line">        token +&#x3D; struct.pack(&quot;!BQ&quot;, 127, length)</span><br><span class="line"></span><br><span class="line">    msg &#x3D; token + msg_bytes</span><br><span class="line">    conn.send(msg)</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sock &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">sock.bind((&#39;127.0.0.1&#39;, 8002))</span><br><span class="line">sock.listen(5)</span><br><span class="line"></span><br><span class="line"># 等待用户连接</span><br><span class="line">conn, address &#x3D; sock.accept()</span><br><span class="line"></span><br><span class="line"># WebSocket发来的连接</span><br><span class="line"># 1. 获取握手数据</span><br><span class="line">data &#x3D; conn.recv(1024)</span><br><span class="line">headers &#x3D; get_headers(data)</span><br><span class="line"></span><br><span class="line"># 2. 对握手信息进行加密：</span><br><span class="line">magic_string &#x3D; &#39;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#39;</span><br><span class="line">value &#x3D; headers[&#39;Sec-WebSocket-Key&#39;] + magic_string</span><br><span class="line">ac &#x3D; base64.b64encode(hashlib.sha1(value.encode(&#39;utf-8&#39;)).digest())</span><br><span class="line"></span><br><span class="line"># 3. 返回握手信息</span><br><span class="line">response_tpl &#x3D; &quot;HTTP&#x2F;1.1 101 Switching Protocols\r\n&quot; \</span><br><span class="line">               &quot;Upgrade:websocket\r\n&quot; \</span><br><span class="line">               &quot;Connection: Upgrade\r\n&quot; \</span><br><span class="line">               &quot;Sec-WebSocket-Accept: %s\r\n&quot; \</span><br><span class="line">               &quot;WebSocket-Location: ws:&#x2F;&#x2F;127.0.0.1:8002\r\n\r\n&quot;</span><br><span class="line"></span><br><span class="line">response_str &#x3D; response_tpl % (ac.decode(&#39;utf-8&#39;),)</span><br><span class="line"></span><br><span class="line">conn.sendall(bytes(response_str, encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line"></span><br><span class="line"># 之后，才能进行收发数据。</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    # 对数据进行解密</span><br><span class="line">    # send_msg(conn, bytes(&#39;alex&#39;, encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">    # send_msg(conn, bytes(&#39;SB&#39;, encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">    # info &#x3D; conn.recv(8096)</span><br><span class="line">    # print(info)</span><br><span class="line"></span><br><span class="line">    info &#x3D; conn.recv(8096)</span><br><span class="line">    payload_len &#x3D; info[1] &amp; 127</span><br><span class="line">    if payload_len &#x3D;&#x3D; 126:</span><br><span class="line">        extend_payload_len &#x3D; info[2:4]</span><br><span class="line">        mask &#x3D; info[4:8]</span><br><span class="line">        decoded &#x3D; info[8:]</span><br><span class="line">    elif payload_len &#x3D;&#x3D; 127:</span><br><span class="line">        extend_payload_len &#x3D; info[2:10]</span><br><span class="line">        mask &#x3D; info[10:14]</span><br><span class="line">        decoded &#x3D; info[14:]</span><br><span class="line">    else:</span><br><span class="line">        extend_payload_len &#x3D; None</span><br><span class="line">        mask &#x3D; info[2:6]</span><br><span class="line">        decoded &#x3D; info[6:]</span><br><span class="line"></span><br><span class="line">    bytes_list &#x3D; bytearray()</span><br><span class="line">    for i in range(len(decoded)):</span><br><span class="line">        chunk &#x3D; decoded[i] ^ mask[i % 4]</span><br><span class="line">        bytes_list.append(chunk)</span><br><span class="line">    msg &#x3D; str(bytes_list, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">    rep &#x3D; msg + &#39; hello&#39;</span><br><span class="line">    send_msg(conn, bytes(rep, encoding&#x3D;&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure>

<h3 id="4-2-利用JavaScript类库实现客户端"><a href="#4-2-利用JavaScript类库实现客户端" class="headerlink" title="4.2 利用JavaScript类库实现客户端"></a>4.2 利用JavaScript类库实现客户端</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;txt&quot;&#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;btn&quot; value&#x3D;&quot;提交&quot; onclick&#x3D;&quot;sendMsg();&quot;&#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;close&quot; value&#x3D;&quot;关闭连接&quot; onclick&#x3D;&quot;closeConn();&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;content&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var socket &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;127.0.0.1:8003&#x2F;chatsocket&quot;);</span><br><span class="line"> </span><br><span class="line">    socket.onopen &#x3D; function () &#123;</span><br><span class="line">        &#x2F;* 与服务器端连接成功后，自动执行 *&#x2F;</span><br><span class="line"> </span><br><span class="line">        var newTag &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">        newTag.innerHTML &#x3D; &quot;【连接成功】&quot;;</span><br><span class="line">        document.getElementById(&#39;content&#39;).appendChild(newTag);</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    socket.onmessage &#x3D; function (event) &#123;</span><br><span class="line">        &#x2F;* 服务器端向客户端发送数据时，自动执行 *&#x2F;</span><br><span class="line">        var response &#x3D; event.data;</span><br><span class="line">        var newTag &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">        newTag.innerHTML &#x3D; response;</span><br><span class="line">        document.getElementById(&#39;content&#39;).appendChild(newTag);</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    socket.onclose &#x3D; function (event) &#123;</span><br><span class="line">        &#x2F;* 服务器端主动断开连接时，自动执行 *&#x2F;</span><br><span class="line">        var newTag &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">        newTag.innerHTML &#x3D; &quot;【关闭连接】&quot;;</span><br><span class="line">        document.getElementById(&#39;content&#39;).appendChild(newTag);</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    function sendMsg() &#123;</span><br><span class="line">        var txt &#x3D; document.getElementById(&#39;txt&#39;);</span><br><span class="line">        socket.send(txt.value);</span><br><span class="line">        txt.value &#x3D; &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function closeConn() &#123;</span><br><span class="line">        socket.close();</span><br><span class="line">        var newTag &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">        newTag.innerHTML &#x3D; &quot;【关闭连接】&quot;;</span><br><span class="line">        document.getElementById(&#39;content&#39;).appendChild(newTag);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>此时,我们在浏览器的Console控制台利用Socket对象发送消息,将会收到返回信息</p>
<h2 id="五-基于Tornado框架实现Web聊天室"><a href="#五-基于Tornado框架实现Web聊天室" class="headerlink" title="五. 基于Tornado框架实现Web聊天室"></a>五. 基于Tornado框架实现Web聊天室</h2><p>Tornado是一个支持WebSocket的优秀框架，其内部原理正如1~5步骤描述，当然Tornado内部封装功能更加完整。<br>以下是基于Tornado实现的聊天室示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat app.py</span><br><span class="line"></span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import uuid</span><br><span class="line">import json</span><br><span class="line">import tornado.ioloop</span><br><span class="line">import tornado.web</span><br><span class="line">import tornado.websocket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class IndexHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.render(&#39;index.html&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ChatHandler(tornado.websocket.WebSocketHandler):</span><br><span class="line">    # 用户存储当前聊天室用户</span><br><span class="line">    waiters &#x3D; set()</span><br><span class="line">    # 用于存储历时消息</span><br><span class="line">    messages &#x3D; []</span><br><span class="line"></span><br><span class="line">    def open(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        客户端连接成功时，自动执行</span><br><span class="line">        :return: </span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        ChatHandler.waiters.add(self)</span><br><span class="line">        uid &#x3D; str(uuid.uuid4())</span><br><span class="line">        self.write_message(uid)</span><br><span class="line"></span><br><span class="line">        for msg in ChatHandler.messages:</span><br><span class="line">            content &#x3D; self.render_string(&#39;message.html&#39;, **msg)</span><br><span class="line">            self.write_message(content)</span><br><span class="line"></span><br><span class="line">    def on_message(self, message):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        客户端连发送消息时，自动执行</span><br><span class="line">        :param message: </span><br><span class="line">        :return: </span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        msg &#x3D; json.loads(message)</span><br><span class="line">        ChatHandler.messages.append(message)</span><br><span class="line"></span><br><span class="line">        for client in ChatHandler.waiters:</span><br><span class="line">            content &#x3D; client.render_string(&#39;message.html&#39;, **msg)</span><br><span class="line">            client.write_message(content)</span><br><span class="line"></span><br><span class="line">    def on_close(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        客户端关闭连接时，，自动执行</span><br><span class="line">        :return: </span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        ChatHandler.waiters.remove(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def run():</span><br><span class="line">    settings &#x3D; &#123;</span><br><span class="line">        &#39;template_path&#39;: &#39;templates&#39;,</span><br><span class="line">        &#39;static_path&#39;: &#39;static&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">    application &#x3D; tornado.web.Application([</span><br><span class="line">        (r&quot;&#x2F;&quot;, IndexHandler),</span><br><span class="line">        (r&quot;&#x2F;chat&quot;, ChatHandler),</span><br><span class="line">    ], **settings)</span><br><span class="line">    application.listen(8888)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    run()</span><br><span class="line">&#96;&#96;&#96;    </span><br><span class="line">客户端</span><br></pre></td></tr></table></figure>
<h1 id="cat-index-html"><a href="#cat-index-html" class="headerlink" title="cat index.html"></a>cat index.html</h1><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Python聊天室</title>
<meta name="generator" content="Hexo 4.2.0"><link rel="alternate" href="/atom.xml" title="shuke's Blog" type="application/atom+xml">
</head>
<body>
    <div>
        <input type="text" id="txt">
        <input type="button" id="btn" value="提交" onclick="sendMsg();">
        <input type="button" id="close" value="关闭连接" onclick="closeConn();">
    </div>
    <div id="container" style="border: 1px solid #dddddd;margin: 20px;min-height: 500px;">

<pre><code>&lt;/div&gt;

&lt;script src=&quot;/static/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    $(function () {
        wsUpdater.start();
    });

    var wsUpdater = {
        socket: null,
        uid: null,
        start: function() {
            var url = &quot;ws://127.0.0.1:8888/chat&quot;;
            wsUpdater.socket = new WebSocket(url);
            wsUpdater.socket.onmessage = function(event) {
                console.log(event);
                if(wsUpdater.uid){
                    wsUpdater.showMessage(event.data);
                }else{
                    wsUpdater.uid = event.data;
                }
            }
        },
        showMessage: function(content) {
            $(&apos;#container&apos;).append(content);
        }
    };

    function sendMsg() {
        var msg = {
            uid: wsUpdater.uid,
            message: $(&quot;#txt&quot;).val()
        };
        wsUpdater.socket.send(JSON.stringify(msg));
    }</code></pre><p></p>
</div></body>
</html>
```

<p><a href="https://files.cnblogs.com/files/aslongas/2.WebSocket%E7%A4%BA%E4%BE%8B%EF%BC%9AFlask.rar" target="_blank" rel="noopener">Flask-WebSocket投票示例</a></p>
<p><a href="http://www.cnblogs.com/wupeiqi/p/6558766.html" target="_blank" rel="noopener">原文参考</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Salt API</title>
    <url>/2020/04/20/Salt-API/</url>
    <content><![CDATA[<h2 id="Salt-API"><a href="#Salt-API" class="headerlink" title="Salt API"></a>Salt API</h2><blockquote>
<p>使用salt执行原生linux命令</p>
</blockquote>
<ol>
<li><p>安装salt-ssh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install salt-ssh</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用底层API执行shell命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from salt.client.ssh.shell import Shell</span><br><span class="line"></span><br><span class="line">shell &#x3D; Shell(&#123;&quot;_ssh_version&quot;: (4,9)&#125;,&quot;192.168.1.100&quot;,&quot;root&quot;,22,&quot;root123&quot;,timeout&#x3D;60)</span><br><span class="line">result &#x3D; shell.exec_cmd(&quot;df -h&quot;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<h3 id="salt-shell-api"><a href="#salt-shell-api" class="headerlink" title="salt shell api"></a>salt shell api</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from salt.client.ssh.client import SSHClient</span><br><span class="line"></span><br><span class="line">clinet &#x3D; SSHClient()</span><br><span class="line"></span><br><span class="line">ret &#x3D; client.cmd(&quot;*&quot;,&quot;cmd.run&quot;,(&quot;df -h&quot;,),30)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>


</li>
</ol>
]]></content>
      <categories>
        <category>Salt</category>
      </categories>
      <tags>
        <tag>Salt</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置http强制跳转https</title>
    <url>/2020/04/20/nginx%E9%85%8D%E7%BD%AEhttp%E5%BC%BA%E5%88%B6%E8%B7%B3%E8%BD%AChttps/</url>
    <content><![CDATA[<h2 id="nginx配置http强制跳转https"><a href="#nginx配置http强制跳转https" class="headerlink" title="nginx配置http强制跳转https"></a>nginx配置http强制跳转https</h2><blockquote>
<p>很多网站虽然支持 https, 但是直接在浏览器地址栏输入网址后, 默认仍是以 http 协议去访问的, http 强制跳转 https 的需求应运而生, 以下介绍三种实现的方式</p>
</blockquote>
<h3 id="rewrite-方法"><a href="#rewrite-方法" class="headerlink" title="rewrite 方法"></a>rewrite 方法</h3><p>这是最常用的实现方法, 将所有 http 请求通过 rewrite 重定向到 https 即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">    listen  80;</span><br><span class="line">    server_name docs.lvrui.io</span><br><span class="line">      </span><br><span class="line">    rewrite ^(.*)$  https:&#x2F;&#x2F;$host$1 permanent; </span><br><span class="line">    # return 302 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name docs.lvrui.io;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;docs.log  main;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;ssl&#x2F;docs.20150509.cn.crt;</span><br><span class="line">    ssl_certificate_key  &#x2F;etc&#x2F;ssl&#x2F;docs.20150509.cn.key;</span><br><span class="line">    error_page 404 &#x2F;404.html;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">	    root &#x2F;var&#x2F;www&#x2F;html&#x2F;docs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>497 状态码<br>error code 497: normal request was sent to HTTPS</p>
<p>在一个站点只允许 https 访问时, 如果使用 http 访问会报出497错误码</p>
<p>利用497状态码重定向到 https</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name docs.lvrui.io</span><br><span class="line">    </span><br><span class="line">    error_page 497  https:&#x2F;&#x2F;$host$uri?$args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name docs.lvrui.io;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;docs.log  main;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;ssl&#x2F;docs.20150509.cn.crt;</span><br><span class="line">    ssl_certificate_key  &#x2F;etc&#x2F;ssl&#x2F;docs.20150509.cn.key;</span><br><span class="line">    error_page 404 &#x2F;404.html;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">	    root &#x2F;var&#x2F;www&#x2F;html&#x2F;docs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="index-html-刷新网页"><a href="#index-html-刷新网页" class="headerlink" title="index.html 刷新网页"></a>index.html 刷新网页</h3><p>上面两种方法均会耗费服务器资源, 我们使用 curl 来看下百度是如何实现的 baidu.com 向 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 的跳转</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl baidu.com -vv </span><br><span class="line">* Rebuilt URL to: baidu.com&#x2F;</span><br><span class="line">*   Trying 220.181.57.217...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to baidu.com (220.181.57.217) port 80 (#0)</span><br><span class="line">&gt; GET &#x2F; HTTP&#x2F;1.1</span><br><span class="line">&gt; Host: baidu.com</span><br><span class="line">&gt; User-Agent: curl&#x2F;7.51.0</span><br><span class="line">&gt; Accept: *&#x2F;*</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP&#x2F;1.1 200 OK</span><br><span class="line">&lt; Date: Sat, 01 Apr 2017 06:32:35 GMT</span><br><span class="line">&lt; Server: Apache</span><br><span class="line">&lt; Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT</span><br><span class="line">&lt; ETag: &quot;51-47cf7e6ee8400&quot;</span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">&lt; Content-Length: 81</span><br><span class="line">&lt; Cache-Control: max-age&#x3D;86400</span><br><span class="line">&lt; Expires: Sun, 02 Apr 2017 06:32:35 GMT</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Content-Type: text&#x2F;html</span><br><span class="line">&lt; </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;0;url&#x3D;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">* Curl_http_done: called premature &#x3D;&#x3D; 0</span><br><span class="line">* Connection #0 to host baidu.com left intact</span><br></pre></td></tr></table></figure>
<p>可以看到百度很巧妙的利用meta的刷新作用，将baidu.com跳转到<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>同理, 我们也可以用这个特性来实现http向https的跳转</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># index.html</span><br><span class="line">&lt;html&gt;  </span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;0;url&#x3D;https:&#x2F;&#x2F;docs.lvrui.io&#x2F;&quot;&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name docs.lvrui.io;</span><br><span class="line">    </span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        # 将 index.html 文件放到下面的目录下</span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;html&#x2F;refresh&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name docs.lvrui.io;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;docs.log  main;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;ssl&#x2F;docs.20150509.cn.crt;</span><br><span class="line">    ssl_certificate_key  &#x2F;etc&#x2F;ssl&#x2F;docs.20150509.cn.key;</span><br><span class="line">    error_page 404 &#x2F;404.html;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">	    root &#x2F;var&#x2F;www&#x2F;html&#x2F;docs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ansible api of python</title>
    <url>/2020/04/20/ansible-api-of-python/</url>
    <content><![CDATA[<h2 id="ansible-api-for-python"><a href="#ansible-api-for-python" class="headerlink" title="ansible api for python"></a>ansible api for python</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: shuke</span><br><span class="line">@file: anisible-exec-api.py</span><br><span class="line">@time: 2019&#x2F;10&#x2F;28 14:56</span><br><span class="line">@contact: shu_ke163@163.com</span><br><span class="line">@software:  deploy-system</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line">import shutil</span><br><span class="line">from collections import namedtuple</span><br><span class="line">from ansible.parsing.dataloader import DataLoader</span><br><span class="line">from ansible.vars.manager import VariableManager</span><br><span class="line">from ansible.inventory.manager import InventoryManager</span><br><span class="line">from ansible.playbook.play import Play</span><br><span class="line">from ansible.executor.task_queue_manager import TaskQueueManager</span><br><span class="line">from ansible.executor.playbook_executor import PlaybookExecutor</span><br><span class="line">from ansible.executor.task_executor import TaskExecutor</span><br><span class="line">from ansible.plugins.callback import CallbackBase</span><br><span class="line">import ansible.constants as C</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ResultCallback(CallbackBase):</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        # super(ResultsCollector, self).__init__(*args, **kwargs)</span><br><span class="line">        self.host_ok &#x3D; &#123;&#125;</span><br><span class="line">        self.host_unreachable &#x3D; &#123;&#125;</span><br><span class="line">        self.host_failed &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_unreachable(self, result):</span><br><span class="line">        self.host_unreachable[result._host.get_name()] &#x3D; result</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_ok(self, result, *args, **kwargs):</span><br><span class="line">        self.host_ok[result._host.get_name()] &#x3D; result</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_failed(self, result, *args, **kwargs):</span><br><span class="line">        self.host_failed[result._host.get_name()] &#x3D; result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AnsibleApi(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.Options &#x3D; namedtuple(&#39;Options&#39;,</span><br><span class="line">                                  [&#39;connection&#39;,</span><br><span class="line">                                   &#39;remote_user&#39;,</span><br><span class="line">                                   &#39;ask_sudo_pass&#39;,</span><br><span class="line">                                   &#39;verbosity&#39;,</span><br><span class="line">                                   &#39;ack_pass&#39;,</span><br><span class="line">                                   &#39;module_path&#39;,</span><br><span class="line">                                   &#39;forks&#39;,</span><br><span class="line">                                   &#39;become&#39;,</span><br><span class="line">                                   &#39;become_method&#39;,</span><br><span class="line">                                   &#39;become_user&#39;,</span><br><span class="line">                                   &#39;check&#39;,</span><br><span class="line">                                   &#39;listhosts&#39;,</span><br><span class="line">                                   &#39;listtasks&#39;,</span><br><span class="line">                                   &#39;listtags&#39;,</span><br><span class="line">                                   &#39;syntax&#39;,</span><br><span class="line">                                   &#39;sudo_user&#39;,</span><br><span class="line">                                   &#39;sudo&#39;,</span><br><span class="line">                                   &#39;diff&#39;])</span><br><span class="line"></span><br><span class="line">        self.ops &#x3D; self.Options(connection&#x3D;&#39;local&#39;,</span><br><span class="line">                                remote_user&#x3D;None,</span><br><span class="line">                                ack_pass&#x3D;None,</span><br><span class="line">                                sudo_user&#x3D;None,</span><br><span class="line">                                forks&#x3D;50,</span><br><span class="line">                                sudo&#x3D;None,</span><br><span class="line">                                ask_sudo_pass&#x3D;False,</span><br><span class="line">                                verbosity&#x3D;5,</span><br><span class="line">                                module_path&#x3D;None,</span><br><span class="line">                                become&#x3D;None,</span><br><span class="line">                                become_method&#x3D;None,</span><br><span class="line">                                become_user&#x3D;None,</span><br><span class="line">                                check&#x3D;False,</span><br><span class="line">                                diff&#x3D;False,</span><br><span class="line">                                listhosts&#x3D;None,</span><br><span class="line">                                listtasks&#x3D;None,</span><br><span class="line">                                listtags&#x3D;None,</span><br><span class="line">                                syntax&#x3D;None)</span><br><span class="line"></span><br><span class="line">        self.loader &#x3D; DataLoader()</span><br><span class="line">        self.passwords &#x3D; dict()</span><br><span class="line">        self.results_callback &#x3D; ResultCallback()</span><br><span class="line">        self.inventory &#x3D; InventoryManager(loader&#x3D;self.loader,</span><br><span class="line">                                          sources&#x3D;[&#39;&#x2F;Users&#x2F;shuke&#x2F;Work&#x2F;SCM&#x2F;rcx_rce.deploy&#x2F;playbook&#x2F;inventory&#x2F;rcx&#x2F;hosts.ini&#39;])</span><br><span class="line">        self.variable_manager &#x3D; VariableManager(loader&#x3D;self.loader, inventory&#x3D;self.inventory)</span><br><span class="line"></span><br><span class="line">    def runansible(self, host_list, task_list):</span><br><span class="line"></span><br><span class="line">        play_source &#x3D; dict(</span><br><span class="line">            name&#x3D;&quot;Ansible Play&quot;,</span><br><span class="line">            hosts&#x3D;host_list,</span><br><span class="line">            gather_facts&#x3D;&#39;no&#39;,</span><br><span class="line">            tasks&#x3D;task_list</span><br><span class="line">        )</span><br><span class="line">        play &#x3D; Play().load(play_source, variable_manager&#x3D;self.variable_manager, loader&#x3D;self.loader)</span><br><span class="line"></span><br><span class="line">        tqm &#x3D; None</span><br><span class="line">        try:</span><br><span class="line">            tqm &#x3D; TaskQueueManager(</span><br><span class="line">                inventory&#x3D;self.inventory,</span><br><span class="line">                variable_manager&#x3D;self.variable_manager,</span><br><span class="line">                loader&#x3D;self.loader,</span><br><span class="line">                passwords&#x3D;self.passwords,</span><br><span class="line">                stdout_callback&#x3D;self.results_callback,</span><br><span class="line">                run_tree&#x3D;False,</span><br><span class="line">            )</span><br><span class="line">            result &#x3D; tqm.run(play)</span><br><span class="line">        finally:</span><br><span class="line">            if tqm is not None:</span><br><span class="line">                tqm.cleanup()</span><br><span class="line">            shutil.rmtree(C.DEFAULT_LOCAL_TMP, True)</span><br><span class="line"></span><br><span class="line">        results_raw &#x3D; &#123;&#125;</span><br><span class="line">        results_raw[&#39;success&#39;] &#x3D; &#123;&#125;</span><br><span class="line">        results_raw[&#39;failed&#39;] &#x3D; &#123;&#125;</span><br><span class="line">        results_raw[&#39;unreachable&#39;] &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">        for host, result in self.results_callback.host_ok.items():</span><br><span class="line">            results_raw[&#39;success&#39;][host] &#x3D; json.dumps(result._result)</span><br><span class="line"></span><br><span class="line">        for host, result in self.results_callback.host_failed.items():</span><br><span class="line">            results_raw[&#39;failed&#39;][host] &#x3D; result._result[&#39;msg&#39;]</span><br><span class="line"></span><br><span class="line">        for host, result in self.results_callback.host_unreachable.items():</span><br><span class="line">            results_raw[&#39;unreachable&#39;][host] &#x3D; result._result[&#39;msg&#39;]</span><br><span class="line"></span><br><span class="line">        print(results_raw)</span><br><span class="line"></span><br><span class="line">    def playbookrun(self, playbook_path):</span><br><span class="line"></span><br><span class="line">        self.variable_manager.extra_vars &#x3D; &#123;&#39;customer&#39;: &#39;test&#39;, &#39;disabled&#39;: &#39;yes&#39;&#125;</span><br><span class="line">        playbook &#x3D; PlaybookExecutor(playbooks&#x3D;playbook_path,</span><br><span class="line">                                    inventory&#x3D;self.inventory,</span><br><span class="line">                                    variable_manager&#x3D;self.variable_manager,</span><br><span class="line">                                    loader&#x3D;self.loader, passwords&#x3D;self.passwords)</span><br><span class="line">        result &#x3D; playbook.run()</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    a &#x3D; AnsibleApi()</span><br><span class="line">    host_list &#x3D; [&#39;all&#39;]</span><br><span class="line">    tasks_list &#x3D; [</span><br><span class="line">        dict(action&#x3D;dict(module&#x3D;&#39;setup&#39;, )),</span><br><span class="line">    ]</span><br><span class="line">    a.runansible(host_list, tasks_list)</span><br><span class="line">    # a.playbookrun(playbook_path&#x3D;[&#39;&#x2F;home&#x2F;jenkins&#x2F;python_script&#x2F;collect_data.yml&#39;])</span><br></pre></td></tr></table></figure>


<h2 id="example2"><a href="#example2" class="headerlink" title="example2"></a>example2</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@aythor: shuke</span><br><span class="line">@file: ansible_api_v2.py </span><br><span class="line">@content: zhaofengfeng@rongcloud.cn</span><br><span class="line">@time: 2020&#x2F;03&#x2F;10 09:46</span><br><span class="line">@software:  Door</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line">import logging</span><br><span class="line">import datetime</span><br><span class="line">import shutil</span><br><span class="line">from ansible import constants as C</span><br><span class="line">from collections import namedtuple</span><br><span class="line">from ansible.parsing.dataloader import DataLoader</span><br><span class="line">from ansible.playbook.play import Play</span><br><span class="line">from ansible.executor.task_queue_manager import TaskQueueManager</span><br><span class="line">from ansible.executor.playbook_executor import PlaybookExecutor</span><br><span class="line">from ansible.plugins.callback import CallbackBase</span><br><span class="line">from ansible.inventory.manager import InventoryManager</span><br><span class="line">from ansible.vars.manager import VariableManager</span><br><span class="line">from ansible.inventory.host import Host</span><br><span class="line">from ansible.parsing.ajson import AnsibleJSONEncoder</span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line">PATH &#x3D; os.path.dirname(os.path.dirname(os.path.realpath(__file__)))</span><br><span class="line">sys.path.insert(0, PATH)</span><br><span class="line">#</span><br><span class="line"># os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;Door.settings&quot;)</span><br><span class="line">#</span><br><span class="line"># import django</span><br><span class="line">#</span><br><span class="line"># django.setup()</span><br><span class="line"></span><br><span class="line"># from apps.host.models import Cmdb</span><br><span class="line"></span><br><span class="line">logger &#x3D; logging.getLogger(&quot;door&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def current_time():</span><br><span class="line">    return &#39;%sZ&#39; % datetime.datetime.utcnow().isoformat()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CallbackModule(CallbackBase):</span><br><span class="line">    CALLBACK_VERSION &#x3D; 2.0</span><br><span class="line">    CALLBACK_TYPE &#x3D; &#39;stdout&#39;</span><br><span class="line">    CALLBACK_NAME &#x3D; &#39;tomysql&#39;</span><br><span class="line"></span><br><span class="line">    def __init__(self, display&#x3D;None):</span><br><span class="line">        super(CallbackModule, self).__init__(display)</span><br><span class="line">        self.results &#x3D; []</span><br><span class="line"></span><br><span class="line">    def _new_play(self, play):</span><br><span class="line">        return &#123;</span><br><span class="line">            &#39;play&#39;: &#123;</span><br><span class="line">                &#39;name&#39;: play.get_name(),</span><br><span class="line">                &#39;id&#39;: str(play._uuid),</span><br><span class="line">                &#39;duration&#39;: &#123;</span><br><span class="line">                    &#39;start&#39;: current_time()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#39;tasks&#39;: []</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    def _new_task(self, task):</span><br><span class="line">        return &#123;</span><br><span class="line">            &#39;task&#39;: &#123;</span><br><span class="line">                &#39;name&#39;: task.get_name(),</span><br><span class="line">                &#39;id&#39;: str(task._uuid),</span><br><span class="line">                &#39;duration&#39;: &#123;</span><br><span class="line">                    &#39;start&#39;: current_time()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#39;hosts&#39;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_ok(self, result, **kwargs):</span><br><span class="line">        hostname &#x3D; result._host.get_name()</span><br><span class="line">        logger.info(f&quot;ansible v2_runner_on_ok hostname: &#123;hostname&#125;&quot;)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            host &#x3D; result._result[&quot;ansible_facts&quot;]</span><br><span class="line"></span><br><span class="line">            host_info &#x3D; &#123;&#125;</span><br><span class="line">            host_info[&quot;hostname&quot;] &#x3D; hostname</span><br><span class="line">            host_info[&quot;fqdn&quot;] &#x3D; host.get(&quot;ansible_fqdn&quot;, None)</span><br><span class="line">            host_info[&quot;cpu&quot;] &#x3D; str(host.get(&quot;ansible_processor_vcpus&quot;, None)) + &quot;c&quot;</span><br><span class="line">            host_info[&quot;memory&quot;] &#x3D; str(round(host.get(&quot;ansible_memtotal_mb&quot;) &#x2F; 1024) + 1) + &quot; GB&quot;</span><br><span class="line">            host_info[&quot;disk&quot;] &#x3D; host.get(&quot;ansible_devices&quot;)[&quot;vda&quot;][&quot;size&quot;]</span><br><span class="line">            host_info[&quot;disk_format&quot;] &#x3D; host.get(&quot;ansible_mounts&quot;)[0][&quot;fstype&quot;]</span><br><span class="line">            host_info[&quot;mount_point&quot;] &#x3D; host.get(&quot;ansible_mounts&quot;)[0][&quot;mount&quot;]</span><br><span class="line">            host_info[&quot;ipv4&quot;] &#x3D; host.get(&quot;ansible_default_ipv4&quot;)[&quot;address&quot;]</span><br><span class="line">            host_info[&quot;arch&quot;] &#x3D; host.get(&quot;ansible_architecture&quot;, None)</span><br><span class="line">            host_info[&quot;os_type&quot;] &#x3D; host.get(&quot;ansible_distribution&quot;, None)</span><br><span class="line">            host_info[&quot;os_version&quot;] &#x3D; host.get(&quot;ansible_distribution_version&quot;, None)</span><br><span class="line">            host_info[&quot;machine_id&quot;] &#x3D; host.get(&quot;ansible_machine_id&quot;, None)</span><br><span class="line">            host_info[&quot;macaddress&quot;] &#x3D; host.get(&quot;ansible_default_ipv4&quot;)[&quot;macaddress&quot;]</span><br><span class="line">            host_info[&quot;kernel_info&quot;] &#x3D; host.get(&quot;ansible_kernel&quot;, None)</span><br><span class="line">            host_info[&quot;virtualization_type&quot;] &#x3D; host.get(&quot;ansible_virtualization_type&quot;, None)</span><br><span class="line"></span><br><span class="line">            import json</span><br><span class="line">            print(json.dumps(host_info, indent&#x3D;4, ensure_ascii&#x3D;False))</span><br><span class="line"></span><br><span class="line">            # models.Cmdb.objects.get_or_create(host_info)</span><br><span class="line"></span><br><span class="line">        except Exception as e:</span><br><span class="line">            logger.error(f&quot;get ansible facts result faild: &#123;e.__class__.__name__&#125;: &#123;e&#125;&quot;)</span><br><span class="line">            raise Exception(&quot;&#123;hostname&#125; already exist&quot;.format(hostname&#x3D;hostname))</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_unreachable(self, result):</span><br><span class="line">        logger.info(&quot;unreachable host: %s&quot; % result._host.get_name())</span><br><span class="line">        self.host_unreachable[result._host.get_name()] &#x3D; result</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_failed(self, result, *args, **kwargs):</span><br><span class="line">        # print(result.__dict__)</span><br><span class="line">        logger.info(&quot;主机执行失败: &quot;.format(result._host.get_name()))</span><br><span class="line">        self.results.append(&#123;result._host.get_name(): result&#125;)</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_play_start(self, play):</span><br><span class="line">        self.results.append(self._new_play(play))</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_task_start(self, task, is_conditional):</span><br><span class="line">        self.results[-1][&#39;tasks&#39;].append(self._new_task(task))</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_handler_task_start(self, task):</span><br><span class="line">        self.results[-1][&#39;tasks&#39;].append(self._new_task(task))</span><br><span class="line"></span><br><span class="line">    def _convert_host_to_name(self, key):</span><br><span class="line">        if isinstance(key, (Host,)):</span><br><span class="line">            return key.get_name()</span><br><span class="line">        return key</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_stats(self, stats):</span><br><span class="line">        &quot;&quot;&quot;Display info about playbook statistics&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        hosts &#x3D; sorted(stats.processed.keys())</span><br><span class="line"></span><br><span class="line">        summary &#x3D; &#123;&#125;</span><br><span class="line">        for h in hosts:</span><br><span class="line">            s &#x3D; stats.summarize(h)</span><br><span class="line">            summary[h] &#x3D; s</span><br><span class="line"></span><br><span class="line">        custom_stats &#x3D; &#123;&#125;</span><br><span class="line">        global_custom_stats &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">        if self.get_option(&#39;show_custom_stats&#39;) and stats.custom:</span><br><span class="line">            custom_stats.update(dict((self._convert_host_to_name(k), v) for k, v in stats.custom.items()))</span><br><span class="line">            global_custom_stats.update(custom_stats.pop(&#39;_run&#39;, &#123;&#125;))</span><br><span class="line"></span><br><span class="line">        output &#x3D; &#123;</span><br><span class="line">            &#39;plays&#39;: self.results,</span><br><span class="line">            &#39;stats&#39;: summary,</span><br><span class="line">            &#39;custom_stats&#39;: custom_stats,</span><br><span class="line">            &#39;global_custom_stats&#39;: global_custom_stats,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self._display.display(json.dumps(output, cls&#x3D;AnsibleJSONEncoder, indent&#x3D;4, sort_keys&#x3D;True))</span><br><span class="line"></span><br><span class="line">    def _record_task_result(self, on_info, result, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;This function is used as a partial to add failed&#x2F;skipped info in a single method&quot;&quot;&quot;</span><br><span class="line">        host &#x3D; result._host</span><br><span class="line">        task &#x3D; result._task</span><br><span class="line">        task_result &#x3D; result._result.copy()</span><br><span class="line">        task_result.update(on_info)</span><br><span class="line">        task_result[&#39;action&#39;] &#x3D; task.action</span><br><span class="line">        self.results[-1][&#39;tasks&#39;][-1][&#39;hosts&#39;][host.name] &#x3D; task_result</span><br><span class="line">        end_time &#x3D; current_time()</span><br><span class="line">        self.results[-1][&#39;tasks&#39;][-1][&#39;task&#39;][&#39;duration&#39;][&#39;end&#39;] &#x3D; end_time</span><br><span class="line">        self.results[-1][&#39;play&#39;][&#39;duration&#39;][&#39;end&#39;] &#x3D; end_time</span><br><span class="line"></span><br><span class="line">    # def __getattribute__(self, name):</span><br><span class="line">    #     &quot;&quot;&quot;Return &#96;&#96;_record_task_result&#96;&#96; partial with a dict containing skipped&#x2F;failed if necessary&quot;&quot;&quot;</span><br><span class="line">    #     if name not in (&#39;v2_runner_on_ok&#39;, &#39;v2_runner_on_failed&#39;, &#39;v2_runner_on_unreachable&#39;, &#39;v2_runner_on_skipped&#39;):</span><br><span class="line">    #         return object.__getattribute__(self, name)</span><br><span class="line">    #</span><br><span class="line">    #     on &#x3D; name.rsplit(&#39;_&#39;, 1)[1]</span><br><span class="line">    #</span><br><span class="line">    #     on_info &#x3D; &#123;&#125;</span><br><span class="line">    #     if on in (&#39;failed&#39;, &#39;skipped&#39;):</span><br><span class="line">    #         on_info[on] &#x3D; True</span><br><span class="line">    #</span><br><span class="line">    #     # logger.info(&quot;Event: &#123;name&#125;, Task status: &#123;status&#125;&quot;.format(name&#x3D;name, status&#x3D;on))</span><br><span class="line">    #     return partial(self._record_task_result, on_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DeployResultsCollector(CallbackBase):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    直接执行模块命令的回调类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, sock, send_msg, *args, **kwargs):</span><br><span class="line">        super(DeployResultsCollector, self).__init__(*args, **kwargs)</span><br><span class="line">        self.sock &#x3D; sock</span><br><span class="line">        self.send_msg &#x3D; send_msg</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_unreachable(self, result):</span><br><span class="line">        if &#39;msg&#39; in result._result:</span><br><span class="line">            data &#x3D; &#39;主机&#123;host&#125;不可达！&#x3D;&#x3D;&gt; &#123;stdout&#125;\n剔除该主机!\n&#39;.format(host&#x3D;result._host.name, stdout&#x3D;result._result.get(&#39;msg&#39;))</span><br><span class="line">        else:</span><br><span class="line">            data &#x3D; &#39;主机&#123;host&#125;不可达！&#x3D;&#x3D;&gt; &#123;stdout&#125;\n剔除该主机!\n&#39;.format(host&#x3D;result._host.name,</span><br><span class="line">                                                               stdout&#x3D;json.dumps(result._result, indent&#x3D;4))</span><br><span class="line"></span><br><span class="line">        self.chk_host_list(data, result._host.name)</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_ok(self, result, *args, **kwargs):</span><br><span class="line">        data &#x3D; &#39;主机&#123;host&#125;执行任务成功！\n&#39;.format(host&#x3D;result._host.name)</span><br><span class="line">        self.sock.send_save(data, send&#x3D;self.send_msg)</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_failed(self, result, *args, **kwargs):</span><br><span class="line">        if &#39;stderr&#39; in result._result:</span><br><span class="line">            data &#x3D; &#39;&lt;p style&#x3D;&quot;color: #FF0000&quot;&gt;\n主机&#123;host&#125;执行任务失败 &#x3D;&#x3D;&gt; &#123;stdout&#125;\n剔除该主机！&lt;&#x2F;p&gt;&#39;.format(</span><br><span class="line">                host&#x3D;result._host.name, stdout&#x3D;result._result.get(&#39;stderr&#39;).encode().decode(&#39;utf-8&#39;))</span><br><span class="line">        elif &#39;msg&#39; in result._result:</span><br><span class="line">            data &#x3D; &#39;&lt;p style&#x3D;&quot;color: #FF0000&quot;&gt;\n主机&#123;host&#125;执行任务失败 &#x3D;&#x3D;&gt; &#123;stdout&#125;\n剔除该主机！&lt;&#x2F;p&gt;&#39;.format(</span><br><span class="line">                host&#x3D;result._host.name, stdout&#x3D;result._result.get(&#39;msg&#39;))</span><br><span class="line">        else:</span><br><span class="line">            data &#x3D; &#39;&lt;p style&#x3D;&quot;color: #FF0000&quot;&gt;\n主机&#123;host&#125;执行任务失败 &#x3D;&#x3D;&gt; &#123;stdout&#125;\n剔除该主机！&lt;&#x2F;p&gt;&#39;.format(</span><br><span class="line">                host&#x3D;result._host.name, stdout&#x3D;json.dumps(result._result, indent&#x3D;4))</span><br><span class="line">        self.chk_host_list(data, result._host.name)</span><br><span class="line"></span><br><span class="line">    def chk_host_list(self, data, host):</span><br><span class="line">        self.sock.send_save(data, send&#x3D;self.send_msg)</span><br><span class="line">        self.sock.host_list.remove(host)</span><br><span class="line">        self.sock.host_fail.append(host)</span><br><span class="line">        if len(self.sock.host_list) &#x3D;&#x3D; 0:</span><br><span class="line">            self.sock.send(&#39;&lt;p style&#x3D;&quot;color: #FF0000&quot;&gt;所有主机均部署失败！退出部署流程！&lt;&#x2F;p&gt;&#39;, close&#x3D;True)</span><br><span class="line">            self.sock.deploy_results.append(&#39;&lt;p style&#x3D;&quot;color: #FF0000&quot;&gt;所有主机均部署失败！退出部署流程！&lt;&#x2F;p&gt;&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ModuleResultsCollector(CallbackBase):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    直接执行模块命令的回调类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, sock&#x3D;None, *args, **kwargs):</span><br><span class="line">        super(ModuleResultsCollector, self).__init__(*args, **kwargs)</span><br><span class="line">        self.module_results &#x3D; []</span><br><span class="line">        self.sock &#x3D; sock</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_unreachable(self, result):</span><br><span class="line">        if &#39;msg&#39; in result._result:</span><br><span class="line">            data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #FF0000&quot;&gt;\n&#123;host&#125; | unreachable | rc&#x3D;&#123;rc&#125; &gt;&gt; \n&#123;stdout&#125;\n&lt;&#x2F;code&gt;&#39;.format(</span><br><span class="line">                host&#x3D;result._host.name, rc&#x3D;result._result.get(&#39;rc&#39;),</span><br><span class="line">                stdout&#x3D;result._result.get(&#39;msg&#39;).encode().decode(&#39;utf-8&#39;))</span><br><span class="line">        else:</span><br><span class="line">            data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #FF0000&quot;&gt;\n&#123;host&#125; | unreachable &gt;&gt; \n&#123;stdout&#125;\n&lt;&#x2F;code&gt;&#39;.format(</span><br><span class="line">                host&#x3D;result._host.name,</span><br><span class="line">                stdout&#x3D;json.dumps(result._result, indent&#x3D;4, ensure_ascii&#x3D;False))</span><br><span class="line">        if self.sock:</span><br><span class="line">            self.sock.send(data)</span><br><span class="line">        self.module_results.append(data)</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_ok(self, result, *args, **kwargs):</span><br><span class="line"></span><br><span class="line">        if &#39;rc&#39; in result._result and &#39;stdout&#39; in result._result:</span><br><span class="line">            data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #008000&quot;&gt;\n&#123;host&#125; | success | rc&#x3D;&#123;rc&#125; &gt;&gt; \n&#123;stdout&#125;\n&lt;&#x2F;code&gt;&#39;.format(</span><br><span class="line">                host&#x3D;result._host.name, rc&#x3D;result._result.get(&#39;rc&#39;),</span><br><span class="line">                stdout&#x3D;result._result.get(&#39;stdout&#39;).encode().decode(&#39;utf-8&#39;))</span><br><span class="line">        elif &#39;results&#39; in result._result and &#39;rc&#39; in result._result:</span><br><span class="line">            data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #008000&quot;&gt;\n&#123;host&#125; | success | rc&#x3D;&#123;rc&#125; &gt;&gt; \n&#123;stdout&#125;\n&lt;&#x2F;code&gt;&#39;.format(</span><br><span class="line">                host&#x3D;result._host.name, rc&#x3D;result._result.get(&#39;rc&#39;),</span><br><span class="line">                stdout&#x3D;result._result.get(&#39;results&#39;)[0].encode().decode(&#39;utf-8&#39;))</span><br><span class="line">        elif &#39;module_stdout&#39; in result._result and &#39;rc&#39; in result._result:</span><br><span class="line">            data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #008000&quot;&gt;\n&#123;host&#125; | success | rc&#x3D;&#123;rc&#125; &gt;&gt; \n&#123;stdout&#125;\n&lt;&#x2F;code&gt;&#39;.format(</span><br><span class="line">                host&#x3D;result._host.name, rc&#x3D;result._result.get(&#39;rc&#39;),</span><br><span class="line">                stdout&#x3D;result._result.get(&#39;module_stdout&#39;).encode().decode(&#39;utf-8&#39;))</span><br><span class="line">        else:</span><br><span class="line">            data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #008000&quot;&gt;\n&#123;host&#125; | success &gt;&gt; \n&#123;stdout&#125;\n&lt;&#x2F;code&gt;&#39;.format(</span><br><span class="line">                host&#x3D;result._host.name,</span><br><span class="line">                stdout&#x3D;json.dumps(result._result, indent&#x3D;4, ensure_ascii&#x3D;False))</span><br><span class="line">        if self.sock:</span><br><span class="line">            self.sock.send(data)</span><br><span class="line">        self.module_results.append(data)</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_failed(self, result, *args, **kwargs):</span><br><span class="line">        if &#39;stderr&#39; in result._result:</span><br><span class="line">            data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #FF0000&quot;&gt;\n&#123;host&#125; | failed | rc&#x3D;&#123;rc&#125; &gt;&gt; \n&#123;stdout&#125;\n&lt;&#x2F;code&gt;&#39;.format(</span><br><span class="line">                host&#x3D;result._host.name,</span><br><span class="line">                rc&#x3D;result._result.get(&#39;rc&#39;),</span><br><span class="line">                stdout&#x3D;result._result.get(&#39;stderr&#39;).encode().decode(&#39;utf-8&#39;))</span><br><span class="line">        elif &#39;module_stdout&#39; in result._result:</span><br><span class="line">            data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #FF0000&quot;&gt;\n&#123;host&#125; | failed | rc&#x3D;&#123;rc&#125; &gt;&gt; \n&#123;stdout&#125;\n&lt;&#x2F;code&gt;&#39;.format(</span><br><span class="line">                host&#x3D;result._host.name,</span><br><span class="line">                rc&#x3D;result._result.get(&#39;rc&#39;),</span><br><span class="line">                stdout&#x3D;result._result.get(&#39;module_stdout&#39;).encode().decode(&#39;utf-8&#39;))</span><br><span class="line">        else:</span><br><span class="line">            data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #FF0000&quot;&gt;\n&#123;host&#125; | failed &gt;&gt; \n&#123;stdout&#125;\n&lt;&#x2F;code&gt;&#39;.format(</span><br><span class="line">                host&#x3D;result._host.name,</span><br><span class="line">                stdout&#x3D;json.dumps(result._result, indent&#x3D;4, ensure_ascii&#x3D;False))</span><br><span class="line">        if self.sock:</span><br><span class="line">            self.sock.send(data)</span><br><span class="line">        self.module_results.append(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PlayBookResultsCollector(CallbackBase):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    执行playbook的回调类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, sock, *args, **kwargs):</span><br><span class="line">        super(PlayBookResultsCollector, self).__init__(*args, **kwargs)</span><br><span class="line">        self.playbook_results &#x3D; []</span><br><span class="line">        self.sock &#x3D; sock</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_play_start(self, play):</span><br><span class="line">        name &#x3D; play.get_name().strip()</span><br><span class="line">        if not name:</span><br><span class="line">            msg &#x3D; format(&#39;&lt;code style&#x3D;&quot;color: #FFFFFF&quot;&gt;\nPLAY&#39;, &#39;*&lt;150&#39;) + &#39; \n&lt;&#x2F;code&gt;&#39;</span><br><span class="line">        else:</span><br><span class="line">            msg &#x3D; format(f&#39;&lt;code style&#x3D;&quot;color: #FFFFFF&quot;&gt;\nPLAY [&#123;name&#125;]&#39;, &#39;*&lt;150&#39;) + &#39; \n&lt;&#x2F;code&gt;&#39;</span><br><span class="line">        self.send_save(msg)</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_task_start(self, task, is_conditional):</span><br><span class="line">        msg &#x3D; format(f&#39;&lt;code style&#x3D;&quot;color: #FFFFFF&quot;&gt;\nTASK [&#123;task.get_name()&#125;]&#39;, &#39;*&lt;150&#39;) + &#39; \n&lt;&#x2F;code&gt;&#39;</span><br><span class="line">        self.send_save(msg)</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_ok(self, result, *args, **kwargs):</span><br><span class="line">        if result.is_changed():</span><br><span class="line">            data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #FFFF00&quot;&gt;[&#123;&#125;]&#x3D;&gt; changed\n&lt;&#x2F;code&gt;&#39;.format(result._host.name)</span><br><span class="line">        else:</span><br><span class="line">            data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #008000&quot;&gt;[&#123;&#125;]&#x3D;&gt; ok\n&lt;&#x2F;code&gt;&#39;.format(result._host.name)</span><br><span class="line">        self.send_save(data)</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_failed(self, result, *args, **kwargs):</span><br><span class="line">        if &#39;changed&#39; in result._result:</span><br><span class="line">            del result._result[&#39;changed&#39;]</span><br><span class="line">        data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #FF0000&quot;&gt;[&#123;&#125;]&#x3D;&gt; &#123;&#125;: &#123;&#125;\n&lt;&#x2F;code&gt;&#39;.format(result._host.name, &#39;failed&#39;,</span><br><span class="line">                                                                            self._dump_results(result._result))</span><br><span class="line">        self.send_save(data)</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_unreachable(self, result):</span><br><span class="line">        if &#39;changed&#39; in result._result:</span><br><span class="line">            del result._result[&#39;changed&#39;]</span><br><span class="line">        data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #FF0000&quot;&gt;[&#123;&#125;]&#x3D;&gt; &#123;&#125;: &#123;&#125;\n&lt;&#x2F;code&gt;&#39;.format(result._host.name, &#39;unreachable&#39;,</span><br><span class="line">                                                                            self._dump_results(result._result))</span><br><span class="line">        self.send_save(data)</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_skipped(self, result):</span><br><span class="line">        if &#39;changed&#39; in result._result:</span><br><span class="line">            del result._result[&#39;changed&#39;]</span><br><span class="line">        data &#x3D; &#39;&lt;code style&#x3D;&quot;color: #FFFF00&quot;&gt;[&#123;&#125;]&#x3D;&gt; &#123;&#125;: &#123;&#125;\n&lt;&#x2F;code&gt;&#39;.format(result._host.name, &#39;skipped&#39;,</span><br><span class="line">                                                                            self._dump_results(result._result))</span><br><span class="line">        self.send_save(data)</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_stats(self, stats):</span><br><span class="line">        hosts &#x3D; sorted(stats.processed.keys())</span><br><span class="line">        data &#x3D; format(&#39;&lt;code style&#x3D;&quot;color: #FFFFFF&quot;&gt;\nPLAY RECAP &#39;, &#39;*&lt;150&#39;) + &#39;\n&#39;</span><br><span class="line">        self.send_save(data)</span><br><span class="line">        for h in hosts:</span><br><span class="line">            s &#x3D; stats.summarize(h)</span><br><span class="line">            msg &#x3D; &#39;&lt;code style&#x3D;&quot;color: #FFFFFF&quot;&gt;&#123;&#125; : ok&#x3D;&#123;&#125; changed&#x3D;&#123;&#125; unreachable&#x3D;&#123;&#125; failed&#x3D;&#123;&#125; skipped&#x3D;&#123;&#125;\n&lt;&#x2F;code&gt;&#39;.format(</span><br><span class="line">                h, s[&#39;ok&#39;], s[&#39;changed&#39;], s[&#39;unreachable&#39;], s[&#39;failures&#39;], s[&#39;skipped&#39;])</span><br><span class="line">            self.send_save(msg)</span><br><span class="line"></span><br><span class="line">    def send_save(self, data):</span><br><span class="line">        self.sock.send(data)</span><br><span class="line">        self.playbook_results.append(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyInventory(InventoryManager):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用于动态生成Inventory的类.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, loader, resource&#x3D;None, sources&#x3D;None):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        resource的数据格式是一个列表字典，比如</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;group1&quot;: &#123;</span><br><span class="line">                    &quot;hosts&quot;: [&#123;&quot;ip&quot;: &quot;10.0.0.0&quot;, &quot;port&quot;: &quot;22&quot;, &quot;username&quot;: &quot;test&quot;, &quot;password&quot;: &quot;pass&quot;&#125;, ...],</span><br><span class="line">                    &quot;group_vars&quot;: &#123;&quot;var1&quot;: value1, &quot;var2&quot;: value2, ...&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">             如果你只传入1个列表，这默认该列表内的所有主机属于default 组,比如</span><br><span class="line">            [&#123;&quot;ip&quot;: &quot;10.0.0.0&quot;, &quot;port&quot;: &quot;22&quot;, &quot;username&quot;: &quot;test&quot;, &quot;password&quot;: &quot;pass&quot;&#125;, ...]</span><br><span class="line">        sources是原生的方法，参数是配置的inventory文件路径，可以指定一个，也可以以列表的形式可以指定多个</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        super(MyInventory, self).__init__(loader&#x3D;loader, sources&#x3D;sources)</span><br><span class="line">        self.resource &#x3D; resource</span><br><span class="line">        self.dynamic_inventory()</span><br><span class="line"></span><br><span class="line">    def add_dynamic_group(self, hosts, group_name, group_vars&#x3D;None):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        将从数据库读取的组信息，主机信息等生成的resource信息解析成ansible可以读取的内容</span><br><span class="line">        :param hosts: 包含主机所有信息的的列表</span><br><span class="line">        :type hosts: list</span><br><span class="line">        :param group_name:</span><br><span class="line">        :param group_vars:</span><br><span class="line">        :type group_vars: dict</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 添加主机组</span><br><span class="line">        self.add_group(group_name)</span><br><span class="line"></span><br><span class="line">        # 添加主机组变量</span><br><span class="line">        if group_vars:</span><br><span class="line">            for key, value in group_vars.items():</span><br><span class="line">                self.groups[group_name].set_variable(key, value)</span><br><span class="line"></span><br><span class="line">        for host in hosts:</span><br><span class="line">            ip &#x3D; host.get(&#39;ip&#39;)</span><br><span class="line">            port &#x3D; host.get(&#39;port&#39;)</span><br><span class="line"></span><br><span class="line">            # 添加主机到主机组</span><br><span class="line">            self.add_host(ip, group_name, port)</span><br><span class="line"></span><br><span class="line">            username &#x3D; host.get(&#39;username&#39;)</span><br><span class="line">            password &#x3D; host.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">            # 生成ansible主机变量</span><br><span class="line">            self.get_host(ip).set_variable(&#39;ansible_ssh_host&#39;, ip)</span><br><span class="line">            self.get_host(ip).set_variable(&#39;ansible_ssh_port&#39;, port)</span><br><span class="line">            self.get_host(ip).set_variable(&#39;ansible_ssh_user&#39;, username)</span><br><span class="line">            self.get_host(ip).set_variable(&#39;ansible_ssh_pass&#39;, password)</span><br><span class="line">            self.get_host(ip).set_variable(&#39;ansible_sudo_pass&#39;, password)</span><br><span class="line"></span><br><span class="line">            # 如果使用同一个密钥管理所有机器，只需把下方的注释去掉，ssh_key指定密钥文件，若是不同主机使用不同密钥管理，则需要单独设置主机变量或组变量</span><br><span class="line">            # self.get_host(ip).set_variable(&#39;ansible_ssh_private_key_file&#39;, ssh_key)</span><br><span class="line"></span><br><span class="line">            # set other variables</span><br><span class="line">            for key, value in host.items():</span><br><span class="line">                if key not in [&quot;ip&quot;, &quot;port&quot;, &quot;username&quot;, &quot;password&quot;]:</span><br><span class="line">                    self.get_host(ip).set_variable(key, value)</span><br><span class="line"></span><br><span class="line">    def dynamic_inventory(self):</span><br><span class="line">        if isinstance(self.resource, list):</span><br><span class="line">            self.add_dynamic_group(self.resource, &#39;default&#39;)</span><br><span class="line">        elif isinstance(self.resource, dict):</span><br><span class="line">            for groupname, hosts_and_vars in self.resource.items():</span><br><span class="line">                self.add_dynamic_group(hosts_and_vars.get(&quot;hosts&quot;), groupname, hosts_and_vars.get(&quot;group_vars&quot;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ANSRunner(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    执行ansible模块或者playbook的类，这里默认采用了用户名+密码+sudo的方式</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, resource&#x3D;None, sources&#x3D;None, sock&#x3D;None, **kwargs):</span><br><span class="line">        Options &#x3D; namedtuple(&#39;Options&#39;, [&#39;connection&#39;, &#39;module_path&#39;, &#39;forks&#39;, &#39;timeout&#39;, &#39;remote_user&#39;,</span><br><span class="line">                                         &#39;ask_pass&#39;, &#39;private_key_file&#39;, &#39;ssh_common_args&#39;, &#39;ssh_extra_args&#39;,</span><br><span class="line">                                         &#39;sftp_extra_args&#39;, &#39;strategy&#39;,</span><br><span class="line">                                         &#39;scp_extra_args&#39;, &#39;become&#39;, &#39;become_method&#39;, &#39;become_user&#39;, &#39;ask_value_pass&#39;,</span><br><span class="line">                                         &#39;verbosity&#39;, &#39;retry_files_enabled&#39;,</span><br><span class="line">                                         &#39;check&#39;, &#39;listhosts&#39;, &#39;listtasks&#39;, &#39;listtags&#39;, &#39;syntax&#39;, &#39;diff&#39;,</span><br><span class="line">                                         &#39;gathering&#39;, &#39;roles_path&#39;])</span><br><span class="line">        self.options &#x3D; Options(connection&#x3D;&#39;smart&#39;,</span><br><span class="line">                               module_path&#x3D;None,</span><br><span class="line">                               forks&#x3D;50, timeout&#x3D;10,</span><br><span class="line">                               remote_user&#x3D;kwargs.get(&#39;remote_user&#39;, None), ask_pass&#x3D;False, private_key_file&#x3D;None,</span><br><span class="line">                               ssh_common_args&#x3D;None,</span><br><span class="line">                               ssh_extra_args&#x3D;None,</span><br><span class="line">                               sftp_extra_args&#x3D;None, strategy&#x3D;&#39;free&#39;, scp_extra_args&#x3D;None,</span><br><span class="line">                               become&#x3D;kwargs.get(&#39;become&#39;, None),</span><br><span class="line">                               become_method&#x3D;kwargs.get(&#39;become_method&#39;, None),</span><br><span class="line">                               become_user&#x3D;kwargs.get(&#39;become_user&#39;, None), ask_value_pass&#x3D;False, verbosity&#x3D;None,</span><br><span class="line">                               retry_files_enabled&#x3D;False, check&#x3D;False, listhosts&#x3D;False,</span><br><span class="line">                               listtasks&#x3D;False, listtags&#x3D;False, syntax&#x3D;False, diff&#x3D;True, gathering&#x3D;&#39;smart&#39;,</span><br><span class="line">                               roles_path&#x3D;os.path.join(PATH, &quot;..&#x2F;roles&quot;))</span><br><span class="line">        self.loader &#x3D; DataLoader()</span><br><span class="line">        self.inventory &#x3D; MyInventory(resource&#x3D;resource, loader&#x3D;self.loader, sources&#x3D;sources)</span><br><span class="line">        self.variable_manager &#x3D; VariableManager(loader&#x3D;self.loader, inventory&#x3D;self.inventory)</span><br><span class="line">        self.passwords &#x3D; dict(sshpass&#x3D;None, becomepass&#x3D;None)</span><br><span class="line">        self.callback &#x3D; None</span><br><span class="line">        self.sock &#x3D; sock</span><br><span class="line"></span><br><span class="line">    def run_module(self, host_list, module_name, module_args&#x3D;None, deploy&#x3D;False, send_msg&#x3D;True):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        run module from ansible ad-hoc.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.callback &#x3D; CallbackModule()</span><br><span class="line"></span><br><span class="line">        if module_args:</span><br><span class="line">            play_source &#x3D; dict(</span><br><span class="line">                name&#x3D;&quot;Ansible play&quot;,</span><br><span class="line">                hosts&#x3D;host_list,</span><br><span class="line">                gather_facts&#x3D;&#39;no&#39;,</span><br><span class="line">                tasks&#x3D;[dict(action&#x3D;dict(module&#x3D;module_name, args&#x3D;module_args))]</span><br><span class="line">            )</span><br><span class="line">        else:</span><br><span class="line">            play_source &#x3D; dict(</span><br><span class="line">                name&#x3D;&quot;Ansible play&quot;,</span><br><span class="line">                hosts&#x3D;host_list,</span><br><span class="line">                gather_facts&#x3D;&#39;no&#39;,</span><br><span class="line">                tasks&#x3D;[dict(action&#x3D;dict(module&#x3D;module_name, ))]</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        play &#x3D; Play().load(play_source, variable_manager&#x3D;self.variable_manager, loader&#x3D;self.loader)</span><br><span class="line"></span><br><span class="line">        # actually run it</span><br><span class="line">        tqm &#x3D; None</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            tqm &#x3D; TaskQueueManager(</span><br><span class="line">                inventory&#x3D;self.inventory,</span><br><span class="line">                variable_manager&#x3D;self.variable_manager,</span><br><span class="line">                loader&#x3D;self.loader,</span><br><span class="line">                # options&#x3D;self.options,</span><br><span class="line">                passwords&#x3D;self.passwords,</span><br><span class="line">                stdout_callback&#x3D;self.callback,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            C.HOST_KEY_CHECKING &#x3D; False  # 关闭第一次使用ansible连接客户端时输入命令</span><br><span class="line">            tqm.run(play)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            logger.error(&#39;执行 &#123;&#125; 失败，原因: &#123;&#125;&#39;.format(module_name, e))</span><br><span class="line">        finally:</span><br><span class="line">            if tqm is not None:</span><br><span class="line">                tqm.cleanup()</span><br><span class="line">            shutil.rmtree(C.DEFAULT_LOCAL_TMP, True)</span><br><span class="line"></span><br><span class="line">    def run_playbook(self, playbook_path, extra_vars&#x3D;None):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        run ansible playbook</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        try:</span><br><span class="line">            self.callback &#x3D; PlayBookResultsCollector(sock&#x3D;self.sock)</span><br><span class="line">            if extra_vars:</span><br><span class="line">                self.variable_manager.extra_vars &#x3D; extra_vars</span><br><span class="line">            executor &#x3D; PlaybookExecutor(</span><br><span class="line">                playbooks&#x3D;[playbook_path], inventory&#x3D;self.inventory, variable_manager&#x3D;self.variable_manager,</span><br><span class="line">                loader&#x3D;self.loader,</span><br><span class="line">                passwords&#x3D;self.passwords,</span><br><span class="line">            )</span><br><span class="line">            executor._tqm._stdout_callback &#x3D; self.callback</span><br><span class="line">            C.HOST_KEY_CHECKING &#x3D; False  # 关闭第一次使用ansible连接客户端时输入命令</span><br><span class="line">            executor.run()</span><br><span class="line">        except Exception as e:</span><br><span class="line">            logger.error(&#39;执行&#123;&#125;失败，原因: &#123;&#125;&#39;.format(playbook_path, e))</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def get_module_results(self):</span><br><span class="line">        return self.callback.results</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def get_playbook_results(self):</span><br><span class="line">        return self.callback.playbook_results</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def handle_setup_data(data):</span><br><span class="line">        &quot;&quot;&quot;处理setup模块数据，用于收集服务器信息功能&quot;&quot;&quot;</span><br><span class="line">        server_facts &#x3D; &#123;&#125;</span><br><span class="line">        result &#x3D; json.loads(data[data.index(&#39;&#123;&#39;): data.rindex(&#39;&#125;&#39;) + 1])</span><br><span class="line">        facts &#x3D; result[&#39;ansible_facts&#39;]</span><br><span class="line">        server_facts[&#39;hostname&#39;] &#x3D; facts[&#39;ansible_hostname&#39;]</span><br><span class="line">        server_facts[&#39;cpu_model&#39;] &#x3D; facts[&#39;ansible_processor&#39;][-1]</span><br><span class="line">        server_facts[&#39;cpu_number&#39;] &#x3D; int(facts[&#39;ansible_processor_count&#39;])</span><br><span class="line">        server_facts[&#39;vcpu_number&#39;] &#x3D; int(facts[&#39;ansible_processor_vcpus&#39;])</span><br><span class="line">        server_facts[&#39;disk_total&#39;], disk_size &#x3D; 0, 0</span><br><span class="line">        for k, v in facts[&#39;ansible_devices&#39;].items():</span><br><span class="line">            if k[0:2] in [&#39;sd&#39;, &#39;hd&#39;, &#39;ss&#39;, &#39;vd&#39;]:</span><br><span class="line">                if &#39;G&#39; in v[&#39;size&#39;]:</span><br><span class="line">                    disk_size &#x3D; float(v[&#39;size&#39;][0: v[&#39;size&#39;].rindex(&#39;G&#39;) - 1])</span><br><span class="line">                elif &#39;T&#39; in v[&#39;size&#39;]:</span><br><span class="line">                    disk_size &#x3D; float(v[&#39;size&#39;][0: v[&#39;size&#39;].rindex(&#39;T&#39;) - 1]) * 1024</span><br><span class="line">                server_facts[&#39;disk_total&#39;] +&#x3D; round(disk_size, 2)</span><br><span class="line">        server_facts[&#39;ram_total&#39;] &#x3D; round(int(facts[&#39;ansible_memtotal_mb&#39;]) &#x2F; 1024)</span><br><span class="line">        server_facts[&#39;kernel&#39;] &#x3D; facts[&#39;ansible_kernel&#39;]</span><br><span class="line">        server_facts[&#39;system&#39;] &#x3D; &#39;&#123;&#125; &#123;&#125; &#123;&#125;&#39;.format(facts[&#39;ansible_distribution&#39;],</span><br><span class="line">                                                   facts[&#39;ansible_distribution_version&#39;],</span><br><span class="line">                                                   facts[&#39;ansible_userspace_bits&#39;])</span><br><span class="line">        server_model &#x3D; facts[&#39;ansible_product_name&#39;]</span><br><span class="line"></span><br><span class="line">        # 获取网卡信息</span><br><span class="line">        nks &#x3D; []</span><br><span class="line">        for nk in facts.keys():</span><br><span class="line">            networkcard_facts &#x3D; &#123;&#125;</span><br><span class="line">            if re.match(r&quot;^ansible_(eth|bind|eno|ens|em)\d+?&quot;, nk):</span><br><span class="line">                networkcard_facts[&#39;network_card_name&#39;] &#x3D; facts.get(nk).get(&#39;device&#39;)</span><br><span class="line">                networkcard_facts[&#39;network_card_mac&#39;] &#x3D; facts.get(nk).get(&#39;macaddress&#39;)</span><br><span class="line">                networkcard_facts[&#39;network_card_ip&#39;] &#x3D; facts.get(nk).get(&#39;ipv4&#39;).get(&#39;address&#39;) if &#39;ipv4&#39; in facts.get(</span><br><span class="line">                    nk) else &#39;unknown&#39;</span><br><span class="line">                networkcard_facts[&#39;network_card_model&#39;] &#x3D; facts.get(nk).get(&#39;type&#39;)</span><br><span class="line">                networkcard_facts[&#39;network_card_mtu&#39;] &#x3D; facts.get(nk).get(&#39;mtu&#39;)</span><br><span class="line">                networkcard_facts[&#39;network_card_status&#39;] &#x3D; 1 if facts.get(nk).get(&#39;active&#39;) else 0</span><br><span class="line">                nks.append(networkcard_facts)</span><br><span class="line">        return server_facts, server_model, nks</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def handle_mem_data(data):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        处理获取的内存信息</span><br><span class="line">        :param data: 通过ansible获取的内存信息</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        result &#x3D; json.loads(data[data.index(&#39;&#123;&#39;): data.rindex(&#39;&#125;&#39;) + 1])</span><br><span class="line">        facts &#x3D; result[&#39;ansible_facts&#39;]</span><br><span class="line">        return facts[&#39;mem_info&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    inventory_path &#x3D; &#39;&#x2F;Users&#x2F;shuke&#x2F;Work&#x2F;SCM&#x2F;Door&#x2F;apps&#x2F;playbook&#x2F;inventory&#x2F;rcx&#x2F;hosts.ini&#39;</span><br><span class="line">    ANSRunner(sources&#x3D;inventory_path).run_playbook(playbook_path&#x3D;[&#39;&#x2F;Users&#x2F;shuke&#x2F;Work&#x2F;SCM&#x2F;Door&#x2F;apps&#x2F;playbook&#x2F;test.yml&#39;])</span><br></pre></td></tr></table></figure>

<h2 id="example3"><a href="#example3" class="headerlink" title="example3"></a>example3</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: shuke</span><br><span class="line">@file: ansible_playbook_api.py </span><br><span class="line">@time: 2020&#x2F;03&#x2F;18 09:55</span><br><span class="line">@contact: shu_ke163@163.com</span><br><span class="line">@software:  Door</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import json</span><br><span class="line">import logging</span><br><span class="line">import datetime</span><br><span class="line">from collections import namedtuple</span><br><span class="line"></span><br><span class="line">from ansible import constants as C</span><br><span class="line">from ansible import constants</span><br><span class="line">from ansible.parsing.ajson import AnsibleJSONEncoder</span><br><span class="line">from ansible.plugins.callback.default import CallbackModule</span><br><span class="line">from ansible.parsing.dataloader import DataLoader</span><br><span class="line">from ansible.vars.manager import VariableManager</span><br><span class="line">from ansible.inventory.manager import InventoryManager</span><br><span class="line">from ansible.executor.playbook_executor import PlaybookExecutor</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    from __main__ import display</span><br><span class="line">except ImportError:</span><br><span class="line">    from ansible.utils.display import Display</span><br><span class="line"></span><br><span class="line">    display &#x3D; Display()</span><br><span class="line"></span><br><span class="line">logger &#x3D; logging.getLogger(&quot;door&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def current_time():</span><br><span class="line">    return &#39;%sZ&#39; % datetime.datetime.utcnow().isoformat()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PlaybookCallback(CallbackModule):</span><br><span class="line">    &quot;&quot;&quot;重写console输出日志&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(CallbackModule, self).__init__(display)</span><br><span class="line">        self.results &#x3D; []</span><br><span class="line">        self.host_unreachable &#x3D; &#123;&#125;</span><br><span class="line">        self.host_failed &#x3D; &#123;&#125;</span><br><span class="line">        self.host_ok &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    def _new_play(self, play):</span><br><span class="line">        return &#123;</span><br><span class="line">            &#39;play&#39;: &#123;</span><br><span class="line">                &#39;name&#39;: play.get_name(),</span><br><span class="line">                &#39;id&#39;: str(play._uuid),</span><br><span class="line">                &#39;duration&#39;: &#123;</span><br><span class="line">                    &#39;start&#39;: current_time()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#39;tasks&#39;: []</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    def _new_task(self, task):</span><br><span class="line">        return &#123;</span><br><span class="line">            &#39;task&#39;: &#123;</span><br><span class="line">                &#39;name&#39;: task.get_name(),</span><br><span class="line">                &#39;id&#39;: str(task._uuid),</span><br><span class="line">                &#39;duration&#39;: &#123;</span><br><span class="line">                    &#39;start&#39;: current_time()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#39;hosts&#39;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    # 重写2.0版本正确stdout</span><br><span class="line">    def v2_runner_on_ok(self, result):</span><br><span class="line"></span><br><span class="line">        print(result._result)</span><br><span class="line"></span><br><span class="line">        # if self._play.strategy &#x3D;&#x3D; &#39;free&#39; and self._last_task_banner !&#x3D; result._task._uuid:</span><br><span class="line">        #     self._print_task_banner(result._task)</span><br><span class="line">        #</span><br><span class="line">        # self._clean_results(result._result, result._task.action)</span><br><span class="line">        # # delegated_vars &#x3D; result._result.get(&#39;_ansible_delegated_vars&#39;, None)</span><br><span class="line">        # delegated_vars &#x3D; self._dump_results(result._result)</span><br><span class="line">        # # delegated_vars &#x3D; result._result</span><br><span class="line">        # # n_delegated_vars &#x3D; self._dump_results(result)</span><br><span class="line">        # # print n_delegated_vars</span><br><span class="line">        # self._clean_results(result._result, result._task.action)</span><br><span class="line">        #</span><br><span class="line">        # if result._task.action in (&#39;include&#39;, &#39;include_role&#39;):</span><br><span class="line">        #     return</span><br><span class="line">        # elif result._result.get(&#39;changed&#39;, False):</span><br><span class="line">        #     if delegated_vars:</span><br><span class="line">        #         # 自定义输出</span><br><span class="line">        #         zdy_msg &#x3D; self.zdy_stdout(json.loads(delegated_vars))</span><br><span class="line">        #         if zdy_msg:</span><br><span class="line">        #             msg &#x3D; &quot;changed: [%s]%s&quot; % (result._host.get_name(), zdy_msg)</span><br><span class="line">        #         else:</span><br><span class="line">        #             msg &#x3D; &quot;changed: [%s -&gt; %s]&quot; % (result._host.get_name(), delegated_vars)</span><br><span class="line">        #     else:</span><br><span class="line">        #         msg &#x3D; &quot;changed: [%s]&quot; % result._host.get_name()</span><br><span class="line">        #     color &#x3D; C.COLOR_CHANGED</span><br><span class="line">        # # 判断是否是第一步 setup</span><br><span class="line">        #</span><br><span class="line">        # elif result._result.get(&#39;ansible_facts&#39;, False):</span><br><span class="line">        #     msg &#x3D; &quot;ok: [ %s | %s ]&quot; % (str(result._host), str(result._host.get_groups()))</span><br><span class="line">        #     color &#x3D; C.COLOR_OK</span><br><span class="line">        # else:</span><br><span class="line">        #     if delegated_vars:</span><br><span class="line">        #         # 自定义输出</span><br><span class="line">        #         zdy_msg &#x3D; self.zdy_stdout(json.loads(delegated_vars))</span><br><span class="line">        #         if zdy_msg:</span><br><span class="line">        #             msg &#x3D; &quot;ok: [%s]%s&quot; % (result._host.get_name(), zdy_msg)</span><br><span class="line">        #         else:</span><br><span class="line">        #             msg &#x3D; &quot;ok: [%s -&gt; %s]&quot; % (result._host.get_name(), delegated_vars)</span><br><span class="line">        #     else:</span><br><span class="line">        #         msg &#x3D; &quot;ok: [%s]&quot; % result._host.get_name()</span><br><span class="line">        #     color &#x3D; C.COLOR_OK</span><br><span class="line">        #</span><br><span class="line">        # if result._task.loop and &#39;results&#39; in result._result:</span><br><span class="line">        #     self._process_items(result)</span><br><span class="line">        # else:</span><br><span class="line">        #     self._display.display(msg, color&#x3D;color)</span><br><span class="line">        #</span><br><span class="line">        # self._handle_warnings(result._result)</span><br><span class="line"></span><br><span class="line">    # 自定义输出,格式清晰一些</span><br><span class="line">    def zdy_stdout(self, result):</span><br><span class="line">        msg &#x3D; &#39;&#39;</span><br><span class="line">        if result.get(&#39;delta&#39;, False):</span><br><span class="line">            msg +&#x3D; u&#39;\t执行时间:%s&#39; % result[&#39;delta&#39;]</span><br><span class="line">        if result.get(&#39;cmd&#39;, False):</span><br><span class="line">            msg +&#x3D; u&#39;\n执行命令:%s&#39; % result[&#39;cmd&#39;]</span><br><span class="line">        if result.get(&#39;stderr&#39;, False):</span><br><span class="line">            msg +&#x3D; u&#39;\n错误输出:\n%s&#39; % result[&#39;stderr&#39;]</span><br><span class="line">        if result.get(&#39;stdout&#39;, False):</span><br><span class="line">            msg +&#x3D; u&#39;\n正确输出:\n%s&#39; % result[&#39;stdout&#39;]</span><br><span class="line">        if result.get(&#39;warnings&#39;, False):</span><br><span class="line">            msg +&#x3D; u&#39;\n警告:%s&#39; % result[&#39;warnings&#39;]</span><br><span class="line">        return msg</span><br><span class="line"></span><br><span class="line">    def display_skipped_hosts(self, result):</span><br><span class="line">        print(result._result)</span><br><span class="line"></span><br><span class="line">    # def v2_runner_on_ok(self, result, **kwargs):</span><br><span class="line">    #</span><br><span class="line">    #     hostname &#x3D; result._host.get_name()</span><br><span class="line">    #     logger.info(f&quot;ansible v2_runner_on_ok hostname: &#123;hostname&#125;&quot;)</span><br><span class="line">    #     try:</span><br><span class="line">    #</span><br><span class="line">    #         self.host_ok[result._host.get_name()] &#x3D; result</span><br><span class="line">    #</span><br><span class="line">    #     except Exception as e:</span><br><span class="line">    #         logger.error(f&quot;get ansible facts result faild: &#123;e.__class__.__name__&#125;: &#123;e&#125;&quot;)</span><br><span class="line">    #         raise Exception(&quot;&#123;hostname&#125; already exist&quot;.format(hostname&#x3D;hostname))</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_unreachable(self, result):</span><br><span class="line">        logger.info(&quot;unreachable host: &#123;&#125;&quot;.format(result._host.get_name()))</span><br><span class="line">        self.results.append(&#123;result._host.get_name(): result._result&#125;)</span><br><span class="line">        self.host_unreachable[result._host.get_name()] &#x3D; result</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_failed(self, result, *args, **kwargs):</span><br><span class="line">        print(result.__dict__)</span><br><span class="line">        logger.info(&quot;host failed: &#123;&#125;&quot;.format(result._host.get_name()))</span><br><span class="line">        self.results.append(&#123;result._host.get_name(): result._result&#125;)</span><br><span class="line">        self.host_failed[result._host.get_name()] &#x3D; result</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_play_start(self, play):</span><br><span class="line">        self.results.append(self._new_play(play))</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_task_start(self, task, is_conditional):</span><br><span class="line">        self.results[-1][&#39;tasks&#39;].append(self._new_task(task))</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_handler_task_start(self, task):</span><br><span class="line">        self.results[-1][&#39;tasks&#39;].append(self._new_task(task))</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_stats(self, stats):</span><br><span class="line">        &quot;&quot;&quot;Display info about playbook statistics&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        hosts &#x3D; sorted(stats.processed.keys())</span><br><span class="line"></span><br><span class="line">        summary &#x3D; &#123;&#125;</span><br><span class="line">        for h in hosts:</span><br><span class="line">            s &#x3D; stats.summarize(h)</span><br><span class="line">            summary[h] &#x3D; s</span><br><span class="line"></span><br><span class="line">        custom_stats &#x3D; &#123;&#125;</span><br><span class="line">        global_custom_stats &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">        if self.get_option(&#39;show_custom_stats&#39;) and stats.custom:</span><br><span class="line">            custom_stats.update(dict((self._convert_host_to_name(k), v) for k, v in stats.custom.items()))</span><br><span class="line">            global_custom_stats.update(custom_stats.pop(&#39;_run&#39;, &#123;&#125;))</span><br><span class="line"></span><br><span class="line">        output &#x3D; &#123;</span><br><span class="line">            &#39;plays&#39;: self.results,</span><br><span class="line">            &#39;stats&#39;: summary,</span><br><span class="line">            &#39;custom_stats&#39;: custom_stats,</span><br><span class="line">            &#39;global_custom_stats&#39;: global_custom_stats,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self._display.display(json.dumps(output, cls&#x3D;AnsibleJSONEncoder, indent&#x3D;4, sort_keys&#x3D;True))</span><br><span class="line"></span><br><span class="line">    def _record_task_result(self, on_info, result, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;This function is used as a partial to add failed&#x2F;skipped info in a single method&quot;&quot;&quot;</span><br><span class="line">        host &#x3D; result._host</span><br><span class="line">        task &#x3D; result._task</span><br><span class="line">        task_result &#x3D; result._result.copy()</span><br><span class="line">        task_result.update(on_info)</span><br><span class="line">        task_result[&#39;action&#39;] &#x3D; task.action</span><br><span class="line">        self.results[-1][&#39;tasks&#39;][-1][&#39;hosts&#39;][host.name] &#x3D; task_result</span><br><span class="line">        end_time &#x3D; current_time()</span><br><span class="line">        self.results[-1][&#39;tasks&#39;][-1][&#39;task&#39;][&#39;duration&#39;][&#39;end&#39;] &#x3D; end_time</span><br><span class="line">        self.results[-1][&#39;play&#39;][&#39;duration&#39;][&#39;end&#39;] &#x3D; end_time</span><br><span class="line"></span><br><span class="line">        return self.results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PlayBookJob:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    封装一个playbook接口,提供给外部使用</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, playbooks, host_list, ssh_user&#x3D;&#39;bbs&#39;, passwords&#x3D;&#39;null&#39;, project_name&#x3D;&#39;all&#39;, ack_pass&#x3D;False,</span><br><span class="line">                 forks&#x3D;5, ext_vars&#x3D;None):</span><br><span class="line">        self.playbooks &#x3D; playbooks</span><br><span class="line">        self.host_list &#x3D; host_list</span><br><span class="line">        self.ssh_user &#x3D; ssh_user</span><br><span class="line">        self.passwords &#x3D; dict(vault_pass&#x3D;passwords)</span><br><span class="line">        self.project_name &#x3D; project_name</span><br><span class="line">        self.ack_pass &#x3D; ack_pass</span><br><span class="line">        self.forks &#x3D; forks</span><br><span class="line">        self.connection &#x3D; &#39;smart&#39;</span><br><span class="line">        self.ext_vars &#x3D; ext_vars</span><br><span class="line"></span><br><span class="line">        ## 用来加载解析yaml文件或JSON内容,并且支持vault的解密</span><br><span class="line">        self.loader &#x3D; DataLoader()</span><br><span class="line"></span><br><span class="line">        # 根据inventory加载对应变量</span><br><span class="line">        self.inventory &#x3D; InventoryManager(loader&#x3D;self.loader,</span><br><span class="line">                                          sources&#x3D;&#39;&#x2F;Users&#x2F;shuke&#x2F;Work&#x2F;SCM&#x2F;Door&#x2F;apps&#x2F;playbook&#x2F;inventory&#x2F;rcx&#x2F;hosts.ini&#39;)</span><br><span class="line"></span><br><span class="line">        # 管理变量的类，包括主机，组，扩展等变量，之前版本是在 inventory中的</span><br><span class="line">        self.variable_manager &#x3D; VariableManager(loader&#x3D;self.loader, inventory&#x3D;self.inventory)</span><br><span class="line"></span><br><span class="line">        self.variable_manager.set_inventory(self.inventory)</span><br><span class="line"></span><br><span class="line">        # 初始化需要的对象1</span><br><span class="line">        self.Options &#x3D; namedtuple(&#39;Options&#39;,</span><br><span class="line">                                  [&#39;connection&#39;,</span><br><span class="line">                                   &#39;remote_user&#39;,</span><br><span class="line">                                   &#39;ask_sudo_pass&#39;,</span><br><span class="line">                                   &#39;verbosity&#39;,</span><br><span class="line">                                   &#39;ack_pass&#39;,</span><br><span class="line">                                   &#39;module_path&#39;,</span><br><span class="line">                                   &#39;forks&#39;,</span><br><span class="line">                                   &#39;become&#39;,</span><br><span class="line">                                   &#39;become_method&#39;,</span><br><span class="line">                                   &#39;become_user&#39;,</span><br><span class="line">                                   &#39;check&#39;,</span><br><span class="line">                                   &#39;listhosts&#39;,</span><br><span class="line">                                   &#39;listtasks&#39;,</span><br><span class="line">                                   &#39;listtags&#39;,</span><br><span class="line">                                   &#39;syntax&#39;,</span><br><span class="line">                                   &#39;sudo_user&#39;,</span><br><span class="line">                                   &#39;sudo&#39;</span><br><span class="line">                                   ])</span><br><span class="line"></span><br><span class="line">        # 初始化需要的对象2</span><br><span class="line">        self.options &#x3D; self.Options(connection&#x3D;self.connection,</span><br><span class="line">                                    remote_user&#x3D;self.ssh_user,</span><br><span class="line">                                    ack_pass&#x3D;self.ack_pass,</span><br><span class="line">                                    sudo_user&#x3D;self.ssh_user,</span><br><span class="line">                                    forks&#x3D;self.forks,</span><br><span class="line">                                    sudo&#x3D;&#39;yes&#39;,</span><br><span class="line">                                    ask_sudo_pass&#x3D;False,</span><br><span class="line">                                    verbosity&#x3D;5,</span><br><span class="line">                                    module_path&#x3D;None,</span><br><span class="line">                                    become&#x3D;True,</span><br><span class="line">                                    become_method&#x3D;&#39;sudo&#39;,</span><br><span class="line">                                    become_user&#x3D;&#39;root&#39;,</span><br><span class="line">                                    check&#x3D;None,</span><br><span class="line">                                    listhosts&#x3D;None,</span><br><span class="line">                                    listtasks&#x3D;None,</span><br><span class="line">                                    listtags&#x3D;None,</span><br><span class="line">                                    syntax&#x3D;None</span><br><span class="line">                                    )</span><br><span class="line"></span><br><span class="line">        # 初始化console输出</span><br><span class="line">        self.callback &#x3D; PlaybookCallback()</span><br><span class="line"></span><br><span class="line">        # 直接开始</span><br><span class="line">        self.run_playbook()</span><br><span class="line"></span><br><span class="line">    def run_playbook(self, extra_vars&#x3D;dict()):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        run ansible palybook</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        self.callback &#x3D; PlaybookCallback()</span><br><span class="line">        extra_vars[&#39;host&#39;] &#x3D; &#39;,&#39;.join(self.host_list)</span><br><span class="line"></span><br><span class="line">        executor &#x3D; PlaybookExecutor(</span><br><span class="line">            playbooks&#x3D;self.playbooks, inventory&#x3D;self.inventory,</span><br><span class="line">            variable_manager&#x3D;self.variable_manager,</span><br><span class="line">            loader&#x3D;self.loader,</span><br><span class="line">            passwords&#x3D;self.passwords,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        print(executor)</span><br><span class="line"></span><br><span class="line">        executor._tqm._stdout_callback &#x3D; self.callback</span><br><span class="line">        constants.HOST_KEY_CHECKING &#x3D; False</span><br><span class="line">        constants.DEPRECATION_WARNINGS &#x3D; False</span><br><span class="line">        constants.RETRY_FILES_ENABLED &#x3D; False</span><br><span class="line">        executor.run()</span><br><span class="line"></span><br><span class="line">        # try:</span><br><span class="line">        #</span><br><span class="line">        # except Exception as err:</span><br><span class="line">        #     logger.error(msg&#x3D;&quot;run playbook failed: &#123;err&#125;&quot;.format(err&#x3D;str(err)))</span><br><span class="line">        #     return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    PlayBookJob(playbooks&#x3D;[&#39;&#x2F;Users&#x2F;shuke&#x2F;Work&#x2F;SCM&#x2F;Door&#x2F;apps&#x2F;playbook&#x2F;test.yml&#39;],</span><br><span class="line">                host_list&#x3D;[&#39;10.45.176.2&#39;],</span><br><span class="line">                ssh_user&#x3D;&#39;root&#39;,</span><br><span class="line">                project_name&#x3D;&quot;test&quot;,</span><br><span class="line">                forks&#x3D;20,</span><br><span class="line">                ext_vars&#x3D;None</span><br><span class="line">                )</span><br></pre></td></tr></table></figure>

<h3 id="example4"><a href="#example4" class="headerlink" title="example4"></a>example4</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@aythor: shuke</span><br><span class="line">@file: ansible_api.py </span><br><span class="line">@content: zhaofengfeng@rongcloud.cn</span><br><span class="line">@time: 2020&#x2F;03&#x2F;07 14:48</span><br><span class="line">@software:  Door</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import datetime</span><br><span class="line">import json</span><br><span class="line">import shutil</span><br><span class="line">import logging</span><br><span class="line">from ansible.module_utils.common.collections import ImmutableDict</span><br><span class="line">from ansible.parsing.dataloader import DataLoader</span><br><span class="line">from ansible.vars.manager import VariableManager</span><br><span class="line">from ansible.inventory.manager import InventoryManager</span><br><span class="line">from ansible.playbook.play import Play</span><br><span class="line">from ansible.executor.task_queue_manager import TaskQueueManager</span><br><span class="line">from ansible import context</span><br><span class="line">import ansible.constants as C</span><br><span class="line">from ansible.inventory.host import Host</span><br><span class="line">from ansible.parsing.ajson import AnsibleJSONEncoder</span><br><span class="line">from ansible.plugins.callback import CallbackBase</span><br><span class="line">from distutils.sysconfig import get_python_lib</span><br><span class="line">from functools import partial</span><br><span class="line"></span><br><span class="line">PATH &#x3D; os.path.dirname(os.path.dirname(os.path.realpath(__file__)))</span><br><span class="line">sys.path.insert(0, PATH)</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;Door.settings&quot;)</span><br><span class="line"></span><br><span class="line">import django</span><br><span class="line"></span><br><span class="line">django.setup()</span><br><span class="line"></span><br><span class="line">from apps.host import models</span><br><span class="line"></span><br><span class="line">logger &#x3D; logging.getLogger(&quot;door&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def current_time():</span><br><span class="line">    return &#39;%sZ&#39; % datetime.datetime.utcnow().isoformat()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CallbackModule(CallbackBase):</span><br><span class="line">    CALLBACK_VERSION &#x3D; 2.0</span><br><span class="line">    CALLBACK_TYPE &#x3D; &#39;stdout&#39;</span><br><span class="line">    CALLBACK_NAME &#x3D; &#39;tomysql&#39;</span><br><span class="line"></span><br><span class="line">    def __init__(self, display&#x3D;None):</span><br><span class="line">        super(CallbackModule, self).__init__(display)</span><br><span class="line">        self.results &#x3D; []</span><br><span class="line">        self.host_unreachable &#x3D; &#123;&#125;</span><br><span class="line">        self.host_failed &#x3D; &#123;&#125;</span><br><span class="line">        self.host_ok &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    def _new_play(self, play):</span><br><span class="line">        return &#123;</span><br><span class="line">            &#39;play&#39;: &#123;</span><br><span class="line">                &#39;name&#39;: play.get_name(),</span><br><span class="line">                &#39;id&#39;: str(play._uuid),</span><br><span class="line">                &#39;duration&#39;: &#123;</span><br><span class="line">                    &#39;start&#39;: current_time()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#39;tasks&#39;: []</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    def _new_task(self, task):</span><br><span class="line">        return &#123;</span><br><span class="line">            &#39;task&#39;: &#123;</span><br><span class="line">                &#39;name&#39;: task.get_name(),</span><br><span class="line">                &#39;id&#39;: str(task._uuid),</span><br><span class="line">                &#39;duration&#39;: &#123;</span><br><span class="line">                    &#39;start&#39;: current_time()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#39;hosts&#39;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_ok(self, result, **kwargs):</span><br><span class="line"></span><br><span class="line">        hostname &#x3D; result._host.get_name()</span><br><span class="line">        logger.info(f&quot;ansible v2_runner_on_ok hostname: &#123;hostname&#125;&quot;)</span><br><span class="line">        try:</span><br><span class="line">            host &#x3D; result._result[&quot;ansible_facts&quot;]</span><br><span class="line">            host_info &#x3D; &#123;&#125;</span><br><span class="line">            host_info[&quot;hostname&quot;] &#x3D; hostname</span><br><span class="line">            host_info[&quot;fqdn&quot;] &#x3D; host.get(&quot;ansible_fqdn&quot;, None)</span><br><span class="line">            host_info[&quot;cpu&quot;] &#x3D; str(host.get(&quot;ansible_processor_vcpus&quot;, None)) + &quot;c&quot;</span><br><span class="line">            host_info[&quot;memory&quot;] &#x3D; str(round(host.get(&quot;ansible_memtotal_mb&quot;) &#x2F; 1024) + 1) + &quot; GB&quot;</span><br><span class="line">            host_info[&quot;disk&quot;] &#x3D; host.get(&quot;ansible_devices&quot;)[&quot;vda&quot;][&quot;size&quot;]</span><br><span class="line">            host_info[&quot;disk_format&quot;] &#x3D; host.get(&quot;ansible_mounts&quot;)[0][&quot;fstype&quot;]</span><br><span class="line">            host_info[&quot;mount_point&quot;] &#x3D; host.get(&quot;ansible_mounts&quot;)[0][&quot;mount&quot;]</span><br><span class="line">            host_info[&quot;ipv4&quot;] &#x3D; host.get(&quot;ansible_default_ipv4&quot;)[&quot;address&quot;]</span><br><span class="line">            host_info[&quot;arch&quot;] &#x3D; host.get(&quot;ansible_architecture&quot;, None)</span><br><span class="line">            host_info[&quot;os_type&quot;] &#x3D; host.get(&quot;ansible_distribution&quot;, None)</span><br><span class="line">            host_info[&quot;os_version&quot;] &#x3D; host.get(&quot;ansible_distribution_version&quot;, None)</span><br><span class="line">            host_info[&quot;machine_id&quot;] &#x3D; host.get(&quot;ansible_machine_id&quot;, None)</span><br><span class="line">            host_info[&quot;macaddress&quot;] &#x3D; host.get(&quot;ansible_default_ipv4&quot;)[&quot;macaddress&quot;]</span><br><span class="line">            host_info[&quot;kernel_info&quot;] &#x3D; host.get(&quot;ansible_kernel&quot;, None)</span><br><span class="line">            host_info[&quot;virtualization_type&quot;] &#x3D; host.get(&quot;ansible_virtualization_type&quot;, None)</span><br><span class="line"></span><br><span class="line">            import json</span><br><span class="line">            print(json.dumps(host_info, indent&#x3D;4, ensure_ascii&#x3D;False))</span><br><span class="line"></span><br><span class="line">            self.results.append(host_info)</span><br><span class="line">            self.host_ok[result._host.get_name()] &#x3D; result</span><br><span class="line"></span><br><span class="line">            models.Cmdb.objects.update_or_create(hostname&#x3D;host_info[&quot;hostname&quot;], defaults&#x3D;host_info)</span><br><span class="line"></span><br><span class="line">        except Exception as e:</span><br><span class="line">            logger.error(f&quot;get ansible facts result faild: &#123;e.__class__.__name__&#125;: &#123;e&#125;&quot;)</span><br><span class="line">            raise Exception(&quot;&#123;hostname&#125; already exist&quot;.format(hostname&#x3D;hostname))</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_unreachable(self, result):</span><br><span class="line">        logger.info(&quot;unreachable host: &#123;&#125;&quot;.format(result._host.get_name()))</span><br><span class="line">        self.results.append(&#123;result._host.get_name(): result._result&#125;)</span><br><span class="line">        self.host_unreachable[result._host.get_name()] &#x3D; result</span><br><span class="line"></span><br><span class="line">    def v2_runner_on_failed(self, result, *args, **kwargs):</span><br><span class="line">        # print(result.__dict__)</span><br><span class="line">        logger.info(&quot;host failed: &#123;&#125;&quot;.format(result._host.get_name()))</span><br><span class="line">        self.results.append(&#123;result._host.get_name(): result._result&#125;)</span><br><span class="line">        self.host_failed[result._host.get_name()] &#x3D; result</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_play_start(self, play):</span><br><span class="line">        self.results.append(self._new_play(play))</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_task_start(self, task, is_conditional):</span><br><span class="line">        self.results[-1][&#39;tasks&#39;].append(self._new_task(task))</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_handler_task_start(self, task):</span><br><span class="line">        self.results[-1][&#39;tasks&#39;].append(self._new_task(task))</span><br><span class="line"></span><br><span class="line">    def _convert_host_to_name(self, key):</span><br><span class="line">        if isinstance(key, (Host,)):</span><br><span class="line">            return key.get_name()</span><br><span class="line">        return key</span><br><span class="line"></span><br><span class="line">    def v2_playbook_on_stats(self, stats):</span><br><span class="line">        &quot;&quot;&quot;Display info about playbook statistics&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        hosts &#x3D; sorted(stats.processed.keys())</span><br><span class="line"></span><br><span class="line">        summary &#x3D; &#123;&#125;</span><br><span class="line">        for h in hosts:</span><br><span class="line">            s &#x3D; stats.summarize(h)</span><br><span class="line">            summary[h] &#x3D; s</span><br><span class="line"></span><br><span class="line">        custom_stats &#x3D; &#123;&#125;</span><br><span class="line">        global_custom_stats &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">        if self.get_option(&#39;show_custom_stats&#39;) and stats.custom:</span><br><span class="line">            custom_stats.update(dict((self._convert_host_to_name(k), v) for k, v in stats.custom.items()))</span><br><span class="line">            global_custom_stats.update(custom_stats.pop(&#39;_run&#39;, &#123;&#125;))</span><br><span class="line"></span><br><span class="line">        output &#x3D; &#123;</span><br><span class="line">            &#39;plays&#39;: self.results,</span><br><span class="line">            &#39;stats&#39;: summary,</span><br><span class="line">            &#39;custom_stats&#39;: custom_stats,</span><br><span class="line">            &#39;global_custom_stats&#39;: global_custom_stats,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self._display.display(json.dumps(output, cls&#x3D;AnsibleJSONEncoder, indent&#x3D;4, sort_keys&#x3D;True))</span><br><span class="line"></span><br><span class="line">    def _record_task_result(self, on_info, result, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;This function is used as a partial to add failed&#x2F;skipped info in a single method&quot;&quot;&quot;</span><br><span class="line">        host &#x3D; result._host</span><br><span class="line">        task &#x3D; result._task</span><br><span class="line">        task_result &#x3D; result._result.copy()</span><br><span class="line">        task_result.update(on_info)</span><br><span class="line">        task_result[&#39;action&#39;] &#x3D; task.action</span><br><span class="line">        self.results[-1][&#39;tasks&#39;][-1][&#39;hosts&#39;][host.name] &#x3D; task_result</span><br><span class="line">        end_time &#x3D; current_time()</span><br><span class="line">        self.results[-1][&#39;tasks&#39;][-1][&#39;task&#39;][&#39;duration&#39;][&#39;end&#39;] &#x3D; end_time</span><br><span class="line">        self.results[-1][&#39;play&#39;][&#39;duration&#39;][&#39;end&#39;] &#x3D; end_time</span><br><span class="line"></span><br><span class="line">        return self.results</span><br><span class="line"></span><br><span class="line">    # def __getattribute__(self, name):</span><br><span class="line">    #     &quot;&quot;&quot;Return &#96;&#96;_record_task_result&#96;&#96; partial with a dict containing skipped&#x2F;failed if necessary&quot;&quot;&quot;</span><br><span class="line">    #     if name not in (&#39;v2_runner_on_ok&#39;, &#39;v2_runner_on_failed&#39;, &#39;v2_runner_on_unreachable&#39;, &#39;v2_runner_on_skipped&#39;):</span><br><span class="line">    #         return object.__getattribute__(self, name)</span><br><span class="line">    #</span><br><span class="line">    #     on &#x3D; name.rsplit(&#39;_&#39;, 1)[1]</span><br><span class="line">    #</span><br><span class="line">    #     on_info &#x3D; &#123;&#125;</span><br><span class="line">    #     if on in (&#39;failed&#39;, &#39;skipped&#39;):</span><br><span class="line">    #         on_info[on] &#x3D; True</span><br><span class="line">    #</span><br><span class="line">    #     # logger.info(&quot;Event: &#123;name&#125;, Task status: &#123;status&#125;&quot;.format(name&#x3D;name, status&#x3D;on))</span><br><span class="line">    #     return partial(self._record_task_result, on_info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AnsibleAPI(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    执行ansible模块或者playbook的类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, inventory_path):</span><br><span class="line">        self.inventory_path &#x3D; inventory_path</span><br><span class="line">        self.loader &#x3D; DataLoader()</span><br><span class="line">        self.callback &#x3D; None</span><br><span class="line"></span><br><span class="line">    def cmdb(self):</span><br><span class="line">        module_path &#x3D; os.path.join(get_python_lib(), &quot;ansible&quot;)</span><br><span class="line">        context.CLIARGS &#x3D; ImmutableDict(connection&#x3D;&#39;smart&#39;,</span><br><span class="line">                                        module_path&#x3D;[module_path, ],</span><br><span class="line">                                        forks&#x3D;50, become&#x3D;None,</span><br><span class="line">                                        become_method&#x3D;None, become_user&#x3D;None, check&#x3D;False, diff&#x3D;False)</span><br><span class="line"></span><br><span class="line">        passwords &#x3D; dict(vault_pass&#x3D;&#39;secret&#39;)</span><br><span class="line"></span><br><span class="line">        self.callback &#x3D; CallbackModule()</span><br><span class="line"></span><br><span class="line">        inventory &#x3D; InventoryManager(loader&#x3D;self.loader, sources&#x3D;self.inventory_path)</span><br><span class="line"></span><br><span class="line">        print(inventory.list_groups(), inventory.get_groups_dict(), inventory.add_group(&quot;cmdb&quot;))</span><br><span class="line">        # print(inventory.list_groups(), inventory.list_hosts())</span><br><span class="line"></span><br><span class="line">        variable_manager &#x3D; VariableManager(loader&#x3D;self.loader, inventory&#x3D;inventory)</span><br><span class="line"></span><br><span class="line">        play_source &#x3D; dict(</span><br><span class="line">            name&#x3D;&quot;Ansible CMDB&quot;,</span><br><span class="line">            hosts&#x3D;str(inventory.groups[&quot;all&quot;]),</span><br><span class="line">            gather_facts&#x3D;&#39;no&#39;,</span><br><span class="line">            tasks&#x3D;[</span><br><span class="line">                # dict(action&#x3D;dict(module&#x3D;&#39;shell&#39;, args&#x3D;&#39;ls&#39;), register&#x3D;&#39;shell_out&#39;),</span><br><span class="line">                # dict(action&#x3D;dict(module&#x3D;&#39;debug&#39;, args&#x3D;dict(msg&#x3D;&#39;&#123;&#123;shell_out.stdout&#125;&#125;&#39;)))</span><br><span class="line">                # dict(action&#x3D;dict(module&#x3D;&#39;shell&#39;, args&#x3D;&#39;whoami&#39;)),</span><br><span class="line">                dict(action&#x3D;dict(module&#x3D;&#39;setup&#39;, )),</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        # Create play object, playbook objects use .load instead of init or new methods,</span><br><span class="line">        play &#x3D; Play().load(play_source, variable_manager&#x3D;variable_manager, loader&#x3D;self.loader)</span><br><span class="line"></span><br><span class="line">        tqm &#x3D; None</span><br><span class="line">        try:</span><br><span class="line">            tqm &#x3D; TaskQueueManager(</span><br><span class="line">                inventory&#x3D;inventory,</span><br><span class="line">                variable_manager&#x3D;variable_manager,</span><br><span class="line">                loader&#x3D;self.loader,</span><br><span class="line">                passwords&#x3D;passwords,</span><br><span class="line">                stdout_callback&#x3D;self.callback,</span><br><span class="line">                # Use our custom callback instead of the &#96;&#96;default&#96;&#96; callback plugin, which prints to stdout</span><br><span class="line">            )</span><br><span class="line">            tqm._stdout_callback &#x3D; self.callback</span><br><span class="line">            tqm.run(play)  # most interesting data for a play is actually sent to the callback&#39;s methods</span><br><span class="line"></span><br><span class="line">            result_raw &#x3D; &#123;&#39;success&#39;: &#123;&#125;, &#39;failed&#39;: &#123;&#125;, &#39;unreachable&#39;: &#123;&#125;&#125;</span><br><span class="line">            for host, result in self.callback.host_ok.items():</span><br><span class="line">                result_raw[&#39;success&#39;][host] &#x3D; result._result[&quot;ansible_facts&quot;]</span><br><span class="line">            for host, result in self.callback.host_failed.items():</span><br><span class="line">                result_raw[&#39;failed&#39;][host] &#x3D; result._result</span><br><span class="line">            for host, result in self.callback.host_unreachable.items():</span><br><span class="line">                result_raw[&#39;failed&#39;][host] &#x3D; result._result</span><br><span class="line"></span><br><span class="line">            print(json.dumps(result_raw, indent&#x3D;4))</span><br><span class="line"></span><br><span class="line">            return result_raw</span><br><span class="line"></span><br><span class="line">        finally:</span><br><span class="line">            if tqm is not None:</span><br><span class="line">                tqm.cleanup()</span><br><span class="line"></span><br><span class="line">            shutil.rmtree(C.DEFAULT_LOCAL_TMP, True)</span><br><span class="line"></span><br><span class="line">    def runplaybook(self):</span><br><span class="line">        module_path &#x3D; os.path.join(get_python_lib(), &quot;ansible&quot;)</span><br><span class="line">        context.CLIARGS &#x3D; ImmutableDict(connection&#x3D;&#39;smart&#39;,</span><br><span class="line">                                        module_path&#x3D;[module_path, ],</span><br><span class="line">                                        forks&#x3D;50, become&#x3D;None,</span><br><span class="line">                                        become_method&#x3D;None, become_user&#x3D;None, check&#x3D;False, diff&#x3D;False)</span><br><span class="line"></span><br><span class="line">        passwords &#x3D; dict(vault_pass&#x3D;&#39;secret&#39;)</span><br><span class="line"></span><br><span class="line">        self.callback &#x3D; CallbackModule()</span><br><span class="line"></span><br><span class="line">        inventory &#x3D; InventoryManager(loader&#x3D;self.loader, sources&#x3D;self.inventory_path)</span><br><span class="line"></span><br><span class="line">        print(inventory.list_groups(), inventory.get_groups_dict(), inventory.add_group(&quot;cmdb&quot;))</span><br><span class="line">        # print(inventory.list_groups(), inventory.list_hosts())</span><br><span class="line"></span><br><span class="line">        variable_manager &#x3D; VariableManager(loader&#x3D;self.loader, inventory&#x3D;inventory)</span><br><span class="line"></span><br><span class="line">        play_source &#x3D; dict(</span><br><span class="line">            name&#x3D;&quot;Ansible CMDB&quot;,</span><br><span class="line">            hosts&#x3D;str(inventory.groups[&quot;all&quot;]),</span><br><span class="line">            gather_facts&#x3D;&#39;no&#39;,</span><br><span class="line">            tasks&#x3D;[</span><br><span class="line">                # dict(action&#x3D;dict(module&#x3D;&#39;shell&#39;, args&#x3D;&#39;ls&#39;), register&#x3D;&#39;shell_out&#39;),</span><br><span class="line">                # dict(action&#x3D;dict(module&#x3D;&#39;debug&#39;, args&#x3D;dict(msg&#x3D;&#39;&#123;&#123;shell_out.stdout&#125;&#125;&#39;)))</span><br><span class="line">                # dict(action&#x3D;dict(module&#x3D;&#39;shell&#39;, args&#x3D;&#39;whoami&#39;)),</span><br><span class="line">                dict(action&#x3D;dict(module&#x3D;&#39;setup&#39;, )),</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        # Create play object, playbook objects use .load instead of init or new methods,</span><br><span class="line">        play &#x3D; Play().load(play_source, variable_manager&#x3D;variable_manager, loader&#x3D;self.loader)</span><br><span class="line"></span><br><span class="line">        tqm &#x3D; None</span><br><span class="line">        try:</span><br><span class="line">            tqm &#x3D; TaskQueueManager(</span><br><span class="line">                inventory&#x3D;inventory,</span><br><span class="line">                variable_manager&#x3D;variable_manager,</span><br><span class="line">                loader&#x3D;self.loader,</span><br><span class="line">                passwords&#x3D;passwords,</span><br><span class="line">                stdout_callback&#x3D;self.callback,</span><br><span class="line">                # Use our custom callback instead of the &#96;&#96;default&#96;&#96; callback plugin, which prints to stdout</span><br><span class="line">            )</span><br><span class="line">            tqm._stdout_callback &#x3D; self.callback</span><br><span class="line">            tqm.run(play)  # most interesting data for a play is actually sent to the callback&#39;s methods</span><br><span class="line"></span><br><span class="line">            result_raw &#x3D; &#123;&#39;success&#39;: &#123;&#125;, &#39;failed&#39;: &#123;&#125;, &#39;unreachable&#39;: &#123;&#125;&#125;</span><br><span class="line">            for host, result in self.callback.host_ok.items():</span><br><span class="line">                result_raw[&#39;success&#39;][host] &#x3D; result._result[&quot;ansible_facts&quot;]</span><br><span class="line">            for host, result in self.callback.host_failed.items():</span><br><span class="line">                result_raw[&#39;failed&#39;][host] &#x3D; result._result</span><br><span class="line">            for host, result in self.callback.host_unreachable.items():</span><br><span class="line">                result_raw[&#39;failed&#39;][host] &#x3D; result._result</span><br><span class="line"></span><br><span class="line">            print(json.dumps(result_raw, indent&#x3D;4))</span><br><span class="line"></span><br><span class="line">            return result_raw</span><br><span class="line"></span><br><span class="line">        finally:</span><br><span class="line">            if tqm is not None:</span><br><span class="line">                tqm.cleanup()</span><br><span class="line"></span><br><span class="line">            shutil.rmtree(C.DEFAULT_LOCAL_TMP, True)</span><br><span class="line"></span><br><span class="line">    def VariablManager(self, hostname&#x3D;None):</span><br><span class="line">        inventory &#x3D; InventoryManager(loader&#x3D;self.loader,</span><br><span class="line">                                     sources&#x3D;&#39;&#x2F;Users&#x2F;shuke&#x2F;Work&#x2F;SCM&#x2F;Door&#x2F;apps&#x2F;playbook&#x2F;inventory&#x2F;rcx&#x2F;hosts.ini&#39;)</span><br><span class="line">        vm &#x3D; VariableManager(loader&#x3D;self.loader, inventory&#x3D;inventory)</span><br><span class="line"></span><br><span class="line">        host &#x3D; inventory.get_host(hostname)</span><br><span class="line"></span><br><span class="line">        vm.set_host_variable(host&#x3D;host, varname&#x3D;&quot;name&quot;, value&#x3D;&quot;test&quot;)</span><br><span class="line"></span><br><span class="line">        # 获取指定主机的变量</span><br><span class="line">        # print(vm.get_vars(host&#x3D;host))</span><br><span class="line"></span><br><span class="line">        return vm.get_vars(host&#x3D;host)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    inventory_path &#x3D; &#39;&#x2F;Users&#x2F;shuke&#x2F;Work&#x2F;SCM&#x2F;Door&#x2F;apps&#x2F;playbook&#x2F;inventory&#x2F;rcx&#x2F;hosts.ini&#39;</span><br><span class="line">    AnsibleAPI(inventory_path).cmdb()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx反向代理WebSocket</title>
    <url>/2020/04/20/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86WebSocket/</url>
    <content><![CDATA[<h2 id="nginx反向代理WebSocket"><a href="#nginx反向代理WebSocket" class="headerlink" title="nginx反向代理WebSocket"></a>nginx反向代理WebSocket</h2><p>WebSocket协议相比较于HTTP协议成功握手后可以多次进行通讯，直到连接被关闭。但是WebSocket中的握手和HTTP中的握手兼容， 它使用HTTP中的Upgrade协议头将连接从HTTP升级到WebSocket。这使得WebSocket程序可以更容易的使用现已存在的基础设施。</p>
<p>WebSocket工作在HTTP的80和443端口并使用前缀ws://或者wss://进行协议标注，在建立连接时使用HTTP/1.1的101状态码进行协议切换， 当前标准不支持两个客户端之间不借助HTTP直接建立Websocket连接。</p>
<p>更多Websocket的介绍可参考我写的 <a href="https://www.xncoding.com/2017/05/03/web/websocket.html" target="_blank" rel="noopener">聊一聊WebSocket</a> 一文。</p>
<p>开发小程序的时候需要用到WebSocket长连接和推送技术，但是必须使用wss，并且必须通过域名访问。这时候就需要用到nginx反向代理了。</p>
<p>原理<br>一般我们开发的WebSocket服务程序使用ws协议，明文的。但是怎样让它安全的通过互联网传输呢？这时候可以通过nginx在客户端和服务端直接做一个转发了， 客户端通过wss访问，然后nginx和服务端通过ws协议通信。如下图所示：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB872589b7edcbe0044ec1631cab0703d6?method=download&shareKey=efc98eab8e0f8a600ed7c82f9f474976" alt="WS">  </p>
<p>配置<br>前提条件是你有一个域名，并且申请好了证书。</p>
<p>新建nginx配置文件/etc/nginx/conf.d/websocket.conf，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &#39;&#39; close;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream websocket &#123;</span><br><span class="line">    server localhost:8282; # appserver_ip:ws_port</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     server_name test.enzhico.net;</span><br><span class="line">     listen 443 ssl;</span><br><span class="line">     location &#x2F; &#123;</span><br><span class="line">         proxy_pass http:&#x2F;&#x2F;websocket;</span><br><span class="line">         proxy_read_timeout 300s;</span><br><span class="line">         proxy_send_timeout 300s;</span><br><span class="line">         </span><br><span class="line">         proxy_set_header Host $host;</span><br><span class="line">         proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">         </span><br><span class="line">         proxy_http_version 1.1;</span><br><span class="line">         proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">         proxy_set_header Connection $connection_upgrade;</span><br><span class="line">     &#125;</span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;test.enzhico.net&#x2F;fullchain.pem;</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;test.enzhico.net&#x2F;privkey.pem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之类解释一下关键配置部分：</p>
<p>最重要的就是在反向代理的配置中增加了如下两行，其它的部分和普通的HTTP反向代理没有任何差别。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">proxy_set_header Connection $connection_upgrade;</span><br></pre></td></tr></table></figure>
<p>这里面的关键部分在于HTTP的请求中多了如下头部：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br></pre></td></tr></table></figure>
<p>这两个字段表示请求服务器升级协议为WebSocket。服务器处理完请求后，响应如下报文：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 状态码为101</span><br><span class="line">HTTP&#x2F;1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: upgrade</span><br></pre></td></tr></table></figure>
<p>告诉客户端已成功切换协议，升级为Websocket协议。握手成功之后，服务器端和客户端便角色对等，就像普通的Socket一样，能够双向通信。 不再进行HTTP的交互，而是开始WebSocket的数据帧协议实现数据交换。</p>
<p>这里使用map指令可以将变量组合成为新的变量，会根据客户端传来的连接中是否带有Upgrade头来决定是否给源站传递Connection头， 这样做的方法比直接全部传递upgrade更加优雅。</p>
<p>默认情况下，连接将会在无数据传输60秒后关闭，proxy_read_timeout参数可以延长这个时间。源站通过定期发送ping帧以保持连接并确认连接是否还在使用。</p>
<p>两个超时参数<br>proxy_read_timeout</p>
<p>语法 proxy_read_timeout time 默认值 60s 上下文 http server location 说明 该指令设置与代理服务器的读超时时间。它决定了nginx会等待多长时间来获得请求的响应。 这个时间不是获得整个response的时间，而是两次reading操作的时间。</p>
<p>proxy_send_timeout</p>
<p>语法 proxy_send_timeout time 默认值 60s 上下文 http server location 说明 这个指定设置了发送请求给upstream服务器的超时时间。超时设置不是为了整个发送期间，而是在两次write操作期间。 如果超时后，upstream没有收到新的数据，nginx会关闭连接</p>
<p>多次代理转发<br>工作中遇见过一种情况，就是某个域名在移动网络下面访问不了，这样的话我需要通过一个前段代理服务器做转发，这样就涉及到两次代理。</p>
<p>比如访问的websocket服务URL为：</p>
<p>wss://test.enzhico.net<br>这个在腾讯云公网IP上面，所有网络都能访问。另外一个域名board.xncoding.com解析到电信网络，部署在网关中心，这个域名腾讯云可以访问到。</p>
<p>在腾讯云主机上面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &#39;&#39; close;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     server_name test.enzhico.net;</span><br><span class="line">     location &#x2F; &#123;</span><br><span class="line">         proxy_pass http:&#x2F;&#x2F;board.xncoding.com;</span><br><span class="line">         proxy_read_timeout 300s;</span><br><span class="line">         proxy_send_timeout 300s;</span><br><span class="line">         #proxy_set_header Host $host;</span><br><span class="line">         proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">         proxy_http_version 1.1;</span><br><span class="line">         proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">         proxy_set_header Connection $connection_upgrade;</span><br><span class="line">    &#125;</span><br><span class="line">    listen 443 ssl; # managed by Certbot</span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;test.enzhico.net&#x2F;fullchain.pem; # managed by Certbot</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;test.enzhico.net&#x2F;privkey.pem; # managed by Certbot</span><br><span class="line">    include &#x2F;etc&#x2F;letsencrypt&#x2F;options-ssl-nginx.conf; # managed by Certbot</span><br><span class="line">    ssl_dhparam &#x2F;etc&#x2F;letsencrypt&#x2F;ssl-dhparams.pem; # managed by Certbot</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面唯一要注意的是，把proxy_set_header Host $host;这一行注释掉了。</p>
<p>而在网关中心主机上面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &#39;&#39; close;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream websocket &#123;</span><br><span class="line">    server localhost:8282; # appserver_ip:ws_port</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name board.xncoding.com;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;websocket;</span><br><span class="line">        proxy_read_timeout 300s;</span><br><span class="line">        proxy_send_timeout 300s;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $connection_upgrade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只需要最外层使用wss协议，里面的交互都使用ws协议，所以监听80端口即可。</p>
<p><a href="https://www.xncoding.com/2018/03/12/fullstack/nginx-websocket.html#more" target="_blank" rel="noopener">原文地址</a>  </p>
<p>参考<br><a href="http://pankajmalhotra.com/Websockets-SSL-TLS-Termination-Using-NGINX-Proxy" target="_blank" rel="noopener">Websockets SSL/TLS Termination Using NGINX Proxy</a><br><a href="https://www.hi-linux.com/posts/42176.html" target="_blank" rel="noopener">配置Nginx反向代理WebSocket</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>python 魔术方法</title>
    <url>/2020/04/20/python-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="python-魔术方法"><a href="#python-魔术方法" class="headerlink" title="python 魔术方法"></a>python 魔术方法</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在做python开发的过程中,我们大家都会遇到在class(类)中使用双下划线的方法,这些都是我们经常所说的”魔法”方法.这些方法可以对类添加特殊的功能,使用恰当可以很大的提升我们在开发过程中的便捷性,方便的进行扩展.</p>
<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>目前我们常见的魔法方法大致可分为以下几类：</p>
<ul>
<li>构造与初始化</li>
<li>类的表示</li>
<li>访问控制</li>
<li>比较操作</li>
<li>容器类操作</li>
<li>可调用对象</li>
<li>Pickling序列化</li>
</ul>
<p>我们这次主要介绍这几类常用魔法方法:</p>
<h4 id="1-构造与初始化"><a href="#1-构造与初始化" class="headerlink" title="1.构造与初始化"></a>1.构造与初始化</h4><p>__init__<br>构造方法是我们使用频率最高的魔法方法了，几乎在我们定义类的时候，都会去定义构造方法，它的主要作用就是在初始化一个对象时，定义这个对象的初始值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 &#x3D; Person(&#39;Jack&#39;, 25)</span><br><span class="line">p2 &#x3D; Person(&#39;shuke&#39;, 20)</span><br></pre></td></tr></table></figure>
<p>__new__</p>
<ol>
<li>事实上，当我们理解了<strong>new</strong>方法后，我们还可以利用它来做一些其他有趣的事情，比如实现 设计模式中的 单例模式(singleton)</li>
<li>依照Python官方文档的说法，<strong>new</strong>方法主要是当你继承一些不可变的class时(比如int, str, tuple)， 提供给你一个自定义这些类的实例化过程的途径。还有就是实现自定义的metaclass</li>
<li>这个方法我们一般很少定义，不过我们在一些开源框架中偶尔会遇到定义这个方法的类。实际上，这才是”真正的构造方法”，它会在对象实例化时第一个被调用，然后再调用<strong>init</strong>，它们的区别主要如下：</li>
</ol>
<ul>
<li><strong>new</strong>的第一个参数是cls，而<strong>init</strong>的第一个参数是self</li>
<li><strong>new</strong>返回值是一个实例，而<strong>init</strong>没有任何返回值，只做初始化操作</li>
<li><strong>new</strong>由于是返回一个实例对象，所以它可以给所有实例进行统一的初始化操作</li>
</ul>
<ol start="4">
<li>由于<strong>new</strong>优先于<strong>init</strong>调用，且返回一个实例，所以我们可以利用这种特性，每次返回同一个实例来实现一个单例类：</li>
</ol>
<p>__new__的作用:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class PositiveInteger(int):</span><br><span class="line"></span><br><span class="line">  def __init__(self, value):</span><br><span class="line"></span><br><span class="line">    super(PositiveInteger, self).__init__(self, abs(value))</span><br><span class="line"></span><br><span class="line">i &#x3D; PositiveInteger(-3)</span><br><span class="line"></span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure>
<p>但运行后会发现，结果根本不是我们想的那样，我们仍然得到了-3。这是因为对于int这种不可变的对象，我们只有重载它的<strong>new</strong>方法才能起到自定义的作用。<br>修改后的代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class PositiveInteger(int):</span><br><span class="line"></span><br><span class="line">  def __new__(cls, value):</span><br><span class="line"></span><br><span class="line">    return super(PositiveInteger, cls).__new__(cls, abs(value))</span><br><span class="line"></span><br><span class="line">i &#x3D; PositiveInteger(-3)</span><br><span class="line"></span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure>
<p>通过重载<strong>new</strong>方法，我们实现了需要的功能.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class g(float):</span><br><span class="line">    &quot;&quot;&quot;千克转克&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __new__(cls, kg):</span><br><span class="line">        return float.__new__(cls, kg * 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 50千克转为克</span><br><span class="line">a &#x3D; g(50)</span><br><span class="line">print(a)  # 100.0</span><br><span class="line">print(a + 100)  # 200.0 由于继承了float，所以可以直接运算，非常方便！</span><br></pre></td></tr></table></figure>


<p>用<strong>new</strong>来实现单例<br>因为类每一次实例化后产生的过程都是通过<strong>new</strong>来控制的，所以通过重载<strong>new</strong>方法，我们 可以很简单的实现单例模式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 写法一</span><br><span class="line">class Singleton(object):</span><br><span class="line">    def __new__(cls):</span><br><span class="line">        # 关键在于这，每一次实例化的时候，我们都只会返回这同一个instance对象</span><br><span class="line"></span><br><span class="line">        if not hasattr(cls, &#39;instance&#39;):</span><br><span class="line">            cls.instance &#x3D; super(Singleton, cls).__new__(cls)</span><br><span class="line"></span><br><span class="line">        return cls.instance</span><br><span class="line"></span><br><span class="line">obj1 &#x3D; Singleton()</span><br><span class="line">obj2 &#x3D; Singleton()</span><br><span class="line">obj1.attr1 &#x3D; &#39;value1&#39;</span><br><span class="line">print(obj1.attr1, obj2.attr1)</span><br><span class="line">print(obj1 is obj2)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">value1 value1</span><br><span class="line">True</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">可以看到obj1和obj2是同一个实例。</span><br><span class="line"></span><br><span class="line"># 写法二</span><br><span class="line">class Singleton(object):</span><br><span class="line">    &quot;&quot;&quot;单例&quot;&quot;&quot;</span><br><span class="line">    _instance &#x3D; None</span><br><span class="line"></span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        if not cls._instance:</span><br><span class="line">            cls._instance &#x3D; super(Singleton, cls).__new__(cls, *args, **kwargs)</span><br><span class="line">        return cls._instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MySingleton(Singleton):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a &#x3D; MySingleton()</span><br><span class="line">b &#x3D; MySingleton()</span><br><span class="line">print(a is b)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">True</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h4 id="2-del析构方法"><a href="#2-del析构方法" class="headerlink" title="2. del析构方法"></a>2. <strong>del</strong>析构方法</h4><p>这个方法代表析构方法，也就是在对象被垃圾回收时被调用。但是请注意，执行del x不一定会执行此方法。</p>
<p>由于Python是通过引用计数来进行垃圾回收的，也就是说，如果这个实例还是有被引用到，即使执行del销毁这个对象，但其引用计数还是大于0，所以不会触发执行<strong>del</strong>。<br>例子:<br>此时我们没有对实例进行任何操作时，<strong>del</strong>在程序退出后被调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&#39;__del__&#39;)</span><br><span class="line"></span><br><span class="line">a &#x3D; Person()</span><br><span class="line">print(&#39;exit&#39;)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">exit</span><br><span class="line">__del__</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>由于此实例没有被其他对象所引用，当我们手动销毁这个实例时，<strong>del</strong>被调用后程序正常退出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&#39;__del__&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a &#x3D; Person()</span><br><span class="line">b &#x3D; a  # b引用a</span><br><span class="line">del a  # 手动销毁,不触发__del__</span><br><span class="line">print(&#39;exit&#39;)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">exit</span><br><span class="line">__del__</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>此时实例有被其他对象引用，尽管我们手动销毁这个实例，但依然不会触发<strong>del</strong>方法，而是在程序正常退出后被调用执行。<br>为了保险起见，当我们在对文件、socket进行操作时，要想安全地关闭和销毁这些对象，最好是在try异常块后的finally中进行关闭和释放操作！</p>
<h4 id="3-类的表示"><a href="#3-类的表示" class="headerlink" title="3. 类的表示"></a>3. 类的表示</h4><p><strong>str</strong>/<strong>repr</strong><br>这两个魔法方法一般会放到一起进行讲解，它们的主要差别为：</p>
<p><strong>str</strong>强调可读性，而<strong>repr</strong>强调准确性/标准性<br><strong>str</strong>的目标人群是用户，而<strong>repr</strong>的目标人群是机器，它的结果是可以被执行的<br>%s调用<strong>str</strong>方法，而%r调用<strong>repr</strong>方法<br>来看几个例子，了解内置类实现这2个方法的效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; &#39;hello&#39;</span><br><span class="line">&gt;&gt;&gt; str(a)</span><br><span class="line">&#39;hello&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;%s&#39; % a   # 调用__str__</span><br><span class="line">&#39;hello&#39;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; repr(a)     # 对象a的标准表示，也就是a是如何创建的</span><br><span class="line">&quot;&#39;hello&#39;&quot;</span><br><span class="line">&gt;&gt;&gt; &#39;%r&#39; % a    # 调用__repr__ </span><br><span class="line">&quot;&#39;hello&#39;&quot;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; import datetime</span><br><span class="line">&gt;&gt;&gt; b &#x3D; datetime.datetime.now()</span><br><span class="line">&gt;&gt;&gt; str(b)</span><br><span class="line">&#39;2018-05-03 19:08:45.921879&#39;</span><br><span class="line">&gt;&gt;&gt; print(b)     # 等同于print str(b)</span><br><span class="line">2018-05-03 19:08:45.921879</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; repr(b)     # 展示对象b的标准创建方式(如何创建的 </span><br><span class="line">&#39;datetime.datetime(2018, 5, 3, 19, 8, 45, 921879)&#39;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">datetime.datetime(2018, 5, 3, 19, 8, 45, 921879)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; c &#x3D; eval(repr(b))</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">datetime.datetime(2018, 5, 3, 19, 8, 45, 921879)</span><br></pre></td></tr></table></figure>
<p>从上面的例子可以看出这两个方法的主要区别，在实际中我们定义类时，一般这样定义即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        # 格式化，友好对用户展示</span><br><span class="line">        return &#39;name: %s, age: %s&#39; % (self.name, self.age)</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        # 标准化展示</span><br><span class="line">        return &quot;Person(&#39;%s&#39;, %s)&quot; % (self.name, self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person &#x3D; Person(&#39;zhangsan&#39;, 20)</span><br><span class="line">print(str(person))      # name: zhangsan, age: 20</span><br><span class="line">print(&#39;%s&#39; % person)    # name: zhangsan, age: 20</span><br><span class="line">print(repr(person))     # Person(&#39;zhangsan&#39;, 20)</span><br><span class="line">print(&#39;%r&#39; % person)    # Person(&#39;zhangsan&#39;, 20)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name: zhangsan, age: 20</span><br><span class="line">name: zhangsan, age: 20</span><br><span class="line">Person(&#39;zhangsan&#39;, 20)</span><br><span class="line">Person(&#39;zhangsan&#39;, 20)</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>这里值得注意的是，如果只定义了<strong>str</strong>或<strong>repr</strong>其中一个，那会是什么结果？</p>
<p>如果只定义了<em>str__，那么repr(person)输出&lt;<em>_main</em></em>.Person object at 0x10783b400&gt;<br>如果只定义了<strong>repr</strong>，那么str(person)与repr(person)结果是相同的<br>也就是说，<strong>repr</strong>在表示类时，是一级的，如果只定义它，那么<strong>str</strong> = <strong>repr</strong>。<br>而<strong>str</strong>展示类时是次级的，用户可自定义类的展示格式，如果没有定义<strong>repr</strong>，那么repr(person)将会展示缺省的定义。</p>
<h4 id="4-对象判断"><a href="#4-对象判断" class="headerlink" title="4. 对象判断"></a>4. 对象判断</h4><p><strong>hash</strong>/<strong>eq</strong><br><strong>hash</strong>方法返回一个整数，用来表示该对象的唯一标识，配合<strong>eq</strong>方法判断两个对象是否相等(==)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, uid):</span><br><span class="line">        self.uid &#x3D; uid</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &#39;Person(%s)&#39; % self.uid</span><br><span class="line"></span><br><span class="line">    def __hash__(self):</span><br><span class="line">        return self.uid</span><br><span class="line"></span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        return self.uid &#x3D;&#x3D; other.uid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 &#x3D; Person(1)</span><br><span class="line">p2 &#x3D; Person(1)</span><br><span class="line">print(p1 &#x3D;&#x3D; p2)</span><br><span class="line">p3 &#x3D; Person(2)</span><br><span class="line">print(set([p1, p2, p3]))  # 根据唯一标识去重输出 set([Person(1), Person(2)])</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">True</span><br><span class="line">&#123;Person(1), Person(2)&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>如果我们需要判断两个对象是否相等，只要我们重写<strong>hash</strong>和<strong>eq</strong>方法就可以完成此功能。此外使用set存放这些对象时，会根据这两个方法进行去重操作。</p>
<h4 id="5-对象布尔判断"><a href="#5-对象布尔判断" class="headerlink" title="5. 对象布尔判断"></a>5. 对象布尔判断</h4><p><strong>bool</strong><br>当调用bool(obj)时，会调用<strong>bool</strong>方法，返回True/False。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__(self, uid):</span><br><span class="line">        self.uid &#x3D; uid</span><br><span class="line"></span><br><span class="line">    def __bool__(self):</span><br><span class="line">        return self.uid &gt; 10</span><br><span class="line"></span><br><span class="line">p1 &#x3D; Person(1)</span><br><span class="line">p2 &#x3D; Person(15)</span><br><span class="line">print(bool(p1))  # False</span><br><span class="line">print(bool(p2))  # True</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>⚠️: 在Python3中，<strong>nonzero</strong>被重命名<strong>bool</strong></p>
<h4 id="6-访问控制"><a href="#6-访问控制" class="headerlink" title="6. 访问控制"></a>6. 访问控制</h4><p>访问控制相关的魔法方法，主要涉及以下几个：</p>
<p><strong>setattr</strong>：通过.设置属性或setattr(key, value)<br><strong>getattr</strong>：访问不存在的属性<br><strong>delattr</strong>：删除某个属性<br><strong>getattribute</strong>：访问任意属性或方法<br>来看一个完整的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class Person(object):</span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        &quot;&quot;&quot;属性赋值&quot;&quot;&quot;</span><br><span class="line">        if key not in (&#39;name&#39;, &#39;age&#39;):</span><br><span class="line">            return</span><br><span class="line">        if key &#x3D;&#x3D; &#39;age&#39; and value &lt; 0:</span><br><span class="line">            raise ValueError()</span><br><span class="line">        super(Person, self).__setattr__(key, value)</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        &quot;&quot;&quot;访问某个不存在的属性&quot;&quot;&quot;</span><br><span class="line">        return &#39;unknown&#39;</span><br><span class="line"></span><br><span class="line">    def __delattr__(self, key):</span><br><span class="line">        &quot;&quot;&quot;删除某个属性&quot;&quot;&quot;</span><br><span class="line">        if key &#x3D;&#x3D; &#39;name&#39;:</span><br><span class="line">            raise AttributeError()</span><br><span class="line">        super(Person, self).__delattr__(key)</span><br><span class="line"></span><br><span class="line">    def __getattribute__(self, key):</span><br><span class="line">        &quot;&quot;&quot;所有属性&#x2F;方法调用都经过这里&quot;&quot;&quot;</span><br><span class="line">        if key &#x3D;&#x3D; &#39;money&#39;:</span><br><span class="line">            return 100</span><br><span class="line">        if key &#x3D;&#x3D; &#39;hello&#39;:</span><br><span class="line">            return self.say</span><br><span class="line">        return super(Person, self).__getattribute__(key)</span><br><span class="line"></span><br><span class="line">    def say(self):</span><br><span class="line">        return &#39;hello&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 &#x3D; Person()</span><br><span class="line">p1.name &#x3D; &#39;zhangsan&#39;  # 调用__setattr__</span><br><span class="line">p1.age &#x3D; 20  # 调用__setattr__</span><br><span class="line">print(p1.name)  # zhangsan</span><br><span class="line">print(p1.age)  # 20</span><br><span class="line">setattr(p1, &#39;name&#39;, &#39;lisi&#39;)  # 调用__setattr__</span><br><span class="line">setattr(p1, &#39;age&#39;, 30)  # 调用__setattr__</span><br><span class="line">print(p1.name)  # lisi</span><br><span class="line">print(p1.age)  # 30</span><br><span class="line"></span><br><span class="line">p1.gender &#x3D; &#39;male&#39;  # __setattr__中忽略对gender赋值</span><br><span class="line">print(p1.gender)  # gender不存在,调用__getattr__返回：unknown</span><br><span class="line">print(p1.money)  # money不存在,在__getattribute__中返回100</span><br><span class="line">print(p1.say())  # hello</span><br><span class="line">print(p1.hello())  # hello,调用__getattribute__，间接调用say方法</span><br><span class="line"></span><br><span class="line">del p1.name  # __delattr__中引发AttributeError</span><br><span class="line">p2 &#x3D; Person()</span><br><span class="line">p2.age &#x3D; -1  # __setattr__中引发ValueError</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>setattr</strong><br>通过此方法，对象可在在对属性进行赋值时进行控制，所有的属性赋值都会经过它。<br>一般常用于对某些属性赋值的检查校验逻辑，例如age不能小于0，否则认为是非法数据等等。</li>
<li><strong>getattr</strong><br>很多同学以为此方法是和<strong>setattr</strong>完全对立的，其实不然！<br>这个方法只有在访问某个不存在的属性时才会被调用，看上面的例子，由于gender属性在赋值时，忽略了此字段的赋值操作，所以此属性是没有被成功赋值给对象的。当访问这个属性时，<strong>getattr</strong>被调用，返回unknown。</li>
<li><strong>del</strong><br>删除对象的某个属性时，此方法被调用。一般常用于某个属性必须存在，否则无法进行后续的逻辑操作，会重写此方法，对删除属性逻辑进行检查和校验。</li>
<li><strong>getattribute</strong><br>这个方法我们很少用到，它与<strong>getattr</strong>很容易混淆。它与前者的区别在于：<br><strong>getattr</strong>访问某个不存在的属性被调用，<strong>getattribute</strong>访问任意属性被调用<br><strong>getattr</strong>只针对属性访问，<strong>getattribute</strong>不仅针对所有属性访问，还包括方法调用<br>越是强大的魔法方法，责任越大，如果你不能正确使用它，最好还是不用为好，否则在出现问题时很难排查!</li>
</ol>
<p><a href="http://kaito-kidd.com/2017/02/22/python-magic-methods/" target="_blank" rel="noopener">参考原文</a><br><a href="http://kaito-kidd.com/2017/02/23/python-magic-methods-2/" target="_blank" rel="noopener">魔术方法二</a><br><a href="http://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/a-guide-to-pythons-magic-methods.html" target="_blank" rel="noopener">延伸</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>python 315道面试题</title>
    <url>/2020/04/20/python-315%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="python面试题"><a href="#python面试题" class="headerlink" title="python面试题"></a>python面试题</h2><h3 id="第一部分-基础篇-80题"><a href="#第一部分-基础篇-80题" class="headerlink" title="第一部分(基础篇)(80题)"></a>第一部分(基础篇)(80题)</h3><p>为什么学习Python？</p>
<p>通过什么途径学习的Python？</p>
<p>Python和Java、PHP、C、C#、C++等其他语言的对比？</p>
<p>简述解释型和编译型编程语言？</p>
<p>Python解释器种类以及特点？</p>
<p>位和字节的关系？</p>
<p>b、B、KB、MB、GB 的关系？</p>
<p>请至少列举5个 PEP8 规范（越多越好）。</p>
<p>通过代码实现如下转换：<br>二进制转换成十进制：v = “0b1111011” <br>十进制转换成二进制：v = 18 <br>八进制转换成十进制：v = “011” <br>十进制转换成八进制：v = 30 <br>十六进制转换成十进制：v = “0x12” <br>十进制转换成十六进制：v = 87</p>
<p>请编写一个函数实现将IP地址转换成一个整数。</p>
<p>如 10.3.9.12 转换规则为：<br>        10            00001010<br>          3            00000011 <br>         9            00001001<br>         12            00001100 <br>再将以上二进制拼接起来计算十进制结果：00001010 00000011 00001001 00001100 = ？<br>python递归的最大层数？</p>
<p>求结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    v1 &#x3D; 1 or 3 </span><br><span class="line">    v2 &#x3D; 1 and 3 </span><br><span class="line">    v3 &#x3D; 0 and 2 and 1</span><br><span class="line">     v4 &#x3D; 0 and 2 or 1</span><br><span class="line">     v5 &#x3D; 0 and 2 or 1 or 4</span><br><span class="line">     v6 &#x3D; 0 or Flase and 1</span><br><span class="line">&#96;&#96;&#96;   </span><br><span class="line">ascii、unicode、utf-8、gbk 区别？</span><br><span class="line"></span><br><span class="line">字节码和机器码的区别？</span><br><span class="line"></span><br><span class="line">三元运算规则以及应用场景？</span><br><span class="line"></span><br><span class="line">列举 Python2和Python3的区别？</span><br><span class="line"></span><br><span class="line">用一行代码实现数值交换：</span><br><span class="line">       a &#x3D; 1</span><br><span class="line">       b &#x3D; 2</span><br><span class="line"></span><br><span class="line">Python3和Python2中 int 和 long的区别？</span><br><span class="line"></span><br><span class="line">xrange和range的区别？</span><br><span class="line"></span><br><span class="line">文件操作时：xreadlines和readlines的区别？</span><br><span class="line"></span><br><span class="line">列举布尔值为False的常见值？</span><br><span class="line"></span><br><span class="line">字符串、列表、元组、字典每个常用的5个方法？</span><br><span class="line"></span><br><span class="line">lambda表达式格式以及应用场景？</span><br><span class="line"></span><br><span class="line">pass的作用？</span><br><span class="line"></span><br><span class="line">*arg和**kwarg作用</span><br><span class="line"></span><br><span class="line">is和&#x3D;&#x3D;的区别</span><br><span class="line"></span><br><span class="line">简述Python的深浅拷贝以及应用场景？</span><br><span class="line"></span><br><span class="line">Python垃圾回收机制？</span><br><span class="line"></span><br><span class="line">Python的可变类型和不可变类型？</span><br><span class="line"></span><br><span class="line">求结果：</span><br><span class="line">    v &#x3D; dict.fromkeys([&#39;k1&#39;,&#39;k2&#39;],[])  </span><br><span class="line">   v[‘k1’].append(666)</span><br><span class="line">    print(v) </span><br><span class="line">   v[‘k1’] &#x3D; 777</span><br><span class="line">    print(v)</span><br><span class="line">求结果：</span><br><span class="line"></span><br><span class="line">列举常见的内置函数？</span><br><span class="line"></span><br><span class="line">filter、map、reduce的作用？</span><br><span class="line"></span><br><span class="line">一行代码实现9*9乘法表</span><br><span class="line"></span><br><span class="line">如何安装第三方模块？以及用过哪些第三方模块？</span><br><span class="line"></span><br><span class="line">至少列举8个常用模块都有那些？</span><br><span class="line"></span><br><span class="line">re的match和search区别？</span><br><span class="line"></span><br><span class="line">什么是正则的贪婪匹配？</span><br><span class="line"></span><br><span class="line">求结果：  a. [ i % 2 for i in range(10) ]  b. ( i % 2 for i in range(10) )</span><br><span class="line"></span><br><span class="line">求结果：  a. 1 or 2  b. 1 and 2  c. 1 &lt; (2&#x3D;&#x3D;2)  d. 1 &lt; 2 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">def func(a,b&#x3D;[]) 这种写法有什么坑？</span><br><span class="line"></span><br><span class="line">如何实现 “1,2,3” 变成 [‘1’,’2’,’3’] ?</span><br><span class="line"></span><br><span class="line">如何实现[‘1’,’2’,’3’]变成[1,2,3] ?</span><br><span class="line">比较： a &#x3D; [1,2,3] 和 b &#x3D; [(1),(2),(3) ] 以及 b &#x3D; [(1,),(2,),(3,) ] 的区别？</span><br><span class="line"></span><br><span class="line">如何用一行代码生成[1,4,9,16,25,36,49,64,81,100] ?</span><br><span class="line"></span><br><span class="line">一行代码实现删除列表中重复的值 ?</span><br><span class="line"></span><br><span class="line">如何在函数中设置一个全局变量 ?</span><br><span class="line"></span><br><span class="line">logging模块的作用？以及应用场景？</span><br><span class="line"></span><br><span class="line">请用代码简答实现stack 。</span><br><span class="line"></span><br><span class="line">常用字符串格式化哪几种？</span><br><span class="line"></span><br><span class="line">简述 生成器、迭代器、可迭代对象 以及应用场景？</span><br><span class="line"></span><br><span class="line">用Python实现一个二分查找的函数。</span><br><span class="line"></span><br><span class="line">谈谈你对闭包的理解？</span><br><span class="line"></span><br><span class="line">os和sys模块的作用？</span><br><span class="line"></span><br><span class="line">如何生成一个随机数？</span><br><span class="line"></span><br><span class="line">如何使用python删除一个文件？</span><br><span class="line"></span><br><span class="line">谈谈你对面向对象的理解？</span><br><span class="line"></span><br><span class="line">Python面向对象中的继承有什么特点？</span><br><span class="line"></span><br><span class="line">面向对象深度优先和广度优先是什么？</span><br><span class="line"></span><br><span class="line">面向对象中super的作用？</span><br><span class="line"></span><br><span class="line">是否使用过functools中的函数？其作用是什么？</span><br><span class="line"></span><br><span class="line">列举面向对象中带爽下划线的特殊方法，如：__new__、__init__</span><br><span class="line"></span><br><span class="line">如何判断是函数还是方法？</span><br><span class="line"></span><br><span class="line">静态方法和类方法区别？</span><br><span class="line"></span><br><span class="line">列举面向对象中的特殊成员以及应用场景</span><br><span class="line"></span><br><span class="line">1、2、3、4、5 能组成多少个互不相同且无重复的三位数</span><br><span class="line"></span><br><span class="line">什么是反射？以及应用场景？</span><br><span class="line"></span><br><span class="line">metaclass作用？以及应用场景？</span><br><span class="line"></span><br><span class="line">用尽量多的方法实现单例模式。</span><br><span class="line"></span><br><span class="line">装饰器的写法以及应用场景。</span><br><span class="line"></span><br><span class="line">异常处理写法以及如何主动跑出异常（应用场景）</span><br><span class="line"></span><br><span class="line">什么是面向对象的mro</span><br><span class="line"></span><br><span class="line">isinstance作用以及应用场景？</span><br><span class="line"></span><br><span class="line">写代码并实现：</span><br></pre></td></tr></table></figure>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.You may assume that each input would<br>have exactly one solution, and you may not use the same element twice.<br>Example: <br>          Given nums = [2, 7, 11, 15], target = 9,<br> Because nums[0] + nums[1] = 2 + 7 = 9, <br>           return [0, 1]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">json序列化时，可以处理的数据类型有哪些？如何定制支持datetime类型？</span><br><span class="line"></span><br><span class="line">json序列化时，默认遇到中文会转换成unicode，如果想要保留中文怎么办？</span><br><span class="line"></span><br><span class="line">什么是断言？应用场景？</span><br><span class="line"></span><br><span class="line">有用过with statement吗？它的好处是什么？</span><br><span class="line"></span><br><span class="line">使用代码实现查看列举目录下的所有文件。</span><br><span class="line"></span><br><span class="line">简述 yield和yield from关键字。</span><br><span class="line"></span><br><span class="line">### 第二部分(网络编程和并发)(34题)</span><br><span class="line">简述 OSI 七层协议。</span><br><span class="line"></span><br><span class="line">什么是C&#x2F;S和B&#x2F;S架构？</span><br><span class="line"></span><br><span class="line">简述 三次握手、四次挥手的流程。</span><br><span class="line"></span><br><span class="line">什么是arp协议？</span><br><span class="line"></span><br><span class="line">TCP和UDP的区别？</span><br><span class="line"></span><br><span class="line">什么是局域网和广域网？</span><br><span class="line"></span><br><span class="line">为何基于tcp协议的通信比基于udp协议的通信更可靠？</span><br><span class="line"></span><br><span class="line">什么是socket？简述基于tcp协议的套接字通信流程。</span><br><span class="line"></span><br><span class="line">什么是粘包？ socket 中造成粘包的原因是什么？ 哪些情况会发生粘包现象？</span><br><span class="line"></span><br><span class="line">IO多路复用的作用？</span><br><span class="line"></span><br><span class="line">什么是防火墙以及作用？</span><br><span class="line"></span><br><span class="line">select、poll、epoll 模型的区别？</span><br><span class="line"></span><br><span class="line">简述 进程、线程、协程的区别 以及应用场景？</span><br><span class="line"></span><br><span class="line">GIL锁是什么鬼？</span><br><span class="line"></span><br><span class="line">Python中如何使用线程池和进程池？</span><br><span class="line"></span><br><span class="line">threading.local的作用？</span><br><span class="line"></span><br><span class="line">进程之间如何进行通信？</span><br><span class="line"></span><br><span class="line">什么是并发和并行？</span><br><span class="line"></span><br><span class="line">进程锁和线程锁的作用？</span><br><span class="line"></span><br><span class="line">解释什么是异步非阻塞？</span><br><span class="line"></span><br><span class="line">路由器和交换机的区别？</span><br><span class="line"></span><br><span class="line">什么是域名解析？</span><br><span class="line"></span><br><span class="line">如何修改本地hosts文件？</span><br><span class="line"></span><br><span class="line">生产者消费者模型应用场景及优势？</span><br><span class="line"></span><br><span class="line">什么是cdn？</span><br><span class="line"></span><br><span class="line">LVS是什么及作用？</span><br><span class="line"></span><br><span class="line">Nginx是什么及作用？</span><br><span class="line"></span><br><span class="line">keepalived是什么及作用?</span><br><span class="line"></span><br><span class="line">haproxy是什么以及作用？</span><br><span class="line"></span><br><span class="line">什么是负载均衡？</span><br><span class="line"></span><br><span class="line">什么是rpc及应用场景？</span><br><span class="line"></span><br><span class="line">简述 asynio模块的作用和应用场景。</span><br><span class="line"></span><br><span class="line">简述 gevent模块的作用和应用场景。</span><br><span class="line"></span><br><span class="line">twisted框架的使用和应用？</span><br><span class="line"></span><br><span class="line">### 第三部分(数据库和缓存)(46题)</span><br><span class="line"></span><br><span class="line">列举常见的关系型数据库和非关系型都有那些？</span><br><span class="line"></span><br><span class="line">MySQL常见数据库引擎及比较？</span><br><span class="line"></span><br><span class="line">简述数据三大范式？</span><br><span class="line"></span><br><span class="line">什么是事务？MySQL如何支持事务？</span><br><span class="line"></span><br><span class="line">简述数据库设计中一对多和多对多的应用场景？</span><br><span class="line"></span><br><span class="line">如何基于数据库实现商城商品计数器？</span><br><span class="line"></span><br><span class="line">常见SQL（必备）</span><br><span class="line">详见武沛齐博客：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;wupeiqi&#x2F;articles&#x2F;5729934.html</span><br><span class="line"></span><br><span class="line">简述触发器、函数、视图、存储过程？</span><br><span class="line"></span><br><span class="line">MySQL索引种类</span><br><span class="line"></span><br><span class="line">索引在什么情况下遵循最左前缀的规则？</span><br><span class="line"></span><br><span class="line">主键和外键的区别？</span><br><span class="line"></span><br><span class="line">MySQL常见的函数？</span><br><span class="line"></span><br><span class="line">列举 创建索引但是无法命中索引的8种情况。</span><br><span class="line"></span><br><span class="line">如何开启慢日志查询？</span><br><span class="line"></span><br><span class="line">数据库导入导出命令（结构+数据）？</span><br><span class="line"></span><br><span class="line">数据库优化方案？</span><br><span class="line"></span><br><span class="line">char和varchar的区别？</span><br><span class="line"></span><br><span class="line">简述MySQL的执行计划？</span><br><span class="line"></span><br><span class="line">在对name做了唯一索引前提下，简述以下区别：  </span><br><span class="line">        select * from tb where name &#x3D; ‘Oldboy-Wupeiqi’   </span><br><span class="line">        select * from tb where name &#x3D; ‘Oldboy-Wupeiqi’ limit 1</span><br><span class="line"></span><br><span class="line">1000w条数据，使用limit offset 分页时，为什么越往后翻越慢？如何解决？</span><br><span class="line"></span><br><span class="line">什么是索引合并？</span><br><span class="line"></span><br><span class="line">什么是覆盖索引？</span><br><span class="line"></span><br><span class="line">简述数据库读写分离？</span><br><span class="line"></span><br><span class="line">简述数据库分库分表？（水平、垂直）</span><br><span class="line"></span><br><span class="line">redis和memcached比较？</span><br><span class="line"></span><br><span class="line">redis中数据库默认是多少个db 及作用？</span><br><span class="line"></span><br><span class="line">python操作redis的模块？</span><br><span class="line"></span><br><span class="line">如果redis中的某个列表中的数据量非常大，如果实现循环显示每一个值？</span><br><span class="line"></span><br><span class="line">redis如何实现主从复制？以及数据同步机制？</span><br><span class="line"></span><br><span class="line">redis中的sentinel的作用？</span><br><span class="line"></span><br><span class="line">如何实现redis集群？</span><br><span class="line"></span><br><span class="line">redis中默认有多少个哈希槽？</span><br><span class="line"></span><br><span class="line">简述redis的有哪几种持久化策略及比较？</span><br><span class="line"></span><br><span class="line">列举redis支持的过期策略。</span><br><span class="line"></span><br><span class="line">MySQL 里有 2000w 数据，redis 中只存 20w 的数据，如何保证 redis 中都是热点数据？ </span><br><span class="line"></span><br><span class="line">写代码，基于redis的列表实现 先进先出、后进先出队列、优先级队列。</span><br><span class="line"></span><br><span class="line">如何基于redis实现消息队列？</span><br><span class="line"></span><br><span class="line">如何基于redis实现发布和订阅？以及发布订阅和消息队列的区别？</span><br><span class="line"></span><br><span class="line">什么是codis及作用？</span><br><span class="line"></span><br><span class="line">什么是twemproxy及作用？</span><br><span class="line"></span><br><span class="line">写代码实现redis事务操作。</span><br><span class="line"></span><br><span class="line">redis中的watch的命令的作用？</span><br><span class="line"></span><br><span class="line">基于redis如何实现商城商品数量计数器？</span><br><span class="line"></span><br><span class="line">简述redis分布式锁和redlock的实现机制。</span><br><span class="line"></span><br><span class="line">什么是一致性哈希？Python中是否有相应模块？</span><br><span class="line"></span><br><span class="line">如何高效的找到redis中所有以oldboy开头的key？</span><br><span class="line"></span><br><span class="line">### 第四部分(前端&#x2F;框架&#x2F;其他)(155题)</span><br><span class="line"></span><br><span class="line">谈谈你对http协议的认识。</span><br><span class="line"></span><br><span class="line">谈谈你对websocket协议的认识。</span><br><span class="line"></span><br><span class="line">什么是magic string ？</span><br><span class="line"></span><br><span class="line">如何创建响应式布局？</span><br><span class="line"></span><br><span class="line">你曾经使用过哪些前端框架？</span><br><span class="line"></span><br><span class="line">什么是ajax请求？并使用jQuery和XMLHttpRequest对象实现一个ajax请求。</span><br><span class="line"></span><br><span class="line">如何在前端实现轮训？</span><br><span class="line"></span><br><span class="line">如何在前端实现长轮训？</span><br><span class="line"></span><br><span class="line">vuex的作用？</span><br><span class="line"></span><br><span class="line">vue中的路由的拦截器的作用？</span><br><span class="line"></span><br><span class="line">axios的作用？</span><br><span class="line"></span><br><span class="line">列举vue的常见指令。</span><br><span class="line"></span><br><span class="line">简述jsonp及实现原理？</span><br><span class="line"></span><br><span class="line">是什么cors ？</span><br><span class="line"></span><br><span class="line">列举Http请求中常见的请求方式？</span><br><span class="line"></span><br><span class="line">列举Http请求中的状态码？</span><br><span class="line"></span><br><span class="line">列举Http请求中常见的请求头？</span><br><span class="line"></span><br><span class="line">看图写结果：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">看图写结果：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">看图写结果：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">看图写结果：</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">看图写结果：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">看图写结果：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">django、flask、tornado框架的比较？</span><br><span class="line"></span><br><span class="line">什么是wsgi？</span><br><span class="line"></span><br><span class="line">django请求的生命周期？</span><br><span class="line"></span><br><span class="line">列举django的内置组件？</span><br><span class="line"></span><br><span class="line">列举django中间件的5个方法？以及django中间件的应用场景？</span><br><span class="line"></span><br><span class="line">简述什么是FBV和CBV？</span><br><span class="line"></span><br><span class="line">django的request对象是在什么时候创建的？</span><br><span class="line"></span><br><span class="line">如何给CBV的程序添加装饰器？</span><br><span class="line"></span><br><span class="line">列举django orm 中所有的方法（QuerySet对象的所有方法）</span><br><span class="line"></span><br><span class="line">only和defer的区别？</span><br><span class="line"></span><br><span class="line">select_related和prefetch_related的区别？</span><br><span class="line"></span><br><span class="line">filter和exclude的区别？</span><br><span class="line"></span><br><span class="line">列举django orm中三种能写sql语句的方法。</span><br><span class="line"></span><br><span class="line">django orm 中如何设置读写分离？</span><br><span class="line"></span><br><span class="line">F和Q的作用?</span><br><span class="line"></span><br><span class="line">values和values_list的区别？</span><br><span class="line"></span><br><span class="line">如何使用django orm批量创建数据？</span><br><span class="line"></span><br><span class="line">django的Form和ModeForm的作用？</span><br><span class="line"></span><br><span class="line">django的Form组件中，如果字段中包含choices参数，请使用两种方式实现数据源实时更新。</span><br><span class="line"></span><br><span class="line">django的Model中的ForeignKey字段中的on_delete参数有什么作用？</span><br><span class="line"></span><br><span class="line">django中csrf的实现机制？</span><br><span class="line"></span><br><span class="line">django如何实现websocket？</span><br><span class="line"></span><br><span class="line">基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf token？</span><br><span class="line"></span><br><span class="line">django中如何实现orm表中添加数据时创建一条日志记录。</span><br><span class="line"></span><br><span class="line">django缓存如何设置？</span><br><span class="line"></span><br><span class="line">django的缓存能使用redis吗？如果可以的话，如何配置？</span><br><span class="line"></span><br><span class="line">django路由系统中name的作用？</span><br><span class="line"></span><br><span class="line">django的模板中filter和simple_tag的区别？</span><br><span class="line"></span><br><span class="line">django-debug-toolbar的作用？</span><br><span class="line"></span><br><span class="line">django中如何实现单元测试？</span><br><span class="line"></span><br><span class="line">解释orm中 db first 和 code first的含义？</span><br><span class="line"></span><br><span class="line">django中如何根据数据库表生成model中的类？</span><br><span class="line"></span><br><span class="line">使用orm和原生sql的优缺点？</span><br><span class="line"></span><br><span class="line">简述MVC和MTV</span><br><span class="line"></span><br><span class="line">django的contenttype组件的作用？</span><br><span class="line"></span><br><span class="line">谈谈你对restfull 规范的认识？</span><br><span class="line"></span><br><span class="line">接口的幂等性是什么意思？</span><br><span class="line"></span><br><span class="line">什么是RPC？</span><br><span class="line"></span><br><span class="line">Http和Https的区别？</span><br><span class="line"></span><br><span class="line">为什么要使用django rest framework框架？</span><br><span class="line"></span><br><span class="line">django rest framework框架中都有那些组件？</span><br><span class="line"></span><br><span class="line">django rest framework框架中的视图都可以继承哪些类？</span><br><span class="line"></span><br><span class="line">简述 django rest framework框架的认证流程。</span><br><span class="line"></span><br><span class="line">django rest framework如何实现的用户访问频率控制？</span><br><span class="line"></span><br><span class="line">Flask框架的优势？</span><br><span class="line"></span><br><span class="line">Flask框架依赖组件？</span><br><span class="line"></span><br><span class="line">Flask蓝图的作用？</span><br><span class="line"></span><br><span class="line">列举使用过的Flask第三方组件？</span><br><span class="line"></span><br><span class="line">简述Flask上下文管理流程?</span><br><span class="line"></span><br><span class="line">Flask中的g的作用？</span><br><span class="line"></span><br><span class="line">Flask中上下文管理主要涉及到了那些相关的类？并描述类主要作用？</span><br><span class="line"></span><br><span class="line">为什么要Flask把Local对象中的的值stack 维护成一个列表？</span><br><span class="line"></span><br><span class="line">Flask中多app应用是怎么完成？</span><br><span class="line"></span><br><span class="line">在Flask中实现WebSocket需要什么组件？</span><br><span class="line"></span><br><span class="line">wtforms组件的作用？</span><br><span class="line"></span><br><span class="line">Flask框架默认session处理机制？</span><br><span class="line"></span><br><span class="line">解释Flask框架中的Local对象和threading.local对象的区别？</span><br><span class="line"></span><br><span class="line">Flask中 blinker 是什么？</span><br><span class="line"></span><br><span class="line">SQLAlchemy中的 session和scoped_session 的区别？</span><br><span class="line"></span><br><span class="line">SQLAlchemy如何执行原生SQL？</span><br><span class="line"></span><br><span class="line">ORM的实现原理？</span><br><span class="line"></span><br><span class="line">DBUtils模块的作用？</span><br><span class="line"></span><br><span class="line">以下SQLAlchemy的字段是否正确？如果不正确请更正：</span><br></pre></td></tr></table></figure>
<p>from datetime import datetime<br> from sqlalchemy.ext.declarative<br>import declarative_base<br> from sqlalchemy import Column, Integer, String, DateTime<br>  <br>Base = declarative_base()  <br>class UserInfo(Base): <br>    <strong>tablename</strong> = ‘userinfo’ <br>    id = Column(Integer, primary_key=True, autoincrement=True) <br>    name = Column(String(64), unique=True) <br>    ctime = Column(DateTime, default=datetime.now())</p>
<p>```<br>SQLAchemy中如何为表设置引擎和字符编码？</p>
<p>SQLAchemy中如何设置联合唯一索引？</p>
<p>简述Tornado框架的特点。</p>
<p>简述Tornado框架中Future对象的作用？</p>
<p>Tornado框架中如何编写WebSocket程序？</p>
<p>Tornado中静态文件是如何处理的？ 如：</p>
<p>Tornado操作MySQL使用的模块？</p>
<p>Tornado操作redis使用的模块？</p>
<p>简述Tornado框架的适用场景？</p>
<p>git常见命令作用：</p>
<p>简述以下git中stash命令作用以及相关其他命令。</p>
<p>git 中 merge 和 rebase命令 的区别。</p>
<p>公司如何基于git做的协同开发？</p>
<p>如何基于git实现代码review？</p>
<p>git如何实现v1.0 、v2.0 等版本的管理？</p>
<p>什么是gitlab？</p>
<p>github和gitlab的区别？</p>
<p>如何为github上牛逼的开源项目贡献代码？</p>
<p>git中 .gitignore文件的作用?</p>
<p>什么是敏捷开发？</p>
<p>简述 jenkins 工具的作用?</p>
<p>公司如何实现代码发布？</p>
<p>简述 RabbitMQ、Kafka、ZeroMQ的区别？</p>
<p>RabbitMQ如何在消费者获取任务后未处理完前就挂掉时，保证数据不丢失？</p>
<p>RabbitMQ如何对消息做持久化？</p>
<p>RabbitMQ如何控制消息被消费的顺序？</p>
<p>以下RabbitMQ的exchange type分别代表什么意思？如：fanout、direct、topic。</p>
<p>简述 celery 是什么以及应用场景？</p>
<p>简述celery运行机制。</p>
<p>celery如何实现定时任务？</p>
<p>简述 celery多任务结构目录？</p>
<p>celery中装饰器 @app.task 和 @shared_task的区别？</p>
<p>简述 requests模块的作用及基本使用？</p>
<p>简述 beautifulsoup模块的作用及基本使用？</p>
<p>简述 seleninu模块的作用及基本使用?</p>
<p>scrapy框架中各组件的工作流程？</p>
<p>在scrapy框架中如何设置代理（两种方法）？</p>
<p>scrapy框架中如何实现大文件的下载？</p>
<p>scrapy中如何实现限速？</p>
<p>scrapy中如何实现暂定爬虫？</p>
<p>scrapy中如何进行自定制命令？</p>
<p>scrapy中如何实现的记录爬虫的深度？</p>
<p>scrapy中的pipelines工作原理？</p>
<p>scrapy的pipelines如何丢弃一个item对象？</p>
<p>简述scrapy中爬虫中间件和下载中间件的作用？</p>
<p>scrapy-redis组件的作用？</p>
<p>scrapy-redis组件中如何实现的任务的去重？</p>
<p>scrapy-redis的调度器如何实现任务的深度优先和广度优先？</p>
<p>简述 vitualenv 及应用场景?</p>
<p>简述 pipreqs 及应用场景？</p>
<p>在Python中使用过什么代码检查工具？</p>
<p>简述 saltstack、ansible、fabric、puppet工具的作用？</p>
<p>B Tree和B+ Tree的区别？</p>
<p>请列举常见排序并通过代码实现任意三种。</p>
<p>请列举常见查找并通过代码实现任意三种。</p>
<p>请列举你熟悉的设计模式？</p>
<p>有没有刷过leetcode？</p>
<p>列举熟悉的的Linux命令。</p>
<p>公司线上服务器是什么系统？</p>
<p>解释 PV、UV 的含义？</p>
<p>解释 QPS的含义？</p>
<p>uwsgi和wsgi的区别？</p>
<p>supervisor的作用？</p>
<p>什么是反向代理？</p>
<p>简述SSH的整个过程。</p>
<p>有问题都去那些找解决方案？</p>
<p>是否有关注什么技术类的公众号？</p>
<p>最近在研究什么新技术？</p>
<p>是否了解过领域驱动模型？</p>
<p>统计：80 + 34 + 46 + 155 = 315题</p>
<p>暂时就先这样吧。我想能看到这里的同学，无外乎两种人：来拷贝题的人 和 来拷贝题的人。</p>
<p>但，在拷贝走的时候，你要想清楚一件事，把题拷走之后有个蛋用，搞明白答案对你来说才是最重要的。</p>
<p>好了，就酱紫。</p>
<p>老铁，这要是都不赞，说不过去吧！！！</p>
<p><a href="https://www.cnblogs.com/wupeiqi/p/9078770.html" target="_blank" rel="noopener">原文链接</a>  </p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>python一些不为人知的小技巧</title>
    <url>/2020/04/20/python%E4%B8%80%E4%BA%9B%E4%B8%8D%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="python一些不为人知的小技巧"><a href="#python一些不为人知的小技巧" class="headerlink" title="python一些不为人知的小技巧"></a>python一些不为人知的小技巧</h2><h3 id="startswith-和endswith-参数可以是元组"><a href="#startswith-和endswith-参数可以是元组" class="headerlink" title="startswith()和endswith()参数可以是元组"></a>startswith()和endswith()参数可以是元组</h3><p>当检测字符串开头或结尾时，如果有多个检测值，可以用元组作为startswith()和endswith()参数:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bad</span><br><span class="line">if image.endswith(&#39;.jpg&#39;) or image.endswith(&#39;.png&#39;) or image.endswith(&#39;.gif&#39;):</span><br><span class="line">    pass</span><br><span class="line"># good</span><br><span class="line">if image.endswith((&#39;.jpg&#39;, &#39;.png&#39;, &#39;.gif&#39;)):</span><br><span class="line">    pass</span><br><span class="line"># bad</span><br><span class="line">if url.startswith(&#39;http:&#39;) or url.startswith(&#39;https:&#39;) or url.startswith(&#39;ftp:&#39;):</span><br><span class="line">    pass</span><br><span class="line"># good</span><br><span class="line">if url.startswith((&#39;http:&#39;, &#39;https:&#39;, &#39;ftp:&#39;)):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<h3 id="enumerate-设置start参数做为索引起始值"><a href="#enumerate-设置start参数做为索引起始值" class="headerlink" title="enumerate()设置start参数做为索引起始值"></a>enumerate()设置start参数做为索引起始值</h3><p>当用enumerate()迭代同时要得到索引时，可以设置start参数作为索引起始值:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bad</span><br><span class="line">for index, v in enumerate(data):</span><br><span class="line">    print(index+1, v)</span><br><span class="line"># good</span><br><span class="line">for index, v in enumerate(data, start&#x3D;1):</span><br><span class="line">    print(index, v)</span><br></pre></td></tr></table></figure>

<h3 id="对切片命名"><a href="#对切片命名" class="headerlink" title="对切片命名"></a>对切片命名</h3><p>当代码中到处都是硬编码的切片索引时，我们的代码将变得无法阅读。可以对切片命名解决此问题:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">record &#x3D; &#39;....................100.................513.25......&#39;</span><br><span class="line"># bad</span><br><span class="line">cost &#x3D; int(record[20:23]) * float(record[40:46])</span><br><span class="line"># good</span><br><span class="line">SHARES &#x3D; slice(20, 23)</span><br><span class="line">PRICE &#x3D; slice(40, 46)</span><br><span class="line">cost &#x3D; int(record[SHARES]) * float(record[PRICE])</span><br></pre></td></tr></table></figure>
<p>作为一条基本准则，代码中如果有很多硬编码的索引值，将导致可读性合可维护性都不佳。一般来说，内置的slice()函数会创建一个切片对象，可以用在任何允许进行切片操作的地方。例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; items &#x3D; [0, 1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; a &#x3D; slice(2, 4)</span><br><span class="line">&gt;&gt;&gt; items[2:4]</span><br><span class="line">[2, 3]</span><br><span class="line">&gt;&gt;&gt; items[a]</span><br><span class="line">[2, 3]</span><br><span class="line">&gt;&gt;&gt; items[a] &#x3D; [-2, -3]</span><br><span class="line">&gt;&gt;&gt; items</span><br><span class="line">[0, 1, -2, -3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; del items[a]</span><br><span class="line">&gt;&gt;&gt; items</span><br><span class="line">[0, 1, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="上下文管理器可以同时管理多个资源"><a href="#上下文管理器可以同时管理多个资源" class="headerlink" title="上下文管理器可以同时管理多个资源"></a>上下文管理器可以同时管理多个资源</h3><p>假设你要读取一个文件的内容，经过处理以后，写入到另一个文件。你能写出pythonic的代码，所以你使用了上下文管理器，满意地的写出了下面这样的代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;input.txt&#39;, &#39;r&#39;) as source:</span><br><span class="line">    with open(&#39;output.txt&#39;, &#39;w&#39;) as target:</span><br><span class="line">        target.write(source.read())</span><br></pre></td></tr></table></figure>
<p>你已经做的很好了，但是上下文管理器可以同时管理多个资源，上面这段代码还可以这样写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;input.txt&#39;, &#39;r&#39;) as source, open(&#39;output.txt&#39;, &#39;w&#39;) as target:</span><br><span class="line">    target.write(source.read())</span><br></pre></td></tr></table></figure>

<h3 id="else子句"><a href="#else子句" class="headerlink" title="else子句"></a>else子句</h3><p>Python中的else子句不仅能在if语句中使用，还能在for、while、和try语句中使用。<br>在for循环或是while循环正常运行完毕时（而不是通过break语句或是return语句或是异常退出循环），才会运行else块。<br>举个例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(3):</span><br><span class="line">...     print(i)</span><br><span class="line">... else:</span><br><span class="line">...     print(&#39;Iterated over everything&#39;)</span><br><span class="line">... </span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">Iterated over everything</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>如上，for循环正常结束，所以运行了后面的else块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(3):</span><br><span class="line">...     if i &#x3D;&#x3D; 2:</span><br><span class="line">...         break</span><br><span class="line">...     print(i)</span><br><span class="line">... else:</span><br><span class="line">...     print(&#39;Iterated over everything&#39;)</span><br><span class="line">... </span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>由此可以看出，for循环如果没有正常运行完毕（如上面是break结束循环的），是不会运行后面的else块。<br>仅当try块中没有异常抛出时才运行else块。一开始，你可能觉得没必要在try/except块中使用else子句。<br>毕竟，在下述代码片段中，只有dangerous_call()不抛出异常，after_call()才会执行，对吧？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try：</span><br><span class="line">    dangerous_call()</span><br><span class="line">    after_call()</span><br><span class="line">except OSError:</span><br><span class="line">    log(&#39;OSError...&#39;)</span><br></pre></td></tr></table></figure>
<p>然而，after_call()不应该放在try块中。为了清晰明确，try块中应该只包括抛出预期异常的语句。因此,下面这种写法更优雅:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    dangerous_call()</span><br><span class="line">except OSError:</span><br><span class="line">    log(&#39;OSError...&#39;)</span><br><span class="line">else:</span><br><span class="line">    after_call()</span><br></pre></td></tr></table></figure>
<p>现在很明确，try块防守的是dangerous_call()可能出现的错误，而不是after_call()。而且很明显，只有try块不抛出异常，才会执行after_call()。但要注意一点，else子句抛出的异常不会由前面的except子句处理，也就是说此时after_call()如果抛出异常，将不会被捕获到。</p>
<h3 id="脚本与命令行结合"><a href="#脚本与命令行结合" class="headerlink" title="脚本与命令行结合"></a>脚本与命令行结合</h3><p>可以使用下面方法运行一个Python脚本，在脚本运行结束后，直接进入Python命令行。这样做的好处是脚本的对象不会被清空，可以通过命令行直接调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat hello.py</span><br><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;2&#x2F;7</span><br><span class="line"></span><br><span class="line">info &#x3D; &#123;&#39;name&#39;: &#39;shuke&#39;,&#39;age&#39;: 18&#125;</span><br><span class="line">li &#x3D; [1,2,3,4,&#39;A&#39;]</span><br><span class="line">const &#x3D; 1000</span><br><span class="line"># 结合命令行</span><br><span class="line">$ python -i hello.py</span><br><span class="line">&gt;&gt;&gt; info</span><br><span class="line">&#123;&#39;name&#39;: &#39;shuke&#39;, &#39;age&#39;: 18&#125;</span><br><span class="line">&gt;&gt;&gt; li</span><br><span class="line">[1, 2, 3, 4, &#39;A&#39;]</span><br><span class="line">&gt;&gt;&gt; const</span><br><span class="line">1000</span><br><span class="line">&gt;&gt;&gt; exit()</span><br></pre></td></tr></table></figure>

<h3 id="默认字典的简单树状表达"><a href="#默认字典的简单树状表达" class="headerlink" title="默认字典的简单树状表达"></a>默认字典的简单树状表达</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">import collections</span><br><span class="line"></span><br><span class="line">tree &#x3D; lambda: collections.defaultdict(tree)</span><br><span class="line">root &#x3D; tree()</span><br><span class="line">root[&#39;menu&#39;][&#39;id&#39;] &#x3D; &#39;file&#39;</span><br><span class="line">root[&#39;menu&#39;][&#39;value&#39;] &#x3D; &#39;File&#39;</span><br><span class="line">root[&#39;menu&#39;][&#39;menuitems&#39;][&#39;new&#39;][&#39;value&#39;] &#x3D; &#39;New&#39;</span><br><span class="line">root[&#39;menu&#39;][&#39;menuitems&#39;][&#39;new&#39;][&#39;onclick&#39;] &#x3D; &#39;new();&#39;</span><br><span class="line">root[&#39;menu&#39;][&#39;menuitems&#39;][&#39;open&#39;][&#39;value&#39;] &#x3D; &#39;Open&#39;</span><br><span class="line">root[&#39;menu&#39;][&#39;menuitems&#39;][&#39;open&#39;][&#39;onclick&#39;] &#x3D; &#39;open();&#39;</span><br><span class="line">root[&#39;menu&#39;][&#39;menuitems&#39;][&#39;close&#39;][&#39;value&#39;] &#x3D; &#39;Close&#39;</span><br><span class="line">root[&#39;menu&#39;][&#39;menuitems&#39;][&#39;close&#39;][&#39;onclick&#39;] &#x3D; &#39;close();&#39;</span><br><span class="line">print(json.dumps(root, sort_keys&#x3D;True, indent&#x3D;4, separators&#x3D;(&#39;,&#39;, &#39;: &#39;)))</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">output: </span><br><span class="line">&#123;</span><br><span class="line">    &quot;menu&quot;: &#123;</span><br><span class="line">        &quot;id&quot;: &quot;file&quot;,</span><br><span class="line">        &quot;menuitems&quot;: &#123;</span><br><span class="line">            &quot;close&quot;: &#123;</span><br><span class="line">                &quot;onclick&quot;: &quot;close();&quot;,</span><br><span class="line">                &quot;value&quot;: &quot;Close&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;new&quot;: &#123;</span><br><span class="line">                &quot;onclick&quot;: &quot;new();&quot;,</span><br><span class="line">                &quot;value&quot;: &quot;New&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;open&quot;: &#123;</span><br><span class="line">                &quot;onclick&quot;: &quot;open();&quot;,</span><br><span class="line">                &quot;value&quot;: &quot;Open&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;value&quot;: &quot;File&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="扩展拆箱-只兼容python3"><a href="#扩展拆箱-只兼容python3" class="headerlink" title="扩展拆箱(只兼容python3)"></a>扩展拆箱(只兼容python3)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a, *b, c &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h3 id="列表切割赋值"><a href="#列表切割赋值" class="headerlink" title="列表切割赋值"></a>列表切割赋值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; a[2:3] &#x3D; [0, 0]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 0, 0, 4, 5]</span><br><span class="line">&gt;&gt;&gt; a[1:1] &#x3D; [8, 9]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 8, 9, 2, 0, 0, 4, 5]</span><br><span class="line">&gt;&gt;&gt; a[1:-1] &#x3D; []</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 5]</span><br></pre></td></tr></table></figure>

<h3 id="命名列表切割方式"><a href="#命名列表切割方式" class="headerlink" title="命名列表切割方式"></a>命名列表切割方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; LASTTHREE &#x3D; slice(-3, None)</span><br><span class="line">&gt;&gt;&gt; LASTTHREE</span><br><span class="line">slice(-3, None, None)</span><br><span class="line">&gt;&gt;&gt; a[LASTTHREE]</span><br><span class="line">[3, 4, 5]</span><br></pre></td></tr></table></figure>

<h3 id="列表以及迭代器的压缩和解压缩"><a href="#列表以及迭代器的压缩和解压缩" class="headerlink" title="列表以及迭代器的压缩和解压缩"></a>列表以及迭代器的压缩和解压缩</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; [1, 2, 3]</span><br><span class="line">b &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line"></span><br><span class="line">z &#x3D; zip(a, b)</span><br><span class="line"></span><br><span class="line">for i in zip(a, b):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">for item in zip(*z):</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>

<h3 id="列表展开"><a href="#列表展开" class="headerlink" title="列表展开"></a>列表展开</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import itertools</span><br><span class="line">&gt;&gt;&gt; a &#x3D; [[1, 2], [3, 4], [5, 6]]</span><br><span class="line">&gt;&gt;&gt; list(itertools.chain.from_iterable(a))</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt; sum(a, [])</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt; [x for l in a for x in l]</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]</span><br><span class="line">&gt;&gt;&gt; [x for l1 in a for l2 in l1 for x in l2]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, [3, 4], [[5, 6], [7, 8]]]</span><br><span class="line">&gt;&gt;&gt; flatten &#x3D; lambda x: [y for l in x for y in flatten(l)] if type(x) is list else [x]</span><br><span class="line">&gt;&gt;&gt; flatten(a)</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure>

<h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; g &#x3D; (x ** 2 for x in range(5))</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">16</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line">&gt;&gt;&gt; sum(x ** 3 for x in range(10))</span><br><span class="line">2025</span><br><span class="line">&gt;&gt;&gt; sum(x ** 3 for x in range(10) if x % 3 &#x3D;&#x3D; 1)</span><br><span class="line">408</span><br><span class="line"># 迭代器中没有可迭代对象的时候会引发StopIteration错误</span><br></pre></td></tr></table></figure>

<h3 id="字典setdefault"><a href="#字典setdefault" class="headerlink" title="字典setdefault"></a>字典setdefault</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; request &#x3D; &#123;&#125;</span><br><span class="line">&gt;&gt;&gt; request.setdefault(None,[]).append(123)</span><br><span class="line">&gt;&gt;&gt; print(request)</span><br><span class="line">&#123;None: [123]&#125;</span><br><span class="line">&gt;&gt;&gt; request.setdefault(None,[]).append(456)</span><br><span class="line">&gt;&gt;&gt; print(request)</span><br><span class="line">&#123;None: [123, 456]&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字典推导"><a href="#字典推导" class="headerlink" title="字典推导"></a>字典推导</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: x ** 2 for x in range(5)&#125;</span><br><span class="line">&gt;&gt;&gt; m</span><br><span class="line">&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;</span><br><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: &#39;A&#39; + str(x) for x in range(10)&#125;</span><br><span class="line">&gt;&gt;&gt; m</span><br><span class="line">&#123;0: &#39;A0&#39;, 1: &#39;A1&#39;, 2: &#39;A2&#39;, 3: &#39;A3&#39;, 4: &#39;A4&#39;, 5: &#39;A5&#39;, 6: &#39;A6&#39;, 7: &#39;A7&#39;, 8: &#39;A8&#39;, 9: &#39;A9&#39;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字典推导反转字典"><a href="#字典推导反转字典" class="headerlink" title="字典推导反转字典"></a>字典推导反转字典</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; m</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; &#123;v: k for k, v in m.items()&#125;</span><br><span class="line">&#123;1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="命名元组"><a href="#命名元组" class="headerlink" title="命名元组"></a>命名元组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Point &#x3D; collections.namedtuple(&#39;Point&#39;, [&#39;x&#39;, &#39;y&#39;])</span><br><span class="line">&gt;&gt;&gt; p &#x3D; Point(x&#x3D;1.0, y&#x3D;2.0)</span><br><span class="line">&gt;&gt;&gt; p</span><br><span class="line">Point(x&#x3D;1.0, y&#x3D;2.0)</span><br><span class="line">&gt;&gt;&gt; p.x</span><br><span class="line">1.0</span><br><span class="line">&gt;&gt;&gt; p.y</span><br><span class="line">2.0</span><br></pre></td></tr></table></figure>

<h3 id="继承命名元组"><a href="#继承命名元组" class="headerlink" title="继承命名元组"></a>继承命名元组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import collections</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Point(collections.namedtuple(&#39;PointBase&#39;, [&#39;x&#39;, &#39;y&#39;])):</span><br><span class="line">    __slots__ &#x3D; ()</span><br><span class="line"></span><br><span class="line">    def __add__(self, other):</span><br><span class="line">        return Point(x&#x3D;self.x + other.x, y&#x3D;self.y + other.y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p &#x3D; Point(x&#x3D;1.0, y&#x3D;2.0)</span><br><span class="line">q &#x3D; Point(x&#x3D;2.0, y&#x3D;3.0)</span><br><span class="line">print(p + q)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Point(x&#x3D;3.0, y&#x3D;5.0)</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="统计在可迭代器中最常出现的元素"><a href="#统计在可迭代器中最常出现的元素" class="headerlink" title="统计在可迭代器中最常出现的元素"></a>统计在可迭代器中最常出现的元素</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; A &#x3D; collections.Counter([1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 6, 7])</span><br><span class="line">&gt;&gt;&gt; A</span><br><span class="line">Counter(&#123;3: 4, 1: 2, 2: 2, 4: 1, 5: 1, 6: 1, 7: 1&#125;)</span><br><span class="line">&gt;&gt;&gt; A.most_common(1)</span><br><span class="line">[(3, 4)]</span><br><span class="line">&gt;&gt;&gt; A.most_common(3)</span><br><span class="line">[(3, 4), (1, 2), (2, 2)]</span><br></pre></td></tr></table></figure>

<h3 id="两端都可以操作的队列"><a href="#两端都可以操作的队列" class="headerlink" title="两端都可以操作的队列"></a>两端都可以操作的队列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Q &#x3D; collections.deque()</span><br><span class="line">&gt;&gt;&gt; Q.append(1)</span><br><span class="line">&gt;&gt;&gt; Q.appendleft(2)</span><br><span class="line">&gt;&gt;&gt; Q.extend([3, 4])</span><br><span class="line">&gt;&gt;&gt; Q.extendleft([5, 6])</span><br><span class="line">&gt;&gt;&gt; Q</span><br><span class="line">deque([6, 5, 2, 1, 3, 4])</span><br><span class="line">&gt;&gt;&gt; Q.pop()</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; Q.popleft()</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; Q</span><br><span class="line">deque([5, 2, 1, 3])</span><br><span class="line">&gt;&gt;&gt; Q.rotate(3)</span><br><span class="line">&gt;&gt;&gt; Q</span><br><span class="line">deque([2, 1, 3, 5])</span><br><span class="line">&gt;&gt;&gt; Q.rotate(-3)</span><br><span class="line">&gt;&gt;&gt; Q</span><br><span class="line">deque([5, 2, 1, 3])</span><br></pre></td></tr></table></figure>

<h3 id="有最大长度的双端队列"><a href="#有最大长度的双端队列" class="headerlink" title="有最大长度的双端队列"></a>有最大长度的双端队列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; last_three &#x3D; collections.deque(maxlen&#x3D;3)</span><br><span class="line">&gt;&gt;&gt; for i in range(10):</span><br><span class="line">...     last_three.append(i)</span><br><span class="line">...     print(&#39;,&#39;.join(str(x) for x in last_three))</span><br><span class="line">...</span><br><span class="line">0</span><br><span class="line">0,1</span><br><span class="line">0,1,2</span><br><span class="line">1,2,3</span><br><span class="line">2,3,4</span><br><span class="line">3,4,5</span><br><span class="line">4,5,6</span><br><span class="line">5,6,7</span><br><span class="line">6,7,8</span><br><span class="line">7,8,9</span><br></pre></td></tr></table></figure>

<h3 id="最大和最小的几个列表元素"><a href="#最大和最小的几个列表元素" class="headerlink" title="最大和最小的几个列表元素"></a>最大和最小的几个列表元素</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import random</span><br><span class="line">&gt;&gt;&gt; import heapq</span><br><span class="line">&gt;&gt;&gt; a &#x3D; [random.randint(0, 100) for __ in range(100)]</span><br><span class="line">&gt;&gt;&gt;  heapq.nsmallest(5, a)</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="line">    heapq.nsmallest(5, a)</span><br><span class="line">    ^</span><br><span class="line">IndentationError: unexpected indent</span><br><span class="line">&gt;&gt;&gt; heapq.nsmallest(5, a)</span><br><span class="line">[0, 1, 3, 4, 4]</span><br><span class="line">&gt;&gt;&gt; heapq.nlargest(5, a)</span><br><span class="line">[100, 99, 98, 97, 96]</span><br></pre></td></tr></table></figure>

<h3 id="两个列表的笛卡尔积"><a href="#两个列表的笛卡尔积" class="headerlink" title="两个列表的笛卡尔积"></a>两个列表的笛卡尔积</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import itertools</span><br><span class="line">&gt;&gt;&gt; for p in itertools.product([1, 2, 3], [4, 5]):</span><br><span class="line">...     print(p)</span><br><span class="line">...</span><br><span class="line">(1, 4)</span><br><span class="line">(1, 5)</span><br><span class="line">(2, 4)</span><br><span class="line">(2, 5)</span><br><span class="line">(3, 4)</span><br><span class="line">(3, 5)</span><br><span class="line">&gt;&gt;&gt; for p in itertools.product([0, 1], repeat&#x3D;4):</span><br><span class="line">...     print(&#39;&#39;.join(str(x) for x in p))</span><br><span class="line">...</span><br><span class="line">0000</span><br><span class="line">0001</span><br><span class="line">0010</span><br><span class="line">0011</span><br><span class="line">0100</span><br><span class="line">0101</span><br><span class="line">0110</span><br><span class="line">0111</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1110</span><br><span class="line">1111</span><br></pre></td></tr></table></figure>

<h3 id="列表组合和列表元素替代组合"><a href="#列表组合和列表元素替代组合" class="headerlink" title="列表组合和列表元素替代组合"></a>列表组合和列表元素替代组合</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; for c in itertools.combinations([1, 2, 3, 4, 5], 3):</span><br><span class="line">...     print(&#39;&#39;.join(str(x) for x in c))</span><br><span class="line">...</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">145</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">245</span><br><span class="line">345</span><br><span class="line">&gt;&gt;&gt; for c in itertools.combinations_with_replacement([1, 2, 3], 2):</span><br><span class="line">...     print(&#39;&#39;.join(str(x) for x in c))</span><br><span class="line">...</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">33</span><br></pre></td></tr></table></figure>

<h3 id="列表元素排列组合"><a href="#列表元素排列组合" class="headerlink" title="列表元素排列组合"></a>列表元素排列组合</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; for p in itertools.permutations([1, 2, 3, 4]):</span><br><span class="line">...      print(&#39;&#39;.join(str(x) for x in p))</span><br><span class="line">...</span><br><span class="line">1234</span><br><span class="line">1243</span><br><span class="line">1324</span><br><span class="line">1342</span><br><span class="line">1423</span><br><span class="line">1432</span><br><span class="line">2134</span><br><span class="line">2143</span><br><span class="line">2314</span><br><span class="line">2341</span><br><span class="line">2413</span><br><span class="line">2431</span><br><span class="line">3124</span><br><span class="line">3142</span><br><span class="line">3214</span><br><span class="line">3241</span><br><span class="line">3412</span><br><span class="line">3421</span><br><span class="line">4123</span><br><span class="line">4132</span><br><span class="line">4213</span><br><span class="line">4231</span><br><span class="line">4312</span><br><span class="line">4321</span><br></pre></td></tr></table></figure>

<h3 id="可链接迭代器"><a href="#可链接迭代器" class="headerlink" title="可链接迭代器"></a>可链接迭代器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; for p in itertools.chain(itertools.combinations(a, 2), itertools.combinations(a, 3)):</span><br><span class="line">...     print(p)</span><br><span class="line">...</span><br><span class="line">(1, 2)</span><br><span class="line">(1, 3)</span><br><span class="line">(1, 4)</span><br><span class="line">(2, 3)</span><br><span class="line">(2, 4)</span><br><span class="line">(3, 4)</span><br><span class="line">(1, 2, 3)</span><br><span class="line">(1, 2, 4)</span><br><span class="line">(1, 3, 4)</span><br><span class="line">(2, 3, 4)</span><br><span class="line">&gt;&gt;&gt; for subset in itertools.chain.from_iterable(itertools.combinations(a, n) for n in range(len(a) + 1)):</span><br><span class="line">...      print(subset)</span><br><span class="line">...</span><br><span class="line">()</span><br><span class="line">(1,)</span><br><span class="line">(2,)</span><br><span class="line">(3,)</span><br><span class="line">(4,)</span><br><span class="line">(1, 2)</span><br><span class="line">(1, 3)</span><br><span class="line">(1, 4)</span><br><span class="line">(2, 3)</span><br><span class="line">(2, 4)</span><br><span class="line">(3, 4)</span><br><span class="line">(1, 2, 3)</span><br><span class="line">(1, 2, 4)</span><br><span class="line">(1, 3, 4)</span><br><span class="line">(2, 3, 4)</span><br><span class="line">(1, 2, 3, 4)</span><br></pre></td></tr></table></figure>

<h3 id="根据文件指定列类聚"><a href="#根据文件指定列类聚" class="headerlink" title="根据文件指定列类聚"></a>根据文件指定列类聚</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import itertools</span><br><span class="line">&gt;&gt;&gt; with open(&#39;contactlenses.csv&#39;, &#39;r&#39;) as infile:</span><br><span class="line">...     data &#x3D; [line.strip().split(&#39;,&#39;) for line in infile]</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; data &#x3D; data[1:]</span><br><span class="line">&gt;&gt;&gt; def print_data(rows):</span><br><span class="line">...     print &#39;\n&#39;.join(&#39;\t&#39;.join(&#39;&#123;: &lt;16&#125;&#39;.format(s) for s in row) for row in rows)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print_data(data)</span><br><span class="line">young               myope                   no                      reduced                 none</span><br><span class="line">young               myope                   no                      normal                  soft</span><br><span class="line">young               myope                   yes                     reduced                 none</span><br><span class="line">young               myope                   yes                     normal                  hard</span><br><span class="line">young               hypermetrope            no                      reduced                 none</span><br><span class="line">young               hypermetrope            no                      normal                  soft</span><br><span class="line">young               hypermetrope            yes                     reduced                 none</span><br><span class="line">young               hypermetrope            yes                     normal                  hard</span><br><span class="line">pre-presbyopic      myope                   no                      reduced                 none</span><br><span class="line">pre-presbyopic      myope                   no                      normal                  soft</span><br><span class="line">pre-presbyopic      myope                   yes                     reduced                 none</span><br><span class="line">pre-presbyopic      myope                   yes                     normal                  hard</span><br><span class="line">pre-presbyopic      hypermetrope            no                      reduced                 none</span><br><span class="line">pre-presbyopic      hypermetrope            no                      normal                  soft</span><br><span class="line">pre-presbyopic      hypermetrope            yes                     reduced                 none</span><br><span class="line">pre-presbyopic      hypermetrope            yes                     normal                  none</span><br><span class="line">presbyopic          myope                   no                      reduced                 none</span><br><span class="line">presbyopic          myope                   no                      normal                  none</span><br><span class="line">presbyopic          myope                   yes                     reduced                 none</span><br><span class="line">presbyopic          myope                   yes                     normal                  hard</span><br><span class="line">presbyopic          hypermetrope            no                      reduced                 none</span><br><span class="line">presbyopic          hypermetrope            no                      normal                  soft</span><br><span class="line">presbyopic          hypermetrope            yes                     reduced                 none</span><br><span class="line">presbyopic          hypermetrope            yes                     normal                  none</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; data.sort(key&#x3D;lambda r: r[-1])</span><br><span class="line">&gt;&gt;&gt; for value, group in itertools.groupby(data, lambda r: r[-1]):</span><br><span class="line">...     print &#39;-----------&#39;</span><br><span class="line">...     print &#39;Group: &#39; + value</span><br><span class="line">...     print_data(group)</span><br><span class="line">...</span><br><span class="line">-----------</span><br><span class="line">Group: hard</span><br><span class="line">young               myope                   yes                     normal                  hard</span><br><span class="line">young               hypermetrope            yes                     normal                  hard</span><br><span class="line">pre-presbyopic      myope                   yes                     normal                  hard</span><br><span class="line">presbyopic          myope                   yes                     normal                  hard</span><br><span class="line">-----------</span><br><span class="line">Group: none</span><br><span class="line">young               myope                   no                      reduced                 none</span><br><span class="line">young               myope                   yes                     reduced                 none</span><br><span class="line">young               hypermetrope            no                      reduced                 none</span><br><span class="line">young               hypermetrope            yes                     reduced                 none</span><br><span class="line">pre-presbyopic      myope                   no                      reduced                 none</span><br><span class="line">pre-presbyopic      myope                   yes                     reduced                 none</span><br><span class="line">pre-presbyopic      hypermetrope            no                      reduced                 none</span><br><span class="line">pre-presbyopic      hypermetrope            yes                     reduced                 none</span><br><span class="line">pre-presbyopic      hypermetrope            yes                     normal                  none</span><br><span class="line">presbyopic          myope                   no                      reduced                 none</span><br><span class="line">presbyopic          myope                   no                      normal                  none</span><br><span class="line">presbyopic          myope                   yes                     reduced                 none</span><br><span class="line">presbyopic          hypermetrope            no                      reduced                 none</span><br><span class="line">presbyopic          hypermetrope            yes                     reduced                 none</span><br><span class="line">presbyopic          hypermetrope            yes                     normal                  none</span><br><span class="line">-----------</span><br><span class="line">Group: soft</span><br><span class="line">young               myope                   no                      normal                  soft</span><br><span class="line">young               hypermetrope            no                      normal                  soft</span><br><span class="line">pre-presbyopic      myope                   no                      normal                  soft</span><br><span class="line">pre-presbyopic      hypermetrope            no                      normal                  soft</span><br><span class="line">presbyopic          hypermetrope            no                      normal                  soft</span><br></pre></td></tr></table></figure>

<h3 id="按单词反转字符串"><a href="#按单词反转字符串" class="headerlink" title="按单词反转字符串"></a>按单词反转字符串</h3><p>按单词反转字符串是一道很常见的面试题。在Python中实现起来非常简单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def reverse_string_by_word(s):</span><br><span class="line">    lst &#x3D; s.split()  # split by blank space by default</span><br><span class="line">    return &#39; &#39;.join(lst[::-1])</span><br><span class="line"></span><br><span class="line">s &#x3D; &#39;Power of Love&#39;</span><br><span class="line">print reverse_string_by_word(s)</span><br><span class="line"># Love of Power</span><br><span class="line"></span><br><span class="line">s &#x3D; &#39;Hello    World!&#39;</span><br><span class="line">print reverse_string_by_word(s)</span><br><span class="line"># World! Hello</span><br></pre></td></tr></table></figure>

<p>上面的实现其实已经能满足大多数情况，但是并不完美。比如第二个字符串中的感叹号并没有被翻转，而且原字符串中的空格数量也没有保留。（在上面的例子里其实Hello和World之间不止一个空格）</p>
<p>我们期望的结果应该是这样子的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print reverse_string_by_word(s)</span><br><span class="line"># Expected: !World  Hello</span><br></pre></td></tr></table></figure>
<p>要改进上面的方案还不把问题复杂化，推荐使用re模块。你可以查阅re.split() 的官方文档。我们看一下具体例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; s &#x3D; &#39;Hello  World!&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; re.split(r&#39;\s+&#39;, s)    # will discard blank spaces</span><br><span class="line">[&#39;Hello&#39;, &#39;World!&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; re.split(r&#39;(\s+)&#39;, s)  # will keep spaces as a group</span><br><span class="line">[&#39;Hello&#39;, &#39;  &#39;, &#39;World!&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; s &#x3D; &#39;&lt; Welcome to EF.COM! &gt;&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; re.split(r&#39;\s+&#39;, s)  # split by spaces</span><br><span class="line">[&#39;&lt;&#39;, &#39;Welcome&#39;, &#39;to&#39;, &#39;EF.COM!&#39;, &#39;&gt;&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; re.split(r&#39;(\w+)&#39;, s)  # exactly split by word</span><br><span class="line">[&#39;&lt; &#39;, &#39;Welcome&#39;, &#39; &#39;, &#39;to&#39;, &#39; &#39;, &#39;EF&#39;, &#39;.&#39;, &#39;COM&#39;, &#39;! &gt;&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; re.split(r&#39;(\s+|\w+)&#39;, s)  # split by space and word</span><br><span class="line">[&#39;&lt;&#39;, &#39; &#39;, &#39;&#39;, &#39;Welcome&#39;, &#39;&#39;, &#39; &#39;, &#39;&#39;, &#39;to&#39;, &#39;&#39;, &#39; &#39;, &#39;&#39;, &#39;EF&#39;, &#39;.&#39;, &#39;COM&#39;, &#39;!&#39;, &#39; &#39;, &#39;&gt;&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &#39;&#39;.join(re.split(r&#39;(\s+|\w+)&#39;, s)[::-1])</span><br><span class="line">&#39;&gt; !COM.EF to Welcome &lt;&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &#39;&#39;.join(re.split(r&#39;(\s+)&#39;, s)[::-1])</span><br><span class="line">&#39;&gt; EF.COM! to Welcome &lt;&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &#39;&#39;.join(re.split(r&#39;(\w+)&#39;, s)[::-1])</span><br><span class="line">&#39;! &gt;COM.EF to Welcome&lt; &#39;</span><br></pre></td></tr></table></figure>
<p>如果你觉得用切片将序列倒序可读性不高，那么其实也可以这样写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;&#39;.join(reversed(re.split(r&#39;(\s+|\w+)&#39;, s)))</span><br><span class="line">&#39;&gt; !COM.EF to Welcome &lt;</span><br></pre></td></tr></table></figure>


<p><a href="http://blog.jobbole.com/63320/" target="_blank" rel="noopener">30个有关Python的小技巧</a><br><a href="http://www.revotu.com/most-common-learn-python-questions.html" target="_blank" rel="noopener">Python学习之路上的几个经典问题|大师兄</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>python单例模式</title>
    <url>/2020/04/20/python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="python单例模式"><a href="#python单例模式" class="headerlink" title="python单例模式"></a>python单例模式</h2><h2 id="一-什么是单例模式"><a href="#一-什么是单例模式" class="headerlink" title="一. 什么是单例模式"></a>一. 什么是单例模式</h2><p>单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。</p>
<p>比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个 AppConfig 的类来读取配置文件的信息。如果在程序运行期间，有很多地方都需要使用配置文件的内容，也就是说，很多地方都需要创建 AppConfig 对象的实例，这就导致系统中存在多个 AppConfig 的实例对象，而这样会严重浪费内存资源，尤其是在配置文件内容很多的情况下。事实上，类似 AppConfig 这样的类，我们希望在程序运行期间只存在一个实例对象。</p>
<h2 id="二-如何实现单例模式"><a href="#二-如何实现单例模式" class="headerlink" title="二. 如何实现单例模式"></a>二. 如何实现单例模式</h2><p>在 Python 中，我们可以用多种方法来实现单例模式：<br>使用模块<br>使用 <strong>new</strong><br>使用装饰器（decorator）<br>使用元类（metaclass)</p>
<h3 id="2-1-使用模块"><a href="#2-1-使用模块" class="headerlink" title="2.1 使用模块"></a>2.1 使用模块</h3><p>其实，Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysingleton.py</span><br><span class="line">class My_Singleton(object):</span><br><span class="line">    def foo(self):</span><br><span class="line">        pass</span><br><span class="line">        </span><br><span class="line">my_singleton &#x3D; My_Singleton()</span><br></pre></td></tr></table></figure>
<p>将上面的代码保存在文件 mysingleton.py 中，然后这样使用:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from mysingleton import my_singleton</span><br><span class="line">my_singleton.foo()</span><br></pre></td></tr></table></figure>

<h3 id="2-2-使用new"><a href="#2-2-使用new" class="headerlink" title="2.2 使用new"></a>2.2 使用<strong>new</strong></h3><p><strong>new</strong>()在<strong>init</strong>()之前被调用，用于生成实例对象。利用这个方法和类的属性的特点可以实现设计模式的单例模式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Singeton(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    单例模式</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        if not hasattr(cls, &#39;_instance&#39;):</span><br><span class="line">            # orig &#x3D; super(Singeton, cls)</span><br><span class="line">            cls._instance &#x3D; super(Singeton, cls).__new__(cls, *args, **kwargs)</span><br><span class="line">        return cls._instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyCLass(Singeton):</span><br><span class="line">    a &#x3D; 1</span><br><span class="line"></span><br><span class="line">one &#x3D; MyCLass()</span><br><span class="line">two &#x3D; MyCLass()</span><br><span class="line">print(one is two)</span><br><span class="line">print(one &#x3D;&#x3D; two)</span><br><span class="line">print(id(one), id(two))</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">输出:</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">4436793720 4436793720</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们将类的实例和一个类变量 _instance 关联起来，如果 cls._instance 为 None 则创建实例，否则直接返回 cls._instance</p>
<h3 id="2-3-共享属性"><a href="#2-3-共享属性" class="headerlink" title="2.3 共享属性"></a>2.3 共享属性</h3><p>创建实例时把所有实例的<strong>dict</strong>指向同一个字典,这样它们具有相同的属性和方法.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Borg(object):</span><br><span class="line">    _state &#x3D; &#123;&#125;</span><br><span class="line">    def __new__(cls, *args, **kw):</span><br><span class="line">        ob &#x3D; super(Borg, cls).__new__(cls, *args, **kw)</span><br><span class="line">        ob.__dict__ &#x3D; cls._state</span><br><span class="line">        return ob</span><br><span class="line"></span><br><span class="line">class MyClass2(Borg):</span><br><span class="line">    a &#x3D; 1</span><br><span class="line">    </span><br><span class="line"># 没明白该方式如何实现单例</span><br></pre></td></tr></table></figure>

<h3 id="2-4-装饰器方式"><a href="#2-4-装饰器方式" class="headerlink" title="2.4 装饰器方式"></a>2.4 装饰器方式</h3><p>我们知道，装饰器（decorator）可以动态地修改一个类或函数的功能。这里，我们也可以使用装饰器来装饰某个类，使其只能生成一个实例，代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def singleton(cls):</span><br><span class="line">    instances &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    @wraps(cls)</span><br><span class="line">    def getinstance(*args, **kw):</span><br><span class="line">        if cls not in instances:</span><br><span class="line">            instances[cls] &#x3D; cls(*args, **kw)</span><br><span class="line">        return instances[cls]</span><br><span class="line"></span><br><span class="line">    return getinstance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@singleton</span><br><span class="line">class MyClass(object):</span><br><span class="line">    a &#x3D; 1</span><br><span class="line"></span><br><span class="line">one &#x3D; MyClass()</span><br><span class="line">two &#x3D; MyClass()</span><br><span class="line">print(one is two)</span><br><span class="line">print(one &#x3D;&#x3D; two)</span><br><span class="line">print(id(one), id(two))</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">4492352536 4492352536</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>在上面，我们定义了一个装饰器singleton，它返回了一个内部函数 getinstance，该函数会判断某个类是否在字典 instances 中，如果不存在，则会将 cls 作为 key，cls(*args, **kw)作为 value存到instances中,否则,直接返回 instances[cls]。</p>
<h3 id="2-5-使用metaclass"><a href="#2-5-使用metaclass" class="headerlink" title="2.5 使用metaclass"></a>2.5 使用metaclass</h3><p>元类（metaclass）可以控制类的创建过程，它主要做三件事：</p>
<ul>
<li>拦截类的创建</li>
<li>修改类的定义</li>
<li>返回修改后的类<br>使用元类实现单例模式的代码如下:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Singleton(type):</span><br><span class="line">    _instances &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    def __call__(cls, *args, **kwargs):</span><br><span class="line">        if cls not in cls._instances:</span><br><span class="line">            cls._instances[cls] &#x3D; super(Singleton, cls).__call__(*args, **kwargs)</span><br><span class="line">        return cls._instances[cls]</span><br><span class="line"></span><br><span class="line"># Python2</span><br><span class="line">class MyClass(object):</span><br><span class="line">    __metaclass__ &#x3D; Singleton</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Python3</span><br><span class="line">class MyClass(metaclass&#x3D;Singleton):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>python操作Redis</title>
    <url>/2020/04/20/python%E6%93%8D%E4%BD%9CRedis/</url>
    <content><![CDATA[<h2 id="python操作Redis"><a href="#python操作Redis" class="headerlink" title="python操作Redis"></a>python操作Redis</h2><h2 id="一-Redis是什么"><a href="#一-Redis是什么" class="headerlink" title="一. Redis是什么"></a>一. Redis是什么</h2><blockquote>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）<br><a href="https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Redis.md" target="_blank" rel="noopener">Interview-Notebook/Redis.md-Notebook-GitHub</a><br><a href="http://www.redis.cn/" target="_blank" rel="noopener">redis.cn</a>   </p>
</blockquote>
<h2 id="二-Redis基本介绍"><a href="#二-Redis基本介绍" class="headerlink" title="二. Redis基本介绍"></a>二. Redis基本介绍</h2><blockquote>
<p>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步</p>
</blockquote>
<h3 id="2-1-Redis的安装和基本使用"><a href="#2-1-Redis的安装和基本使用" class="headerlink" title="2.1 Redis的安装和基本使用"></a>2.1 Redis的安装和基本使用</h3><ul>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-3.0.6.tar.gz</span><br><span class="line">tar xzf redis-3.0.6.tar.gz</span><br><span class="line">cd redis-3.0.6</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li>
<li>启动服务端<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src&#x2F;redis-server</span><br></pre></td></tr></table></figure></li>
<li>启动客户端<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src&#x2F;redis-cli</span><br><span class="line">redis&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-python操作redis"><a href="#2-2-python操作redis" class="headerlink" title="2.2 python操作redis"></a>2.2 python操作redis</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install redis</span><br><span class="line">or</span><br><span class="line">easy_install redis</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/WoLpH/redis-py" target="_blank" rel="noopener">GitHub - WoLpH/redis-py: Redis Python Client-源码安装</a></p>
<h2 id="三-API使用"><a href="#三-API使用" class="headerlink" title="三. API使用"></a>三. API使用</h2><p>redis-py 的API的使用可以分类为:</p>
<ul>
<li>连接方式<ul>
<li>直接连接</li>
<li>连接池</li>
</ul>
</li>
<li>操作<ul>
<li>String 操作</li>
<li>Hash 操作</li>
<li>List 操作</li>
<li>Set 操作</li>
<li>Sort Set 操作</li>
</ul>
</li>
<li>管道</li>
<li>发布订阅</li>
</ul>
<h2 id="四-连接方式"><a href="#四-连接方式" class="headerlink" title="四. 连接方式"></a>四. 连接方式</h2><h3 id="4-1-操作模式"><a href="#4-1-操作模式" class="headerlink" title="4.1 操作模式"></a>4.1 操作模式</h3><p>redis-py提供两个类Redis和StrictRedis用于实现Redis的命令，StrictRedis用于实现大部分官方的命令，并使用官方的语法和命令，Redis是StrictRedis的子类，用于向后兼容旧版本的redis-py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"> </span><br><span class="line">import redis</span><br><span class="line"></span><br><span class="line">r &#x3D; redis.Redis(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;6379)</span><br><span class="line">r.set(&#39;foo&#39;, &#39;Bar&#39;)</span><br><span class="line">print(r.get(&#39;foo&#39;))</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">b&#39;Bar&#39;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>连接redis，加上decode_responses=True,写入键值对中的value为str类型，不加这个参数写入的则为字节类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import redis</span><br><span class="line"></span><br><span class="line">r &#x3D; redis.Redis(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;6379, decode_responses&#x3D;True)</span><br><span class="line">r.set(&#39;name&#39;, &#39;shuke&#39;)</span><br><span class="line">print(r.get(&#39;name&#39;))</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">shuke</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-连接池"><a href="#4-2-连接池" class="headerlink" title="4.2 连接池"></a>4.2 连接池</h3><p>redis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"> </span><br><span class="line">import redis</span><br><span class="line"></span><br><span class="line">pool &#x3D; redis.ConnectionPool(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;6379, decode_responses&#x3D;True)</span><br><span class="line"></span><br><span class="line">r &#x3D; redis.Redis(connection_pool&#x3D;pool)</span><br><span class="line">r.set(&#39;book&#39;, &#39;西游记&#39;)</span><br><span class="line">print(r.get(&#39;book&#39;))</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">西游记</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="五-String-操作"><a href="#五-String-操作" class="headerlink" title="五. String 操作"></a>五. String 操作</h2><p>String操作，redis中的String在在内存中按照一个name对应一个value来存储<br>Key|–&gt;|Value|<br>—-|—-|—-<br>k1|–&gt;|v1<br>k2|–&gt;|v2<br>k3|–&gt;|v3</p>
<ul>
<li>set(name, value, ex=None, px=None, nx=False, xx=False)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Redis中设置值，默认，不存在则创建，存在则修改</span><br><span class="line">参数：</span><br><span class="line">     ex，过期时间（秒）</span><br><span class="line">     px，过期时间（毫秒）</span><br><span class="line">     nx，如果设置为True，则只有name不存在时，当前set操作才执行</span><br><span class="line">     xx，如果设置为True，则只有name存在时，岗前set操作才执行</span><br></pre></td></tr></table></figure></li>
<li>setnx(name, value)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置值，只有name不存在时，执行设置操作(添加)</span><br></pre></td></tr></table></figure></li>
<li>setex(name, value, time)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置值</span><br><span class="line"># 参数：</span><br><span class="line">    # time，过期时间（数字秒 或 timedelta对象）</span><br><span class="line">&#96;&#96;&#96;&#96;    </span><br><span class="line">- psetex(name, time_ms, value)</span><br></pre></td></tr></table></figure>
<h1 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h1><h1 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h1><h1 id="time-ms，过期时间（数字毫秒-或-timedelta对象）"><a href="#time-ms，过期时间（数字毫秒-或-timedelta对象）" class="headerlink" title="time_ms，过期时间（数字毫秒 或 timedelta对象）"></a>time_ms，过期时间（数字毫秒 或 timedelta对象）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- mset(args, *kwargs)</span><br></pre></td></tr></table></figure>
批量设置值<br>如：<br>  mset(k1=’v1’, k2=’v2’)<br>  或<br>  mset({‘k1’: ‘v1’, ‘k2’: ‘v2’})<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- get(name)</span><br></pre></td></tr></table></figure>
获取值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- mget(keys, *args)</span><br></pre></td></tr></table></figure>
批量获取<br>如：<br>  mget(‘name’, ‘shuke’)<br>  或<br>  r.mget([‘name’, ‘shuke’])<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- getset(name, value)</span><br></pre></td></tr></table></figure>
设置新值并获取原来的值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- getrange(key, start, end)</span><br></pre></td></tr></table></figure>
<h1 id="获取子序列（根据字节获取，非字符）"><a href="#获取子序列（根据字节获取，非字符）" class="headerlink" title="获取子序列（根据字节获取，非字符）"></a>获取子序列（根据字节获取，非字符）</h1><h1 id="参数：-1"><a href="#参数：-1" class="headerlink" title="参数："></a>参数：</h1><h1 id="name，Redis-的-name"><a href="#name，Redis-的-name" class="headerlink" title="name，Redis 的 name"></a>name，Redis 的 name</h1><h1 id="start，起始位置（字节）"><a href="#start，起始位置（字节）" class="headerlink" title="start，起始位置（字节）"></a>start，起始位置（字节）</h1><h1 id="end，结束位置（字节）"><a href="#end，结束位置（字节）" class="headerlink" title="end，结束位置（字节）"></a>end，结束位置（字节）</h1><h1 id="如：-“武大郎”-，0-3表示-“武”"><a href="#如：-“武大郎”-，0-3表示-“武”" class="headerlink" title="如： “武大郎” ，0-3表示 “武”"></a>如： “武大郎” ，0-3表示 “武”</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- setrange(name, offset, value)</span><br></pre></td></tr></table></figure>
<h1 id="修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）"><a href="#修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）" class="headerlink" title="修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）"></a>修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）</h1><h1 id="参数：-2"><a href="#参数：-2" class="headerlink" title="参数："></a>参数：</h1><h1 id="offset，字符串的索引，字节（一个汉字三个字节）"><a href="#offset，字符串的索引，字节（一个汉字三个字节）" class="headerlink" title="offset，字符串的索引，字节（一个汉字三个字节）"></a>offset，字符串的索引，字节（一个汉字三个字节）</h1><h1 id="value，要设置的值"><a href="#value，要设置的值" class="headerlink" title="value，要设置的值"></a>value，要设置的值</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- setbit(name, offset, value)</span><br></pre></td></tr></table></figure>
<h1 id="对name对应值的二进制表示的位进行操作"><a href="#对name对应值的二进制表示的位进行操作" class="headerlink" title="对name对应值的二进制表示的位进行操作"></a>对name对应值的二进制表示的位进行操作</h1></li>
</ul>
<h1 id="参数：-3"><a href="#参数：-3" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，redis的name
# offset，位的索引（将值变换成二进制后再进行索引）
# value，值只能是 1 或 0</code></pre><h1 id="注：如果在Redis中有一个对应：-n1-“foo”，"><a href="#注：如果在Redis中有一个对应：-n1-“foo”，" class="headerlink" title="注：如果在Redis中有一个对应： n1 = “foo”，"></a>注：如果在Redis中有一个对应： n1 = “foo”，</h1><pre><code>    那么字符串foo的二进制表示为：01100110 01101111 01101111
所以，如果执行 setbit(&apos;n1&apos;, 7, 1)，则就会将第7位设置为1，
    那么最终二进制则变成 01100111 01101111 01101111，即：&quot;goo&quot;</code></pre><h1 id="扩展，转换二进制表示："><a href="#扩展，转换二进制表示：" class="headerlink" title="扩展，转换二进制表示："></a>扩展，转换二进制表示：</h1><pre><code># source = &quot;武沛齐&quot;
source = &quot;foo&quot;

for i in source:
    num = ord(i)
    print bin(num).replace(&apos;b&apos;,&apos;&apos;)

特别的，如果source是汉字 &quot;武沛齐&quot;怎么办？
答：对于utf-8，每一个汉字占 3 个字节，那么 &quot;武沛齐&quot; 则有 9个字节
   对于汉字，for循环时候会按照 字节 迭代，那么在迭代时，将每一个字节转换 十进制数，然后再将十进制数转换成二进制
    11100110 10101101 10100110 11100110 10110010 10011011 11101001 10111101 10010000
    -------------------------- ----------------------------- -----------------------------
                武                         沛                           齐</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- getbit(name, offset)</span><br></pre></td></tr></table></figure>
<h1 id="获取name对应的值的二进制表示中的某位的值-（0或1）"><a href="#获取name对应的值的二进制表示中的某位的值-（0或1）" class="headerlink" title="获取name对应的值的二进制表示中的某位的值 （0或1）"></a>获取name对应的值的二进制表示中的某位的值 （0或1）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- bitcount(key, start&#x3D;None, end&#x3D;None)</span><br></pre></td></tr></table></figure>
<h1 id="获取name对应的值的二进制表示中-1-的个数"><a href="#获取name对应的值的二进制表示中-1-的个数" class="headerlink" title="获取name对应的值的二进制表示中 1 的个数"></a>获取name对应的值的二进制表示中 1 的个数</h1><h1 id="参数：-4"><a href="#参数：-4" class="headerlink" title="参数："></a>参数：</h1><pre><code># key，Redis的name
# start，位起始位置
# end，位结束位置</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- bitop(operation, dest, *keys)</span><br></pre></td></tr></table></figure>
<h1 id="获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值"><a href="#获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值" class="headerlink" title="获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值"></a>获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值</h1><h1 id="参数：-5"><a href="#参数：-5" class="headerlink" title="参数："></a>参数：</h1><pre><code># operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）
# dest, 新的Redis的name
# *keys,要查找的Redis的name</code></pre><h1 id="如："><a href="#如：" class="headerlink" title="如："></a>如：</h1><pre><code>bitop(&quot;AND&quot;, &apos;new_name&apos;, &apos;n1&apos;, &apos;n2&apos;, &apos;n3&apos;)
# 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- strlen(name)</span><br></pre></td></tr></table></figure>
<h1 id="返回name对应值的字节长度（一个汉字3个字节）"><a href="#返回name对应值的字节长度（一个汉字3个字节）" class="headerlink" title="返回name对应值的字节长度（一个汉字3个字节）"></a>返回name对应值的字节长度（一个汉字3个字节）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- incr(self, name, amount&#x3D;1)</span><br></pre></td></tr></table></figure>
<h1 id="自增-name对应的值，当name不存在时，则创建name＝amount，否则，则自增。"><a href="#自增-name对应的值，当name不存在时，则创建name＝amount，否则，则自增。" class="headerlink" title="自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。"></a>自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。</h1><h1 id="参数：-6"><a href="#参数：-6" class="headerlink" title="参数："></a>参数：</h1><pre><code># name,Redis的name
# amount,自增数（必须是整数）</code></pre><h1 id="注：同incrby"><a href="#注：同incrby" class="headerlink" title="注：同incrby"></a>注：同incrby</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- incrbyfloat(self, name, amount&#x3D;1.0)</span><br></pre></td></tr></table></figure>
<h1 id="自增-name对应的值，当name不存在时，则创建name＝amount，否则，则自增。-1"><a href="#自增-name对应的值，当name不存在时，则创建name＝amount，否则，则自增。-1" class="headerlink" title="自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。"></a>自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。</h1><h1 id="参数：-7"><a href="#参数：-7" class="headerlink" title="参数："></a>参数：</h1><pre><code># name,Redis的name
# amount,自增数（浮点型)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- decr(self, name, amount&#x3D;1)</span><br></pre></td></tr></table></figure>
<h1 id="自减-name对应的值，当name不存在时，则创建name＝amount，否则，则自减。"><a href="#自减-name对应的值，当name不存在时，则创建name＝amount，否则，则自减。" class="headerlink" title="自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。"></a>自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。</h1><h1 id="参数：-8"><a href="#参数：-8" class="headerlink" title="参数："></a>参数：</h1><pre><code># name,Redis的name
# amount,自减数（整数）</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- append(key, value)</span><br></pre></td></tr></table></figure>
<h1 id="在redis-name对应的值后面追加内容"><a href="#在redis-name对应的值后面追加内容" class="headerlink" title="在redis name对应的值后面追加内容"></a>在redis name对应的值后面追加内容</h1><h1 id="参数：-9"><a href="#参数：-9" class="headerlink" title="参数："></a>参数：</h1><pre><code>key, redis的name
value, 要追加的字符串</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 六. Hash 操作</span><br><span class="line">在redis中存储的结构为下表所示:</span><br><span class="line">Key|--&gt;|Value|</span><br><span class="line">----|----|----</span><br><span class="line">n1|--&gt;|k1-v1</span><br><span class="line">n2|--&gt;|k2-v2</span><br><span class="line">n3|--&gt;|k3-v3</span><br><span class="line"></span><br><span class="line">### 6.1 hset(name, key, value)</span><br></pre></td></tr></table></figure>
<h1 id="name对应的hash中设置一个键值对（不存在，则创建；否则，修改）"><a href="#name对应的hash中设置一个键值对（不存在，则创建；否则，修改）" class="headerlink" title="name对应的hash中设置一个键值对（不存在，则创建；否则，修改）"></a>name对应的hash中设置一个键值对（不存在，则创建；否则，修改）</h1><h1 id="参数：-10"><a href="#参数：-10" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，redis的name
# key，name对应的hash中的key
# value，name对应的hash中的value</code></pre><h1 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h1><pre><code># hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 6.2 hmset(name, mapping)</span><br></pre></td></tr></table></figure>
<h1 id="在name对应的hash中批量设置键值对"><a href="#在name对应的hash中批量设置键值对" class="headerlink" title="在name对应的hash中批量设置键值对"></a>在name对应的hash中批量设置键值对</h1><h1 id="参数：-11"><a href="#参数：-11" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，redis的name
# mapping，字典，如：{&apos;k1&apos;:&apos;v1&apos;, &apos;k2&apos;: &apos;v2&apos;}</code></pre><h1 id="如：-1"><a href="#如：-1" class="headerlink" title="如："></a>如：</h1><pre><code># r.hmset(&apos;xx&apos;, {&apos;k1&apos;:&apos;v1&apos;, &apos;k2&apos;: &apos;v2&apos;})</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 6.3 hget(name,key)</span><br></pre></td></tr></table></figure>
<h1 id="在name对应的hash中获取根据key获取value"><a href="#在name对应的hash中获取根据key获取value" class="headerlink" title="在name对应的hash中获取根据key获取value"></a>在name对应的hash中获取根据key获取value</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 6.4 hmget(name, keys, *args)</span><br></pre></td></tr></table></figure>
<h1 id="在name对应的hash中获取多个key的值"><a href="#在name对应的hash中获取多个key的值" class="headerlink" title="在name对应的hash中获取多个key的值"></a>在name对应的hash中获取多个key的值</h1><h1 id="参数：-12"><a href="#参数：-12" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，reids对应的name
# keys，要获取key集合，如：[&apos;k1&apos;, &apos;k2&apos;, &apos;k3&apos;]
# *args，要获取的key，如：k1,k2,k3</code></pre><h1 id="如：-2"><a href="#如：-2" class="headerlink" title="如："></a>如：</h1><pre><code># r.mget(&apos;xx&apos;, [&apos;k1&apos;, &apos;k2&apos;])
# 或
# print r.hmget(&apos;xx&apos;, &apos;k1&apos;, &apos;k2&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 6.5 hgetall(name)</span><br></pre></td></tr></table></figure>
<p>获取name对应hash的所有键值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 6.6 hlen(name)</span><br></pre></td></tr></table></figure>
<h1 id="获取name对应的hash中键值对的个数"><a href="#获取name对应的hash中键值对的个数" class="headerlink" title="获取name对应的hash中键值对的个数"></a>获取name对应的hash中键值对的个数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 6.7 hkeys(name)</span><br></pre></td></tr></table></figure>
<h1 id="获取name对应的hash中所有的key的值"><a href="#获取name对应的hash中所有的key的值" class="headerlink" title="获取name对应的hash中所有的key的值"></a>获取name对应的hash中所有的key的值</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 6.8 hvals(name)</span><br></pre></td></tr></table></figure>
<h1 id="获取name对应的hash中所有的value的值"><a href="#获取name对应的hash中所有的value的值" class="headerlink" title="获取name对应的hash中所有的value的值"></a>获取name对应的hash中所有的value的值</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 6.9 hexists(name, key)</span><br></pre></td></tr></table></figure>
<h1 id="检查name对应的hash是否存在当前传入的key"><a href="#检查name对应的hash是否存在当前传入的key" class="headerlink" title="检查name对应的hash是否存在当前传入的key"></a>检查name对应的hash是否存在当前传入的key</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 6.10 hdel(name,\*keys)</span><br></pre></td></tr></table></figure>
<h1 id="将name对应的hash中指定key的键值对删除"><a href="#将name对应的hash中指定key的键值对删除" class="headerlink" title="将name对应的hash中指定key的键值对删除"></a>将name对应的hash中指定key的键值对删除</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 6.11 hincrby(name, key, amount&#x3D;1)</span><br></pre></td></tr></table></figure>
<h1 id="自增name对应的hash中的指定key的值，不存在则创建key-amount"><a href="#自增name对应的hash中的指定key的值，不存在则创建key-amount" class="headerlink" title="自增name对应的hash中的指定key的值，不存在则创建key=amount"></a>自增name对应的hash中的指定key的值，不存在则创建key=amount</h1><h1 id="参数：-13"><a href="#参数：-13" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，redis中的name
# key， hash对应的key
# amount，自增数（整数）</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 6.12 hincrbyfloat(name, key, amount&#x3D;1.0)</span><br></pre></td></tr></table></figure>
<h1 id="自增name对应的hash中的指定key的值，不存在则创建key-amount-1"><a href="#自增name对应的hash中的指定key的值，不存在则创建key-amount-1" class="headerlink" title="自增name对应的hash中的指定key的值，不存在则创建key=amount"></a>自增name对应的hash中的指定key的值，不存在则创建key=amount</h1><h1 id="参数：-14"><a href="#参数：-14" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，redis中的name
# key， hash对应的key
# amount，自增数（浮点数）</code></pre><h1 id="自增name对应的hash中的指定key的值，不存在则创建key-amount-2"><a href="#自增name对应的hash中的指定key的值，不存在则创建key-amount-2" class="headerlink" title="自增name对应的hash中的指定key的值，不存在则创建key=amount"></a>自增name对应的hash中的指定key的值，不存在则创建key=amount</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 6.13 hscan(name, cursor&#x3D;0, match&#x3D;None, count&#x3D;None)</span><br></pre></td></tr></table></figure>
<h1 id="增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆"><a href="#增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆" class="headerlink" title="增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆"></a>增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆</h1><h1 id="参数：-15"><a href="#参数：-15" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，redis的name
# cursor，游标（基于游标分批取获取数据）
# match，匹配指定key，默认None 表示所有的key
# count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数</code></pre><h1 id="如：-3"><a href="#如：-3" class="headerlink" title="如："></a>如：</h1><pre><code># 第一次：cursor1, data1 = r.hscan(&apos;xx&apos;, cursor=0, match=None, count=None)
# 第二次：cursor2, data1 = r.hscan(&apos;xx&apos;, cursor=cursor1, match=None, count=None)
# ...
# 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 6.14 hscan_iter(name, match&#x3D;None, count&#x3D;None)</span><br></pre></td></tr></table></figure>
<h1 id="利用yield封装hscan创建生成器，实现分批去redis中获取数据"><a href="#利用yield封装hscan创建生成器，实现分批去redis中获取数据" class="headerlink" title="利用yield封装hscan创建生成器，实现分批去redis中获取数据"></a>利用yield封装hscan创建生成器，实现分批去redis中获取数据</h1><h1 id="参数：-16"><a href="#参数：-16" class="headerlink" title="参数："></a>参数：</h1><pre><code># match，匹配指定key，默认None 表示所有的key
# count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数</code></pre><h1 id="如：-4"><a href="#如：-4" class="headerlink" title="如："></a>如：</h1><pre><code># for item in r.hscan_iter(&apos;xx&apos;):
#     print(item)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 七. List 操作</span><br><span class="line">在redis中存储的结构为下表所示:</span><br><span class="line">Key|--&gt;|Value|</span><br><span class="line">----|----|----</span><br><span class="line">n1|--&gt;|v1,v2</span><br><span class="line">n2|--&gt;|v3,v4</span><br><span class="line">n3|--&gt;|v5,v6</span><br><span class="line"></span><br><span class="line">### 7.1 lpush(name,values)</span><br></pre></td></tr></table></figure>
<h1 id="在name对应的list中添加元素，每个新的元素都添加到列表的最左边"><a href="#在name对应的list中添加元素，每个新的元素都添加到列表的最左边" class="headerlink" title="在name对应的list中添加元素，每个新的元素都添加到列表的最左边"></a>在name对应的list中添加元素，每个新的元素都添加到列表的最左边</h1><h1 id="如：-5"><a href="#如：-5" class="headerlink" title="如："></a>如：</h1><pre><code># r.lpush(&apos;oo&apos;, 11,22,33)
# 保存顺序为: 33,22,11</code></pre><h1 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h1><pre><code># rpush(name, values) 表示从右向左操作</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 7.2 lpushx(name,value)</span><br></pre></td></tr></table></figure>
<h1 id="在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边"><a href="#在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边" class="headerlink" title="在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边"></a>在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边</h1><h1 id="更多："><a href="#更多：" class="headerlink" title="更多："></a>更多：</h1><pre><code># rpushx(name, value) 表示从右向左操作</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 7.3 llen(name)</span><br></pre></td></tr></table></figure>
<h1 id="name对应的list元素的个数"><a href="#name对应的list元素的个数" class="headerlink" title="name对应的list元素的个数"></a>name对应的list元素的个数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 7.4 linsert(name, where, refvalue, value))</span><br></pre></td></tr></table></figure>
<h1 id="在name对应的列表的某一个值前或后插入一个新值"><a href="#在name对应的列表的某一个值前或后插入一个新值" class="headerlink" title="在name对应的列表的某一个值前或后插入一个新值"></a>在name对应的列表的某一个值前或后插入一个新值</h1><h1 id="参数：-17"><a href="#参数：-17" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，redis的name
# where，BEFORE或AFTER
# refvalue，标杆值，即：在它前后插入数据
# value，要插入的数据</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 7.5 r.lset(name, index, value)</span><br></pre></td></tr></table></figure>
<h1 id="对name对应的list中的某一个索引位置重新赋值"><a href="#对name对应的list中的某一个索引位置重新赋值" class="headerlink" title="对name对应的list中的某一个索引位置重新赋值"></a>对name对应的list中的某一个索引位置重新赋值</h1><h1 id="参数：-18"><a href="#参数：-18" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，redis的name
# index，list的索引位置
# value，要设置的值</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 7.6 r.lrem(name, value, num)</span><br></pre></td></tr></table></figure>
<h1 id="在name对应的list中删除指定的值"><a href="#在name对应的list中删除指定的值" class="headerlink" title="在name对应的list中删除指定的值"></a>在name对应的list中删除指定的值</h1><h1 id="参数：-19"><a href="#参数：-19" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，redis的name
# value，要删除的值
# num，  num=0，删除列表中所有的指定值；
       # num=2,从前到后，删除2个；
       # num=-2,从后向前，删除2个</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 7.7 lpop(name)</span><br></pre></td></tr></table></figure>
<h1 id="在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素"><a href="#在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素" class="headerlink" title="在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素"></a>在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素</h1><h1 id="更多：-1"><a href="#更多：-1" class="headerlink" title="更多："></a>更多：</h1><pre><code># rpop(name) 表示从右向左操作</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 7.8 lindex(name, index)</span><br></pre></td></tr></table></figure>
<p>在name对应的列表中根据索引获取列表元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 7.9 lrange(name, start, end)</span><br></pre></td></tr></table></figure>
<h1 id="在name对应的列表分片获取数据"><a href="#在name对应的列表分片获取数据" class="headerlink" title="在name对应的列表分片获取数据"></a>在name对应的列表分片获取数据</h1><h1 id="参数：-20"><a href="#参数：-20" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，redis的name
# start，索引的起始位置
# end，索引结束位置</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 7.10 ltrim(name, start, end)</span><br></pre></td></tr></table></figure>
<h1 id="在name对应的列表中移除没有在start-end索引之间的值"><a href="#在name对应的列表中移除没有在start-end索引之间的值" class="headerlink" title="在name对应的列表中移除没有在start-end索引之间的值"></a>在name对应的列表中移除没有在start-end索引之间的值</h1><h1 id="参数：-21"><a href="#参数：-21" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，redis的name
# start，索引的起始位置
# end，索引结束位置</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 7.11 rpoplpush(src, dst)</span><br></pre></td></tr></table></figure>
<h1 id="从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边"><a href="#从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边" class="headerlink" title="从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边"></a>从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边</h1><h1 id="参数：-22"><a href="#参数：-22" class="headerlink" title="参数："></a>参数：</h1><pre><code># src，要取数据的列表的name
# dst，要添加数据的列表的name</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 7.12 blpop(keys, timeout)</span><br></pre></td></tr></table></figure>
<h1 id="将多个列表排列，按照从左到右去pop对应列表的元素"><a href="#将多个列表排列，按照从左到右去pop对应列表的元素" class="headerlink" title="将多个列表排列，按照从左到右去pop对应列表的元素"></a>将多个列表排列，按照从左到右去pop对应列表的元素</h1><h1 id="参数：-23"><a href="#参数：-23" class="headerlink" title="参数："></a>参数：</h1><pre><code># keys，redis的name的集合
# timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞</code></pre><h1 id="更多：-2"><a href="#更多：-2" class="headerlink" title="更多："></a>更多：</h1><pre><code># r.brpop(keys, timeout)，从右向左获取数据</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 7.13 brpoplpush(src, dst, timeout&#x3D;0)</span><br></pre></td></tr></table></figure>
<h1 id="从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧"><a href="#从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧" class="headerlink" title="从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧"></a>从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧</h1><h1 id="参数：-24"><a href="#参数：-24" class="headerlink" title="参数："></a>参数：</h1><pre><code># src，取出并要移除元素的列表对应的name
# dst，要插入元素的列表对应的name
# timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 7.14 自定义增量迭代(非常重要，原生的模块没有提供支持)(***)</span><br></pre></td></tr></table></figure>
<h1 id="由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要："><a href="#由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：" class="headerlink" title="由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要："></a>由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：</h1><pre><code># 1、获取name对应的所有列表
# 2、循环列表</code></pre><h1 id="但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能："><a href="#但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：" class="headerlink" title="但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能："></a>但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：</h1><p>def list_iter(name):<br>    “””<br>    自定义redis列表增量迭代<br>    :param name: redis中的name，即：迭代name对应的列表<br>    :return: yield 返回 列表元素<br>    “””<br>    list_count = r.llen(name)<br>    for index in range(list_count):<br>        yield r.lindex(name, index)</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>for item in list_iter(‘pp’):<br>    print(item)</p>
<h1 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h1><p>def list_scan_iter(name):<br>    start = 0<br>    while True:<br>        vals = conn.lrange(name, start, start+3)<br>        start = start + 4<br>        if not vals:<br>            return<br>        for val in vals:<br>            yield val</p>
<p>result = list_scan_iter(‘users’)<br>                for item in result:<br>                    print(item)      </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 八. Set操作</span><br><span class="line">Set操作，Set集合就是不允许重复的列表</span><br><span class="line"></span><br><span class="line">### 8.1 sadd(name,values)</span><br></pre></td></tr></table></figure>
<h1 id="name对应的集合中添加元素"><a href="#name对应的集合中添加元素" class="headerlink" title="name对应的集合中添加元素"></a>name对应的集合中添加元素</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.2 scard(name)</span><br></pre></td></tr></table></figure>
<p>获取name对应的集合中元素个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.3 sdiff(keys, \*args)</span><br></pre></td></tr></table></figure>
<p>在第一个name对应的集合中且不在其他name对应的集合的元素集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.4 sdiffstore(dest, keys, \*args)</span><br></pre></td></tr></table></figure>
<h1 id="获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中"><a href="#获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中" class="headerlink" title="获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中"></a>获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.5 sinter(keys, \*args)</span><br></pre></td></tr></table></figure>
<h1 id="获取多一个name对应集合的并集"><a href="#获取多一个name对应集合的并集" class="headerlink" title="获取多一个name对应集合的并集"></a>获取多一个name对应集合的并集</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.6 sinterstore(dest, keys, *args)</span><br></pre></td></tr></table></figure>
<h1 id="获取多一个name对应集合的并集，再讲其加入到dest对应的集合中"><a href="#获取多一个name对应集合的并集，再讲其加入到dest对应的集合中" class="headerlink" title="获取多一个name对应集合的并集，再讲其加入到dest对应的集合中"></a>获取多一个name对应集合的并集，再讲其加入到dest对应的集合中</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.7 sismember(name, value)</span><br></pre></td></tr></table></figure>
<h1 id="检查value是否是name对应的集合的成员"><a href="#检查value是否是name对应的集合的成员" class="headerlink" title="检查value是否是name对应的集合的成员"></a>检查value是否是name对应的集合的成员</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.8 smembers(name)</span><br></pre></td></tr></table></figure>
<h1 id="获取name对应的集合的所有成员"><a href="#获取name对应的集合的所有成员" class="headerlink" title="获取name对应的集合的所有成员"></a>获取name对应的集合的所有成员</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.9 smove(src, dst, value)</span><br></pre></td></tr></table></figure>
<h1 id="将某个成员从一个集合中移动到另外一个集合"><a href="#将某个成员从一个集合中移动到另外一个集合" class="headerlink" title="将某个成员从一个集合中移动到另外一个集合"></a>将某个成员从一个集合中移动到另外一个集合</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.10 spop(name)</span><br></pre></td></tr></table></figure>
<h1 id="从集合的右侧（尾部）移除一个成员，并将其返回"><a href="#从集合的右侧（尾部）移除一个成员，并将其返回" class="headerlink" title="从集合的右侧（尾部）移除一个成员，并将其返回"></a>从集合的右侧（尾部）移除一个成员，并将其返回</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.11 srandmember(name, numbers)</span><br></pre></td></tr></table></figure>
<h1 id="从name对应的集合中随机获取-numbers-个元素"><a href="#从name对应的集合中随机获取-numbers-个元素" class="headerlink" title="从name对应的集合中随机获取 numbers 个元素"></a>从name对应的集合中随机获取 numbers 个元素</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.12 srem(name, values)</span><br></pre></td></tr></table></figure>
<h1 id="在name对应的集合中删除某些值"><a href="#在name对应的集合中删除某些值" class="headerlink" title="在name对应的集合中删除某些值"></a>在name对应的集合中删除某些值</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.13 sunion(keys, \*args)</span><br></pre></td></tr></table></figure>
<h1 id="获取多一个name对应的集合的并集"><a href="#获取多一个name对应的集合的并集" class="headerlink" title="获取多一个name对应的集合的并集"></a>获取多一个name对应的集合的并集</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.14 sunionstore(dest,keys, *args)</span><br></pre></td></tr></table></figure>
<h1 id="获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中"><a href="#获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中" class="headerlink" title="获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中"></a>获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 8.15 sscan(name, cursor&#x3D;0, match&#x3D;None, count&#x3D;None)</span><br><span class="line">sscan_iter(name, match&#x3D;None, count&#x3D;None)</span><br></pre></td></tr></table></figure>
<h1 id="同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大"><a href="#同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大" class="headerlink" title="同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大"></a>同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 九. Sort Set 操作</span><br><span class="line">有序集合，在集合的基础上，为每元素排序；元素的排序需要根据另外一个值来进行比较，所以，对于有序集合，每一个元素有两个值，即: 值和分数，分数专门用来做排序</span><br><span class="line"></span><br><span class="line">### 9.1 zadd(name, args, \*kwargs)</span><br></pre></td></tr></table></figure>
<h1 id="在name对应的有序集合中添加元素"><a href="#在name对应的有序集合中添加元素" class="headerlink" title="在name对应的有序集合中添加元素"></a>在name对应的有序集合中添加元素</h1><h1 id="如：-6"><a href="#如：-6" class="headerlink" title="如："></a>如：</h1><pre><code># zadd(&apos;zz&apos;, &apos;n1&apos;, 1, &apos;n2&apos;, 2)
# 或
# zadd(&apos;zz&apos;, n1=11, n2=22)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9.2 zcard(name)</span><br></pre></td></tr></table></figure>
<h1 id="获取name对应的有序集合元素的数量"><a href="#获取name对应的有序集合元素的数量" class="headerlink" title="获取name对应的有序集合元素的数量"></a>获取name对应的有序集合元素的数量</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9.3 zcount(name, min, max)</span><br></pre></td></tr></table></figure>
<h1 id="获取name对应的有序集合中分数-在-min-max-之间的个数"><a href="#获取name对应的有序集合中分数-在-min-max-之间的个数" class="headerlink" title="获取name对应的有序集合中分数 在 [min,max] 之间的个数"></a>获取name对应的有序集合中分数 在 [min,max] 之间的个数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9.4 zincrby(name, value, amount)</span><br></pre></td></tr></table></figure>
<h1 id="自增name对应的有序集合的-name-对应的分数"><a href="#自增name对应的有序集合的-name-对应的分数" class="headerlink" title="自增name对应的有序集合的 name 对应的分数"></a>自增name对应的有序集合的 name 对应的分数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9.5 r.zrange( name, start, end, desc&#x3D;False, withscores&#x3D;False, score_cast_func&#x3D;float)</span><br></pre></td></tr></table></figure>
<h1 id="按照索引范围获取name对应的有序集合的元素"><a href="#按照索引范围获取name对应的有序集合的元素" class="headerlink" title="按照索引范围获取name对应的有序集合的元素"></a>按照索引范围获取name对应的有序集合的元素</h1><h1 id="参数：-25"><a href="#参数：-25" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，redis的name
# start，有序集合索引起始位置（非分数）
# end，有序集合索引结束位置（非分数）
# desc，排序规则，默认按照分数从小到大排序
# withscores，是否获取元素的分数，默认只获取元素的值
# score_cast_func，对分数进行数据转换的函数</code></pre><h1 id="更多：-3"><a href="#更多：-3" class="headerlink" title="更多："></a>更多：</h1><pre><code># 从大到小排序
# zrevrange(name, start, end, withscores=False, score_cast_func=float)

# 按照分数范围获取name对应的有序集合的元素
# zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)
# 从大到小排序
# zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9.6 zrank(name, value)</span><br></pre></td></tr></table></figure>
<h1 id="获取某个值在-name对应的有序集合中的排行（从-0-开始）"><a href="#获取某个值在-name对应的有序集合中的排行（从-0-开始）" class="headerlink" title="获取某个值在 name对应的有序集合中的排行（从 0 开始）"></a>获取某个值在 name对应的有序集合中的排行（从 0 开始）</h1><h1 id="更多：-4"><a href="#更多：-4" class="headerlink" title="更多："></a>更多：</h1><pre><code># zrevrank(name, value)，从大到小排序</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9.7 zrangebylex(name, min, max, start&#x3D;None, num&#x3D;None)</span><br></pre></td></tr></table></figure>
<h1 id="当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的-值-（lexicographical-ordering）来进行排序，而这个命令则可以返回给定的有序集合键-key-中，-元素的值介于-min-和-max-之间的成员"><a href="#当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的-值-（lexicographical-ordering）来进行排序，而这个命令则可以返回给定的有序集合键-key-中，-元素的值介于-min-和-max-之间的成员" class="headerlink" title="当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的 值 （lexicographical ordering）来进行排序，而这个命令则可以返回给定的有序集合键 key 中， 元素的值介于 min 和 max 之间的成员"></a>当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的 值 （lexicographical ordering）来进行排序，而这个命令则可以返回给定的有序集合键 key 中， 元素的值介于 min 和 max 之间的成员</h1><h1 id="对集合中的每个成员进行逐个字节的对比（byte-by-byte-compare），-并按照从低到高的顺序，-返回排序后的集合成员。-如果两个字符串有一部分内容是相同的话，-那么命令会认为较长的字符串比较短的字符串要大"><a href="#对集合中的每个成员进行逐个字节的对比（byte-by-byte-compare），-并按照从低到高的顺序，-返回排序后的集合成员。-如果两个字符串有一部分内容是相同的话，-那么命令会认为较长的字符串比较短的字符串要大" class="headerlink" title="对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。 如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大"></a>对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。 如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大</h1><h1 id="参数：-26"><a href="#参数：-26" class="headerlink" title="参数："></a>参数：</h1><pre><code># name，redis的name
# min，左区间（值）。 + 表示正无限； - 表示负无限； ( 表示开区间； [ 则表示闭区间
# min，右区间（值）
# start，对结果进行分片处理，索引位置
# num，对结果进行分片处理，索引后面的num个元素</code></pre><h1 id="如：-7"><a href="#如：-7" class="headerlink" title="如："></a>如：</h1><pre><code># ZADD myzset 0 aa 0 ba 0 ca 0 da 0 ea 0 fa 0 ga
# r.zrangebylex(&apos;myzset&apos;, &quot;-&quot;, &quot;[ca&quot;) 结果为：[&apos;aa&apos;, &apos;ba&apos;, &apos;ca&apos;]</code></pre><h1 id="更多：-5"><a href="#更多：-5" class="headerlink" title="更多："></a>更多：</h1><pre><code># 从大到小排序
# zrevrangebylex(name, max, min, start=None, num=None)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9.8 zrem(name, values)</span><br></pre></td></tr></table></figure>
<h1 id="删除name对应的有序集合中值是values的成员"><a href="#删除name对应的有序集合中值是values的成员" class="headerlink" title="删除name对应的有序集合中值是values的成员"></a>删除name对应的有序集合中值是values的成员</h1><h1 id="如：zrem-‘zz’-‘s1’-‘s2’"><a href="#如：zrem-‘zz’-‘s1’-‘s2’" class="headerlink" title="如：zrem(‘zz’, [‘s1’, ‘s2’])"></a>如：zrem(‘zz’, [‘s1’, ‘s2’])</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9.9 zremrangebyrank(name, min, max)</span><br></pre></td></tr></table></figure>
<h1 id="根据排行范围删除"><a href="#根据排行范围删除" class="headerlink" title="根据排行范围删除"></a>根据排行范围删除</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9.10 zremrangebyscore(name, min, max)</span><br></pre></td></tr></table></figure>
<h1 id="根据分数范围删除"><a href="#根据分数范围删除" class="headerlink" title="根据分数范围删除"></a>根据分数范围删除</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9.11 zremrangebylex(name, min, max)</span><br></pre></td></tr></table></figure>
<h1 id="根据值返回删除"><a href="#根据值返回删除" class="headerlink" title="根据值返回删除"></a>根据值返回删除</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zscore(name, value)</span><br></pre></td></tr></table></figure>
<h1 id="获取name对应有序集合中-value-对应的分数"><a href="#获取name对应有序集合中-value-对应的分数" class="headerlink" title="获取name对应有序集合中 value 对应的分数"></a>获取name对应有序集合中 value 对应的分数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9.12 zinterstore(dest, keys, aggregate&#x3D;None)</span><br></pre></td></tr></table></figure>
<h1 id="获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作"><a href="#获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作" class="headerlink" title="获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作"></a>获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作</h1><h1 id="aggregate的值为-SUM-MIN-MAX"><a href="#aggregate的值为-SUM-MIN-MAX" class="headerlink" title="aggregate的值为:  SUM  MIN  MAX"></a>aggregate的值为:  SUM  MIN  MAX</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9.13 zunionstore(dest, keys, aggregate&#x3D;None)</span><br></pre></td></tr></table></figure>
<h1 id="获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作"><a href="#获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作" class="headerlink" title="获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作"></a>获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作</h1><h1 id="aggregate的值为-SUM-MIN-MAX-1"><a href="#aggregate的值为-SUM-MIN-MAX-1" class="headerlink" title="aggregate的值为:  SUM  MIN  MAX"></a>aggregate的值为:  SUM  MIN  MAX</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9.14 zscan(name, cursor&#x3D;0, match&#x3D;None, count&#x3D;None, score_cast_func&#x3D;float)</span><br><span class="line">zscan_iter(name, match&#x3D;None, count&#x3D;None,score_cast_func&#x3D;float)</span><br></pre></td></tr></table></figure>
<h1 id="同字符串相似，相较于字符串新增score-cast-func，用来对分数进行操作"><a href="#同字符串相似，相较于字符串新增score-cast-func，用来对分数进行操作" class="headerlink" title="同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作"></a>同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 十. 其他常用的操作</span><br><span class="line"></span><br><span class="line">### 10.1 delete(\*names)</span><br></pre></td></tr></table></figure>
<h1 id="根据删除redis中的任意数据类型"><a href="#根据删除redis中的任意数据类型" class="headerlink" title="根据删除redis中的任意数据类型"></a>根据删除redis中的任意数据类型</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 10.2 exists(name)</span><br></pre></td></tr></table></figure>
<h1 id="检测redis的name是否存在"><a href="#检测redis的name是否存在" class="headerlink" title="检测redis的name是否存在"></a>检测redis的name是否存在</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 10.3 keys(pattern&#x3D;’*’)</span><br></pre></td></tr></table></figure>
<h1 id="根据模型获取redis的name"><a href="#根据模型获取redis的name" class="headerlink" title="根据模型获取redis的name"></a>根据模型获取redis的name</h1><h1 id="更多：-6"><a href="#更多：-6" class="headerlink" title="更多："></a>更多：</h1><pre><code># KEYS * 匹配数据库中所有 key 。
# KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。
# KEYS h*llo 匹配 hllo 和 heeeeello 等。
# KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 10.4 expire(name ,time)</span><br></pre></td></tr></table></figure>
<h1 id="为某个redis的某个name设置超时时间"><a href="#为某个redis的某个name设置超时时间" class="headerlink" title="为某个redis的某个name设置超时时间"></a>为某个redis的某个name设置超时时间</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 10.5 rename(src, dst)</span><br></pre></td></tr></table></figure>
<h1 id="对redis的name重命名为"><a href="#对redis的name重命名为" class="headerlink" title="对redis的name重命名为"></a>对redis的name重命名为</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 10.6 move(name, db))</span><br></pre></td></tr></table></figure>
<h1 id="将redis的某个值移动到指定的db下"><a href="#将redis的某个值移动到指定的db下" class="headerlink" title="将redis的某个值移动到指定的db下"></a>将redis的某个值移动到指定的db下</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 10.7 randomkey()</span><br></pre></td></tr></table></figure>
<h1 id="随机获取一个redis的name（不删除）"><a href="#随机获取一个redis的name（不删除）" class="headerlink" title="随机获取一个redis的name（不删除）"></a>随机获取一个redis的name（不删除）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 10.8 type(name)</span><br></pre></td></tr></table></figure>
<h1 id="获取name对应值的类型"><a href="#获取name对应值的类型" class="headerlink" title="获取name对应值的类型"></a>获取name对应值的类型</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 10.9 scan(cursor&#x3D;0, match&#x3D;None, count&#x3D;None)</span><br><span class="line">scan_iter(match&#x3D;None, count&#x3D;None)</span><br></pre></td></tr></table></figure>
<h1 id="同字符串操作，用于增量迭代获取key"><a href="#同字符串操作，用于增量迭代获取key" class="headerlink" title="同字符串操作，用于增量迭代获取key"></a>同字符串操作，用于增量迭代获取key</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 10.10 sentinel(哨兵)</span><br><span class="line">Redis中的sentinel主要用于在redis主从复制中，如果master故障，则自动将slave替换成master</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from redis.sentinel import Sentinel</p>
<h1 id="连接哨兵服务器-主机名也可以用域名"><a href="#连接哨兵服务器-主机名也可以用域名" class="headerlink" title="连接哨兵服务器(主机名也可以用域名)"></a>连接哨兵服务器(主机名也可以用域名)</h1><p>sentinel = Sentinel([(‘10.211.55.20’, 26379),<br>                     (‘10.211.55.20’, 26380),<br>                     ],<br>                    socket_timeout=0.5)</p>
<h1 id="获取主服务器地址"><a href="#获取主服务器地址" class="headerlink" title="# 获取主服务器地址"></a># 获取主服务器地址</h1><h1 id="master-sentinel-discover-master-‘mymaster’"><a href="#master-sentinel-discover-master-‘mymaster’" class="headerlink" title="master = sentinel.discover_master(‘mymaster’)"></a>master = sentinel.discover_master(‘mymaster’)</h1><h1 id="print-master"><a href="#print-master" class="headerlink" title="print(master)"></a>print(master)</h1><p>#</p>
<h1 id="获取从服务器地址"><a href="#获取从服务器地址" class="headerlink" title="# # 获取从服务器地址"></a># # 获取从服务器地址</h1><h1 id="slave-sentinel-discover-slaves-‘mymaster’"><a href="#slave-sentinel-discover-slaves-‘mymaster’" class="headerlink" title="slave = sentinel.discover_slaves(‘mymaster’)"></a>slave = sentinel.discover_slaves(‘mymaster’)</h1><h1 id="print-slave"><a href="#print-slave" class="headerlink" title="print(slave)"></a>print(slave)</h1><p>#<br>#</p>
<h1 id="获取主服务器进行写入"><a href="#获取主服务器进行写入" class="headerlink" title="# # 获取主服务器进行写入"></a># # 获取主服务器进行写入</h1><h1 id="master-sentinel-master-for-‘mymaster’"><a href="#master-sentinel-master-for-‘mymaster’" class="headerlink" title="master = sentinel.master_for(‘mymaster’)"></a>master = sentinel.master_for(‘mymaster’)</h1><h1 id="master-set-‘foo’-‘bar’"><a href="#master-set-‘foo’-‘bar’" class="headerlink" title="master.set(‘foo’, ‘bar’)"></a>master.set(‘foo’, ‘bar’)</h1><h1 id="获取从服务器进行读取（默认是round-roubin）"><a href="#获取从服务器进行读取（默认是round-roubin）" class="headerlink" title="# # # 获取从服务器进行读取（默认是round-roubin）"></a># # # 获取从服务器进行读取（默认是round-roubin）</h1><h1 id="slave-sentinel-slave-for-‘mymaster’-password-’redis-auth-pass’"><a href="#slave-sentinel-slave-for-‘mymaster’-password-’redis-auth-pass’" class="headerlink" title="slave = sentinel.slave_for(‘mymaster’, password=’redis_auth_pass’)"></a>slave = sentinel.slave_for(‘mymaster’, password=’redis_auth_pass’)</h1><h1 id="r-ret-slave-get-‘foo’"><a href="#r-ret-slave-get-‘foo’" class="headerlink" title="r_ret = slave.get(‘foo’)"></a>r_ret = slave.get(‘foo’)</h1><h1 id="print-r-ret"><a href="#print-r-ret" class="headerlink" title="print(r_ret)"></a>print(r_ret)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 十一. 管道(pipline)</span><br><span class="line">redis-py默认在执行每次请求都会创建（连接池申请连接）和断开（归还连接池）一次连接操作，如果想要在一次请求中指定多个命令，则可以使用pipline实现一次请求指定多个命令，并且默认情况下一次pipline 是原子性操作</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>import redis</p>
<p>pool = redis.ConnectionPool(host=’192.168.1.100’, port=6379)</p>
<p>r = redis.Redis(connection_pool=pool)</p>
<h1 id="pipe-r-pipeline-transaction-False"><a href="#pipe-r-pipeline-transaction-False" class="headerlink" title="pipe = r.pipeline(transaction=False)"></a>pipe = r.pipeline(transaction=False)</h1><p>pipe = r.pipeline(transaction=True)</p>
<p>r.set(‘name’, ‘shuke’)<br>r.set(‘role’, ‘DevOps’)<br>pipe.execute()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 十二. 发布订阅</span><br><span class="line">发布者: 服务器</span><br><span class="line">订阅者: Dashboad和数据处理</span><br><span class="line"></span><br><span class="line">工具类:</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>import redis</p>
<p>class RedisHelper:</p>
<pre><code>def __init__(self):
    self.__conn = redis.Redis(host=&apos;192.168.1.100&apos;)
    self.chan_sub = &apos;fm104.5&apos;
    self.chan_pub = &apos;fm104.5&apos;

def public(self, msg):
    self.__conn.publish(self.chan_pub, msg)
    return True

def subscribe(self):
    pub = self.__conn.pubsub()
    pub.subscribe(self.chan_sub)
    pub.parse_response()
    return pub</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">订阅者:</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-3"><a href="#coding-utf-8-3" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from monitor.RedisHelper import RedisHelper</p>
<p>obj = RedisHelper()<br>redis_sub = obj.subscribe()</p>
<p>while True:<br>    msg= redis_sub.parse_response()<br>    print msg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发布者:</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-4"><a href="#coding-utf-8-4" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from monitor.RedisHelper import RedisHelper</p>
<p>obj = RedisHelper()<br>obj.public(‘hello’)</p>
<pre><code>
## 十三. Redis应用场景介绍

1. 使用Redis有哪些好处？
- 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)

- 支持丰富数据类型，支持string，list，set，sorted set，hash

- 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行

- 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除

2. redis相比memcached有哪些优势？

- memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型

- redis的速度比memcached快很多

- redis可以持久化其数据

3. redis常见性能问题和解决方案：

-  Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件

- 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次

- 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内

- 尽量避免在压力很大的主库上增加从库

- 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3...

这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。

4. MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据

相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略,redis提供6种数据淘汰策略：

voltile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰

volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰

volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰

allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰

allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰

no-enviction（驱逐）：禁止驱逐数据

5. Memcache与Redis的区别都有哪些？

- 存储方式
Memecache把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。
Redis有部份存在硬盘上，这样能保证数据的持久性。

- 数据支持类型
Memcache对数据类型支持相对简单。
Redis有复杂的数据类型。

- value大小
redis最大可以达到1GB，而memcache只有1MB

6. Redis 常见的性能问题都有哪些？如何解决？

- Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。

- Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。

- Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。

- Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内

7. redis 最适合的场景

Redis最适合所有数据in-momory的场景，虽然Redis也提供持久化功能，但实际更多的是一个disk-backed的功能，跟传统意义上的持久化有比较大的差别，那么可能大家就会有疑问，似乎Redis更像一个加强版的Memcached，那么何时使用Memcached,何时使用Redis呢?

如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：
- Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。
- Redis支持数据的备份，即master-slave模式的数据备份。
- Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。

8. 会话缓存（Session Cache）

最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？
幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。

9. 全页缓存（FPC）

除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。
再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。
此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。

10. 队列
Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。
如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。

11. 排行榜/计数器
Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：
当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：
ZRANGE user_scores 0 10 WITHSCORES
Agora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。

12. 发布/订阅
最后（但肯定不是最不重要的）是Redis的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！(不，这是真的，你可以去核实)
Redis提供的所有特性中，我感觉这个是喜欢的人最少的一个，虽然它为用户提供如果此多功能。


参考文章:  
[Python操作redis详解 | Polar Snow Documentation](https://docs.lvrui.io/2016/07/24/Python%E6%93%8D%E4%BD%9Credis%E8%AF%A6%E8%A7%A3/)  
[使用python来操作redis用法详解 - 简书](https://www.jianshu.com/p/2639549bedc8)  
[Python操作 RabbitMQ、Redis、Memcache、SQLAlchemy](http://www.cnblogs.com/wupeiqi/articles/5132791.html)  
[GitHub - andymccurdy/redis-py: Redis Python Client](https://github.com/andymccurdy/redis-py/)  
</code></pre>]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python小技巧和有趣的内置函数</title>
    <url>/2020/04/20/%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84Python%E5%BA%93/</url>
    <content><![CDATA[<h2 id="Python小技巧和有趣的内置函数"><a href="#Python小技巧和有趣的内置函数" class="headerlink" title="Python小技巧和有趣的内置函数"></a>Python小技巧和有趣的内置函数</h2><blockquote>
<p>一个python小技巧的集合和一些很有用的Python内置函数,这些函数简直是屌爆了，我认为每个 Pythoner 都应该知道这些函数。</p>
</blockquote>
<h3 id="1-1-拆箱"><a href="#1-1-拆箱" class="headerlink" title="1.1 拆箱"></a>1.1 拆箱</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b, c &#x3D; 1, 2, 3  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 2, 3)  </span><br><span class="line">&gt;&gt;&gt; a, b, c &#x3D; [1, 2, 3]  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 2, 3)  </span><br><span class="line">&gt;&gt;&gt; a, b, c &#x3D; (2 * i + 1  for i in range(3))  </span><br><span class="line">&gt;&gt;&gt; a, b, c  </span><br><span class="line">(1, 3, 5)  </span><br><span class="line">&gt;&gt;&gt; a, (b, c), d &#x3D; [1, (2, 3), 4]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; b  </span><br><span class="line">2  </span><br><span class="line">&gt;&gt;&gt; c  </span><br><span class="line">3  </span><br><span class="line">&gt;&gt;&gt; d  </span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h3 id="1-2-拆箱变量交换"><a href="#1-2-拆箱变量交换" class="headerlink" title="1.2 拆箱变量交换"></a>1.2 拆箱变量交换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b &#x3D; 1, 2  </span><br><span class="line">&gt;&gt;&gt; a, b &#x3D; b, a  </span><br><span class="line">&gt;&gt;&gt; a, b  </span><br><span class="line">(2, 1)</span><br></pre></td></tr></table></figure>
<h3 id="1-3-扩展拆箱-只兼容python3"><a href="#1-3-扩展拆箱-只兼容python3" class="headerlink" title="1.3 扩展拆箱(只兼容python3)"></a>1.3 扩展拆箱(只兼容python3)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a, *b, c &#x3D; [1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; b  </span><br><span class="line">[2, 3, 4]  </span><br><span class="line">&gt;&gt;&gt; c  </span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<h3 id="1-4-负数索引"><a href="#1-4-负数索引" class="headerlink" title="1.4 负数索引"></a>1.4 负数索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[-1]  </span><br><span class="line">10  </span><br><span class="line">&gt;&gt;&gt; a[-3]  </span><br><span class="line">8</span><br></pre></td></tr></table></figure>
<h3 id="1-5-切割列表"><a href="#1-5-切割列表" class="headerlink" title="1.5 切割列表"></a>1.5 切割列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[2:8]  </span><br><span class="line">[2, 3, 4, 5, 6, 7]</span><br></pre></td></tr></table></figure>
<h3 id="1-6-负数索引切割列表"><a href="#1-6-负数索引切割列表" class="headerlink" title="1.6 负数索引切割列表"></a>1.6 负数索引切割列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[-4:-2]  </span><br><span class="line">[7, 8]</span><br></pre></td></tr></table></figure>
<h3 id="1-7指定步长切割列表"><a href="#1-7指定步长切割列表" class="headerlink" title="1.7指定步长切割列表"></a>1.7指定步长切割列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::2]  </span><br><span class="line">[0, 2, 4, 6, 8, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::3]  </span><br><span class="line">[0, 3, 6, 9]  </span><br><span class="line">&gt;&gt;&gt; a[2:8:2]  </span><br><span class="line">[2, 4, 6]</span><br></pre></td></tr></table></figure>
<h3 id="1-8-负数步长切割列表"><a href="#1-8-负数步长切割列表" class="headerlink" title="1.8 负数步长切割列表"></a>1.8 负数步长切割列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  </span><br><span class="line">&gt;&gt;&gt; a[::-1]  </span><br><span class="line">[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]  </span><br><span class="line">&gt;&gt;&gt; a[::-2]  </span><br><span class="line">[10, 8, 6, 4, 2, 0]</span><br></pre></td></tr></table></figure>
<h3 id="1-9-列表切割赋值"><a href="#1-9-列表切割赋值" class="headerlink" title="1.9 列表切割赋值"></a>1.9 列表切割赋值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[2:3] &#x3D; [0, 0]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 2, 0, 0, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[1:1] &#x3D; [8, 9]  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 8, 9, 2, 0, 0, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; a[1:-1] &#x3D; []  </span><br><span class="line">&gt;&gt;&gt; a  </span><br><span class="line">[1, 5]</span><br></pre></td></tr></table></figure>
<h3 id="1-10-命名列表切割方式"><a href="#1-10-命名列表切割方式" class="headerlink" title="1.10 命名列表切割方式"></a>1.10 命名列表切割方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [0, 1, 2, 3, 4, 5]  </span><br><span class="line">&gt;&gt;&gt; LASTTHREE &#x3D; slice(-3, None)  </span><br><span class="line">&gt;&gt;&gt; LASTTHREE  </span><br><span class="line">slice(-3, None, None)  </span><br><span class="line">&gt;&gt;&gt; a[LASTTHREE]  </span><br><span class="line">[3, 4, 5]</span><br></pre></td></tr></table></figure>
<h3 id="1-11-列表以及迭代器的压缩和解压缩"><a href="#1-11-列表以及迭代器的压缩和解压缩" class="headerlink" title="1.11 列表以及迭代器的压缩和解压缩"></a>1.11 列表以及迭代器的压缩和解压缩</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]  </span><br><span class="line">&gt;&gt;&gt; b &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]  </span><br><span class="line">&gt;&gt;&gt; z &#x3D; zip(a, b)  </span><br><span class="line">&gt;&gt;&gt; z  </span><br><span class="line">[(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]  </span><br><span class="line">&gt;&gt;&gt; zip(*z)  </span><br><span class="line">[(1, 2, 3), (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)]</span><br></pre></td></tr></table></figure>
<h3 id="1-12-列表相邻元素压缩器"><a href="#1-12-列表相邻元素压缩器" class="headerlink" title="1.12 列表相邻元素压缩器"></a>1.12 列表相邻元素压缩器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6]  </span><br><span class="line">&gt;&gt;&gt; zip(*([iter(a)] * 2))  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent &#x3D; lambda a, k: zip(*([iter(a)] * k))  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 3)  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 2)  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 1)  </span><br><span class="line">[(1,), (2,), (3,), (4,), (5,), (6,)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; zip(a[::2], a[1::2])  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; zip(a[::3], a[1::3], a[2::3])  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; group_adjacent &#x3D; lambda a, k: zip(*(a[i::k] for i in range(k)))  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 3)  </span><br><span class="line">[(1, 2, 3), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 2)  </span><br><span class="line">[(1, 2), (3, 4), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; group_adjacent(a, 1)  </span><br><span class="line">[(1,), (2,), (3,), (4,), (5,), (6,)]</span><br></pre></td></tr></table></figure>
<h3 id="1-13-在列表中用压缩器和迭代器滑动取值窗口"><a href="#1-13-在列表中用压缩器和迭代器滑动取值窗口" class="headerlink" title="1.13 在列表中用压缩器和迭代器滑动取值窗口"></a>1.13 在列表中用压缩器和迭代器滑动取值窗口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def n_grams(a, n):  </span><br><span class="line">... z &#x3D; [iter(a[i:]) for i in range(n)]  </span><br><span class="line">... return zip(*z)  </span><br><span class="line">...  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3, 4, 5, 6]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 3)  </span><br><span class="line">[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 2)  </span><br><span class="line">[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]  </span><br><span class="line">&gt;&gt;&gt; n_grams(a, 4)  </span><br><span class="line">[(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)]</span><br></pre></td></tr></table></figure>
<h3 id="用压缩器反转字典"><a href="#用压缩器反转字典" class="headerlink" title="用压缩器反转字典"></a>用压缩器反转字典</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;  </span><br><span class="line">&gt;&gt;&gt; m.items()  </span><br><span class="line">[(&#39;a&#39;, 1), (&#39;c&#39;, 3), (&#39;b&#39;, 2), (&#39;d&#39;, 4)]  </span><br><span class="line">&gt;&gt;&gt; zip(m.values(), m.keys())  </span><br><span class="line">[(1, &#39;a&#39;), (3, &#39;c&#39;), (2, &#39;b&#39;), (4, &#39;d&#39;)]  </span><br><span class="line">&gt;&gt;&gt; mi &#x3D; dict(zip(m.values(), m.keys()))  </span><br><span class="line">&gt;&gt;&gt; mi  </span><br><span class="line">&#123;1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-15-列表展开"><a href="#1-15-列表展开" class="headerlink" title="1.15 列表展开"></a>1.15 列表展开</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [[1, 2], [3, 4], [5, 6]]  </span><br><span class="line">&gt;&gt;&gt; list(itertools.chain.from_iterable(a))  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; sum(a, [])  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; [x for l in a for x in l]  </span><br><span class="line">[1, 2, 3, 4, 5, 6]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]  </span><br><span class="line">&gt;&gt;&gt; [x for l1 in a for l2 in l1 for x in l2]  </span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, [3, 4], [[5, 6], [7, 8]]]  </span><br><span class="line">&gt;&gt;&gt; flatten &#x3D; lambda x: [y for l in x for y in flatten(l)] if type(x) is list else [x]  </span><br><span class="line">&gt;&gt;&gt; flatten(a)  </span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure>
<h3 id="1-16-生成器表达式"><a href="#1-16-生成器表达式" class="headerlink" title="1.16 生成器表达式"></a>1.16 生成器表达式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; g &#x3D; (x ** 2  for x in xrange(10))  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">0  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">4  </span><br><span class="line">&gt;&gt;&gt; next(g)  </span><br><span class="line">9  </span><br><span class="line">&gt;&gt;&gt; sum(x ** 3  for x in xrange(10))  </span><br><span class="line">2025  </span><br><span class="line">&gt;&gt;&gt; sum(x ** 3  for x in xrange(10) if x % 3 &#x3D;&#x3D; 1)  </span><br><span class="line">408</span><br></pre></td></tr></table></figure>
<h3 id="1-17-字典推导"><a href="#1-17-字典推导" class="headerlink" title="1.17 字典推导"></a>1.17 字典推导</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: x ** 2  for x in range(5)&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;  </span><br><span class="line">  </span><br><span class="line">&gt;&gt;&gt; m &#x3D; &#123;x: &#39;A&#39; + str(x) for x in range(10)&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;0: &#39;A0&#39;, 1: &#39;A1&#39;, 2: &#39;A2&#39;, 3: &#39;A3&#39;, 4: &#39;A4&#39;, 5: &#39;A5&#39;, 6: &#39;A6&#39;, 7: &#39;A7&#39;, 8: &#39;A8&#39;, 9: &#39;A9&#39;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-18-用字典推导反转字典"><a href="#1-18-用字典推导反转字典" class="headerlink" title="1.18 用字典推导反转字典"></a>1.18 用字典推导反转字典</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; m &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;  </span><br><span class="line">&gt;&gt;&gt; m  </span><br><span class="line">&#123;&#39;d&#39;: 4, &#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;  </span><br><span class="line">&gt;&gt;&gt; &#123;v: k for k, v in m.items()&#125;  </span><br><span class="line">&#123;1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-19-命名元组"><a href="#1-19-命名元组" class="headerlink" title="1.19 命名元组"></a>1.19 命名元组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Point &#x3D; collections.namedtuple(&#39;Point&#39;, [&#39;x&#39;, &#39;y&#39;])  </span><br><span class="line">&gt;&gt;&gt; p &#x3D; Point(x&#x3D;1.0, y&#x3D;2.0)  </span><br><span class="line">&gt;&gt;&gt; p  </span><br><span class="line">Point(x&#x3D;1.0, y&#x3D;2.0)  </span><br><span class="line">&gt;&gt;&gt; p.x  </span><br><span class="line">1.0  </span><br><span class="line">&gt;&gt;&gt; p.y  </span><br><span class="line">2.0</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://python.jobbole.com/63320/" target="_blank" rel="noopener">更多请查看原文</a>  </p>
</blockquote>
<h3 id="函数部分"><a href="#函数部分" class="headerlink" title="函数部分"></a>函数部分</h3><h3 id="all-iterable"><a href="#all-iterable" class="headerlink" title="all(iterable)"></a>all(iterable)</h3><p>如果可迭代的对象(数组，字符串，列表等，下同)中的元素都是true(或者为空)的话返回True</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_all &#x3D; True  </span><br><span class="line">for item in iterable:  </span><br><span class="line">if  not item:  </span><br><span class="line">_all &#x3D; False  </span><br><span class="line">break  </span><br><span class="line">if _all:  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure>
<p>更简便的写法是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if all(iterable):  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure>

<h3 id="any-iterable"><a href="#any-iterable" class="headerlink" title="any(iterable)"></a>any(iterable)</h3><p>如果可迭代的对象中任何一个元素为true的话返回True,如果可迭代的对象为空则返回False</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_any &#x3D; False  </span><br><span class="line">for item in iterable:  </span><br><span class="line">if item:  </span><br><span class="line">_any &#x3D; True  </span><br><span class="line">break  </span><br><span class="line">if _any:  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure>
<p>更简便的写法是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if any(iterable):  </span><br><span class="line"># do stuff</span><br></pre></td></tr></table></figure>
<h3 id="cmp-x-y"><a href="#cmp-x-y" class="headerlink" title="cmp(x, y)"></a>cmp(x, y)</h3><p>比较两个对象 x 和 y , x &lt; y 的时候返回负数， x ==y 的时候返回 0， x &gt; y 的时候返回正数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def compare(x,y):  </span><br><span class="line">if x &lt; y:  </span><br><span class="line">return -1  </span><br><span class="line">elif x &#x3D;&#x3D; y:  </span><br><span class="line">return  0  </span><br><span class="line">else:  </span><br><span class="line">return  1</span><br></pre></td></tr></table></figure>
<p>你完全可以使用一句 cmp(x, y) 来替代。</p>
<h3 id="dict-arg"><a href="#dict-arg" class="headerlink" title="dict([arg])"></a>dict([arg])</h3><p>使用 arg 提供的条目生成一个新的字典。<br>arg 通常是未知的，但是它很方便！比如说，如果我们想把一个含两个元组的列表转换成一个字典，我们可以这么做。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l &#x3D; [(&#39;Knights&#39;, &#39;Ni&#39;), (&#39;Monty&#39;, &#39;Python&#39;), (&#39;SPAM&#39;, &#39;SPAAAM&#39;)]  </span><br><span class="line">d &#x3D; dict()  </span><br><span class="line">for tuple in l:  </span><br><span class="line">   d[tuple[0]] &#x3D; tuple[1]  </span><br><span class="line"># &#123;&#39;Knights&#39;: &#39;Ni&#39;, &#39;Monty&#39;: &#39;Python&#39;, &#39;SPAM&#39;: &#39;SPAAAM&#39;&#125;</span><br></pre></td></tr></table></figure>
<p>或者这样:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l &#x3D; [(&#39;Knights&#39;, &#39;Ni&#39;), (&#39;Monty&#39;, &#39;Python&#39;), (&#39;SPAM&#39;, &#39;SPAAAM&#39;)]  </span><br><span class="line">d &#x3D; dict(l) # &#123;&#39;Knights&#39;: &#39;Ni&#39;, &#39;Monty&#39;: &#39;Python&#39;, &#39;SPAM&#39;: &#39;SPAAAM&#39;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="enumerate-iterable-start-0"><a href="#enumerate-iterable-start-0" class="headerlink" title="enumerate(iterable [,start=0])"></a>enumerate(iterable [,start=0])</h3><p>我真的是超级喜欢这个!如果你以前写过C语言，那么你可能会这么写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in range(len(list)):  </span><br><span class="line"># do stuff with list[i], for example, print it  </span><br><span class="line">print i, list[i]</span><br></pre></td></tr></table></figure>
<p>噢,不用那么麻烦!你可以使用enumerate()来提高可读性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i, item in enumerate(list):  </span><br><span class="line"># so stuff with item, for example print it  </span><br><span class="line">print i, item</span><br></pre></td></tr></table></figure>
<h3 id="isinstance-object-classinfo"><a href="#isinstance-object-classinfo" class="headerlink" title="isinstance(object, classinfo)"></a>isinstance(object, classinfo)</h3><p>如果 object 参数是 classinfo 参数的一个实例或者子类(直接或者间接)的话返回 True<br>当你想检验一个对象的类型的时候,第一个想到的应该是使用type()函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if type(obj) &#x3D;&#x3D; type(dict):  </span><br><span class="line"># do stuff  </span><br><span class="line">elif type(obj) &#x3D;&#x3D; type(list):  </span><br><span class="line"># do other stuff  </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>或者你可以这么写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if isinstance(obj, dict):  </span><br><span class="line"># do stuff  </span><br><span class="line">elif isinstance(obj, list):  </span><br><span class="line"># do other stuff  </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="pow-x-y-z"><a href="#pow-x-y-z" class="headerlink" title="pow(x, y [,z])"></a>pow(x, y [,z])</h3><p>返回 x 的 y 次幂(如果 z 存在的话则以 z 为模)。<br>如果你想计算 x 的 y 次方，以 z 为模，那么你可以这么写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mod &#x3D; (x ** y) % z</span><br></pre></td></tr></table></figure>
<p>但是当 x=1234567， y=4567676， z=56 的时候我的电脑足足跑了 64 秒！<br>不要用 ** 和 % 了，使用 pow(x, y, z) 吧！这个例子可以写成 pow(1234567, 4567676, 56) ，只用了 0.034 秒就出了结果！</p>
<h3 id="zip-iterable"><a href="#zip-iterable" class="headerlink" title="zip([iterable, ])"></a>zip([iterable, ])</h3><p>这个函数返回一个含元组的列表，具体请看例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l1 &#x3D; (&#39;You gotta&#39;, &#39;the&#39;)  </span><br><span class="line">l2 &#x3D; (&#39;love&#39;, &#39;built-in&#39;)  </span><br><span class="line">out &#x3D; []  </span><br><span class="line">if len(l1) &#x3D;&#x3D; len(l2):  </span><br><span class="line">for i in range(len(l1)):  </span><br><span class="line">       out.append((l1[i], l2[i]))  </span><br><span class="line"># out &#x3D; [(&#39;You gotta&#39;, &#39;love&#39;), (&#39;the&#39;, &#39;built-in)]</span><br></pre></td></tr></table></figure>
<p>或者这么写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l1 &#x3D; [&#39;You gotta&#39;, &#39;the&#39;]  </span><br><span class="line">l2 &#x3D; [&#39;love&#39;, &#39;built-in&#39;]  </span><br><span class="line">out &#x3D; zip(l1, l2) # [(&#39;You gotta&#39;, &#39;love&#39;), (&#39;the&#39;, &#39;built-in)]</span><br></pre></td></tr></table></figure>
<p>如果你想得到倒序的话加上 * 操作符就可以了:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print zip(*out)  </span><br><span class="line"># [(&#39;You gotta&#39;, &#39;the&#39;), (&#39;love&#39;, &#39;built-in&#39;)]</span><br></pre></td></tr></table></figure>

<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Python 内置函数很方便，它们很快并且经过了优化，所以它们可能效率更高。<br>我真心认为每个 Python 开发者都应该好好看看内置函数的文档(引言部分)。<br>忘了说了，在 itertools 模块中有很多很不错的函数。</p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>python的logging模块实现json格式的日志输出</title>
    <url>/2020/04/20/python%E7%9A%84logging%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0json%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h2 id="python的logging模块实现json格式的日志输出"><a href="#python的logging模块实现json格式的日志输出" class="headerlink" title="python的logging模块实现json格式的日志输出"></a>python的logging模块实现json格式的日志输出</h2><blockquote>
<p>想要让开发过程或者是上线后的bug无处可藏，最好的方式便是在程序运行过程中，不断收集重要的日志，以供分析使用。Python中内置的log收集模块是logging，该模块使用起来比较方便，但是美中不足的地方就是日志的格式转成json比较麻烦。于是我结合logging和另一个模块python-json-logger(pip install python-json-logger), 实现json格式的日志输出。</p>
</blockquote>
<p>以下代码可以做成模块，直接导入使用</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;user&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import logging, logging.config, os</span><br><span class="line">import structlog</span><br><span class="line">import traceback</span><br><span class="line">from structlog import configure, processors, stdlib, threadlocal</span><br><span class="line">from pythonjsonlogger import jsonlogger</span><br><span class="line">BASE_DIR &#x3D; BASE_DIR &#x3D; os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">DEBUG &#x3D; True  # 标记是否在开发环境</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 给过滤器使用的判断</span><br><span class="line">class RequireDebugTrue(logging.Filter):</span><br><span class="line">    # 实现filter方法</span><br><span class="line">    def filter(self, record):</span><br><span class="line">        return DEBUG</span><br><span class="line"></span><br><span class="line">def get_logger():</span><br><span class="line">    LOGGING &#x3D; &#123;</span><br><span class="line">    # 基本设置</span><br><span class="line">        &#39;version&#39;: 1,  # 日志级别</span><br><span class="line">        &#39;disable_existing_loggers&#39;: False,  # 是否禁用现有的记录器</span><br><span class="line"></span><br><span class="line">    # 日志格式集合</span><br><span class="line">        &#39;formatters&#39;: &#123;</span><br><span class="line">        # 标准输出格式</span><br><span class="line">            &#39;json&#39;: &#123;</span><br><span class="line">            # [具体时间][线程名:线程ID][日志名字:日志级别名称(日志级别ID)] [输出的模块:输出的函数]:日志内容</span><br><span class="line">                &#39;format&#39;: &#39;[%(asctime)s][%(threadName)s:%(thread)d][%(name)s:%(levelname)s(%(lineno)d)]\n[%(module)s:%(funcName)s]:%(message)s&#39;,</span><br><span class="line">                &#39;class&#39;: &#39;pythonjsonlogger.jsonlogger.JsonFormatter&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    # 过滤器</span><br><span class="line">        &#39;filters&#39;: &#123;</span><br><span class="line">            &#39;require_debug_true&#39;: &#123;</span><br><span class="line">                &#39;()&#39;: RequireDebugTrue,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    # 处理器集合</span><br><span class="line">        &#39;handlers&#39;: &#123;</span><br><span class="line">        # 输出到控制台</span><br><span class="line">        # 输出到文件</span><br><span class="line">            &#39;TimeChecklog&#39;: &#123;</span><br><span class="line">                &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">                &#39;class&#39;: &#39;logging.handlers.RotatingFileHandler&#39;,</span><br><span class="line">                &#39;formatter&#39;: &#39;json&#39;,</span><br><span class="line">                &#39;filename&#39;: os.path.join(&quot;.&#x2F;&quot;, &#39;TimeoutCheck.log&#39;),  # 输出位置</span><br><span class="line">                &#39;maxBytes&#39;: 1024 * 1024 * 5,  # 文件大小 5M</span><br><span class="line">                &#39;backupCount&#39;: 5,  # 备份份数</span><br><span class="line">                &#39;encoding&#39;: &#39;utf8&#39;,  # 文件编码</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    # 日志管理器集合</span><br><span class="line">        &#39;loggers&#39;: &#123;</span><br><span class="line">        # 管理器</span><br><span class="line">            &#39;proxyCheck&#39;: &#123;</span><br><span class="line">                &#39;handlers&#39;: [&#39;TimeChecklog&#39;],</span><br><span class="line">                &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">                &#39;propagate&#39;: True,  # 是否传递给父记录器</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logging.config.dictConfig(LOGGING)</span><br><span class="line">    logger &#x3D; logging.getLogger(&quot;proxyCheck&quot;)</span><br><span class="line">    return logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试用例，你可以把get_logger()封装成一个模块，from xxx import get_logger()</span><br><span class="line">logger1 &#x3D; get_logger()</span><br><span class="line">def test():</span><br><span class="line">    try:</span><br><span class="line">        a &#x3D; 1 &#x2F; 0</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logger1.error(&quot;This is a error info&quot;,exc_info&#x3D;True)  # 写入错误日志</span><br><span class="line">        #如果需要添加额外的信息，使用extra关键字即可</span><br><span class="line">        logger1.error(str(traceback.format_exc()), extra&#x3D;&#123;&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;:&quot;value2&quot;&#125;)</span><br><span class="line">        # 其他错误处理代码</span><br><span class="line">        pass</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>
<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>测试的结果，可以在./TimeoutCheck.log文件中看到输出的日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat TimeoutCheck.log</span><br><span class="line">&#123;&quot;asctime&quot;: &quot;2019-01-31 11:29:16,818&quot;, &quot;threadName&quot;: &quot;MainThread&quot;, &quot;thread&quot;: 140735830963008, &quot;name&quot;: &quot;proxyCheck&quot;, &quot;levelname&quot;: &quot;ERROR&quot;, &quot;%(lineno&quot;: null, &quot;module&quot;: &quot;log&quot;, &quot;funcName&quot;: &quot;test&quot;, &quot;message&quot;: &quot;This is a error info&quot;, &quot;exc_info&quot;: &quot;Traceback (most recent call last):\n  File \&quot;log.py\&quot;, line 74, in test\n    a &#x3D; 1 &#x2F; 0\nZeroDivisionError: division by zero&quot;&#125;</span><br><span class="line">&#123;&quot;asctime&quot;: &quot;2019-01-31 11:29:16,819&quot;, &quot;threadName&quot;: &quot;MainThread&quot;, &quot;thread&quot;: 140735830963008, &quot;name&quot;: &quot;proxyCheck&quot;, &quot;levelname&quot;: &quot;ERROR&quot;, &quot;%(lineno&quot;: null, &quot;module&quot;: &quot;log&quot;, &quot;funcName&quot;: &quot;test&quot;, &quot;message&quot;: &quot;Traceback (most recent call last):\n  File \&quot;log.py\&quot;, line 74, in test\n    a &#x3D; 1 &#x2F; 0\nZeroDivisionError: division by zero\n&quot;, &quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">import datetime</span><br><span class="line">import logging</span><br><span class="line">import logging.config</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">class LogstashFormatter(logging.Formatter):</span><br><span class="line">    def __init__(self, task_name&#x3D;None):</span><br><span class="line">        self.task_name &#x3D; task_name</span><br><span class="line"></span><br><span class="line">        super(LogstashFormatter, self).__init__()</span><br><span class="line"></span><br><span class="line">    def format(self, record):</span><br><span class="line">        data &#x3D; &#123;&#39;@message&#39;: record.msg,</span><br><span class="line">                &#39;@timestamp&#39;: datetime.datetime.utcnow().strftime(&#39;%Y-%m-%dT%H:%M:%S.%fZ&#39;),</span><br><span class="line">                &#39;@type&#39;: &#39;Add log extra test&#39;&#125;</span><br><span class="line"></span><br><span class="line">        if self.task_name:</span><br><span class="line">            data[&#39;@task_name&#39;] &#x3D; self.task_name</span><br><span class="line"></span><br><span class="line">        for key, value in record.args.items():</span><br><span class="line">            data[key] &#x3D; value</span><br><span class="line"></span><br><span class="line">        return json.dumps(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger &#x3D; logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">logging.config.dictConfig(&#123;</span><br><span class="line">    &#39;version&#39;: 1,</span><br><span class="line">    &#39;disable_existing_loggers&#39;: False,  # this fixes the problem</span><br><span class="line">    &#39;formatters&#39;: &#123;</span><br><span class="line">        &#39;json&#39;: &#123;</span><br><span class="line">            &#39;()&#39;: LogstashFormatter,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;handlers&#39;: &#123;</span><br><span class="line">        &#39;console&#39;: &#123;</span><br><span class="line">            &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;logging.StreamHandler&#39;,</span><br><span class="line">            &#39;formatter&#39;: &#39;json&#39;,</span><br><span class="line">            &#39;stream&#39;: sys.stdout</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;loggers&#39;: &#123;</span><br><span class="line">        &#39;&#39;: &#123;</span><br><span class="line">            &#39;handlers&#39;: [&#39;console&#39;],</span><br><span class="line">            &#39;level&#39;: &#39;INFO&#39;,</span><br><span class="line">            &#39;propagate&#39;: True,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger.info(&#39;It works!&#39;, &#123;&#39;aaa&#39;:&#39;bbbb&#39;,&#39;cccc&#39;:&#39;dddd&#39;&#125;)</span><br><span class="line"></span><br><span class="line"># output:</span><br><span class="line">&#123;&quot;@message&quot;: &quot;It works!&quot;, &quot;@timestamp&quot;: &quot;2019-01-31T02:52:24.786570Z&quot;, &quot;@type&quot;: &quot;Add log extra test&quot;, &quot;aaa&quot;: &quot;bbbb&quot;, &quot;cccc&quot;: &quot;dddd&quot;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="版本三"><a href="#版本三" class="headerlink" title="版本三"></a>版本三</h3><blockquote>
<p>此版本为优化版本,继承pythonjsonlogger.jsonlogger库中的JsonFormatter类,重写format方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: shuke</span><br><span class="line">@file: jsonlog.py </span><br><span class="line">@time: 2019&#x2F;01&#x2F;20 15:36</span><br><span class="line">@contact: shu_ke163@163.com</span><br><span class="line">@software:  shuke-logging</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import json</span><br><span class="line">import socket</span><br><span class="line">import datetime</span><br><span class="line">import logging</span><br><span class="line">import traceback</span><br><span class="line">import logging.config</span><br><span class="line">from pythonjsonlogger.jsonlogger import JsonFormatter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class JsonFormatter(JsonFormatter):</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        self.host &#x3D; socket.getfqdn()</span><br><span class="line">        self.message_type &#x3D; &quot;json&quot;</span><br><span class="line">        self.version &#x3D; &quot;v1.0&quot;</span><br><span class="line">        super(JsonFormatter, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def get_extra_fields(self, record):</span><br><span class="line">        # The list contains all the attributes listed in</span><br><span class="line">        # http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;logging.html#logrecord-attributes</span><br><span class="line">        builtin_attr_list &#x3D; [</span><br><span class="line">            &#39;args&#39;, &#39;asctime&#39;, &#39;created&#39;, &#39;exc_info&#39;, &#39;exc_text&#39;, &#39;filename&#39;, &#39;id&#39;, &#39;levelname&#39;, &#39;levelno&#39;, &#39;module&#39;,</span><br><span class="line">            &#39;msecs&#39;, &#39;msecs&#39;, &#39;message&#39;, &#39;msg&#39;, &#39;name&#39;, &#39;pathname&#39;, &#39;relativeCreated&#39;, &#39;extra&#39;]</span><br><span class="line"></span><br><span class="line">        fields &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">        for key, value in record.__dict__.items():</span><br><span class="line">            if key not in builtin_attr_list:</span><br><span class="line">                fields[key] &#x3D; repr(value)</span><br><span class="line"></span><br><span class="line">        fields[&quot;project&quot;] &#x3D; &quot;WEHOST&quot;</span><br><span class="line">        fields[&quot;team&quot;] &#x3D; &quot;OPS&quot;</span><br><span class="line">        fields[&quot;department&quot;] &#x3D; &quot;IT&quot;</span><br><span class="line">        fields[&quot;log_debug&quot;] &#x3D; True</span><br><span class="line"></span><br><span class="line">        return fields</span><br><span class="line"></span><br><span class="line">    def format_timestamp(self, time):</span><br><span class="line">        return datetime.datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S %f&#39;)</span><br><span class="line"></span><br><span class="line">    def format(self, record):</span><br><span class="line">        message &#x3D; &#123;</span><br><span class="line">            &#39;@timestamp&#39;: self.format_timestamp(record.created),</span><br><span class="line">            &#39;@version&#39;: &#39;v1.0&#39;,</span><br><span class="line">            &#39;name&#39;: record.name,</span><br><span class="line">            &#39;host&#39;: self.host,</span><br><span class="line">            &#39;pathname&#39;: record.pathname,</span><br><span class="line">            &#39;levelno&#39;: record.levelno,</span><br><span class="line">            &#39;filename&#39;: record.filename,</span><br><span class="line">            &#39;module&#39;: record.module,</span><br><span class="line">            &#39;exc_info&#39;: &#39;&#39;.join(traceback.format_exception(*record.exc_info)),</span><br><span class="line">            &#39;exc_text&#39;: record.exc_text,</span><br><span class="line">            &#39;stack_info&#39;: record.stack_info,</span><br><span class="line">            &#39;created&#39;: time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime(record.created)),</span><br><span class="line">            &#39;msecs&#39;: record.msecs,</span><br><span class="line">            &#39;relativeCreated&#39;: record.relativeCreated,</span><br><span class="line">            &#39;type&#39;: self.message_type,</span><br><span class="line">            &#39;level&#39;: record.levelname,</span><br><span class="line">            &#39;message&#39;: record.getMessage(),</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        # Add extra fields</span><br><span class="line">        message.update(self.get_extra_fields(record))</span><br><span class="line"></span><br><span class="line">        return json.dumps(message, indent&#x3D;4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_logger():</span><br><span class="line">    LOGGING &#x3D; &#123;</span><br><span class="line">        # 基本设置</span><br><span class="line">        &#39;version&#39;: 1,  # 日志级别</span><br><span class="line">        &#39;disable_existing_loggers&#39;: False,  # 是否禁用现有的记录器</span><br><span class="line"></span><br><span class="line">        # 日志格式集合</span><br><span class="line">        &#39;formatters&#39;: &#123;</span><br><span class="line">            # 标准输出格式</span><br><span class="line">            &#39;json&#39;: &#123;</span><br><span class="line">                # [具体时间][线程名:线程ID][日志名字:日志级别名称(日志级别ID)] [输出的模块:输出的函数]:日志内容</span><br><span class="line">                # &#39;format&#39;: &#39;[%(asctime)s][%(threadName)s:%(thread)d][%(name)s:%(levelname)s(%(lineno)d)]\n[%(module)s:%(funcName)s]:%(message)s&#39;,</span><br><span class="line">                # &#39;format&#39;: &#39;[%(asctime)s][%(threadName)s:%(thread)d][%(created)s:%(process)d:%(processName)s][%(relativeCreated)s:%(msecs)s][%(pathname)s:%(filename)s][%(name)s:%(levelname)s:%(lineno)d)][%(module)s:%(funcName)s]:%(message)s&#39;,</span><br><span class="line">                # &#39;()&#39;: JsonFormatter.format,</span><br><span class="line">                # &#39;class&#39;: &#39;pythonjsonlogger.jsonlogger.JsonFormatter&#39;,</span><br><span class="line">                &#39;()&#39;: JsonFormatter,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        # 处理器集合</span><br><span class="line">        &#39;handlers&#39;: &#123;</span><br><span class="line">            # 输出到控制台</span><br><span class="line">            &#39;console&#39;: &#123;</span><br><span class="line">                &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">                &#39;class&#39;: &#39;logging.StreamHandler&#39;,</span><br><span class="line">                &#39;formatter&#39;: &#39;json&#39;,</span><br><span class="line">                &#39;stream&#39;: sys.stdout</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        # 日志管理器集合</span><br><span class="line">        &#39;loggers&#39;: &#123;</span><br><span class="line">            # 管理器</span><br><span class="line">            &#39;mylog&#39;: &#123;</span><br><span class="line">                &#39;handlers&#39;: [&#39;console&#39;],</span><br><span class="line">                &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">                &#39;propagate&#39;: True,  # 是否传递给父记录器</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logging.config.dictConfig(LOGGING)</span><br><span class="line">    logger &#x3D; logging.getLogger(&quot;mylog&quot;)</span><br><span class="line">    return logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试用例，你可以把get_logger()封装成一个模块，from xxx import get_logger()</span><br><span class="line">logger &#x3D; get_logger()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        a &#x3D; 1 &#x2F; 0</span><br><span class="line">    except Exception as e:</span><br><span class="line">        # 如果需要添加额外的信息，使用extra关键字即可</span><br><span class="line">        logger.info(&quot;This is a info message&quot;, extra&#x3D;&#123;&quot;type&quot;: &quot;json&quot;, &quot;department&quot;: &quot;IT&quot;, &quot;bussiness&quot;: &quot;game&quot;&#125;,</span><br><span class="line">                    exc_info&#x3D;True)</span><br><span class="line">        logger.info(&quot;Hello World&quot;, extra&#x3D;&#123;&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;&#125;, exc_info&#x3D;True)</span><br><span class="line">        # 其他错误处理代码</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># output:</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot;: &quot;2019-01-31 18:53:39 581892&quot;,</span><br><span class="line">    &quot;@version&quot;: &quot;v1.0&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;mylog&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;MacBooKPro&quot;,</span><br><span class="line">    &quot;pathname&quot;: &quot;jsonlog.py&quot;,</span><br><span class="line">    &quot;levelno&quot;: 20,</span><br><span class="line">    &quot;filename&quot;: &quot;jsonlog.py&quot;,</span><br><span class="line">    &quot;module&quot;: &quot;jsonlog&quot;,</span><br><span class="line">    &quot;exc_info&quot;: &quot;Traceback (most recent call last):\n  File \&quot;jsonlog.py\&quot;, line 129, in test\n    a &#x3D; 1 &#x2F; 0\nZeroDivisionError: division by zero\n&quot;,</span><br><span class="line">    &quot;exc_text&quot;: null,</span><br><span class="line">    &quot;stack_info&quot;: &quot;None&quot;,</span><br><span class="line">    &quot;created&quot;: &quot;2019-01-31 18:53:39&quot;,</span><br><span class="line">    &quot;msecs&quot;: 581.8040370941162,</span><br><span class="line">    &quot;relativeCreated&quot;: 47.5161075592041,</span><br><span class="line">    &quot;type&quot;: &quot;&#39;json&#39;&quot;,</span><br><span class="line">    &quot;level&quot;: &quot;INFO&quot;,</span><br><span class="line">    &quot;message&quot;: &quot;This is a info message&quot;,</span><br><span class="line">    &quot;lineno&quot;: &quot;133&quot;,</span><br><span class="line">    &quot;funcName&quot;: &quot;&#39;test&#39;&quot;,</span><br><span class="line">    &quot;thread&quot;: &quot;140735830963008&quot;,</span><br><span class="line">    &quot;threadName&quot;: &quot;&#39;MainThread&#39;&quot;,</span><br><span class="line">    &quot;processName&quot;: &quot;&#39;MainProcess&#39;&quot;,</span><br><span class="line">    &quot;process&quot;: &quot;83309&quot;,</span><br><span class="line">    &quot;department&quot;: &quot;IT&quot;,</span><br><span class="line">    &quot;bussiness&quot;: &quot;&#39;game&#39;&quot;,</span><br><span class="line">    &quot;project&quot;: &quot;WEHOST&quot;,</span><br><span class="line">    &quot;team&quot;: &quot;OPS&quot;,</span><br><span class="line">    &quot;log_debug&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;@timestamp&quot;: &quot;2019-01-31 18:53:39 582770&quot;,</span><br><span class="line">    &quot;@version&quot;: &quot;v1.0&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;mylog&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;MacBooKPro&quot;,</span><br><span class="line">    &quot;pathname&quot;: &quot;jsonlog.py&quot;,</span><br><span class="line">    &quot;levelno&quot;: 20,</span><br><span class="line">    &quot;filename&quot;: &quot;jsonlog.py&quot;,</span><br><span class="line">    &quot;module&quot;: &quot;jsonlog&quot;,</span><br><span class="line">    &quot;exc_info&quot;: &quot;Traceback (most recent call last):\n  File \&quot;jsonlog.py\&quot;, line 129, in test\n    a &#x3D; 1 &#x2F; 0\nZeroDivisionError: division by zero\n&quot;,</span><br><span class="line">    &quot;exc_text&quot;: null,</span><br><span class="line">    &quot;stack_info&quot;: &quot;None&quot;,</span><br><span class="line">    &quot;created&quot;: &quot;2019-01-31 18:53:39&quot;,</span><br><span class="line">    &quot;msecs&quot;: 582.7357769012451,</span><br><span class="line">    &quot;relativeCreated&quot;: 48.44784736633301,</span><br><span class="line">    &quot;type&quot;: &quot;json&quot;,</span><br><span class="line">    &quot;level&quot;: &quot;INFO&quot;,</span><br><span class="line">    &quot;message&quot;: &quot;Hello World&quot;,</span><br><span class="line">    &quot;lineno&quot;: &quot;134&quot;,</span><br><span class="line">    &quot;funcName&quot;: &quot;&#39;test&#39;&quot;,</span><br><span class="line">    &quot;thread&quot;: &quot;140735830963008&quot;,</span><br><span class="line">    &quot;threadName&quot;: &quot;&#39;MainThread&#39;&quot;,</span><br><span class="line">    &quot;processName&quot;: &quot;&#39;MainProcess&#39;&quot;,</span><br><span class="line">    &quot;process&quot;: &quot;83309&quot;,</span><br><span class="line">    &quot;key1&quot;: &quot;&#39;value1&#39;&quot;,</span><br><span class="line">    &quot;key2&quot;: &quot;&#39;value2&#39;&quot;,</span><br><span class="line">    &quot;project&quot;: &quot;WEHOST&quot;,</span><br><span class="line">    &quot;team&quot;: &quot;OPS&quot;,</span><br><span class="line">    &quot;department&quot;: &quot;IT&quot;,</span><br><span class="line">    &quot;log_debug&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到日志是json格式，这样你就可以很方便的使用grafna和kafka-&gt;logstash-&gt;es的方式进行日志收集展示了.如果需要将日志直接打到kafka中,需要使用kafka-python库,同时定义handlers进行处理.</p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>一些有趣的python技巧</title>
    <url>/2020/04/20/%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84python%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="一些有趣的python技巧"><a href="#一些有趣的python技巧" class="headerlink" title="一些有趣的python技巧"></a>一些有趣的python技巧</h2><p>python有时候简单起来连我自己都怕，有时候其他语言需要几十写出来的python几行搞定。 这里经常收集一些有趣的东西还是很好玩的。</p>
<h3 id="简单的HTTP服务器"><a href="#简单的HTTP服务器" class="headerlink" title="简单的HTTP服务器"></a>简单的HTTP服务器</h3><p>你想快速简单的分享目录下的文件吗？可以这样做:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd $HOME&#x2F;work&#x2F;</span><br><span class="line"></span><br><span class="line"># Python2</span><br><span class="line">python -m SimpleHTTPServer</span><br><span class="line"></span><br><span class="line"># Python 3</span><br><span class="line">python3 -m http.server 8000</span><br></pre></td></tr></table></figure>
<p>然后别人就可以打开<a href="http://ip:8000" target="_blank" rel="noopener">http://ip:8000</a> 来访问这个简单的Web服务器了,如果该文件夹里面有个index.html就显示它，如果没有就显示文件和目录列表。 这样就能给别人快速分享文件或展示你的网站。</p>
<h3 id="简单的FTP服务器"><a href="#简单的FTP服务器" class="headerlink" title="简单的FTP服务器"></a>简单的FTP服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pyftpdlib</span><br><span class="line">python -m pyftpdlib -p 21</span><br></pre></td></tr></table></figure>
<p>可选参数</p>
<ul>
<li>-i 指定IP地址（默认为本机的IP地址）</li>
<li>-p 指定端口（默认为2121）</li>
<li>-w 写权限（默认为只读）</li>
<li>-d 指定目录 （默认为当前目录）</li>
<li>-u 指定用户名登录</li>
<li>-P 设置登录密码</li>
</ul>
<h3 id="优雅的打印"><a href="#优雅的打印" class="headerlink" title="优雅的打印"></a>优雅的打印</h3><p>下面的方式可以用优雅的方式打印字典和列表:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pprint import pprint</span><br><span class="line">pprint(my_dict)</span><br></pre></td></tr></table></figure>
<p>这用于字段打印是非常高效的,如果你想从文件中快速优雅的打印json格式的数据,可以这样做:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat file.json | python -m json.tool</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>python操作zabbix API</title>
    <url>/2020/04/20/python%E6%93%8D%E4%BD%9Czabbix-API/</url>
    <content><![CDATA[<h2 id="python操作zabbix-API"><a href="#python操作zabbix-API" class="headerlink" title="python操作zabbix API"></a>python操作zabbix API</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import json</span><br><span class="line">import urllib2</span><br><span class="line">import sys</span><br><span class="line">class zabbixtools:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.url &#x3D; &quot;http:&#x2F;&#x2F;192.168.1.1&#x2F;zabbix&#x2F;api_jsonrpc.php&quot;</span><br><span class="line">        self.header &#x3D; &#123;&quot;Content-Type&quot;: &quot;application&#x2F;json&quot;&#125;</span><br><span class="line">        self.authID &#x3D; self.user_login()</span><br><span class="line">    def user_login(self):</span><br><span class="line">        data &#x3D; json.dumps(</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">                    &quot;method&quot;: &quot;user.login&quot;,</span><br><span class="line">                    &quot;params&quot;: &#123;</span><br><span class="line">                        &quot;user&quot;: &quot;Admin&quot;,</span><br><span class="line">                        &quot;password&quot;: &quot;admin&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &quot;id&quot;: 0</span><br><span class="line">                    &#125;)</span><br><span class="line">        request &#x3D; urllib2.Request(self.url,data)</span><br><span class="line">        for key in self.header:</span><br><span class="line">            request.add_header(key,self.header[key])</span><br><span class="line">        try:</span><br><span class="line">            result &#x3D; urllib2.urlopen(request)</span><br><span class="line">        except URLError as e:</span><br><span class="line">            print &quot;Auth Failed, Please Check Your Name And Password:&quot;,e.code</span><br><span class="line">        else:</span><br><span class="line">            response &#x3D; json.loads(result.read())</span><br><span class="line">            result.close()</span><br><span class="line">            authID &#x3D; response[&#39;result&#39;]</span><br><span class="line">            return authID</span><br><span class="line">    def get_data(self,data,hostip&#x3D;&quot;&quot;):</span><br><span class="line">        request &#x3D; urllib2.Request(self.url,data)</span><br><span class="line">        for key in self.header:</span><br><span class="line">            request.add_header(key,self.header[key])</span><br><span class="line">        try:</span><br><span class="line">            result &#x3D; urllib2.urlopen(request)</span><br><span class="line">        except URLError as e:</span><br><span class="line">            if hasattr(e, &#39;reason&#39;):</span><br><span class="line">                print &#39;We failed to reach a server.&#39;</span><br><span class="line">                print &#39;Reason: &#39;, e.reason</span><br><span class="line">            elif hasattr(e, &#39;code&#39;):</span><br><span class="line">                print &#39;The server could not fulfill the request.&#39;</span><br><span class="line">                print &#39;Error code: &#39;, e.code</span><br><span class="line">            return 0</span><br><span class="line">        else:</span><br><span class="line">            response &#x3D; json.loads(result.read())</span><br><span class="line">            result.close()</span><br><span class="line">            return response</span><br><span class="line">    def host_get(self,hostip):</span><br><span class="line">        #hostip &#x3D; raw_input(&quot;\033[1;35;40m%s\033[0m&quot; % &#39;Enter Your Check Host:Host_ip :&#39;)</span><br><span class="line">        data &#x3D; json.dumps(</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">                    &quot;method&quot;: &quot;host.get&quot;,</span><br><span class="line">                    &quot;params&quot;: &#123;</span><br><span class="line">                        &quot;output&quot;:[&quot;hostid&quot;,&quot;name&quot;,&quot;status&quot;,&quot;host&quot;],</span><br><span class="line">                        &quot;filter&quot;: &#123;&quot;host&quot;: [hostip]&#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &quot;auth&quot;: self.authID,</span><br><span class="line">                    &quot;id&quot;: 1</span><br><span class="line">                &#125;)</span><br><span class="line">        res &#x3D; self.get_data(data)[&#39;result&#39;]</span><br><span class="line">        if (res !&#x3D; 0) and (len(res) !&#x3D; 0):</span><br><span class="line">            #for host in res:</span><br><span class="line">            host &#x3D; res[0]</span><br><span class="line">            if host[&#39;status&#39;] &#x3D;&#x3D; &#39;1&#39;:</span><br><span class="line">                print &quot;\t&quot;,&quot;\033[1;31;40m%s\033[0m&quot; % &quot;Host_IP:&quot;,&quot;\033[1;31;40m%s\033[0m&quot; %host[&#39;host&#39;].ljust(15),&#39;\t&#39;,&quot;\033[1;31;40m%s\033[0m&quot; % &quot;Host_Name:&quot;,&quot;\033[1;31;40m%s\033[0m&quot;% host[&#39;name&#39;].encode(&#39;GBK&#39;),&#39;\t&#39;,&quot;\033[1;31;40m%s\033[0m&quot; % u&#39;monitor&#39;.encode(&#39;GBK&#39;)</span><br><span class="line">                return host[&#39;hostid&#39;]</span><br><span class="line">            elif host[&#39;status&#39;] &#x3D;&#x3D; &#39;0&#39;:</span><br><span class="line">                print &quot;\t&quot;,&quot;\033[1;32;40m%s\033[0m&quot; % &quot;Host_IP:&quot;,&quot;\033[1;32;40m%s\033[0m&quot; %host[&#39;host&#39;].ljust(15),&#39;\t&#39;,&quot;\033[1;32;40m%s\033[0m&quot; % &quot;Host_Name:&quot;,&quot;\033[1;32;40m%s\033[0m&quot;% host[&#39;name&#39;].encode(&#39;GBK&#39;),&#39;\t&#39;,&quot;\033[1;32;40m%s\033[0m&quot; % u&#39;unmonitor&#39;.encode(&#39;GBK&#39;)</span><br><span class="line">                return host[&#39;hostid&#39;]</span><br><span class="line">            print</span><br><span class="line">        else:</span><br><span class="line">            print &#39;\t&#39;,&quot;\033[1;31;40m%s\033[0m&quot; % &quot;Get Host Error or cannot find this host,please check !&quot;</span><br><span class="line">            return 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def get_grouphost(self):</span><br><span class="line">        groupid &#x3D; raw_input(&quot;\033[1;35;40m%s\033[0m&quot; % &#39;Enter Your groupid:&#39;)</span><br><span class="line">        data &#x3D; json.dumps(</span><br><span class="line">            &#123;</span><br><span class="line">               &quot;jsonrpc&quot;:&quot;2.0&quot;,</span><br><span class="line">               &quot;method&quot;:&quot;host.get&quot;,</span><br><span class="line">               &quot;params&quot;:&#123;</span><br><span class="line">                   &quot;output&quot;:[&quot;hostid&quot;,&quot;name&quot;,&quot;status&quot;,&quot;host&quot;],</span><br><span class="line">                   #&quot;output&quot;: &quot;extend&quot;,</span><br><span class="line">                   #&quot;filter&quot;: &#123;&quot;host&quot;: [&quot;42.62.121.16&quot;]&#125;</span><br><span class="line">                   &quot;groupids&quot;:groupid,</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;auth&quot;: self.authID, </span><br><span class="line">               &quot;id&quot;:1,</span><br><span class="line">            &#125;)</span><br><span class="line">        res &#x3D; self.get_data(data)</span><br><span class="line">        if &#39;result&#39; in res.keys():</span><br><span class="line">            res &#x3D; res[&#39;result&#39;]</span><br><span class="line">            if (res !&#x3D;0) or (len(res) !&#x3D; 0):</span><br><span class="line">                print &quot;\033[1;32;40m%s\033[0m&quot; % &quot;Number Of Hosts: &quot;,&quot;\033[1;31;40m%d\033[0m&quot; % len(res)</span><br><span class="line">                for host in res:</span><br><span class="line">                    print &quot;Host ID:&quot;,host[&#39;hostid&#39;],&quot;Visible name:&quot;,host[&#39;name&#39;],&quot;Host-status:&quot;,host[&#39;status&#39;],&quot;HostName:&quot;,host[&#39;host&#39;]</span><br><span class="line">        else:</span><br><span class="line">            print &quot;The groupid does not exist, please check!&quot;</span><br><span class="line">            return 0</span><br><span class="line"></span><br><span class="line">    def get_hostlist(self):</span><br><span class="line">        data &#x3D; json.dumps(</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;jsonrpc&quot;:&quot;2.0&quot;,</span><br><span class="line">                    &quot;method&quot;:&quot;host.get&quot;,</span><br><span class="line">                    &quot;params&quot;:&#123;</span><br><span class="line">                        &quot;output&quot;:[&quot;hostid&quot;,&quot;name&quot;],</span><br><span class="line">                        &quot;filter&quot;:&#123;&quot;host&quot;:&quot;&quot;&#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;auth&quot;:self.authID, </span><br><span class="line">                &quot;id&quot;:1,</span><br><span class="line">            &#125;)</span><br><span class="line">        res &#x3D; self.get_data(data)</span><br><span class="line">        if &#39;result&#39; in res.keys():</span><br><span class="line">            res &#x3D; res[&#39;result&#39;]</span><br><span class="line">            if (res !&#x3D;0) or (len(res) !&#x3D; 0):</span><br><span class="line">                print &quot;\033[1;32;40m%s\033[0m&quot; % &quot;Number Of Hosts: &quot;,&quot;\033[1;31;40m%d\033[0m&quot; % len(res)</span><br><span class="line">                for host in res:</span><br><span class="line">                    print &quot;Host ID:&quot;,host[&#39;hostid&#39;].encode(&#39;UTF-8&#39;),&quot;Host Name:&quot;,host[&#39;name&#39;].encode(&#39;UTF-8&#39;)</span><br><span class="line">        else:</span><br><span class="line">            print &#39;\t&#39;,&quot;\033[1;31;40m%s\033[0m&quot; % &quot;Get hostlist Error or cannot find this host,please check !&quot;</span><br><span class="line">        return 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def host_del(self):</span><br><span class="line">        hostip &#x3D; raw_input(&quot;\033[1;35;40m%s\033[0m&quot; % &#39;Enter Your Check Host:Host_ip :&#39;)</span><br><span class="line">        hostid &#x3D; self.host_get(hostip)</span><br><span class="line">    print hostid</span><br><span class="line">        if hostid &#x3D;&#x3D; 0:</span><br><span class="line">            print &#39;\t&#39;,&quot;\033[1;31;40m%s\033[0m&quot; % &quot;This host cannot find in zabbix,please check it !&quot;</span><br><span class="line">            sys.exit()</span><br><span class="line">        data &#x3D; json.dumps(</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">                    &quot;method&quot;: &quot;host.delete&quot;,</span><br><span class="line">                    &quot;params&quot;: [hostid],</span><br><span class="line">                    &quot;auth&quot;: self.authID,</span><br><span class="line">                    &quot;id&quot;: 1</span><br><span class="line">                &#125;)</span><br><span class="line">        res &#x3D; self.get_data(data)[&#39;result&#39;]</span><br><span class="line">        if &#39;hostids&#39; in res.keys():</span><br><span class="line">            print &quot;\t&quot;,&quot;\033[1;32;40m%s\033[0m&quot; % &quot;Delet Host:%s success !&quot; % hostip</span><br><span class="line">        else:</span><br><span class="line">            print &quot;\t&quot;,&quot;\033[1;31;40m%s\033[0m&quot; % &quot;Delet Host:%s failure !&quot; % hostip</span><br><span class="line">    def hostgroup_get(self):</span><br><span class="line">        data &#x3D; json.dumps(</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">                    &quot;method&quot;: &quot;hostgroup.get&quot;,</span><br><span class="line">                    &quot;params&quot;: &#123;</span><br><span class="line">                        &quot;output&quot;: &quot;extend&quot;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &quot;auth&quot;: self.authID,</span><br><span class="line">                    &quot;id&quot;: 1,</span><br><span class="line">                    &#125;)</span><br><span class="line">        res &#x3D; self.get_data(data)</span><br><span class="line">        if &#39;result&#39; in res.keys():</span><br><span class="line">            res &#x3D; res[&#39;result&#39;]</span><br><span class="line">            if (res !&#x3D;0) or (len(res) !&#x3D; 0):</span><br><span class="line">                print &quot;\033[1;32;40m%s\033[0m&quot; % &quot;Number Of Group: &quot;,&quot;\033[1;31;40m%d\033[0m&quot; % len(res)</span><br><span class="line">                for host in res:</span><br><span class="line">                    print&quot;\t&quot;,&quot;HostGroup_id:&quot;,host[&#39;groupid&#39;],&quot;\t&quot;,&quot;HostGroup_Name:&quot;,host[&#39;name&#39;].encode(&#39;GBK&#39;)</span><br><span class="line">        else:</span><br><span class="line">            print &quot;Get HostGroup Error,please check !&quot;</span><br><span class="line">    def template_get(self):</span><br><span class="line">        data &#x3D; json.dumps(</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">                    &quot;method&quot;: &quot;template.get&quot;,</span><br><span class="line">                    &quot;params&quot;: &#123;</span><br><span class="line">                        &quot;output&quot;: &quot;extend&quot;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &quot;auth&quot;: self.authID,</span><br><span class="line">                    &quot;id&quot;: 1,</span><br><span class="line">                    &#125;)</span><br><span class="line">        res &#x3D; self.get_data(data)#[&#39;result&#39;]</span><br><span class="line">        if &#39;result&#39; in res.keys():</span><br><span class="line">            res &#x3D; res[&#39;result&#39;]</span><br><span class="line">            if (res !&#x3D;0) or (len(res) !&#x3D; 0):</span><br><span class="line">                print &quot;\033[1;32;40m%s\033[0m&quot; % &quot;Number Of Template: &quot;,&quot;\033[1;31;40m%d\033[0m&quot; % len(res)</span><br><span class="line">                for host in res:</span><br><span class="line">                    print&quot;\t&quot;,&quot;Template_id:&quot;,host[&#39;templateid&#39;],&quot;\t&quot;,&quot;Template_Name:&quot;,host[&#39;name&#39;].encode(&#39;GBK&#39;)</span><br><span class="line">                print</span><br><span class="line">        else:</span><br><span class="line">            print &quot;Get Template Error,please check !&quot;</span><br><span class="line">    def host_create(self):</span><br><span class="line">        hostip &#x3D; raw_input(&quot;\033[1;35;40m%s\033[0m&quot; % &#39;Enter your:Host_ip :&#39;)</span><br><span class="line">        #Visible_name &#x3D; raw_input(&quot;\033[1;35;40m%s\033[0m&quot; % &#39;Enter your:Visible name :&#39;)</span><br><span class="line">        groupid &#x3D; raw_input(&quot;\033[1;35;40m%s\033[0m&quot; % &#39;Enter your:Group_id :&#39;)</span><br><span class="line">        templateid &#x3D; raw_input(&quot;\033[1;35;40m%s\033[0m&quot; % &#39;Enter your:Tempate_id :&#39;)</span><br><span class="line">        g_list&#x3D;[]</span><br><span class="line">        t_list&#x3D;[]</span><br><span class="line">        for i in groupid.split(&#39;,&#39;):</span><br><span class="line">            var &#x3D; &#123;&#125;</span><br><span class="line">            var[&#39;groupid&#39;] &#x3D; i</span><br><span class="line">            g_list.append(var)</span><br><span class="line">        for i in templateid.split(&#39;,&#39;):</span><br><span class="line">            var &#x3D; &#123;&#125;</span><br><span class="line">            var[&#39;templateid&#39;] &#x3D; i</span><br><span class="line">            t_list.append(var)</span><br><span class="line">        if hostip and groupid and templateid:</span><br><span class="line">            data &#x3D; json.dumps(</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">                        &quot;method&quot;: &quot;host.create&quot;,</span><br><span class="line">                        &quot;params&quot;: &#123;</span><br><span class="line">                            &quot;host&quot;: hostip,</span><br><span class="line">                            &quot;interfaces&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    &quot;type&quot;: 1,</span><br><span class="line">                                    &quot;main&quot;: 1,</span><br><span class="line">                                    &quot;useip&quot;: 1,</span><br><span class="line">                                    &quot;ip&quot;: hostip,</span><br><span class="line">                                    &quot;dns&quot;: &quot;&quot;,</span><br><span class="line">                                    &quot;port&quot;: &quot;10050&quot;</span><br><span class="line">                                &#125;</span><br><span class="line">                            ],</span><br><span class="line">                            &quot;groups&quot;: g_list,</span><br><span class="line">                            &quot;templates&quot;: t_list,</span><br><span class="line">                    &#125;,</span><br><span class="line">                        &quot;auth&quot;: self.authID,</span><br><span class="line">                        &quot;id&quot;: 1,</span><br><span class="line">                        &#125;)</span><br><span class="line">            res &#x3D; self.get_data(data,hostip)</span><br><span class="line">            if &#39;result&#39; in res.keys():</span><br><span class="line">                res &#x3D; res[&#39;result&#39;]</span><br><span class="line">                if &#39;hostids&#39; in res.keys():</span><br><span class="line">                    print &quot;\033[1;32;40m%s\033[0m&quot; % &quot;Create host success&quot;</span><br><span class="line">            else:</span><br><span class="line">                print &quot;\033[1;31;40m%s\033[0m&quot; % &quot;Create host failure: %s&quot; % res[&#39;error&#39;][&#39;data&#39;]</span><br><span class="line">        else:</span><br><span class="line">            print &quot;\033[1;31;40m%s\033[0m&quot; % &quot;Enter Error: ip or groupid or tempateid is NULL,please check it !&quot;</span><br><span class="line">def main():</span><br><span class="line">    test &#x3D; zabbixtools()</span><br><span class="line">    #test.template_get()</span><br><span class="line">    #test.hostgroup_get()</span><br><span class="line">    #test.host_get()</span><br><span class="line">    #test.host_del()</span><br><span class="line">    #test.host_create()</span><br><span class="line">    #test.get_grouphost()</span><br><span class="line">    #test.get_hostlist()</span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka专题</title>
    <url>/2020/04/20/kafka%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<h1 id="kafka专题"><a href="#kafka专题" class="headerlink" title="kafka专题"></a>kafka专题</h1><blockquote>
<p><a href="https://www.cnblogs.com/BYRans/p/6054930.html" target="_blank" rel="noopener">Kafka简介</a></p>
</blockquote>
<h2 id="消息系统介绍"><a href="#消息系统介绍" class="headerlink" title="消息系统介绍"></a>消息系统介绍</h2><p>一个消息系统负责将数据从一个应用传递到另外一个应用，应用只需关注于数据，无需关注数据在两个或多个应用间是如何传递的。分布式消息传递基于可靠的消息队列，在客户端应用和消息系统之间异步传递消息。有两种主要的消息传递模式：点对点传递模式、发布-订阅模式。大部分的消息系统选用发布-订阅模式。</p>
<h2 id="点对点消息系统"><a href="#点对点消息系统" class="headerlink" title="点对点消息系统"></a>点对点消息系统</h2><p>在点对点消息系统中，消息持久化到一个队列中。此时，将有一个或多个消费者消费队列中的数据。但是一条消息只能被消费一次。当一个消费者消费了队列中的某条数据之后，该条数据则从消息队列中删除。该模式即使有多个消费者同时消费数据，也能保证数据处理的顺序.</p>
<h2 id="发布-订阅消息系统"><a href="#发布-订阅消息系统" class="headerlink" title="发布-订阅消息系统"></a>发布-订阅消息系统</h2><p>在发布-订阅消息系统中，消息被持久化到一个topic中。与点对点消息系统不同的是，消费者可以订阅一个或多个topic，消费者可以消费该topic中所有的数据，同一条数据可以被多个消费者消费，数据被消费后不会立马删除。在发布-订阅消息系统中，消息的生产者称为发布者，消费者称为订阅者。该模式的示例图如下：</p>
<h2 id="Kafka概述"><a href="#Kafka概述" class="headerlink" title="Kafka概述"></a>Kafka概述</h2><p>Apache Kafka是一个分布式的发布-订阅消息系统，能够支撑海量数据的数据传递。在离线和实时的消息处理业务系统中，Kafka都有广泛的应用。Kafka将消息持久化到磁盘中，并对消息创建了备份保证了数据的安全。Kafka在保证了较高的处理速度的同时，又能保证数据处理的低延迟和数据的零丢失。</p>
<p>Kafka的优势在于：</p>
<p>可靠性：Kafka是一个具有分区机制、副本机制和容错机制的分布式消息系统<br>可扩展性：Kafka消息系统支持集群规模的热扩展<br>高性能：Kafka在数据发布和订阅过程中都能保证数据的高吞吐量。即便在TB级数据存储的情况下，仍然能保证稳定的性能。</p>
<h2 id="Kafka-专用术语"><a href="#Kafka-专用术语" class="headerlink" title="Kafka 专用术语"></a>Kafka 专用术语</h2><p>一个topic配置了3个partition。Partition1有两个offset：0和1。Partition2有4个offset。Partition3有1个offset。副本的id和副本所在的机器的id恰好相同。</p>
<p>如果一个topic的副本数为3，那么Kafka将在集群中为每个partition创建3个相同的副本。集群中的每个broker存储一个或多个partition。多个producer和consumer可同时生产和消费数据。</p>
<p>各个术语的详细介绍如下:</p>
<ul>
<li>Topic：在Kafka中，使用一个类别属性来划分数据的所属类，划分数据的这个类称为topic。如果把Kafka看做为一个数据库，topic可以理解为数据库中的一张表，topic的名字即为表名。</li>
<li>Partition：topic中的数据分割为一个或多个partition。每个topic至少有一个partition。每个partition中的数据使用多个segment文件存储。partition中的数据是有序的，partition间的数据丢失了数据的顺序。如果topic有多个partition，消费数据时就不能保证数据的顺序。在需要严格保证消息的消费顺序的场景下，需要将partition数目设为1。</li>
<li>Partition offset：每条消息都有一个当前Partition下唯一的64字节的offset，它指明了这条消息的起始位置。</li>
<li>Replicas of partition：副本是一个分区的备份。副本不会被消费者消费，副本只用于防止数据丢失，即消费者不从为follower的partition中消费数据，而是从为leader的partition中读取数据。</li>
<li>Broker：<ul>
<li>Kafka 集群包含一个或多个服务器，服务器节点称为broker。</li>
<li>broker存储topic的数据。如果某topic有N个partition，集群有N个broker，那么每个broker存储该topic的一个partition。</li>
<li>如果某topic有N个partition，集群有(N+M)个broker，那么其中有N个broker存储该topic的一个partition，剩下的M个broker不存储该topic的partition数据。</li>
<li>如果某topic有N个partition，集群中broker数目少于N个，那么一个broker存储该topic的一个或多个partition。在实际生产环境中，尽量避免这种情况的发生，这种情况容易导致Kafka集群数据不均衡。</li>
</ul>
</li>
<li>Producer：生产者即数据的发布者，该角色将消息发布到Kafka的topic中。broker接收到生产者发送的消息后，broker将该消息追加到当前用于追加数据的segment文件中。生产者发送的消息，存储到一个partition中，生产者也可以指定数据存储的partition。</li>
<li>Consumer：消费者可以从broker中读取数据。消费者可以消费多个topic中的数据。</li>
<li>Leader：每个partition有多个副本，其中有且仅有一个作为Leader，Leader是当前负责数据的读写的partition。</li>
<li>Follower：Follower跟随Leader，所有写请求都通过Leader路由，数据变更会广播给所有Follower，Follower与Leader保持数据同步。如果Leader失效，则从Follower中选举出一个新的Leader。当Follower与Leader挂掉、卡住或者同步太慢，leader会把这个follower从“in sync replicas”（ISR）列表中删除，重新创建一个Follower。</li>
</ul>
<h2 id="Kafka架构"><a href="#Kafka架构" class="headerlink" title="Kafka架构"></a>Kafka架构</h2><ul>
<li>Broker：Kafka的broker是无状态的，broker使用Zookeeper维护集群的状态。Leader的选举也由Zookeeper负责。</li>
<li>Zookeeper：Zookeeper负责维护和协调broker。当Kafka系统中新增了broker或者某个broker发生故障失效时，由ZooKeeper通知生产者和消费者。生产者和消费者依据Zookeeper的broker状态信息与broker协调数据的发布和订阅任务。</li>
<li>Producer：生产者将数据推送到broker上，当集群中出现新的broker时，所有的生产者将会搜寻到这个新的broker，并自动将数据发送到这个broker上。</li>
<li>Consumer：因为Kafka的broker是无状态的，所以consumer必须使用partition offset来记录消费了多少数据。如果一个consumer指定了一个topic的offset，意味着该consumer已经消费了该offset之前的所有数据。consumer可以通过指定offset，从topic的指定位置开始消费数据。consumer的offset存储在Zookeeper中。</li>
</ul>
<h2 id="Kafka工作流程"><a href="#Kafka工作流程" class="headerlink" title="Kafka工作流程"></a>Kafka工作流程</h2><p>Kafka将某topic的数据存储到一个或多个partition中。一个partition内数据是有序的，每条数据都有一个唯一的index，这个index叫做offset。新来的数据追加到partition的尾部。每条数据可以在不同的broker上做备份，从而保证了Kafka使用的可靠性。</p>
<p>生产者将消息发送到topic中，消费者可以选择多种消费方式消费Kafka中的数据。下面介绍两种消费方式的流程。</p>
<h3 id="一个消费者订阅数据："><a href="#一个消费者订阅数据：" class="headerlink" title="一个消费者订阅数据："></a>一个消费者订阅数据：</h3><ul>
<li>生产者将数据发送到指定topic中</li>
<li>Kafka将数据以partition的方式存储到broker上。Kafka支持数据均衡，例如生产者生成了两条消息，topic有两个partition，那么Kafka将在两个partition上分别存储一条消息</li>
<li>消费者订阅指定topic的数据</li>
<li>当消费者订阅topic中消息时，Kafka将当前的offset发给消费者，同时将offset存储到Zookeeper中</li>
<li>消费者以特定的间隔（如100ms）向Kafka请求数据</li>
<li>当Kafka接收到生产者发送的数据时，Kafka将这些数据推送给消费者</li>
<li>消费者受到Kafka推送的数据，并进行处理</li>
<li>当消费者处理完该条消息后，消费者向Kafka broker发送一个该消息已被消费的反馈</li>
<li>当Kafka接到消费者的反馈后，Kafka更新offset包括Zookeeper中的offset。</li>
<li>以上过程一直重复，直到消费者停止请求数据</li>
<li>消费者可以重置offset，从而可以灵活消费存储在Kafka上的数据</li>
</ul>
<h3 id="消费者组数据消费流程"><a href="#消费者组数据消费流程" class="headerlink" title="消费者组数据消费流程"></a>消费者组数据消费流程</h3><p>Kafka支持消费者组内的多个消费者同时消费一个topic，一个消费者组由具有同一个Group ID的多个消费者组成。具体流程如下：</p>
<ol>
<li>生产者发送数据到指定的topic</li>
<li>Kafka将数据存储到broker上的partition中</li>
<li>假设现在有一个消费者订阅了一个topic，topic名字为“test”，消费者的Group ID为“Group1”</li>
<li>此时Kafka的处理方式与只有一个消费者的情况一样</li>
<li>当Kafka接收到一个同样Group ID为“Group1”、消费的topic同样为“test”的消费者的请求时，Kafka把数据操作模式切换为分享模式，此时数据将在两个消费者上共享。</li>
<li>当消费者的数目超过topic的partition数目时，后来的消费者将消费不到Kafka中的数据。因为在Kafka给每一个消费者消费者至少分配一个partition，一旦partition都被指派给消费者了，新来的消费者将不会再分配partition。即一个partition只能分配给一个消费者，一个消费者可以消费多个partition。</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="http://kafka.apache.org/" target="_blank" rel="noopener">Apache Kafka</a></p>
<h2 id="安装zookeeper依赖"><a href="#安装zookeeper依赖" class="headerlink" title="安装zookeeper依赖"></a>安装zookeeper依赖</h2><p><a href="http://zookeeper.apache.org/" target="_blank" rel="noopener">Apache ZooKeeper - Home</a><br>启动kafka很简单，配置好前置的操作后，先进入zookeeper的目录下，启动zookeeper,可以单独安装,也可以使用kafka中集成的zookeeper,默认在bin目录下有zookeeper的启动脚本,zookeeper和kafka的配置均在kafka安装包下的config目录下,下面采用单独安装kafka的方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;soft&#x2F;zookeeper</span><br><span class="line">&#x2F;&#x2F; 启动脚本使用方法</span><br><span class="line">Usage: .&#x2F;bin&#x2F;zkServer.sh &#123;start|start-foreground|stop|restart|status|upgrade|print-cmd&#125;</span><br><span class="line">&#x2F;&#x2F; 启动Zookeeper</span><br><span class="line">.&#x2F;bin&#x2F;zkServer.sh  start</span><br><span class="line">&#x2F;&#x2F; 关闭Zookeeper</span><br><span class="line">.&#x2F;bin&#x2F;zkServer.sh  stop</span><br><span class="line">&#x2F;&#x2F; 查看进程是否启动</span><br><span class="line">ps -ef | grep zookeepe</span><br></pre></td></tr></table></figure>
<p>PS：因为kafka是需要注册在zookeeper上面，通过zookeeper进行管理和调度的，所以启动kafka之前，我们必须要启动zookeeper。</p>
<h2 id="2-kafka安装"><a href="#2-kafka安装" class="headerlink" title="2. kafka安装"></a>2. kafka安装</h2><p>随后我们进入Kafka目录下，启动kafka，具体操作命令如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;kafka_2.11-1.0.0</span><br><span class="line">&#x2F;&#x2F; 修改配置</span><br><span class="line">vim &#x2F;usr&#x2F;local&#x2F;kafka&#x2F;config&#x2F;server.properties  kafka配置</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;kafka&#x2F;config&#x2F;zookeeper.properties   kafka集成的zookeeper配置</span><br><span class="line">&#x2F;&#x2F; 启动kafka</span><br><span class="line">.&#x2F;bin&#x2F;kafka-server-start.sh -daemon .&#x2F;config&#x2F;server.properties</span><br><span class="line">&#x2F;&#x2F; 查看</span><br><span class="line">jps -lm</span><br><span class="line">11776 &#x2F;usr&#x2F;local&#x2F;cerebro-0.7.2&#x2F;lib&#x2F;cerebro.cerebro-0.7.2-launcher.jar</span><br><span class="line">1392 &#x2F;usr&#x2F;share&#x2F;jenkins&#x2F;jenkins.war --webroot&#x3D;&#x2F;var&#x2F;cache&#x2F;jenkins&#x2F;war --httpPort&#x3D;8080</span><br><span class="line">24209 sun.tools.jps.Jps -lm</span><br><span class="line">20867 com.github.ltsopensource.startup.jobtracker.JobTrackerStartup &#x2F;data&#x2F;soft&#x2F;lts&#x2F;conf&#x2F;zoo</span><br><span class="line">20755 com.github.ltsopensource.startup.admin.JettyContainer &#x2F;data&#x2F;soft&#x2F;lts</span><br><span class="line">7972 org.apache.zookeeper.server.quorum.QuorumPeerMain &#x2F;data&#x2F;soft&#x2F;zookeeper-3.3.6&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfg</span><br><span class="line">10486 kafka.Kafka ..&#x2F;config&#x2F;server.properties</span><br><span class="line">12029 com.quantifind.kafka.offsetapp.OffsetGetterWeb --zk 127.0.0.1:2181 --port 9001 --refresh 10.seconds --retain 2.days</span><br><span class="line">11471 org.elasticsearch.bootstrap.Elasticsearch</span><br><span class="line">PS: 可以看到zookeeper和kafka都已经运行起来了，当然这个是单机的命令，集群的命令后面再讲。</span><br></pre></td></tr></table></figure>

<h2 id="kafka常用命令总结"><a href="#kafka常用命令总结" class="headerlink" title="kafka常用命令总结"></a>kafka常用命令总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 查看topic的详细信息</span><br><span class="line">bin&#x2F;kafka-topics.sh -zookeeper 127.0.0.1:2181 -describe -topic testKJ1</span><br><span class="line">2. 为topic增加副本</span><br><span class="line">bin&#x2F;kafka-reassign -partitions.sh -zookeeper 127.0.0.1:2181 -reassignment-json-file json&#x2F;partitions-to-move.json -execute</span><br><span class="line">3. 创建topic</span><br><span class="line">bin&#x2F;kafka-topics.sh --create --zookeeper localhost:2181 --replication -factor1 --partitions 1 --topic testKJ1</span><br><span class="line">4. 为topic增加partition</span><br><span class="line">bin&#x2F;bin&#x2F;kafka-topics.sh –zookeeper 127.0.0.1:2181 –alter –partitions2 –topic testKJ1</span><br><span class="line">5. kafka生产者客户端命令</span><br><span class="line">bin&#x2F;kafka-console-producer.sh --broker-list localhost:9092 --topic testKJ1</span><br><span class="line">6. kafka消费者客户端命令</span><br><span class="line">bin&#x2F;kafka-console-consumer.sh -zookeeper localhost:2181 --from-beginning --topic testKJ1</span><br><span class="line">7. kafka服务启动</span><br><span class="line">bin&#x2F;kafka-server-start.sh -daemon ..&#x2F;config&#x2F;server.properties</span><br><span class="line">8. 下线broker</span><br><span class="line">bin&#x2F;kafka-run-class.sh kafka.admin.ShutdownBroker --zookeeper 127.0.0.1:2181 --broker #brokerId# --num.retries3--retry.interval.ms 60</span><br><span class="line">shutdown broker</span><br><span class="line">9. 删除topic,只会删除zookeeper中的元数据，消息文件须手动删除</span><br><span class="line">bin&#x2F;kafka-run-class.sh kafka.admin.DeleteTopicCommand --topic testKJ1 --zookeeper 127.0.0.1:2181</span><br><span class="line">10. 查看topic消费进度</span><br><span class="line">这个会显示出consumer group的offset情况， 必须参数为--group， 不指定--topic，默认为所有topic</span><br><span class="line">查看consumer组内消费的offset</span><br><span class="line">bin&#x2F;kafka-run-class.sh kafka.tools.ConsumerOffsetChecker --zookeeper localhost:2181 --group test --topic testKJ1</span><br><span class="line">bin&#x2F;kafka-consumer-offset-checker.sh --zookeeper 192.168.0.201:12181 --group group1 --topic group1</span><br><span class="line">11. 列出所有的TOPIC</span><br><span class="line">bin&#x2F;kafka-topics.sh --zookeeper 127.0.0.1:2181 --list</span><br></pre></td></tr></table></figure>
<h2 id="Connecting-to-ZooKeeper"><a href="#Connecting-to-ZooKeeper" class="headerlink" title="Connecting to ZooKeeper"></a>Connecting to ZooKeeper</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. check status</span><br><span class="line">$ bin&#x2F;zkServer.sh status</span><br><span class="line">2. connect</span><br><span class="line">$ bin&#x2F;zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://zookeeper.apache.org/doc/current/zookeeperStarted.html" target="_blank" rel="noopener">ZooKeeper Getting Started Guide</a></p>
]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>世界上最小的Django项目示例</title>
    <url>/2020/04/20/%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E5%B0%8F%E7%9A%84Django%E9%A1%B9%E7%9B%AE%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="一-世界上最小的Django项目示例"><a href="#一-世界上最小的Django项目示例" class="headerlink" title="一. 世界上最小的Django项目示例"></a>一. 世界上最小的Django项目示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hello.py</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line">DEBUG &#x3D; os.environ.get(&quot;DEBUG&quot;,&quot;on&quot;) &#x3D;&#x3D; &quot;on&quot;</span><br><span class="line">SECRET_KEY &#x3D; os.environ.get(&quot;SECRET_KEY&quot;,&quot;&#123;&#123; secret_key &#125;&#125;&quot;)</span><br><span class="line">ALLOWED_HOSTS &#x3D; os.environ.get(&quot;ALLOWED_HOST&quot;,&quot;localhost&quot;).split(&quot;,&quot;)</span><br><span class="line"></span><br><span class="line">settings.configure(</span><br><span class="line">    DEBUG&#x3D;DEBUG,</span><br><span class="line">    SECRET_KEY&#x3D;SECRET_KEY,</span><br><span class="line">    ALLOWED_HOSTS&#x3D;ALLOWED_HOSTS,</span><br><span class="line">    ROOT_URLCONF&#x3D;__name__,</span><br><span class="line">    MIDDLEWARE_CLASSES&#x3D;(</span><br><span class="line">        &#39;django.middleware.common.CommonMiddleware&#39;,</span><br><span class="line">        &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</span><br><span class="line">        &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    return HttpResponse(&#39;Heello World&#39;)</span><br><span class="line">    </span><br><span class="line">urlpatters &#x3D; (</span><br><span class="line">    url(r&#39;^$&#39;,index),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">if __name &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    from django.core.management import execute_from_command_line</span><br><span class="line">    execute_from_command_line(sys.argv)</span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python hello.py runserver</span><br></pre></td></tr></table></figure>


<h2 id="二-使用gunincorn运行python服务"><a href="#二-使用gunincorn运行python服务" class="headerlink" title="二. 使用gunincorn运行python服务"></a>二. 使用gunincorn运行python服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat hello.py</span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.core.wsgi import get_wsgi_application</span><br><span class="line">from django.http import Httpresponse</span><br><span class="line"></span><br><span class="line">application &#x3D; get_wsgi_application()</span><br><span class="line"></span><br><span class="line">if __name &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">   from django.core.management import execute_from_command_line</span><br><span class="line">   execute_from_command_line(sys.argv)</span><br></pre></td></tr></table></figure>
<h3 id="安装gunicorn并运行"><a href="#安装gunicorn并运行" class="headerlink" title="安装gunicorn并运行"></a>安装gunicorn并运行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pip install gunicorn</span><br><span class="line"># gunicorn hello --log-file&#x3D;-</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>open-falcon 滴滴开源版本</title>
    <url>/2020/04/20/open-falcon-%E6%BB%B4%E6%BB%B4%E5%BC%80%E6%BA%90%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="Nightingale"><a href="#Nightingale" class="headerlink" title="Nightingale"></a>Nightingale</h2><blockquote>
<p>open falcon 开源版本滴滴实现<br><a href="https://n9e.didiyun.com/docs/" target="_blank" rel="noopener">https://n9e.didiyun.com/docs/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>DevOps</category>
        <category>open-falcon</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>open-falcon</tag>
      </tags>
  </entry>
  <entry>
    <title>利用P2P软件(Murder)大规模分发大文件</title>
    <url>/2020/04/20/%E5%88%A9%E7%94%A8P2P%E8%BD%AF%E4%BB%B6-Murder-%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%88%86%E5%8F%91%E5%A4%A7%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="利用P2P软件-Murder-大规模分发大文件"><a href="#利用P2P软件-Murder-大规模分发大文件" class="headerlink" title="利用P2P软件(Murder)大规模分发大文件"></a>利用P2P软件(Murder)大规模分发大文件</h2><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>当服务器多时，为了管理方便和提升效率，就会用到自动化管理工具（如Ansible）来自动部署和批量分发文件。</p>
<blockquote>
<p>场景描述：目前有50+台服务器，已部署Ansible用于自动化部署和批量分发文件。批量分发文件时，一般把文件传到 Ansible 所在的服务器并通过 copy或者synchronize 模块传输，文件小于100M时，分发正常。当传输大文件时（100M+），受单节点及其带宽的影响，整个分发过程变得非常缓慢，甚至出现Ansible卡死。</p>
</blockquote>
<p>使用 Ansible 来分发小文件速度很快，但对于大文件，文件分发就是一个很大的问题。在使用单一分布点和固定出口带宽的情况下，经常存在带宽拥堵、耗费时间长的问题。</p>
<p>对于大文件分发，首先想到的是 BitTorrent ，利用 P2P 协议实现快速分发，节省带宽，提高效率。</p>
<h2 id="P2P软件介绍"><a href="#P2P软件介绍" class="headerlink" title="P2P软件介绍"></a>P2P软件介绍</h2><p>为了解决上面的问题，这里我们使用 Murder </p>
<p><a href="https://github.com/lg/murder" target="_blank" rel="noopener">Murder</a>是 Twitter 的开源项目，很适合大文件分发。（该项目还能用，但官方已经不再继续维护）</p>
<p>项目介绍中有这么一段话：Large scale server deploys using BitTorrent and the BitTornado library</p>
<p>根据 Murder 开发者的博客，可以知道这个项目的来龙去脉：</p>
<blockquote>
<p>Twitter 在早期便依赖 Capistrano 来进行应用程序的部署，每当有新版本需要发布时，Capistrano 会根据预设好的各种设置和流程到 Twitter 所有的服务器上进行更新的操作。<br>在过去服务器还不多的情況下一切都很美好，但随着 Twitter 服务器数量的增长，到了几百台服务器时，事情已经不再像过去一样美好，甚至到后来拥有数千台服务器时，更新的操作会耗费 40 分钟。<br>Twitter 针对这个问题，认为问题的关键在于：使用集中式的系统，也就是所有的服务器要轮流排队到同一台版本控制系统上进行代码更新。</p>
</blockquote>
<p>Twitter 最初的想法是将版本控制系统也做出分散式的架构，服务器的代码更新就可以分散到不同的机器来压缩部署时间，但事实上版本控制系统即使分散在多台服务器上，这些服务器要更新文件也同样需要时间。<br>因此 Twitter 发现或许需要一个完全去中心化、最好是像 BitTorrent 这样的，利用 P2P 的特点让所有的节点都可以协助进行程序代码的更新。</p>
<p>从结果来看，在采用了 BitTorrent 的方式来更新代码，部署的时间从 40 分钟大幅减少到只要 12 秒！实在是非常惊人的改善，数千台服务器的代码更新居然只要短短 12 秒就能完成。</p>
<p>集中式架构和Murder架构对比:</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEBb17ecf2d648c399a8e681511fbeb8997?method=download&shareKey=7c1ea1579628222596f0e3e3f2d106ce" alt="image"></p>
<p><img src="https://note.youdao.com/yws/api/personal/file/WEB7aa1edd58d4910b55f320ba6f7c19327?method=download&shareKey=357ea31cc3b84346b9f99004fb033aef" alt="image"></p>
<h2 id="部署Murder"><a href="#部署Murder" class="headerlink" title="部署Murder"></a>部署Murder</h2><h3 id="Murder-组件介绍"><a href="#Murder-组件介绍" class="headerlink" title="Murder 组件介绍"></a>Murder 组件介绍</h3><p>Murder 是基于 BitTornado 来实现的。有以下几个主要组件：</p>
<ol>
<li>torrent tracker: tracker 使用 murder_tracker.py 运行，tracker 实际上是运行中一台服务器上的单个服务，其他任何成员都要依赖它。Murder为了保持简单，并没有实现tracker-less distribution（DHT）功能。tracker 实际上是个迷你的 httpd 服务，存放着BitTorrent客户端需要更新状态的路径。</li>
<li>seeder ：sender 是存放要分发到其他主机的文件的服务器。这些文件存放在 seeder 的一个目录中，Murder 会将这个目录打包成 tgz 格式并创建一个 .torrent 文件（非常小的文件，包含有关这个tgz文件的基本hash信息）。这个 .torrent 文件让各个 peer 节点知道他们下载的是什么文件。同时，tracker 会保持跟踪有哪些 .torrent 文件正在被分发。一旦 Murder 开始传输文件，seeder 服务器将是各个 peer 节点获取种子的地方。</li>
<li>peers ：peer 是成百上千需要接收文件的服务器，并且它们之间可以相互传输文件（下载、上传）。一旦一个peer节点下载完整个 tgz 文件，还将继续 seeding 一段时间，防止蜜罐效应。</li>
</ol>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在 tracker 服务器下载并安装 Murder，写成脚本运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line">wget https:&#x2F;&#x2F;codeload.github.com&#x2F;lg&#x2F;murder&#x2F;zip&#x2F;master</span><br><span class="line">mv master murder.zip</span><br><span class="line">unzip murder.zip</span><br><span class="line">mv murder-master &#x2F;usr&#x2F;local&#x2F;murder</span><br></pre></td></tr></table></figure>
<p>配置好 ansible 服务，连通各个 peer 节点。</p>
<p>通过 ansible 将tracker服务器下的 master.zip 分发到各个 peer 节点的家目录下，并解压安装 Murder ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ansible all -m copy -a &quot;src&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;murder.zip dest&#x3D;~&quot;</span><br><span class="line"># ansible all -m shell -a &quot;unzip murder.zip ; mv murder-master murder&quot;</span><br></pre></td></tr></table></figure>
<p>各个节点ip和环境说明：</p>
<ul>
<li>tracker : 192.168.1.100</li>
<li>seeder : 192.168.1.100</li>
<li>peers : 192.168.1.101-111</li>
<li>服务器都在同一个机房</li>
<li>都是 CentOS 6.5 系统</li>
</ul>
<h2 id="启动-tracker-服务"><a href="#启动-tracker-服务" class="headerlink" title="启动 tracker 服务"></a>启动 tracker 服务</h2><p>在 Tracker 服务器，启动 tracker 服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># python &#x2F;usr&#x2F;local&#x2F;murder&#x2F;dist&#x2F;murder_tracker.py &gt; &#x2F;var&#x2F;log&#x2F;murder_tracker.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>检查端口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># netstat -tnlp|grep 8998</span><br></pre></td></tr></table></figure>
<p>实时查看日志输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tailf &#x2F;var&#x2F;log&#x2F;murder_tracker.log</span><br></pre></td></tr></table></figure>
<p>配置防火墙（如果防火墙是关闭的，则不用此操作）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># iptables -I INPUT -s 192.168.100.0&#x2F;24 -p tcp --dport 8998 -j ACCEPT</span><br></pre></td></tr></table></figure>
<p>murder_tracker.py 实际上是调用 BitTornado/BT1/track.py 这个文件。 track.py 有很多参数，如果需要添加参数，可以修改 murder_tracker.py。</p>
<p>几个重要参数：</p>
<ul>
<li>port ：tracker 监听的端口，默认 8998</li>
<li>dfile ：存储近期下载信息的文件</li>
<li>logfile ：tracker 日志文件，默认是标准输出</li>
</ul>
<h2 id="在-seeder-服务器上准备要分发的文件并创建种子"><a href="#在-seeder-服务器上准备要分发的文件并创建种子" class="headerlink" title="在 seeder 服务器上准备要分发的文件并创建种子"></a>在 seeder 服务器上准备要分发的文件并创建种子</h2><p>这里将 seeder 和 tracker 服务 放在同一台服务器。<br>准备分发文件，并放在 /home/data/murder/ 目录下。</p>
<p>生成种子文件的脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 定义变量</span><br><span class="line">deploy_file&#x3D;&#x2F;home&#x2F;data&#x2F;murder&#x2F;deploy.test.tar.gz</span><br><span class="line"># 因所有peer节点已经打通内网，这里用seeder服务器的内网地址</span><br><span class="line">Seeder_IP&#x3D;192.168.1.100</span><br><span class="line">make_torrent_command&#x3D;&#x2F;usr&#x2F;local&#x2F;murder&#x2F;dist&#x2F;murder_make_torrent.py</span><br><span class="line"># 生成种子</span><br><span class="line">python $&#123;make_torrent_command&#125; $&#123;deploy_file&#125; $&#123;Seeder_IP&#125;:8998 $&#123;deploy_file&#125;.torrent</span><br></pre></td></tr></table></figure>

<h2 id="分发种子文件给所有的peer节点"><a href="#分发种子文件给所有的peer节点" class="headerlink" title="分发种子文件给所有的peer节点"></a>分发种子文件给所有的peer节点</h2><p>利用 ansible 分发seeder服务器上的种子文件给所有的 peer 节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ansible all -m synchronize -a &quot;src&#x3D;&#x2F;home&#x2F;data&#x2F;murder&#x2F;deploy.test.tar.gz.torrent dest&#x3D;~&quot;</span><br></pre></td></tr></table></figure>
<h2 id="启动-seeder-服务"><a href="#启动-seeder-服务" class="headerlink" title="启动 seeder 服务"></a>启动 seeder 服务</h2><p>启动 seeder 服务的脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 定义变量</span><br><span class="line">deploy_file&#x3D;&#x2F;home&#x2F;data&#x2F;murder&#x2F;deploy.test.tar.gz</span><br><span class="line">start_ip&#x3D;192.168.1.100</span><br><span class="line">make_torrent_command&#x3D;&#x2F;usr&#x2F;local&#x2F;murder&#x2F;dist&#x2F;murder_client.py</span><br><span class="line"></span><br><span class="line"># 启动 seeder，放到后台运行</span><br><span class="line">python $&#123;make_torrent_command&#125; seed $&#123;deploy_file&#125;.torrent $&#123;deploy_file&#125; $&#123;start_ip&#125; &amp;</span><br></pre></td></tr></table></figure>
<p>要确保 seeder 服务在启动状态，否则 peer 节点下载时连接不到。</p>
<p>在各个peer节点执行下载任务<br>编写下载脚本 peer_download.sh ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 用于各个 peer 节点根据种子文件信息，执行下载任务</span><br><span class="line"># 定义变量</span><br><span class="line">torrent_file&#x3D;~&#x2F;deploy.test.tar.gz.torrent</span><br><span class="line">download_file&#x3D;~&#x2F;download&#x2F;deploy.test.tar.gz</span><br><span class="line"># 这里获取各个 peer 节点自己的内网IP</span><br><span class="line">local_ip&#x3D;$(hostname -I|awk &#39;&#123;print $2&#125;&#39;)</span><br><span class="line">murder_client_bin&#x3D;~&#x2F;murder&#x2F;dist&#x2F;murder_client.py</span><br><span class="line"># 在各个 peer 节点执行 P2P 下载命令</span><br><span class="line">python  $murder_client_bin peer $torrent_file $download_file $local_ip</span><br></pre></td></tr></table></figure>
<p>利用ansible远程操控，在每个peer节点都执行下载脚本。使用ansible的 script 模块，在本地写一个脚本，然后在远程服务器执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ansible all -m script -a &quot;peer_download.sh&quot;</span><br></pre></td></tr></table></figure>
<h2 id="下载速度分析"><a href="#下载速度分析" class="headerlink" title="下载速度分析"></a>下载速度分析</h2><p>Murder 默认是服务器都存于一个数据中心的彼此相互信任的内网，并且每台服务器都是关闭防火墙的。</p>
<p>Murder 封装的是 BitTornado，在 BitTornado/download_bt1.py 代码中默认是启动一个 10000-60000 范围的随机端口，每个 peer 在下载的同时向其他 peer 提供下载服务也是通过这个随机端口。</p>
<p>对于端口的配置，把防火墙关了当然好，当然为了安全，还是开放端口更好。然而开放这个大的端口范围，肯定是不行的，这里选择开放 10000-10500 500个端口，只允许内网IP访问。</p>
<p>在各个 peer 节点中配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># iptables -I INPUT -s 192.168.1.0&#x2F;24 -p tcp --dport 10000:10500 -j ACCEPT</span><br></pre></td></tr></table></figure>
<p>并且在 dist/BitTornado/download_bt1.py 中修改代码的端口范围：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&#39;minport&#39;, 10000, &#39;minimum port to listen on, counts up if unavailable&#39;),</span><br><span class="line">(&#39;maxport&#39;, 10500, &#39;maximum port to listen on&#39;),</span><br><span class="line">(&#39;random_port&#39;, 1, &#39;whether to choose randomly inside the port range &#39; + &#39;instead of counting up linearly&#39;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这一步最好在把Murder代码分发到各个peer节点前做，如果已经做了，只能重新分发覆盖了。</p>
</blockquote>
<p>分发测试的机器有11台，都是内网IP，千兆路由器，但防火墙开启，测试文件有 560 M 大小。</p>
<ul>
<li>第一次分发：没有配好防火墙，用时 5m 分发完成。</li>
<li>第二次分发：配好了防火墙，用时 2m30s 分发完成。</li>
<li>第三次分发：不用Murder，用 ansible 直接分发，用时 36s 分发完成。<br>这里测试的服务器还是太少，服务器越多时，P2P方式分发文件速度越快。服务器不超过50+时，还是用 ansible 直接分发更快。</li>
</ul>
<p>文件都下载完后，关闭 seeder 服务器进程<br>kill 掉 seeder 的进程PID，避免它一直做种子和提升安全性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pgrep -f seed|xargs kill -9</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.51cto.com/john88wang/1793080" target="_blank" rel="noopener">结合P2P软件使用Ansible分发大文件</a><br><a href="http://jaminzhang.github.io/p2p/use-Murder-to-distribute-big-software-package-in-production-environment/" target="_blank" rel="noopener">Murder 在生产环境中分发大软件包的应用</a><br><a href="https://wuyanteng.github.io/2017/10/12/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%ADP2P%E5%88%86%E5%8F%91%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%9A%84%E5%BA%94%E7%94%A8-Murder/" target="_blank" rel="noopener">在生产环境中-P2P分发大软件包的应用-Murder</a>  </p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Git命令清单-v0.1</title>
    <url>/2020/04/20/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95-v0-1/</url>
    <content><![CDATA[<h2 id="常用Git命令清单"><a href="#常用Git命令清单" class="headerlink" title="常用Git命令清单"></a>常用Git命令清单</h2><blockquote>
<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>
</blockquote>
<h3 id="名次解释"><a href="#名次解释" class="headerlink" title="名次解释"></a>名次解释</h3><p><img src="https://note.youdao.com/yws/api/personal/file/WEB392fff8491cd94960a8296d7607e51b4?method=download&shareKey=e5b3ec746227b33cc6120efe14ca3fde" alt="image"><br>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下:<br>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p>
<h3 id="一-新建代码库"><a href="#一-新建代码库" class="headerlink" title="一. 新建代码库"></a>一. 新建代码库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure>

<h3 id="二-配置"><a href="#二-配置" class="headerlink" title="二.配置"></a>二.配置</h3><p>Git的设置文件为.gitconfig，它可以在用户主目录下(全局配置)，也可以在项目目录下(项目配置)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br><span class="line"></span><br><span class="line"># 颜色设置</span><br><span class="line">git config --global color.ui true                         # git status等命令自动着色</span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --unset http.proxy                    # remove  proxy configuration on git</span><br></pre></td></tr></table></figure>

<h3 id="三-增加-删除文件"><a href="#三-增加-删除文件" class="headerlink" title="三. 增加/删除文件"></a>三. 增加/删除文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>

<h3 id="四-代码提交"><a href="#四-代码提交" class="headerlink" title="四. 代码提交"></a>四. 代码提交</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 将add和commit合为一步</span><br><span class="line">$ git commit -am &#39;message&#39;</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<h3 id="五-分支"><a href="#五-分支" class="headerlink" title="五. 分支"></a>五. 分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote&#x2F;branch]</span><br><span class="line"></span><br><span class="line"># 检出版本v2.0</span><br><span class="line">$ git checkout v2.0</span><br><span class="line"></span><br><span class="line"># 从远程分支develop创建新本地分支devel并检出</span><br><span class="line">$ git checkout -b devel origin&#x2F;develop</span><br><span class="line"></span><br><span class="line"># 检出head版本的README文件（可用于修改错误回退）</span><br><span class="line">git checkout -- README</span><br></pre></td></tr></table></figure>

<h3 id="六-标签"><a href="#六-标签" class="headerlink" title="六. 标签"></a>六. 标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs&#x2F;tags&#x2F;[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>

<h3 id="七-查看信息"><a href="#七-查看信息" class="headerlink" title="七. 查看信息"></a>七. 查看信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty&#x3D;format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>

<h3 id="八-远程同步"><a href="#八-远程同步" class="headerlink" title="八. 远程同步"></a>八. 远程同步</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure>

<h3 id="九-撤销"><a href="#九-撤销" class="headerlink" title="九. 撤销"></a>九. 撤销</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<h3 id="十-其他"><a href="#十-其他" class="headerlink" title="十. 其他"></a>十. 其他</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init                                                  # 初始化本地git仓库（创建新仓库）</span><br><span class="line">git config --global user.name &quot;xxx&quot;                       # 配置用户名</span><br><span class="line">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</span><br><span class="line">git config --global color.ui true                         # git status等命令自动着色</span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --unset http.proxy                    # remove  proxy configuration on git</span><br><span class="line">git clone git+ssh:&#x2F;&#x2F;git@192.168.53.168&#x2F;VT.git             # clone远程仓库</span><br><span class="line">git status                                                # 查看当前版本状态（是否修改）</span><br><span class="line">git add xyz                                               # 添加xyz文件至index</span><br><span class="line">git add .                                                 # 增加当前子目录下所有更改过的文件至index</span><br><span class="line">git commit -m &#39;xxx&#39;                                       # 提交</span><br><span class="line">git commit --amend -m &#39;xxx&#39;                               # 合并上一次提交（用于反复修改）</span><br><span class="line">git commit -am &#39;xxx&#39;                                      # 将add和commit合为一步</span><br><span class="line">git rm xxx                                                # 删除index中的文件</span><br><span class="line">git rm -r *                                               # 递归删除</span><br><span class="line">git log                                                   # 显示提交日志</span><br><span class="line">git log -1                                                # 显示1行日志 -n为n行</span><br><span class="line">git log -5</span><br><span class="line">git log --stat                                            # 显示提交日志及相关变动文件</span><br><span class="line">git log -p -m</span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</span><br><span class="line">git show dfb02                                            # 可只用commitid的前几位</span><br><span class="line">git show HEAD                                             # 显示HEAD提交日志</span><br><span class="line">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span><br><span class="line">git tag                                                   # 显示已存在的tag</span><br><span class="line">git tag -a v2.0 -m &#39;xxx&#39;                                  # 增加v2.0的tag</span><br><span class="line">git show v2.0                                             # 显示v2.0的日志及详细内容</span><br><span class="line">git log v2.0                                              # 显示v2.0的日志</span><br><span class="line">git diff                                                  # 显示所有未添加至index的变更</span><br><span class="line">git diff --cached                                         # 显示所有已添加index但还未commit的变更</span><br><span class="line">git diff HEAD^                                            # 比较与上一个版本的差异</span><br><span class="line">git diff HEAD -- .&#x2F;lib                                    # 比较与HEAD版本lib目录的差异</span><br><span class="line">git diff origin&#x2F;master..master                            # 比较远程分支master上有本地分支master上没有的</span><br><span class="line">git diff origin&#x2F;master..master --stat                     # 只显示差异的文件，不显示具体内容</span><br><span class="line">git remote add origin git+ssh:&#x2F;&#x2F;git@192.168.53.168&#x2F;VT.git # 增加远程定义（用于push&#x2F;pull&#x2F;fetch）</span><br><span class="line">git branch                                                # 显示本地分支</span><br><span class="line">git branch --contains 50089                               # 显示包含提交50089的分支</span><br><span class="line">git branch -a                                             # 显示所有分支</span><br><span class="line">git branch -r                                             # 显示所有原创分支</span><br><span class="line">git branch --merged                                       # 显示所有已合并到当前分支的分支</span><br><span class="line">git branch --no-merged                                    # 显示所有未合并到当前分支的分支</span><br><span class="line">git branch -m master master_copy                          # 本地分支改名</span><br><span class="line">git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出</span><br><span class="line">git checkout -b master master_copy                        # 上面的完整版</span><br><span class="line">git checkout features&#x2F;performance                         # 检出已存在的features&#x2F;performance分支</span><br><span class="line">git checkout --track hotfixes&#x2F;BJVEP933                    # 检出远程分支hotfixes&#x2F;BJVEP933并创建本地跟踪分支</span><br><span class="line">git checkout v2.0                                         # 检出版本v2.0</span><br><span class="line">git checkout -b devel origin&#x2F;develop                      # 从远程分支develop创建新本地分支devel并检出</span><br><span class="line">git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）</span><br><span class="line">git merge origin&#x2F;master                                   # 合并远程master分支至当前分支</span><br><span class="line">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改</span><br><span class="line">git push origin master                                    # 将当前分支push到远程master分支</span><br><span class="line">git push origin :hotfixes&#x2F;BJVEP933                        # 删除远程仓库的hotfixes&#x2F;BJVEP933分支</span><br><span class="line">git push --tags                                           # 把所有tag推送到远程仓库</span><br><span class="line">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）</span><br><span class="line">git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支</span><br><span class="line">git pull origin master                                    # 获取远程分支master并merge到当前分支</span><br><span class="line">git mv README README2                                     # 重命名文件README为README2</span><br><span class="line">git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）</span><br><span class="line">git rebase</span><br><span class="line">git branch -d hotfixes&#x2F;BJVEP933                           # 删除分支hotfixes&#x2F;BJVEP933（本分支修改已合并到其他分支）</span><br><span class="line">git branch -D hotfixes&#x2F;BJVEP933                           # 强制删除分支hotfixes&#x2F;BJVEP933</span><br><span class="line">git ls-files                                              # 列出git index包含的文件</span><br><span class="line">git show-branch                                           # 图示当前分支历史</span><br><span class="line">git show-branch --all                                     # 图示所有分支历史</span><br><span class="line">git whatchanged                                           # 显示提交历史对应的文件修改</span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span><br><span class="line">git ls-tree HEAD                                          # 内部命令：显示某个git对象</span><br><span class="line">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH</span><br><span class="line">git reflog                                                # 显示所有提交，包括孤立节点</span><br><span class="line">git show HEAD@&#123;5&#125;</span><br><span class="line">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态</span><br><span class="line">git log --pretty&#x3D;format:&#39;%h %s&#39; --graph                   # 图示提交日志</span><br><span class="line">git show HEAD~3</span><br><span class="line">git show -s --pretty&#x3D;raw 2be7fcb476</span><br><span class="line">git stash                                                 # 暂存当前修改，将所有至为HEAD状态</span><br><span class="line">git stash list                                            # 查看所有暂存</span><br><span class="line">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存</span><br><span class="line">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存</span><br><span class="line">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”</span><br><span class="line">git grep -e &#39;#define&#39; --and -e SORT_DIRENT</span><br><span class="line">git gc</span><br><span class="line">git fsck</span><br><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>

<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用 Git 命令清单 - 阮一峰的网络日志</a><br><a href="http://www.cnblogs.com/wupeiqi/p/7295372.html" target="_blank" rel="noopener">老铁，这年头不会点Git真不行</a><br><a href="https://gist.github.com/guweigang/9848271" target="_blank" rel="noopener">一些命令-github</a><br><a href="https://github.com/geeeeeeeeek/git-recipes/wiki" target="_blank" rel="noopener">Home-geeeeeeeeek/git-recipes Wiki-GitHub</a>  </p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>如何禁用自动命名的Django迁移</title>
    <url>/2020/04/20/%E5%A6%82%E4%BD%95%E7%A6%81%E7%94%A8%E8%87%AA%E5%8A%A8%E5%91%BD%E5%90%8D%E7%9A%84Django%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<h2 id="如何禁用自动命名的Django迁移"><a href="#如何禁用自动命名的Django迁移" class="headerlink" title="如何禁用自动命名的Django迁移"></a>如何禁用自动命名的Django迁移</h2><blockquote>
<p>本文主要介绍如何在<code>Django</code>执行<code>makemigrations</code>时完成文件的命名</p>
</blockquote>
<p>当你运行Django的manage.py makemigrations时，它将根据迁移的内容为迁移生成一个名称。例如，如果你是在添加单个字段，它会将迁移命名为0002_mymodel_myfield.py。但是，当你的迁移中包含不止一步操作时，它将使用一个简单的‘auto’和当前日期+时间进行命名，例如，0002_auto_20200113_1837.py。你可以为makemigrations提供-n/–name参数，但是开发人员经常会忘记这一点。</p>
<p>命名是编程中一个众所周知的难题。管理这些具有自动名称的迁移会很困难: 如果不打开它们，你就无法分辨哪个是哪个，而且如果它们是在同一天生成的，它们就会有相同的名称，那你就可能会混淆它们。</p>
<p>这在以下情况中会非常令人头疼:</p>
<ul>
<li>变基分支</li>
<li>挖掘历史记录</li>
<li>部署到生产环境</li>
</ul>
<p>在最坏的情况下，运行错误的迁移可能会导致数据丢失!<br>我们还很容易忘记修改迁移名称和提交，因为Django不会提示你输入一个更好的名称。我们可以通过一些自动化措施来防范这种情况!</p>
<p>让我们来看看实现这一点的三种技术。</p>
<ol>
<li><strong>重写makemigrations以要求提供 -n/–name</strong><br>这个方法使用了重写内置管理命令的技术，这与我在文章《让Django测试总是重新构建数据库(如果它存在的话)》中使用的技术相同。</li>
</ol>
<p>在你的项目的“核心”应用程序中添加一个新的makemigrations命令(例如:myapp/management/commands/makemigrations.py)，内容如下:</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>值得看的7本书</title>
    <url>/2020/04/20/%E5%80%BC%E5%BE%97%E7%9C%8B%E7%9A%847%E6%9C%AC%E4%B9%A6/</url>
    <content><![CDATA[<h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><ol>
<li>穷爸爸富爸爸</li>
<li>见识</li>
<li>被讨厌的勇气</li>
<li>情绪勒索</li>
<li>苏菲的世界</li>
<li>秘密</li>
<li>就这样，我睡了全世界的沙发</li>
</ol>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>操作excel</title>
    <url>/2020/04/20/%E6%93%8D%E4%BD%9Cexcel/</url>
    <content><![CDATA[<h2 id="读取excel"><a href="#读取excel" class="headerlink" title="读取excel"></a>读取excel</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import xlrd</span><br><span class="line">from xlrd.book import Book</span><br><span class="line">from xlrd.sheet import Sheet</span><br><span class="line">from xlrd.sheet import Cell</span><br><span class="line"></span><br><span class="line">workbook &#x3D; xlrd.open_workbook(&#39;基础课程大纲.xlsx&#39;)</span><br><span class="line"></span><br><span class="line">sheet_names &#x3D; workbook.sheet_names()</span><br><span class="line"></span><br><span class="line"># sheet &#x3D; workbook.sheet_by_name(&#39;工作表1&#39;)</span><br><span class="line">sheet &#x3D; workbook.sheet_by_index(1)</span><br><span class="line"></span><br><span class="line"># 循环Excel文件的所有行</span><br><span class="line">for row in sheet.get_rows():</span><br><span class="line">    # 循环一行的所有列</span><br><span class="line">    for col in row:</span><br><span class="line">        # 获取一个单元格中的值</span><br><span class="line">        print(col.value)</span><br></pre></td></tr></table></figure>
<h2 id="写excel"><a href="#写excel" class="headerlink" title="写excel"></a>写excel</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import xlwt</span><br><span class="line"></span><br><span class="line">wb &#x3D; xlwt.Workbook()</span><br><span class="line">sheet &#x3D; wb.add_sheet(&#39;sheet1&#39;)</span><br><span class="line"></span><br><span class="line">for row in range(10):</span><br><span class="line">    for col in range(5):</span><br><span class="line">        sheet.write(row, col, &#39;第&#123;0&#125;行第&#123;1&#125;列&#39;.format(row, col))</span><br><span class="line"></span><br><span class="line">wb.save(&#39;xxx.xls&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 更多示例：https:&#x2F;&#x2F;github.com&#x2F;python-excel&#x2F;xlwt&#x2F;tree&#x2F;master&#x2F;examples</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>日期格式转换</title>
    <url>/2020/04/20/%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="日期格式转换"><a href="#日期格式转换" class="headerlink" title="日期格式转换"></a>日期格式转换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2017&#x2F;9&#x2F;11</span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line">from datetime import date</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">class JsonCustomEncoder(json.JSONEncoder):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    处理datetime格式数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def default(self, field):</span><br><span class="line">        if isinstance(field, datetime):</span><br><span class="line">            return field.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)</span><br><span class="line">        elif isinstance(field, date):</span><br><span class="line">            return field.strftime(&#39;%Y-%m-%d&#39;)</span><br><span class="line">        else:</span><br><span class="line">            return json.JSONEncoder.default(self, field)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>改善Python程序的91个建议</title>
    <url>/2020/04/20/%E6%94%B9%E5%96%84Python%E7%A8%8B%E5%BA%8F%E7%9A%8491%E4%B8%AA%E5%BB%BA%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="改善Python程序的91个建议"><a href="#改善Python程序的91个建议" class="headerlink" title="改善Python程序的91个建议"></a>改善Python程序的91个建议</h2><h3 id="1：引论"><a href="#1：引论" class="headerlink" title="1：引论"></a>1：引论</h3><p>建议1、理解Pythonic概念—-详见Python中的《Python之禅》</p>
<p>建议2、编写Pythonic代码</p>
<p>（1）避免不规范代码，比如只用大小写区分变量、使用容易混淆的变量名、害怕过长变量名等。有时候长的变量名会使代码更加具有可读性。</p>
<p>（2）深入学习Python相关知识，比如语言特性、库特性等，比如Python演变过程等。深入学习一两个业内公认的Pythonic的代码库，比如Flask等。</p>
<p>建议3：理解Python与C的不同之处，比如缩进与{}，单引号双引号，三元操作符？，Switch-Case语句等。</p>
<p>建议4：在代码中适当添加注释</p>
<p>建议5：适当添加空行使代码布局更加合理</p>
<p>建议6：编写函数的4个原则</p>
<p>（1）函数设计要尽量短小，嵌套层次不宜过深</p>
<p>（2）函数声明应该做到合理、简单、易用</p>
<p>（3）函数参数设计应该考虑向下兼容</p>
<p>（4）一个函数只做一件事，尽量保证函数粒度的一致性</p>
<p>建议7：将常量集中在一个文件，且常量名尽量使用全大写字母</p>
<h3 id="2：编程惯用法"><a href="#2：编程惯用法" class="headerlink" title="2：编程惯用法"></a>2：编程惯用法</h3><p>建议8：利用assert语句来发现问题，但要注意，断言assert会影响效率</p>
<p>建议9：数据交换值时不推荐使用临时变量，而是直接a, b = b, a</p>
<p>建议10：充分利用惰性计算（Lazy evaluation）的特性，从而避免不必要的计算</p>
<p>建议11：理解枚举替代实现的缺陷（最新版Python中已经加入了枚举特性）</p>
<p>建议12：不推荐使用type来进行类型检查，因为有些时候type的结果并不一定可靠。如果有需求，建议使用isinstance函数来代替</p>
<p>建议13：尽量将变量转化为浮点类型后再做除法（Python3以后不用考虑）</p>
<p>建议14：警惕eval()函数的安全漏洞，有点类似于SQL注入</p>
<p>建议15：使用enumerate()同时获取序列迭代的索引和值</p>
<p>建议16：分清==和is的适用场景，特别是在比较字符串等不可变类型变量时（详见评论）</p>
<p>建议17：尽量使用Unicode。在Python2中编码是很让人头痛的一件事，但Python3就不用过多考虑了</p>
<p>建议18：构建合理的包层次来管理Module</p>
<h3 id="3：基础用法"><a href="#3：基础用法" class="headerlink" title="3：基础用法"></a>3：基础用法</h3><p>建议19：有节制的使用from…import语句，防止污染命名空间</p>
<p>建议20：优先使用absolute import来导入模块（Python3中已经移除了relative import）</p>
<p>建议21：i+=1不等于++i，在Python中，++i前边的加号仅表示正，不表示操作</p>
<p>建议22：习惯使用with自动关闭资源，特别是在文件读写中</p>
<p>建议23：使用else子句简化循环（异常处理）</p>
<p>建议24：遵循异常处理的几点基本原则</p>
<p>（1）注意异常的粒度，try块中尽量少写代码</p>
<p>（2）谨慎使用单独的except语句，或except Exception语句，而是定位到具体异常</p>
<p>（3）注意异常捕获的顺序，在合适的层次处理异常</p>
<p>（4）使用更加友好的异常信息，遵守异常参数的规范</p>
<p>建议25：避免finally中可能发生的陷阱</p>
<p>建议26：深入理解None，正确判断对象是否为空。Python中下列数据会判断为空：<br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/iciaMJDiaNTbG52ZVEtvvWrJdfxjeHnC0h2nJcvp2sZwpqMdESQCm3pUhzcPcBsOyWfj6NJ0vIT3D6AVHMzZLCjmA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="空值判断"><br>建议27：连接字符串应优先使用join函数，而不是+操作</p>
<p>建议28：格式化字符串时尽量使用.format函数，而不是%形式</p>
<p>建议29：区别对待可变对象和不可变对象，特别是作为函数参数时</p>
<p>建议30：[], {}和()：一致的容器初始化形式。使用列表解析可以使代码更清晰，同时效率更高</p>
<p>建议31：函数传参数，既不是传值也不是传引用，而是传对象或者说对象的引用</p>
<p>建议32：警惕默认参数潜在的问题，特别是当默认参数为可变对象时</p>
<p>建议33：函数中慎用变长参数args和*kargs</p>
<p>（1）这种使用太灵活，从而使得函数签名不够清晰，可读性较差</p>
<p>（2）如果因为函数参数过多而是用变长参数简化函数定义，那么一般该函数可以重构</p>
<p>建议34：深入理解str()和repr()的区别</p>
<p>（1）两者之间的目标不同：str主要面向客户，其目的是可读性，返回形式为用户友好性和可读性都比较高的字符串形式；而repr是面向Python解释器或者说Python开发人员，其目的是准确性，其返回值表示Python解释器内部的定义</p>
<p>（2）在解释器中直接输入变量，默认调用repr函数，而print(var)默认调用str函数</p>
<p>（3）repr函数的返回值一般可以用eval函数来还原对象</p>
<p>（4）两者分别调用对象的内建函数str__()和__repr()</p>
<p>建议35：分清静态方法staticmethod和类方法classmethod的使用场景</p>
<h3 id="4：库"><a href="#4：库" class="headerlink" title="4：库"></a>4：库</h3><p>建议36：掌握字符串的基本用法</p>
<p>建议37：按需选择sort()和sorted()函数</p>
<p>》sort()是列表在就地进行排序，所以不能排序元组等不可变类型。</p>
<p>》sorted()可以排序任意的可迭代类型，同时不改变原变量本身。</p>
<p>建议38：使用copy模块深拷贝对象，区分浅拷贝（shallow copy）和深拷贝（deep copy）</p>
<p>建议39：使用Counter进行计数统计，Counter是字典类的子类，在collections模块中</p>
<p>建议40：深入掌握ConfigParser</p>
<p>建议41：使用argparse模块处理命令行参数</p>
<p>建议42：使用pandas处理大型CSV文件</p>
<p>》Python本身提供一个CSV文件处理模块，并提供reader、writer等函数。</p>
<p>》Pandas可提供分块、合并处理等，适用于数据量大的情况，且对二维数据操作更方便。</p>
<p>建议43：使用ElementTree解析XML</p>
<p>建议44：理解模块pickle的优劣</p>
<p>》优势：接口简单、各平台通用、支持的数据类型广泛、扩展性强</p>
<p>》劣势：不保证数据操作的原子性、存在安全问题、不同语言之间不兼容</p>
<p>建议45：序列化的另一个选择JSON模块：load和dump操作</p>
<p>建议46：使用traceback获取栈信息</p>
<p>建议47：使用logging记录日志信息</p>
<p>建议48：使用threading模块编写多线程程序</p>
<p>建议49：使用Queue模块使多线程编程更安全</p>
<h3 id="5：设计模式"><a href="#5：设计模式" class="headerlink" title="5：设计模式"></a>5：设计模式</h3><p>建议50：利用模块实现单例模式</p>
<p>建议51：用mixin模式让程序更加灵活</p>
<p>建议52：用发布-订阅模式实现松耦合</p>
<p>建议53：用状态模式美化代码</p>
<h3 id="6：内部机制"><a href="#6：内部机制" class="headerlink" title="6：内部机制"></a>6：内部机制</h3><p>建议54：理解build-in对象</p>
<p>建议55：init__()不是构造方法，理解__new()与它之间的区别</p>
<p>建议56：理解变量的查找机制，即作用域</p>
<p>》局部作用域</p>
<p>》全局作用域</p>
<p>》嵌套作用域</p>
<p>》内置作用域</p>
<p>建议57：为什么需要self参数</p>
<p>建议58：理解MRO（方法解析顺序）与多继承</p>
<p>建议59：理解描述符机制</p>
<p>建议60：区别getattr__()与__getattribute()方法之间的区别</p>
<p>建议61：使用更安全的property</p>
<p>建议62：掌握元类metaclass</p>
<p>建议63：熟悉Python对象协议<br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/iciaMJDiaNTbG52ZVEtvvWrJdfxjeHnC0h2mTYUZQBgtMVG5BQzVEnnkMDu5U9MzPJp99DzicxZ6hUjT03ib6wicwalw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="内置方法"><br>建议64：利用操作符重载实现中缀语法</p>
<p>建议65：熟悉Python的迭代器协议</p>
<p>建议66：熟悉Python的生成器</p>
<p>建议67：基于生成器的协程和greenlet，理解协程、多线程、多进程之间的区别</p>
<p>建议68：理解GIL的局限性</p>
<p>建议69：对象的管理和垃圾回收</p>
<h3 id="7：使用工具辅助项目开发"><a href="#7：使用工具辅助项目开发" class="headerlink" title="7：使用工具辅助项目开发"></a>7：使用工具辅助项目开发</h3><p>建议70：从PyPI安装第三方包</p>
<p>建议71：使用pip和yolk安装、管理包</p>
<p>建议72：做paster创建包</p>
<p>建议73：理解单元测试的概念</p>
<p>建议74：为包编写单元测试</p>
<p>建议75：利用测试驱动开发（TDD）提高代码的可测性</p>
<p>建议76：使用Pylint检查代码风格</p>
<p>》代码风格审查</p>
<p>》代码错误检查</p>
<p>》发现重复以及不合理的代码，方便重构</p>
<p>》高度的可配置化和可定制化</p>
<p>》支持各种IDE和编辑器的集成</p>
<p>》能够基于Python代码生成UML图</p>
<p>》能够与Jenkins等持续集成工具相结合，支持自动代码审查</p>
<p>建议77：进行高效的代码审查</p>
<p>建议78：将包发布到PyPI</p>
<h3 id="8：性能剖析与优化"><a href="#8：性能剖析与优化" class="headerlink" title="8：性能剖析与优化"></a>8：性能剖析与优化</h3><p>建议79：了解代码优化的基本原则</p>
<p>建议80：借助性能优化工具</p>
<p>建议81：利用cProfile定位性能瓶颈</p>
<p>建议82：使用memory_profiler和objgraph剖析内存使用</p>
<p>建议83：努力降低算法复杂度</p>
<p>建议84：掌握循环优化的基本技巧</p>
<p>》减少循环内部的计算</p>
<p>》将显式循环改为隐式循环，当然这会牺牲代码的可读性</p>
<p>》在循环中尽量引用局部变量</p>
<p>》关注内层嵌套循环</p>
<p>建议85：使用生成器提高效率</p>
<p>建议86：使用不同的数据结构优化性能</p>
<p>建议87：充分利用set的优势</p>
<p>建议88：使用multiprocessing模块克服GIL缺陷</p>
<p>建议89：使用线程池提高效率</p>
<p>建议90：使用C/C++模块扩展提高性能</p>
<p>建议91：使用Cythonb编写扩展模块</p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>最常用的正则表达式大全</title>
    <url>/2020/04/20/%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h3 id="一-校验数字的表达式"><a href="#一-校验数字的表达式" class="headerlink" title="一. 校验数字的表达式"></a>一. 校验数字的表达式</h3><ol>
<li><p>数字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[0-9\]*$</span><br></pre></td></tr></table></figure>
</li>
<li><p>n位的数字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\\d&#123;n&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>至少n位的数字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\\d&#123;n,&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>m-n位的数字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\\d&#123;m,n&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>零和非零开头的数字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^(0|\[1-9\]\[0-9\]*)$</span><br></pre></td></tr></table></figure></li>
<li><p>非零开头的最多带两位小数的数字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^(\[1-9\]\[0-9\]*)+(.\[0-9\]&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure></li>
<li><p>带1-2位小数的正数或负数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure></li>
<li><p>正数、负数、和小数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^(\\-|\\+)?\\d+(\\.\\d+)?$</span><br></pre></td></tr></table></figure></li>
<li><p>有两位小数的正实数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[0-9\]+(.\[0-9\]&#123;2&#125;)?$</span><br></pre></td></tr></table></figure></li>
<li><p>有1~3位小数的正实数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[0-9\]+(.\[0-9\]&#123;1,3&#125;)?$</span><br></pre></td></tr></table></figure></li>
<li><p>非零的正整数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[1-9\]\\d*$ 或 ^(\[1-9\]\[0-9\]*)&#123;1,3&#125;$ 或 ^\\+?\[1-9\]\[0-9\]*$</span><br></pre></td></tr></table></figure></li>
<li><p>非零的负整数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\\-\[1-9\]\[\]0-9&quot;*$ 或 ^-\[1-9\]\\d*$</span><br></pre></td></tr></table></figure></li>
<li><p>非负整数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\\d+$ 或 ^\[1-9\]\\d*|0$</span><br></pre></td></tr></table></figure></li>
<li><p>非正整数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^-\[1-9\]\\d*|0$ 或 ^((-\\d+)|(0+))$</span><br></pre></td></tr></table></figure></li>
<li><p>非负浮点数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\\d+(\\.\\d+)?$ 或 ^\[1-9\]\\d*\\.\\d*|0\\.\\d*\[1-9\]\\d*|0?\\.0+|0$</span><br></pre></td></tr></table></figure></li>
<li><p>非正浮点数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-(\[1-9\]\\d*\\.\\d*|0\\.\\d*\[1-9\]\\d*))|0?\\.0+|0$</span><br></pre></td></tr></table></figure></li>
<li><p>正浮点数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[1-9\]\\d*\\.\\d*|0\\.\\d*\[1-9\]\\d*$ 或 ^((\[0-9\]+\\.\[0-9\]*\[1-9\]\[0-9\]*)|(\[0-9\]*\[1-9\]\[0-9\]*\\.\[0-9\]+)|(\[0-9\]*\[1-9\]\[0-9\]*))$</span><br></pre></td></tr></table></figure></li>
<li><p>负浮点数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^-(\[1-9\]\\d*\\.\\d*|0\\.\\d*\[1-9\]\\d*)$ 或 ^(-((\[0-9\]+\\.\[0-9\]*\[1-9\]\[0-9\]*)|(\[0-9\]*\[1-9\]\[0-9\]*\\.\[0-9\]+)|(\[0-9\]*\[1-9\]\[0-9\]*)))$</span><br></pre></td></tr></table></figure></li>
<li><p>浮点数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^(-?\\d+)(\\.\\d+)?$ 或 ^-?(\[1-9\]\\d*\\.\\d*|0\\.\\d*\[1-9\]\\d*|0?\\.0+|0)$</span><br></pre></td></tr></table></figure>
<h3 id="二-校验字符的表达式"><a href="#二-校验字符的表达式" class="headerlink" title="二. 校验字符的表达式"></a>二. 校验字符的表达式</h3></li>
<li><p>汉字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[\\u4e00-\\u9fa5\]&#123;0,&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>英文和数字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[A-Za-z0-9\]+$ 或 ^\[A-Za-z0-9\]&#123;4,40&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>长度为3-20的所有字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^.&#123;3,20&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>由26个英文字母组成的字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[A-Za-z\]+$</span><br></pre></td></tr></table></figure></li>
<li><p>由26个大写英文字母组成的字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[A-Z\]+$</span><br></pre></td></tr></table></figure></li>
<li><p>由26个小写英文字母组成的字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[a-z\]+$</span><br></pre></td></tr></table></figure></li>
<li><p>由数字和26个英文字母组成的字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[A-Za-z0-9\]+$</span><br></pre></td></tr></table></figure></li>
<li><p>由数字、26个英文字母或者下划线组成的字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\\w+$ 或 ^\\w&#123;3,20&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>中文、英文、数字包括下划线：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[\\u4E00-\\u9FA5A-Za-z0-9_\]+$</span><br></pre></td></tr></table></figure></li>
<li><p>中文、英文、数字但不包括下划线等符号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[\\u4E00-\\u9FA5A-Za-z0-9\]+$ 或 ^\[\\u4E00-\\u9FA5A-Za-z0-9\]&#123;2,20&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>可以输入含有^%&amp;’,;=?$\“等字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">：\[^%&amp;&#39;,;&#x3D;?$\\x22\]+</span><br></pre></td></tr></table></figure></li>
<li><p>禁止输入含有~的字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\[^~\\x22\]+</span><br></pre></td></tr></table></figure>
<h3 id="三-特殊需求表达式"><a href="#三-特殊需求表达式" class="headerlink" title="三. 特殊需求表达式"></a>三. 特殊需求表达式</h3></li>
<li><p>Email地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\\w+(\[-+.\]\\w+)*@\\w+(\[-.\]\\w+)*\\.\\w+(\[-.\]\\w+)*$</span><br></pre></td></tr></table></figure></li>
<li><p>域名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\[a-zA-Z0-9\]\[-a-zA-Z0-9\]&#123;0,62&#125;(&#x2F;.\[a-zA-Z0-9\]\[-a-zA-Z0-9\]&#123;0,62&#125;)+&#x2F;.?</span><br></pre></td></tr></table></figure></li>
<li><p>InternetURL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\[a-zA-z\]+:&#x2F;&#x2F;\[^\\s\]* 或 ^http:&#x2F;&#x2F;(\[\\w-\]+\\.)+\[\\w-\]+(&#x2F;\[\\w-.&#x2F;?%&amp;&#x3D;\]*)?$</span><br></pre></td></tr></table></figure></li>
<li><p>手机号码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^(13\[0-9\]|14\[5|7\]|15\[0|1|2|3|5|6|7|8|9\]|18\[0|1|2|3|5|6|7|8|9\])\\d&#123;8&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^(\\(\\d&#123;3,4&#125;-)|\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>国内电话号码(0511-4405222、021-87888822)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>身份证号(15位、18位数字)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\\d&#123;15&#125;|\\d&#123;18&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>短身份证号码(数字、字母x结尾)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^(\[0-9\])&#123;7,18&#125;(x|X)?$ 或 ^\\d&#123;8,18&#125;|\[0-9x\]&#123;8,18&#125;|\[0-9X\]&#123;8,18&#125;?$</span><br></pre></td></tr></table></figure></li>
<li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[a-zA-Z\]\[a-zA-Z0-9_\]&#123;4,15&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\[a-zA-Z\]\\w&#123;5,17&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^(?&#x3D;.*\\d)(?&#x3D;.*\[a-z\])(?&#x3D;.*\[A-Z\]).&#123;8,10&#125;$</span><br></pre></td></tr></table></figure></li>
<li><p>日期格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>一年的12个月(01～09和1～12)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^(0?\[1-9\]|1\[0-2\])$</span><br></pre></td></tr></table></figure></li>
<li><p>一个月的31天(01～09和1～31)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^((0?\[1-9\])|((1|2)\[0-9\])|30|31)$</span><br></pre></td></tr></table></figure></li>
<li><p>钱的输入格式：</p>
</li>
<li><p>有四种钱的表示形式我们可以接受:”10000.00″ 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$</p>
</li>
<li><p>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0″不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</p>
</li>
<li><p>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</p>
</li>
<li><p>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</p>
</li>
<li><p>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$</p>
</li>
<li><p>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$</p>
</li>
<li><p>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</p>
</li>
<li><p>1到3个数字,后面跟着任意个逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})<em>)(.[0-9]{1,2})?$<br>备注：这就是最终结果了,别忘了”+”可以用”</em>”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p>
</li>
<li><p>xml文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^(\[a-zA-Z\]+-?)+\[a-zA-Z0-9\]+\\\.\[x|X\]\[m|M\]\[l|L\]$</span><br></pre></td></tr></table></figure></li>
<li><p>中文字符的正则表达式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\[\\u4e00-\\u9fa5\]</span><br></pre></td></tr></table></figure></li>
<li><p>双字节字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\[^\\x00-\\xff\] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span><br></pre></td></tr></table></figure></li>
<li><p>空白行的正则表达式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\\n\\s*\\r (可以用来删除空白行)</span><br></pre></td></tr></table></figure></li>
<li><p>HTML标记的正则表达式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;(\\S*?)\[^&gt;\]*&gt;.*?|&lt;.*? &#x2F;&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span><br></pre></td></tr></table></figure></li>
<li><p>首尾空白字符的正则表达式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\\s*|\\s*$ 或 (^\\s*)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br></pre></td></tr></table></figure></li>
<li><p>腾讯QQ号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\[1-9\]\[0-9\]&#123;4,&#125; (腾讯QQ号从10000开始)</span><br></pre></td></tr></table></figure></li>
<li><p>中国邮政编码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\[1-9\]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)</span><br></pre></td></tr></table></figure></li>
<li><p>IP地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)</span><br></pre></td></tr></table></figure></li>
<li><p>IP地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">((?:(?:25\[0-5\]|2\[0-4\]\\\d|\[01\]?\\\d?\\\d)\\\.)&#123;3&#125;(?:25\[0-5\]|2\[0-4\]\\\d|\[01\]?\\\d?\\\d))</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3></li>
</ol>
<ul>
<li><a href="http://www.aikaiyuan.com/9609.html" target="_blank" rel="noopener">检测IP地址的正则表达式</a></li>
<li><a href="http://www.aikaiyuan.com/6836.html" target="_blank" rel="noopener">Python下的正则表达式原理和优化笔记</a></li>
<li><a href="http://www.aikaiyuan.com/7981.html" target="_blank" rel="noopener">正则表达式 内部培训 PPT</a></li>
<li><a href="http://www.aikaiyuan.com/10014.html" target="_blank" rel="noopener">grep 命令中正则表达式的用法</a></li>
<li><a href="http://www.aikaiyuan.com/8975.html" target="_blank" rel="noopener">优酷真实视频地址解析</a></li>
<li><a href="http://www.aikaiyuan.com/7764.html" target="_blank" rel="noopener">Nginx重写规则 rewrite 指南</a></li>
</ul>
<p>转载请注明：<a href="http://www.aikaiyuan.com" target="_blank" rel="noopener">爱开源</a> » <a href="http://www.aikaiyuan.com/10924.html" target="_blank" rel="noopener">最全面的常用正则表达式大全</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐一些能极大提高生产力的 Python 库
</title>
    <url>/2020/04/20/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%BA%9B%E8%83%BD%E6%9E%81%E5%A4%A7%E6%8F%90%E9%AB%98%E7%94%9F%E4%BA%A7%E5%8A%9B%E7%9A%84-Python-%E5%BA%93/</url>
    <content><![CDATA[<p>一门语言好用、方便的程度在很多时候会取决于这门语言相关的库够不够丰富，Python 之所以火爆除了其本身的语法和特性之外，还在一定程度上取决于其有太多太多库的支持，不论是官方维护的还是第三方开发的。就比如说做机器学习为什么很多人都用 Python，一个非常大的因素就是 TensorFlow 和 PyTorch 对 Python 的支持。当然在这里并不是说 Python 的库真的就全的不要不要的，它在某些领域或者项目的生态还是有待完善的。</p>
<ol>
<li><p>attrs、cattrs<br>GitHub：<a href="https://github.com/python-attrs/attrs、https://github.com/Tinche/cattrs" target="_blank" rel="noopener">https://github.com/python-attrs/attrs、https://github.com/Tinche/cattrs</a><br>简化类的定义、序列化反序列化等操作。<br>个人写的简介：<code>https://mp.weixin.qq.com/s/oHK-Y4lOeaQCFtDWgqXxFA</code></p>
</li>
<li><p>loguru<br>GitHub：<a href="https://github.com/Delgan/loguru" target="_blank" rel="noopener">https://github.com/Delgan/loguru</a><br>可简化日志记录写法。<br>个人写的简介：<a href="https://mp.weixin.qq.com/s/5Ri1WS5cTGCNAQ0I_zYycg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/5Ri1WS5cTGCNAQ0I_zYycg</a></p>
</li>
<li><p>autopep8<br>GitHub：<a href="https://github.com/hhatto/autopep8" target="_blank" rel="noopener">https://github.com/hhatto/autopep8</a><br>把 Python 代码转成符合 PEP8 规范的代码。</p>
</li>
<li><p>psutil<br>GitHub：<a href="https://github.com/giampaolo/psutil" target="_blank" rel="noopener">https://github.com/giampaolo/psutil</a><br>Python 实现任务监控的库。</p>
</li>
<li><p>furl<br>GitHub：<a href="https://github.com/gruns/furl" target="_blank" rel="noopener">https://github.com/gruns/furl</a><br>对 url 的处理非常方便，比 urllib 等库好用多。</p>
</li>
<li><p>retrying、tenacity<br>GitHub：<a href="https://github.com/rholder/retrying、https://github.com/jd/tenacity" target="_blank" rel="noopener">https://github.com/rholder/retrying、https://github.com/jd/tenacity</a><br>异常重试库，如出错之后重试多少次，尤其在发起一些 HTTP 请求时非常有用，当然也能用于其他地方。</p>
</li>
<li><p>typing<br>Docs：<a href="https://docs.python.org/zh-cn/3/library/typing.html#module-typing" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/typing.html#module-typing</a><br>对 Python 类型的支持，支持多种类型、嵌套类型，也推荐多多使用 Python 的类型注解。</p>
</li>
<li><p>argparse<br>Docs：<a href="https://docs.python.org/zh-cn/3/library/argparse.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/argparse.html</a></p>
</li>
</ol>
<p>个人曾经使用过几个命令行解析工具，如 docopt，但后来还是转回来了 argparse，功能齐全强大。</p>
<ol start="9">
<li><p>absl-py<br>GitHub：<a href="https://github.com/abseil/abseil-py" target="_blank" rel="noopener">https://github.com/abseil/abseil-py</a><br>个人感觉比 argparse 更易用的库，如 TensorFlow 就在使用这个，对于定义一些 Flag 非常方便。</p>
</li>
<li><p>pipenv<br>GitHub：<a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">https://github.com/pypa/pipenv</a><br>功能更全的包管理工具，集成虚拟环境、支持 Lock 机制锁定安装包版本和依赖信息。当然也有坑点，可自行搜索.</p>
</li>
<li><p>drf<br>Docs：<a href="https://www.django-rest-framework.org/" target="_blank" rel="noopener">https://www.django-rest-framework.org/</a><br>基于 Django 的 REST Framework，快速实现 REST API。</p>
</li>
<li><p>watchdog<br>GitHub：<a href="https://github.com/gorakhargosh/watchdog" target="_blank" rel="noopener">https://github.com/gorakhargosh/watchdog</a></p>
</li>
</ol>
<p>方便监视文件系统改动。</p>
<ol start="13">
<li>glob<br>Docs：<a href="https://docs.python.org/3/library/glob.html" target="_blank" rel="noopener">https://docs.python.org/3/library/glob.html</a></li>
</ol>
<p>对文件的操作非常方便。</p>
<ol start="14">
<li>2to3<br>Docs：<a href="https://docs.python.org/2/library/2to3.html" target="_blank" rel="noopener">https://docs.python.org/2/library/2to3.html</a></li>
</ol>
<p>把 Python2 代码转成 Python3 代码。</p>
<ol start="15">
<li>glom<br>GitHub：<a href="https://github.com/mahmoud/glom" target="_blank" rel="noopener">https://github.com/mahmoud/glom</a></li>
</ol>
<p>对 JSON 嵌套的处理非常方便。</p>
<ol start="16">
<li>pathlib<br>Docs：<a href="https://docs.python.org/3/library/pathlib.html" target="_blank" rel="noopener">https://docs.python.org/3/library/pathlib.html</a></li>
</ol>
<p>更为方便的 Python 路径操作库。</p>
<ol start="17">
<li>environs<br>GitHub：<a href="https://github.com/sloria/environs" target="_blank" rel="noopener">https://github.com/sloria/environs</a></li>
</ol>
<p>对于环境变量的获取非常方便，支持多种类型，如 int、bool 等。</p>
<ol start="18">
<li>pysnooper<br>GitHub：<a href="https://github.com/cool-RR/PySnooper" target="_blank" rel="noopener">https://github.com/cool-RR/PySnooper</a></li>
</ol>
<p>非常方便简单的 Python 调试器，可以追踪到代码每一处细节的执行状态。</p>
<ol start="19">
<li>tqdm<br>GitHub：<a href="https://github.com/tqdm/tqdm" target="_blank" rel="noopener">https://github.com/tqdm/tqdm</a></li>
</ol>
<p>进度条控制显示非常方便。</p>
<ol start="20">
<li>sh<br>GitHub：<a href="https://github.com/amoffat/sh" target="_blank" rel="noopener">https://github.com/amoffat/sh</a></li>
</ol>
<p>对 Linux 一些命令的封装，简单好用又高效。</p>
<ol start="21">
<li>faker<br>GitHub：<a href="https://github.com/joke2k/faker" target="_blank" rel="noopener">https://github.com/joke2k/faker</a></li>
</ol>
<p>模拟数据的生成。</p>
<p>个人写的简介：<a href="https://mp.weixin.qq.com/s/iLjr95uqgTclxYfWWNxrAA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/iLjr95uqgTclxYfWWNxrAA</a></p>
<ol start="22">
<li>arrow、dateutil、dateparser、pendulum</li>
</ol>
<ul>
<li>GitHub：<a href="https://github.com/crsmithdev/arrow" target="_blank" rel="noopener">https://github.com/crsmithdev/arrow</a></li>
<li><a href="https://github.com/dateutil/dateutil" target="_blank" rel="noopener">https://github.com/dateutil/dateutil</a></li>
<li><a href="https://github.com/scrapinghub/dateparser" target="_blank" rel="noopener">https://github.com/scrapinghub/dateparser</a></li>
<li><a href="https://github.com/sdispater/pendulum" target="_blank" rel="noopener">https://github.com/sdispater/pendulum</a><br>时间解析和处理库，非常方便。arrow 目前 Star 最多，好评最多。</li>
</ul>
<ol start="23">
<li>yagmail<br>GitHub：<a href="https://github.com/kootenpv/yagmail" target="_blank" rel="noopener">https://github.com/kootenpv/yagmail</a></li>
</ol>
<p>方便的发邮件库，替代自带的 smtplib。</p>
<ol start="24">
<li>chardet<br>GitHub：<a href="https://github.com/chardet/chardet" target="_blank" rel="noopener">https://github.com/chardet/chardet</a></li>
</ol>
<p>字符串类型编码检测。</p>
<ol start="25">
<li>pypinyin<br>GitHub：<a href="https://github.com/mozillazg/python-pinyin" target="_blank" rel="noopener">https://github.com/mozillazg/python-pinyin</a></li>
</ol>
<p>汉字转拼音，在一些中文转化处理上很有用。</p>
<p>个人写的简介：<a href="https://mp.weixin.qq.com/s/NvA3j8Ns1-6CFgWpUcWwQw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/NvA3j8Ns1-6CFgWpUcWwQw</a></p>
<ol start="26">
<li>sphinx<br>Docs：<a href="https://www.sphinx-doc.org/en/master/" target="_blank" rel="noopener">https://www.sphinx-doc.org/en/master/</a></li>
</ol>
<p>编写文档使用，大多数 Python 库文档都是这个写的，如 Scrapy、requests。</p>
<p>个人 sphinx + markdown 的样例：<a href="https://github.com/Gerapy/Docs" target="_blank" rel="noopener">https://github.com/Gerapy/Docs</a></p>
<ol start="27">
<li>jinja2<br>GitHub：<a href="https://github.com/pallets/jinja" target="_blank" rel="noopener">https://github.com/pallets/jinja</a></li>
</ol>
<p>一个方便的模板引擎，呈现页面时很方便。</p>
<ol start="28">
<li>click<br>GitHub：<a href="https://github.com/pallets/click" target="_blank" rel="noopener">https://github.com/pallets/click</a></li>
</ol>
<p>更方便灵活地实现命令行传递参数。</p>
<ol start="29">
<li>ray<br>GitHub：<a href="https://github.com/ray-project/ray" target="_blank" rel="noopener">https://github.com/ray-project/ray</a></li>
</ol>
<p>分布式多进程管理。</p>
<ol start="30">
<li>supervisor<br>GitHub：<a href="https://github.com/Supervisor/supervisor" target="_blank" rel="noopener">https://github.com/Supervisor/supervisor</a></li>
</ol>
<p>进程管理工具，如实现多任务后台运行，Docker 打包时会经常用到。</p>
<ol start="31">
<li>apscheduler<br>GitHub：<a href="https://github.com/agronholm/apscheduler" target="_blank" rel="noopener">https://github.com/agronholm/apscheduler</a></li>
</ol>
<p>Python 定时任务，不过 K8S 也可以实现，个人目前可能更倾向于 K8S。</p>
<ol start="32">
<li>intelpython<br>Home：<a href="https://software.intel.com/en-us/distribution-for-python" target="_blank" rel="noopener">https://software.intel.com/en-us/distribution-for-python</a></li>
</ol>
<p>这不是 Python 库，是一个 Intel 开发的基于 Intel 处理器优化的 Python 解释器，对于大规模运算提升很大。</p>
<p>完毕。</p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>简洁的Bash Programming技巧(一)</title>
    <url>/2020/04/20/%E7%AE%80%E6%B4%81%E7%9A%84Bash-Programming%E6%8A%80%E5%B7%A7-%E4%B8%80/</url>
    <content><![CDATA[<h2 id="简洁的Bash-Programming技巧-二"><a href="#简洁的Bash-Programming技巧-二" class="headerlink" title="简洁的Bash Programming技巧(二)"></a>简洁的Bash Programming技巧(二)</h2><h3 id="1-检查命令执行是否成功"><a href="#1-检查命令执行是否成功" class="headerlink" title="1. 检查命令执行是否成功"></a>1. 检查命令执行是否成功</h3><p>第一种写法，比较常见：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo abcdee | grep -q abcd</span><br><span class="line"></span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo &quot;Found&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;Not found&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>简洁的写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if echo abcdee | grep -q abc; then</span><br><span class="line">    echo &quot;Found&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;Not found&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>当然你也可以不要if/else,不过这样可读性比较差:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo abcdee | grep -q abc &amp;&amp; echo &quot;Found&quot; || echo &quot;Not found&quot;</span><br><span class="line">Found</span><br></pre></td></tr></table></figure>
<h3 id="2-将标准输出与标准错误输出重定向到-dev-null"><a href="#2-将标准输出与标准错误输出重定向到-dev-null" class="headerlink" title="2. 将标准输出与标准错误输出重定向到/dev/null"></a>2. 将标准输出与标准错误输出重定向到/dev/null</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一种写法，比较常见：</span><br><span class="line">grep &quot;abc&quot; test.txt 1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br><span class="line">2. 常见的错误写法：</span><br><span class="line">grep &quot;abc&quot; test.txt 2&gt;&amp;1 1&gt;&#x2F;dev&#x2F;null</span><br><span class="line">3. 简洁的写法：</span><br><span class="line">grep &quot;abc&quot; test.txt &amp;&gt; &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>
<h3 id="3-awk的使用"><a href="#3-awk的使用" class="headerlink" title="3. awk的使用"></a>3. awk的使用</h3><p>举一个实际的例子，获取Xen DomU的id。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 常见的写法：</span><br><span class="line">sudo xm li | grep vm_name | awk &#39;&#123;print $2&#125;&#39;</span><br><span class="line">2. 简洁的写法：</span><br><span class="line">sudo xm li | awk &#39;&#x2F;vm_name&#x2F;&#123;print $2&#125;&#39;</span><br></pre></td></tr></table></figure>
<h3 id="4-将一个文本的所有行用逗号连接起来"><a href="#4-将一个文本的所有行用逗号连接起来" class="headerlink" title="4. 将一个文本的所有行用逗号连接起来"></a>4. 将一个文本的所有行用逗号连接起来</h3><p>假设文件内容如下所示:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;tmp&#x2F;ip.txt </span><br><span class="line">192.168.1.100</span><br><span class="line">192.168.1.101</span><br><span class="line">192.168.1.102</span><br></pre></td></tr></table></figure>
<p>使用Sed命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sed &#39;:a;$!N;s&#x2F;\n&#x2F;,&#x2F;;ta&#39; &#x2F;tmp&#x2F;ip.txt</span><br><span class="line">192.168.1.100,192.168.1.101,192.168.1.102</span><br></pre></td></tr></table></figure>
<p>简洁的写法(一)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ paste -sd, &#x2F;tmp&#x2F;ip.txt</span><br><span class="line">192.168.1.100,192.168.1.101,192.168.1.102</span><br></pre></td></tr></table></figure>
<p>简洁的写法(二)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;tmp&#x2F;ip.txt | tr &quot;\n&quot; &quot;,&quot;</span><br><span class="line">192.168.1.100,192.168.1.101,192.168.1.102,</span><br><span class="line">⚠️ 结尾的换行符也会被替换为逗号</span><br></pre></td></tr></table></figure>
<h3 id="5-过滤重复行"><a href="#5-过滤重复行" class="headerlink" title="5. 过滤重复行"></a>5. 过滤重复行</h3><p>假设文件内容如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sort &#x2F;tmp&#x2F;ip.txt</span><br><span class="line">192.168.1.100</span><br><span class="line">192.168.1.100</span><br><span class="line">192.168.1.101</span><br><span class="line">192.168.1.101</span><br><span class="line">192.168.1.102</span><br></pre></td></tr></table></figure>
<p>常用的方法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sort &#x2F;tmp&#x2F;ip.txt | uniq</span><br><span class="line">192.168.1.100</span><br><span class="line">192.168.1.101</span><br><span class="line">192.168.1.102</span><br></pre></td></tr></table></figure>
<p>简单的写法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sort -u &#x2F;tmp&#x2F;ip.txt</span><br><span class="line">192.168.1.100</span><br><span class="line">192.168.1.101</span><br><span class="line">192.168.1.102</span><br></pre></td></tr></table></figure>
<h3 id="6-grep查找单词"><a href="#6-grep查找单词" class="headerlink" title="6. grep查找单词"></a>6. grep查找单词</h3><p>假设一个文本的每一行是一个ip地址，例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &#x2F;tmp&#x2F;ip.txt</span><br><span class="line">192.168.1.100</span><br><span class="line">192.168.1.101</span><br><span class="line">192.168.1.102</span><br><span class="line">192.168.1.100</span><br><span class="line">192.168.1.101</span><br></pre></td></tr></table></figure>
<p>使用grep查找是否包括192.168.1.102这个ip地址。常见的写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># grep &#39;192.168.1.102\&gt;&#39; &#x2F;tmp&#x2F;ip.txt</span><br><span class="line">192.168.1.102</span><br></pre></td></tr></table></figure>
<p>简单的方法（其实这方法不见得简单，只是为了说明-w这个参数还是很有用的)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># grep -w &#39;192.168.1.102&#39; &#x2F;tmp&#x2F;ip.txt</span><br><span class="line">192.168.1.102</span><br></pre></td></tr></table></figure>
<p>注⚠️: grep的-n/-H/-v/-f/-c这几参数都很有用.</p>
<h3 id="7-临时设置环境变量"><a href="#7-临时设置环境变量" class="headerlink" title="7. 临时设置环境变量"></a>7. 临时设置环境变量</h3><p>常见的写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ export LC_ALL&#x3D;zh_CN.UTF-8 </span><br><span class="line"></span><br><span class="line">$ date</span><br><span class="line">2012年 11月 03日 星期六 22:26:55 CST</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">简洁的写法:</span><br></pre></td></tr></table></figure>
<p>$ unset LC_ALL<br>$ LC_ALL=zh_CN.UTF-8 date<br>2012年 11月 03日 星期六 22:27:43 CST</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在命令之前加上环境变更的设置，只是临时改变当前执行命令的环境。</span><br><span class="line">### 8. \$1,\$2...等位置参数的使用</span><br><span class="line">假设只想使用$2,$3..这几个参数，常见的做法是:</span><br></pre></td></tr></table></figure>
<p>shift<br>echo “$@”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为什么不这样写呢？</span><br></pre></td></tr></table></figure>
<p>echo “${@:2}”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 9. 退而求其次的写法</span><br><span class="line">相信大家会有这种需求，当一个参数值没有提供时，可以使用默认值。常见的写法是：</span><br></pre></td></tr></table></figure>
<p>arg=$1<br>if [ -z “$arg” ]; then<br>   arg=0<br>fi</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简洁的写法是这样的:</span><br></pre></td></tr></table></figure>
<p>arg=${1:-0}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 10. bash特殊参数--的用法</span><br><span class="line">假设要用grep查找字符串中是否包含-i，我们会这样尝试：</span><br></pre></td></tr></table></figure>
<h1 id="echo-‘abc-i’-grep-“-i”"><a href="#echo-‘abc-i’-grep-“-i”" class="headerlink" title="echo ‘abc-i’ | grep “-i”"></a>echo ‘abc-i’ | grep “-i”</h1><p>Usage: grep [OPTION]… PATTERN [FILE]…<br>Try ‘grep –help’ for more information.</p>
<h1 id="echo-‘abc-i’-grep-“-i”-1"><a href="#echo-‘abc-i’-grep-“-i”-1" class="headerlink" title="echo ‘abc-i’ | grep “-i”"></a>echo ‘abc-i’ | grep “-i”</h1><p>abc-i</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简洁的方法是：</span><br></pre></td></tr></table></figure>
<h1 id="echo-‘abc-i’-grep-–-i"><a href="#echo-‘abc-i’-grep-–-i" class="headerlink" title="echo ‘abc-i’ | grep – -i"></a>echo ‘abc-i’ | grep – -i</h1><p>abc-i</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注⚠️:bash中--后面的参数不会被当作选项解析。</span><br><span class="line">### 11. 函数的返回值默认是最后一行语句的返回值</span><br></pre></td></tr></table></figure>
<h1 id="Check-whether-an-item-is-a-function"><a href="#Check-whether-an-item-is-a-function" class="headerlink" title="Check whether an item is a function"></a>Check whether an item is a function</h1><h1 id="1-the-function-name"><a href="#1-the-function-name" class="headerlink" title="$1: the function name"></a>$1: the function name</h1><h1 id="Return-0-yes-or-1-no"><a href="#Return-0-yes-or-1-no" class="headerlink" title="Return: 0(yes) or 1(no)"></a>Return: 0(yes) or 1(no)</h1><p>function is_function()<br>{<br>    local func_name=$1<br>    test “<code>type -t $1 2&gt;/dev/null</code>“ = “function”<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不要画蛇添足再在后面加一行return $?了。</span><br><span class="line">### 12. 将printf格式化的结果赋值给变量</span><br><span class="line">例如将数字转换成其十六进制形式，常见的写法是：</span><br></pre></td></tr></table></figure>
<p>$ var=$(printf ‘%%%02x’ 111)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简单的写法是：</span><br></pre></td></tr></table></figure>
<p>$ printf -v var ‘%%%02x’ 111 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printf的help：</span><br></pre></td></tr></table></figure>
<h1 id="help-printf-grep-A-1-B-1-–-v"><a href="#help-printf-grep-A-1-B-1-–-v" class="headerlink" title="help printf | grep -A 1 -B 1 – -v"></a>help printf | grep -A 1 -B 1 – -v</h1><p>printf: printf [-v var] format [arguments]<br>    Formats and prints ARGUMENTS under control of the FORMAT.<br>–<br>    Options:<br>      -v var    assign the output to shell variable VAR rather than<br>            display it on the standard output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 13. 打印文件行</span><br><span class="line">打印文件的第一行：</span><br></pre></td></tr></table></figure>
<p>head -1 test.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打印文件的第2行：</span><br></pre></td></tr></table></figure>
<p>sed -n ‘2p’ test.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打印文件的第2到5行：</span><br></pre></td></tr></table></figure>
<p>sed -n ‘2,5p’ test.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打印文件的第2行始（包括第2行在内）5行的内容：</span><br></pre></td></tr></table></figure>
<p>sed -n ‘2,+4p’ test.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打印倒数第二行：</span><br></pre></td></tr></table></figure>
<p>$ tail -2 test.txt | head -1<br>$ tac test.txt | sed -n ‘2p’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 14.善用let或者(())命令做算术运算</span><br><span class="line">如何对一个数字做++运算，可能你会这样用：</span><br></pre></td></tr></table></figure>
<p>a=1<br>a=<code>expr a + 1</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为何不用你熟悉的:</span><br></pre></td></tr></table></figure>
<p>a=1<br>let a++<br>let a+=2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 15. 获取软连接指定的真实文件名</span><br><span class="line">如果你不知道，你可能会这样获取：</span><br></pre></td></tr></table></figure>
<p>$ ls -l /usr/bin/python | awk -F’-&gt;’ ‘{print $2}’ | tr -d ‘ ‘<br>/usr/bin/python2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果你知道有一个叫readlink的命令，那么：</span><br></pre></td></tr></table></figure>
<p>$ readlink /usr/bin/python<br>/usr/bin/python2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 16. 获取一个字符的ASCII码</span><br></pre></td></tr></table></figure>
<p>$ printf ‘%02x’ “‘+”<br>2b<br>$ echo -n ‘+’ | od -tx1 -An | tr -d ‘ ‘<br>2b</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 17. 清空一个文件</span><br><span class="line">常见的用法:</span><br></pre></td></tr></table></figure>
<p>echo “” &gt; test.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简单的写法：</span><br></pre></td></tr></table></figure>
<blockquote>
<p>test.txt</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 18 不要忘记有here document</span><br><span class="line">下面一段代码：</span><br></pre></td></tr></table></figure>
<p>grep -v 1 /tmp/test.txt | while read line; do<br>    let a++<br>    echo –$line–<br>done<br>echo a:$a</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行后有什么问题吗？</span><br></pre></td></tr></table></figure>
<p>$ sh test.sh<br>–2–<br>–3–<br>a:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">问题: 发现a这个变量没有被赋值，为什么呢？因为管道后面的代码是在在一个子shell中执行的，所做的任何更改都不会对当前shell有影响，自然a这个变量就不会有赋值了。</span><br><span class="line"></span><br><span class="line">换一种思路，可以这样做：</span><br></pre></td></tr></table></figure>
<p>grep -v 1 /tmp/test.txt &gt; /tmp/test.tmp</p>
<p>while read line; do<br>    let a++<br>    echo –$line–<br>done &lt; /tmp/test.tmp</p>
<p>echo a:$a<br>rm -f /tmp/test.tmp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不过多了一个临时文件，最后还要删除。这里其实可以用到here document：</span><br></pre></td></tr></table></figure>
<p>while read line2; do<br>    let b++<br>    echo ??$line2??<br>done &lt;&lt; EOF<br><code>grep -v 1 /tmp/test.txt</code><br>EOF<br>echo b: $b</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">here document往往用于需要输出一大段文本的地方，例如脚本的help函数</span><br><span class="line"></span><br><span class="line">### 19.删除字符串中的第一个或者最后一个字符</span><br><span class="line">假设字符串为：</span><br></pre></td></tr></table></figure>
<p>$ str=”aremoveb”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可能你第一个想法是通过sed或者其它命令来完成这个功能，但是其实有很简单的方法,此处利用shell的数组进行处理：</span><br></pre></td></tr></table></figure>
<p>$ echo “${str#?}”<br>removeb<br>$ echo “${str%?}”<br>aremove</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类似地，你也可以删除2个、3个、4个……</span><br><span class="line"></span><br><span class="line">有没有一次性删除第一个和最后一个字符的方法呢？答案当然是肯定的：</span><br></pre></td></tr></table></figure>
<p>$ echo “${str:1:-1}”<br>remove</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">关于这些变量替换的内容在bash的man手册中都有说明。</span><br><span class="line">### 20. 使用逗号join数组元素</span><br><span class="line">假设数组元素没有空格，可以用这种方法：</span><br></pre></td></tr></table></figure>
<p>$ a=(1 2 3)<br>$ b=”${a[*]}”</p>
<p>$ echo ${b// /,}<br>1,2,3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注⚠️：当该数组的长度非常长时，使用这种替换的时间开销很高，性能很差，推荐用sed。</span><br><span class="line">假设数组元素包含有空格，可以借用printf命令来达到：</span><br></pre></td></tr></table></figure>
<p>$ a=(1 “2 3” 4)<br>$ printf “,%s” “${a[@]}” | cut -c2-<br>1,2 3,4</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 21. Shell中的多进程</span><br><span class="line">在命令行下，我们会在命令行后面加上&amp;符号来让该命令在后台执行，在shell脚本中，使用&quot;(cmd)&quot;可以让fork一个子shell来执行该命令。利用这两点，可以实现shell的多线程：</span><br></pre></td></tr></table></figure>
<p>job_num=10</p>
<p>function do_work()<br>{<br>    echo “Do work..”<br>}</p>
<p>for ((i=0; i &lt; job_num ;i++)); do<br>    echo “Fork job $i”<br>    (do_work) &amp;<br>done</p>
<p>wait   # wait for all job done<br>echo “All job have been done!”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注⚠️: 最后的wait命令，作用是等待所有子进程结束。</span><br><span class="line">附几则小技巧：</span><br></pre></td></tr></table></figure>
<p>1）sudo iptables -L -n | vim -<br>2）grep -v xxx | vim -<br>3）echo $’&#39;‘<br>4）set – 1 2 3; echo “$@”<br>5）搜索stackoverflow/superuser等站点<br>6）VIM编辑远程文件 vim scp://xxx//etc/vimrc<br>7）远程执行脚本 ssh xxx bash &lt; xxx.sh</p>
<pre><code>
[原文地址](https://yq.aliyun.com/articles/68541?spm=a2c4e.11153959.blogcont72014.7.6f252cb3xPFFVx)

</code></pre>]]></content>
      <categories>
        <category>SHELL</category>
      </categories>
      <tags>
        <tag>SHELL</tag>
      </tags>
  </entry>
  <entry>
    <title>算法和REST-API</title>
    <url>/2020/04/20/%E7%AE%97%E6%B3%95%E5%92%8CREST-API/</url>
    <content><![CDATA[<h2 id="算法和REST-API"><a href="#算法和REST-API" class="headerlink" title="算法和REST API"></a>算法和REST API</h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>（冒泡排序，选择排序，插入排序）<br>  冒泡：首先，列表每两个相邻的数，如果前面的比后边的大，<br>  那么交换这两个数，代码关键点：趟和无序区，<br>  时间复杂度为：O(n2)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">def dublue_sort(li):</span><br><span class="line">	for i in range(len(li)-1):</span><br><span class="line">		exchange&#x3D; False</span><br><span class="line">		for j in range(len(li)-i -1):</span><br><span class="line">			if li[j] &gt; li[j+1]:</span><br><span class="line">				li[j],li[j+1] &#x3D; li[j+1],li[j]</span><br><span class="line">				exchange &#x3D; True</span><br><span class="line">		if not exchange:</span><br><span class="line">			return</span><br><span class="line">	return li</span><br><span class="line">li&#x3D;list(range(100))</span><br><span class="line">random.shuffle(li)</span><br><span class="line">print(li)</span><br><span class="line">print(dublue_sort(li))</span><br></pre></td></tr></table></figure>

<p>选择：一趟遍历记录最小的数，放到第一个位置，再一趟遍历记录剩余列表中最小的数，<br>继续放置，代码关键点：无序区和最小数的位置，时间复杂度为：O(n2)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def select_sort(li):</span><br><span class="line">     for i in range(len(li)-1): #i是趟</span><br><span class="line">         min_loc&#x3D;i</span><br><span class="line">         #找i位置到最后位置范围内最小的数</span><br><span class="line">         for j in range(i,len(li)):</span><br><span class="line">             if li[j] &lt; li[min_loc]:</span><br><span class="line">                 min_loc &#x3D; j</span><br><span class="line">         #和无序区第一个数作交换</span><br><span class="line">                 li[min_loc],li[i] &#x3D; li[i],li[min_loc]</span><br><span class="line">     return li</span><br><span class="line">li&#x3D;list(range(100))</span><br><span class="line">random.shuffle(li)</span><br><span class="line">print(select_sort(li))</span><br></pre></td></tr></table></figure>

<p>插入：列表被分为有序区和无序区两个部分。最初有序区只有一个元素，<br>每次从无序区选择一个元素，插入到有序区的位置，直到无序区变空，<br>      代码关键点：摸到的牌和手里的牌，时间复杂度为：O(n2)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def insert_sort(li):</span><br><span class="line">	for i in range(1,len(li)):  #i 代表每次摸到的牌的下标</span><br><span class="line">		tmp&#x3D;li[i]</span><br><span class="line">		j &#x3D; i-1  # j代表手里最后一张牌的下标</span><br><span class="line">		while True:</span><br><span class="line">			if j &lt; 0 or tmp &gt;&#x3D; li[j]:</span><br><span class="line">				break</span><br><span class="line">			li[ j + 1] &#x3D; li [j]</span><br><span class="line">			j -&#x3D;1</span><br><span class="line">		li[j+1] &#x3D; tmp</span><br><span class="line">li&#x3D;list(range(100))</span><br><span class="line">print(insert_sort(li))</span><br></pre></td></tr></table></figure>

<p>二分：列表查找：从列表中查找指定元素，输入：列表、待查找元素，输出：元素下标或未查找到元素。<br>二分查找，从有序列表的候选区data[0:n]开始，通过对待查找的值与候选区中间值的比较，<br>可以使候选区减少一半。时间复杂为：O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def bin_search(data,val):</span><br><span class="line">    low&#x3D;0</span><br><span class="line">    high&#x3D;len(data)-1</span><br><span class="line">    while low &lt;&#x3D; high :</span><br><span class="line">        mid&#x3D; (low+high) &#x2F;&#x2F;2</span><br><span class="line">        if data[mid] &#x3D;&#x3D; val:</span><br><span class="line">            return mid</span><br><span class="line">        elif data[mid] &lt; high :</span><br><span class="line">            low &#x3D; mid + 1</span><br><span class="line">        else:</span><br><span class="line">            high &#x3D; mid - 1</span><br><span class="line">    return None</span><br><span class="line">print(bin_search([1,2,3,4,5,6,7,8],4))</span><br></pre></td></tr></table></figure>

<h3 id="RESTful-API设计指南"><a href="#RESTful-API设计指南" class="headerlink" title="RESTful API设计指南"></a>RESTful API设计指南</h3><pre><code>    参考地址：
      http://www.ruanyifeng.com/blog/2014/05/restful_api.html

1、协议       

      API与用户的通信协议，总是使用HTTPs协议
2、域名

      应该尽量将API部署在专用域名之下         
 https://api.example.com
      如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下                     
 https://example.org/api/
3、版本

      应该将API的版本号放入URL        
 https://api.example.com/v1/
        另一种做法是：将版本号放在HTTP头信息中，
4、路径      
  https://api.example.com/v1/zoos
  https://api.example.com/v1/animals
  https://api.example.com/v1/employees</code></pre><p>5、动词<br>  对于资源的具体操作类型，由HTTP动词表示<br>        GET（SELECT）：从服务器取出资源（一项或多项）。<br>        POST（CREATE）：在服务器新建一个资源。<br>        PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。<br>        PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。<br>        DELETE（DELETE）：从服务器删除资源。<br>还有两个不常用的HTTP动词<br>       GET /zoos：列出所有动物园<br>       POST /zoos：新建一个动物园<br>       GET /zoos/ID：获取某个指定动物园的信息<br>       PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）<br>       PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）<br>       DELETE /zoos/ID：删除某个动物园<br>       GET /zoos/ID/animals：列出某个指定动物园的所有动物<br>       DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</p>
<p>6、过滤信息（Filtering）<br>    如果记录数量很多，服务器不可能都将它们返回给用户，API应该提供参数，过滤返回结果<br>        ?limit=10：指定返回记录的数量<br>        ?offset=10：指定返回记录的开始位置。<br>        ?page=2&amp;per_page=100：指定第几页，以及每页的记录数。<br>        ?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。<br>        ?animal_type_id=1：指定筛选条件    </p>
<p>7、状态码（Status Code）<br>      200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。<br>      201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。<br>      202 Accepted - [<em>]：表示一个请求已经进入后台排队（异步任务）<br>      204 NO CONTENT - [DELETE]：用户删除数据成功。<br>      400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。<br>      401 Unauthorized - [</em>]：表示用户没有权限（令牌、用户名、密码错误）。<br>      403 Forbidden - [<em>] 表示用户得到授权（与401错误相对），但是访问是被禁止的。<br>      404 NOT FOUND - [</em>]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。<br>      406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。<br>      410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。<br>      422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。<br>      500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。        </p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>简洁的Bash Programming技巧(三)</title>
    <url>/2020/04/20/%E7%AE%80%E6%B4%81%E7%9A%84Bash-Programming%E6%8A%80%E5%B7%A7-%E4%B8%89/</url>
    <content><![CDATA[<h2 id="简洁的Bash-Programming技巧-一"><a href="#简洁的Bash-Programming技巧-一" class="headerlink" title="简洁的Bash Programming技巧(一)"></a>简洁的Bash Programming技巧(一)</h2><h3 id="1-bash中alias的使用"><a href="#1-bash中alias的使用" class="headerlink" title="1. bash中alias的使用"></a>1. bash中alias的使用</h3><p>alias其实是给常用的命令定一个别名，比如很多人会定义一下的一个别名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias ll&#x3D;&#39;ls -l&#39;</span><br></pre></td></tr></table></figure>
<p>以后就可以使用ll，实际展开后执行的是ls -l。现在很多发行版都会带几个默认的别名，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias grep&#x3D;&#39;grep --color&#x3D;auto&#39;  # 带颜色显示</span><br><span class="line">alias ls&#x3D;&#39;ls --color&#x3D;auto&#39; # 同上</span><br><span class="line">alias rm&#x3D;&#39;rm -i&#39;  # 删除文件需要确认</span><br></pre></td></tr></table></figure>
<p>alias在某些方面确实提高了很大的效率，但是也是有隐患的，这点可以看我以前的一篇文章终端下肉眼看不见的东西。那么如何不要展开alias，而是用本来的意思呢？答案是使用转义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\ls</span><br><span class="line">\grep</span><br></pre></td></tr></table></figure>
<p>在命令前面加一个反斜杠后就可以了。 这里要插一段故事，前两天我在shell脚本中定义了下面的一个alias，假设位于文件util.sh：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">alias ssh&#x3D;&#39;ssh -o StrictHostKeyChecking&#x3D;no -o LogLevel&#x3D;quiet -o BatchMode&#x3D;yes&#39;</span><br></pre></td></tr></table></figure>
<p>后面这串ssh选项是为了去掉一些warning的信息，不提示输入密码等等。具体可以看ssh的文档说明。我自己测试的时候好好的，当时我同事跑得时候却依然有报Warning。我对比了下我们两个人的用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh util.sh  # 方式一</span><br><span class="line">.&#x2F;util.sh   # 方式二</span><br></pre></td></tr></table></figure>
<p>大家应该知道，直接./util.sh执行，shell会去找脚本第一行的shebang中给定的解释器去执行改脚本，所以第二种用法相当于直接用bash来执行。那想必是bash/sh对alias是否默认展开这一点上是有区别的了。翻阅了下Bash的man手册，发现可以通过设置expand_aliases选项来打开alias展开的功能，默认在非交互式Shell下是关闭的（什么是交互式登录Shell)<br>修改下util.sh，打开这个选项就Ok了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># Expand aliases in script</span><br><span class="line">shopt -s expand_aliases</span><br><span class="line">alias ssh&#x3D;&#39;ssh -o StrictHostKeyChecking&#x3D;no -o LogLevel&#x3D;quiet -o BatchMode&#x3D;yes&#39;</span><br></pre></td></tr></table></figure>

<h3 id="2-awk打印除第一列之外的其他列"><a href="#2-awk打印除第一列之外的其他列" class="headerlink" title="2. awk打印除第一列之外的其他列"></a>2. awk打印除第一列之外的其他列</h3><p>awk用来截取输入行中的某几列很有用，当时如果要排除某几列呢？ 例如有如下的一个文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;tmp&#x2F;test.txt</span><br><span class="line">1 2 3 4 5</span><br><span class="line">10 20 30 40 50</span><br></pre></td></tr></table></figure>
<p>可以用下面的代码解决:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ awk &#39;&#123;$1&#x3D;&quot;&quot;;print $0&#125;&#39; &#x2F;tmp&#x2F;test.txt</span><br><span class="line"> 2 3 4 5</span><br><span class="line"> 20 30 40 50</span><br></pre></td></tr></table></figure>
<p>但是前面多了一个空格，可以用cut命令稍微调整下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ awk &#39;&#123;$1&#x3D;&quot;&quot;;print $0&#125;&#39; &#x2F;tmp&#x2F;test.txt | cut -c2-</span><br><span class="line">2 3 4 5</span><br><span class="line">20 30 40 50</span><br></pre></td></tr></table></figure>

<h3 id="3-巧用bash的命令展开功能备份文件"><a href="#3-巧用bash的命令展开功能备份文件" class="headerlink" title="3. 巧用bash的命令展开功能备份文件"></a>3. 巧用bash的命令展开功能备份文件</h3><p>假设要备份文件/your/path/to/file.list为/your/path/to/file.list.20121106，常规的方法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;your&#x2F;path&#x2F;to&#x2F;file.list &#x2F;your&#x2F;path&#x2F;to&#x2F;file.list.20121106</span><br></pre></td></tr></table></figure>
<p>这样重复写上一长串的路径，是不是很麻烦，这里利用bash的展开特性可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;your&#x2F;path&#x2F;to&#x2F;file.list&#123;,.20180406&#125;</span><br></pre></td></tr></table></figure>
<p>/your/path/to/file.list{,.20121106}这一部分会展开为/your/path/to/file.list /your/path/to/file.list.20121106,再将此传给cp命令，就达到了与前面同样的效果。（思路同ls *）。具体可以man bash中的Brace Expansion这一段。</p>
<h3 id="4-你知道sed的这个特性吗？"><a href="#4-你知道sed的这个特性吗？" class="headerlink" title="4. 你知道sed的这个特性吗？"></a>4. 你知道sed的这个特性吗？</h3><p>假设一个文件的每一行为一个路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;tmp&#x2F;test.txt</span><br><span class="line">&#x2F;home&#x2F;kodango&#x2F;hello</span><br><span class="line">&#x2F;home&#x2F;kodango&#x2F;hello&#x2F;world</span><br><span class="line">&#x2F;home&#x2F;kodango&#x2F;good</span><br><span class="line">&#x2F;home&#x2F;kodango&#x2F;good&#x2F;bye</span><br></pre></td></tr></table></figure>
<p>现在要把/home/kodango/good替换成/home/kodango/bad，普通的作法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sed -n &#39;s&#x2F;\&#x2F;home\&#x2F;kodango\&#x2F;good&#x2F;\&#x2F;home\&#x2F;kodango\&#x2F;bye&#x2F;p&#39; &#x2F;tmp&#x2F;test.txt </span><br><span class="line">&#x2F;home&#x2F;kodango&#x2F;bye</span><br><span class="line">&#x2F;home&#x2F;kodango&#x2F;bye&#x2F;bye</span><br></pre></td></tr></table></figure>
<p>因为路径中的分隔符与sed的替换命令的分隔符都是’/‘，所以需要转义，非常麻烦。幸运的是，sed可以更改分隔符，例如使用#：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -n &#39;s#&#x2F;home&#x2F;kodango&#x2F;good#&#x2F;home&#x2F;kodango&#x2F;bad#p&#39; &#x2F;tmp&#x2F;test.txt </span><br><span class="line">&#x2F;home&#x2F;kodango&#x2F;bad</span><br><span class="line">&#x2F;home&#x2F;kodango&#x2F;bad&#x2F;bye</span><br></pre></td></tr></table></figure>
<p>这样就清爽多了。 补充，如果是在地址对中使用，首个分隔符前面要加反斜杠：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sed -n &#39;\#&#x2F;home&#x2F;kodango&#x2F;#p&#39; &#x2F;tmp&#x2F;test.txt </span><br><span class="line">&#x2F;home&#x2F;kodango&#x2F;hello</span><br><span class="line">&#x2F;home&#x2F;kodango&#x2F;hello&#x2F;world</span><br><span class="line">&#x2F;home&#x2F;kodango&#x2F;good</span><br><span class="line">&#x2F;home&#x2F;kodango&#x2F;good&#x2F;bye</span><br></pre></td></tr></table></figure>

<h3 id="5-合并连续重复的字符（即squeeze操作）"><a href="#5-合并连续重复的字符（即squeeze操作）" class="headerlink" title="5. 合并连续重复的字符（即squeeze操作）"></a>5. 合并连续重复的字符（即squeeze操作）</h3><p>例如要合并一个字符串中连续的多个空格，假设字符串为’print hello, world’。 第一种方法，使用sed命令，扫描整个字符串，替换2个以上的空格为1格:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &#39;print  hello,   world  &#39; | sed -r &#39;s&#x2F; &#123;2,&#125;&#x2F; &#x2F;g&#39;</span><br><span class="line">print hello, world</span><br></pre></td></tr></table></figure>
<p>第二种方法，使用tr命令的-s选项，专门就是为了合并连续重复的字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &#39;print  hello,   world  &#39; | tr -s &#39; &#39;</span><br><span class="line">print hello, world</span><br></pre></td></tr></table></figure>
<p>第三种方法，使用awk的域赋值来完成该目的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &#39;print  hello,   world  &#39; | awk &#39;$1&#x3D;$1&#39;</span><br><span class="line">print hello, world</span><br></pre></td></tr></table></figure>

<h3 id="6-将文本中某列相同的行输出到不同的文件中"><a href="#6-将文本中某列相同的行输出到不同的文件中" class="headerlink" title="6. 将文本中某列相同的行输出到不同的文件中"></a>6. 将文本中某列相同的行输出到不同的文件中</h3><p>标题有点绕口，我们以实际例子来讲解，假设我们有以下的一个文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;tmp&#x2F;test.txt</span><br><span class="line">a char</span><br><span class="line">1 int</span><br><span class="line">2 int</span><br><span class="line">b char</span><br><span class="line">abc string</span><br></pre></td></tr></table></figure>
<p>我们的目标是将该文本中的行按第二列的值归类，并且输出到相应的文件中，文件名为第二列的名称。例如第2行、第3行会输出到int.txt文件中，而第1行、第4行则输出到char.txt，以此类推。</p>
<p>我没有找到其它简单的方法，只找到一种用awk来处理的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;&#123;print $1 &gt; $2 &quot;.txt&quot;&#125;&#39; &#x2F;tmp&#x2F;test.txt</span><br></pre></td></tr></table></figure>
<p>我们来检查结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -nH . *</span><br><span class="line">char.txt:1:a</span><br><span class="line">char.txt:2:b</span><br><span class="line">int.txt:1:1</span><br><span class="line">int.txt:2:2</span><br><span class="line">string.txt:1:abc</span><br></pre></td></tr></table></figure>
<h3 id="7-用exec命令来完成重定向"><a href="#7-用exec命令来完成重定向" class="headerlink" title="7. 用exec命令来完成重定向"></a>7. 用exec命令来完成重定向</h3><p>以一个简单的例子开始，现在需要一个脚本，它可以接受一个文件名作为参数，然后按行读取该文件的内容并打印到标准输出。如果不指定文件名，则默认从标准输入读。首先按上面的功能需求写出一个可以完成功能的脚本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat test.sh </span><br><span class="line"></span><br><span class="line">filename&#x3D;$1</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$filename&quot; ]; then</span><br><span class="line">    while read line; do</span><br><span class="line">        echo $line</span><br><span class="line">    done</span><br><span class="line">else</span><br><span class="line">    while read line; do</span><br><span class="line">        echo $line</span><br><span class="line">    done &lt; $filename</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>如果换exec来实现重定向，可以把脚本写得更优雅：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat test1.sh </span><br><span class="line"></span><br><span class="line">filename&#x3D;$1</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$filename&quot; ]; then</span><br><span class="line">    exec 0&lt; $filename</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">while read line; do</span><br><span class="line">    echo $line</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>这里的关键在第5行代码，exec命令不仅可以用于执行命令，还可以用于打开、关闭或者复制文件描述符，这里就是利用exec将指定的文件名打开重定向到标准输入。类似地可以用exec &gt;$filename将文件重定向到标准输出。我们可以在命令行上做一个试验：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ exec 3&gt;&amp;1                   # 首先将fd 3重定向到标准输出，作为标准输出的一个备份</span><br><span class="line"></span><br><span class="line">$ ls &#x2F;proc&#x2F;629&#x2F;fd&#x2F;&#123;1,3&#125; -l    # 现在fd 3和fd 1指向同一个设备文件</span><br><span class="line">lrwx------ 1 kodango kodango 64 Nov 10 00:26 &#x2F;proc&#x2F;629&#x2F;fd&#x2F;1 -&gt; &#x2F;dev&#x2F;pts&#x2F;1</span><br><span class="line">lrwx------ 1 kodango kodango 64 Nov 10 00:26 &#x2F;proc&#x2F;629&#x2F;fd&#x2F;3 -&gt; &#x2F;dev&#x2F;pts&#x2F;1</span><br><span class="line"></span><br><span class="line">$ exec &gt;stdout               # 现在把标准输出重定向到stdout这个文件中</span><br><span class="line"></span><br><span class="line">$ ls &#x2F;proc&#x2F;629&#x2F;fd&#x2F;1 -l        # 如果你此刻在同一个终端下执行本命令是没有返回的</span><br><span class="line"></span><br><span class="line">$ ls &#x2F;proc&#x2F;629&#x2F;fd&#x2F;1 -l        # 现在重新打开一个终端看看，确实已经重定向到stdout这个文件</span><br><span class="line">l-wx------ 1 kodango kodango 64 Nov 10 00:26 &#x2F;proc&#x2F;629&#x2F;fd&#x2F;1 -&gt; &#x2F;home&#x2F;kodango&#x2F;stdout</span><br><span class="line"></span><br><span class="line">$ exec 1&gt;&amp;3                   # 现在重新把标准输出重定向到之前备份的fd 3上</span><br><span class="line">$ ls &#x2F;proc&#x2F;629&#x2F;fd&#x2F;&#123;1,3&#125; -l  # 现在屏幕可以看到输出了，但是fd 3这个描述符还打开，需要关闭</span><br><span class="line">lrwx------ 1 kodango kodango 64 Nov 10 00:26 &#x2F;proc&#x2F;629&#x2F;fd&#x2F;1 -&gt; &#x2F;dev&#x2F;pts&#x2F;1</span><br><span class="line">lrwx------ 1 kodango kodango 64 Nov 10 00:26 &#x2F;proc&#x2F;629&#x2F;fd&#x2F;3 -&gt; &#x2F;dev&#x2F;pts&#x2F;1</span><br><span class="line"></span><br><span class="line">$ exec 3&gt;&amp;-                   # 关闭fd 3</span><br><span class="line">$ ls &#x2F;proc&#x2F;629&#x2F;fd&#x2F;3 -l</span><br><span class="line">ls: cannot access &#x2F;proc&#x2F;629&#x2F;fd&#x2F;3: No such file or directory</span><br><span class="line"></span><br><span class="line">$ cat stdout                  # 检查stdout文件，确实有之前被吃掉的输出</span><br><span class="line">l-wx------ 1 kodango kodango 64 Nov 10 00:26 &#x2F;proc&#x2F;629&#x2F;fd&#x2F;1 -&gt; &#x2F;home&#x2F;kodango&#x2F;stdout</span><br></pre></td></tr></table></figure>
<p>这一点在while read; do xxx; done &lt; file内部仍需要从标准输入读取内容时非常有用，此时必须要将循环外部的重定向和内部的剥离开来。</p>
<h3 id="8-引号之间的区别"><a href="#8-引号之间的区别" class="headerlink" title="8. 引号之间的区别"></a>8. 引号之间的区别</h3><p>Shell中比较让人抓狂的是各种引号的处理，其中，反引号(cmd)是最容易掌握的，它其实和$(cmd)是差不多的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">引号的作用有几点，一个是为了将多个因为空格或者回车等分隔符隔开的字符串合在一起，避免被命令行解析分开，例如&quot;one two three&quot;就是一整个字符串，而不是像one two three会被解析成三个单独的字符串；另外一方面，引号可以让一些特殊符号保持原义。</span><br><span class="line"></span><br><span class="line">其中，单引号的处理是比较简单的，被单引号包括的所有字符都保留原有的意思，例如&#39;$a&#39;不会被展开, &#39;cmd&#39;也不会执行命令；而双引号，则相对比较松，在双引号中，以下几个字符$, , \依然有其特殊的含义，比如$可以用于变量展开, 反引号可以执行命令，反斜杠可以用于转义。但是，在双引号包围的字符串里，反斜杠的转义也是有限的，它只能转义$, &#96;, &quot;, 或者newline（回车）这几个字符，后面如果跟着的不是这几个字符，只不会被黑底，反斜杠会被保留，例如：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ echo &quot;\$,\&quot;,\&#96;,\&#39;,\t&quot;</span><br><span class="line">$,&quot;,&#96;,\&#39;,\t</span><br></pre></td></tr></table></figure>
<p>到此为止，其实双引号和单引号的区别已经说得差不多了。不过还可以再说几个特殊的用法，前面说过可以在双引号内部使用单引号，你有想过在单引号里面使用单引号吗？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &#39;\&#39;&#39;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>是不是发现不能用，因为单引号中反斜杠是没有转义的效果的，任何字符都没有特殊的含义。那就没有办法了吗？方法总是有的，可以在第一个单引号前面加个$符号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo $&#39;\&#39;&#39;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure>

<h3 id="9-特殊用法-’string’"><a href="#9-特殊用法-’string’" class="headerlink" title="9. 特殊用法$’string’"></a>9. 特殊用法$’string’</h3><p>前面一点中已经介绍了 $’string’这种用法，比如 $’’’，之所以可以这样用，通俗地讲，就是在这种语法里一些转义字符串是被认可的，事实上有效地的转义底字符串列表可以看这里，例如b，’,n,f,nnn,xhh等等，是不是很熟悉。 $’string’的这个特性，其实为我们提供了一种很有用的技巧：</p>
<p>$ echo $’\x41’<br>A<br>他可以将ASCII对应的字符赋值给某个变量或者输出。</p>
<h3 id="10-用双引号比不用更加安全"><a href="#10-用双引号比不用更加安全" class="headerlink" title="10. 用双引号比不用更加安全"></a>10. 用双引号比不用更加安全</h3><p>双引号除了前面第10点讲到的去除特殊涵义的作用外，还可以避免字符串被分隔解析，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &#96;ls -l&#96;</span><br><span class="line">total 4.0K -rw-r--r-- 1 kodango kodango 4 Nov 10 20:09 1 -rw-r--r-- 1 kodango kodango 0 Nov 10 20:09 2</span><br><span class="line">$ echo &quot;&#96;ls -l&#96;&quot;</span><br><span class="line">total 4.0K</span><br><span class="line">-rw-r--r-- 1 kodango kodango 4 Nov 10 20:09 1</span><br><span class="line">-rw-r--r-- 1 kodango kodango 0 Nov 10 20:09 2</span><br></pre></td></tr></table></figure>
<p>前者没有加双引号，ls -l输出行之间的回车就被吃掉了。原因是，当ls -l返回的结果传递给echo之前，会先被shell进行参数解析，而shell是用IFS定义的分隔符来分隔字符串的，一般包括n，所以它把解析后的结果再传递给echo，就成为echo “line 1….” “line 2…”这种形式了，结果就像上面一样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">而用双引号包括起来可以避开字符串被拆开解析，因为shell认为它是一个单独的字符串。所以一般情况下，多用引号包括变量是好的，&quot;$var&quot;比$var更安全。</span><br></pre></td></tr></table></figure>

<h3 id="11-显示一个文件并且在每行开头添加行号"><a href="#11-显示一个文件并且在每行开头添加行号" class="headerlink" title="11. 显示一个文件并且在每行开头添加行号"></a>11. 显示一个文件并且在每行开头添加行号</h3><p>有两种做法，第一种借助cat和nl命令来完成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat test.txt | nl</span><br><span class="line">     1    line 1 </span><br><span class="line">     2    line 2</span><br><span class="line">$ cat -n test.txt</span><br><span class="line">     1    line 1 </span><br><span class="line">     2    line 2</span><br><span class="line">$ nl test.txt     </span><br><span class="line">     1    line 1 </span><br><span class="line">     2    line 2</span><br></pre></td></tr></table></figure>
<p>另外一种做法是用sed命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sed &#39;&#x3D;&#39; test.txt | sed &#39;N;s&#x2F;\n&#x2F;\t&#x2F;&#39;</span><br></pre></td></tr></table></figure>
<p>还有一种方法是通过cat -n或者cat -b命令，两者的区别是后者不会给空行增加行号,nl命令特别方便,而且空行没有行号;</p>
<h3 id="12-分别输出两个文件相同的行和不同的行"><a href="#12-分别输出两个文件相同的行和不同的行" class="headerlink" title="12. 分别输出两个文件相同的行和不同的行"></a>12. 分别输出两个文件相同的行和不同的行</h3><p>假设我们有以下两个文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo test&#123;,2&#125;.txt;paste test&#123;,2&#125;.txt</span><br><span class="line">test.txt test2.txt</span><br><span class="line">line 1     line 11</span><br><span class="line">line 2    line 2</span><br></pre></td></tr></table></figure>
<p>如果要输出两个文件之间相同的行，只有test.txt拥有的行以及只有test2.txt拥有的行，怎么做？首先可以使用grep -f：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ grep -f test&#123;,2&#125;.txt</span><br><span class="line">line 2</span><br><span class="line">$ grep -vf test&#123;,2&#125;.txt</span><br><span class="line">line 11</span><br><span class="line">$ grep -vf test&#123;2,&#125;.txt</span><br><span class="line">line 1</span><br></pre></td></tr></table></figure>
<p>还有一种选择是comm命令，这个命令就是专门用于比较文件的： comm - compare two sorted files line by line。 使用方法也很简单，comm比较两个排序好的文件返回的结果有三列，第一列是只有在文件A中有的行，第二列是只有在文件B中有的行，第三列则是两个文件共有的行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ comm test.txt test2.txt                </span><br><span class="line">line 1 </span><br><span class="line">    line 11</span><br><span class="line">        line 2</span><br></pre></td></tr></table></figure>
<p>要得到最初要求的结果，则只需要取相应的列就可以了。comm命令非常人性化地考虑到这个需求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ comm test.txt test2.txt -1 -2</span><br><span class="line">line 2</span><br><span class="line">$ comm test.txt test2.txt -2 -3</span><br><span class="line">line 1 </span><br><span class="line">$ comm test.txt test2.txt -1 -3</span><br><span class="line">line 11</span><br></pre></td></tr></table></figure>
<p>其中，=1, -2与-3这个参数分别表示不输出第1、2或者3列。</p>
<h3 id="13-获取被source的脚本的名称"><a href="#13-获取被source的脚本的名称" class="headerlink" title="13. 获取被source的脚本的名称"></a>13. 获取被source的脚本的名称</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一般的情况下，脚本的名称可以通过$0获取，但是这在被source导入的脚本中却不成立。假设A脚本中source了B脚本，那么它是把B的代码导入到A的环境中直接执行的，因此A和B的代码其实是在同一个执行环境下分不开的，B的代码中访问到的$0，甚至$1, $2等位置参数都是与A脚本是一致的。</span><br></pre></td></tr></table></figure>

<p>因此$0并非是被导入的脚本的名称，实际上，Bash将被source的脚本名称保存在一个叫BASH_SOURCE的数组中，该数组的第一个元素正是当前被source的脚本的名称。该变量与我在bash获取当前函数名中介绍的FUNCNAME是类似的，当一个脚本被source时，它的名称就被压入到这个数组的第一个位置上，举个实际的例子，假设有三个脚本a.sh,b.sh,c.sh，它们的内容如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat a.sh </span><br><span class="line">. .&#x2F;b.sh</span><br><span class="line">echo &quot;\$0&#x3D;$0&quot;</span><br><span class="line">echo &quot;\$&#123;BASH_SOURCE[0]&#125;&#x3D;$&#123;BASH_SOURCE[0]&#125;&quot;</span><br><span class="line">echo &quot;\$BASH_SOURCE&#x3D;($&#123;BASH_SOURCE[@]&#125;)&quot;</span><br><span class="line"></span><br><span class="line">$ cat b.sh </span><br><span class="line">. .&#x2F;c.sh</span><br><span class="line">. .&#x2F;c.sh</span><br><span class="line">echo &quot;\$0&#x3D;$0&quot;</span><br><span class="line">echo &quot;\$&#123;BASH_SOURCE[0]&#125;&#x3D;$&#123;BASH_SOURCE[0]&#125;&quot;</span><br><span class="line">echo &quot;\$BASH_SOURCE&#x3D;($&#123;BASH_SOURCE[@]&#125;)&quot;</span><br><span class="line"></span><br><span class="line">$ cat c.sh </span><br><span class="line">$ cat c.sh </span><br><span class="line">echo &quot;\$0&#x3D;$0&quot;</span><br><span class="line">echo &quot;\$&#123;BASH_SOURCE[0]&#125;&#x3D;$&#123;BASH_SOURCE[0]&#125;&quot;</span><br><span class="line">echo &quot;\$BASH_SOURCE&#x3D;($&#123;BASH_SOURCE[@]&#125;)&quot;</span><br></pre></td></tr></table></figure>
<p>现在执行a.sh这个脚本，实际的输出是（为了方便理解，我在实际的输出中加了一些注释和空行）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bash a.sh</span><br><span class="line"># c.sh的输出</span><br><span class="line">$0&#x3D;a.sh</span><br><span class="line">$&#123;BASH_SOURCE[0]&#125;&#x3D;.&#x2F;c.sh</span><br><span class="line">$BASH_SOURCE&#x3D;(.&#x2F;c.sh .&#x2F;b.sh a.sh)</span><br><span class="line"></span><br><span class="line"># b.sh的输出</span><br><span class="line">$0&#x3D;a.sh</span><br><span class="line">$&#123;BASH_SOURCE[0]&#125;&#x3D;.&#x2F;b.sh</span><br><span class="line">$BASH_SOURCE&#x3D;(.&#x2F;b.sh a.sh)</span><br><span class="line"></span><br><span class="line"># a.sh的输出</span><br><span class="line">$0&#x3D;a.sh</span><br><span class="line">$&#123;BASH_SOURCE[0]&#125;&#x3D;a.sh</span><br><span class="line">$BASH_SOURCE&#x3D;(a.sh)</span><br></pre></td></tr></table></figure>
<p>此外，我们还可以利用BASH_SOURCE的值，在脚本中判断是被直接执行还是被导入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ -n &quot;$BASH_SOURCE&quot; -a &quot;$BASH_SOURCE&quot; !&#x3D; &quot;$0&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;be sourced by other scripts&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;be run in shell&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="14-参数展开"><a href="#14-参数展开" class="headerlink" title="14. ${}参数展开"></a>14. ${}参数展开</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们知道$&#123;parameter&#125;是展开变量parameter这个值，在上一篇简洁的bash编程技巧中也曾经介绍过$&#123;parameter:-word&#125;这种用法，用于给变量赋一个默认值。 事实上除此之外，参数展开还有许多形式，在此之前，首先要说明一下变量的几种值的形式：</span><br></pre></td></tr></table></figure>

<p>unset： 变量未设置，即变量从未声明，或者被unset命令重置；<br>null: 变量声明但未被赋值（var=）或者被赋值成空（var=””）；<br>not null： 变量被赋值；<br>unset和null在参数展开的时候还是有很大的区别的，以下是参数展开的各种形式：</p>
<p>${parameter:-word}：假如parameter为unset或者null，则展开后返回word的值；<br>${parameter-word}：假如parameter为unset时，则展开后返回word的值;<br>${parameter:=word}：假如parameter为unset或者null，将word赋值给parameter；<br>${parameter=word}：假如parameter为unset，将word赋值给parameter；<br>${parameter:?word}：假如parameter为unset或者null，则将word作为错误输出到标准输出；<br>${parameter?word}：假如parameter为unset，则将word作为错误输出到标准输出；<br>${parameter:+word}：假如parameter为unset或者null，则不做展开，返回为空；（刚好与:-相反）<br>${parameter:word}：假如parameter为unset，则不做展开，返回为空；（刚好与-相反）<br>上面其实准确地应该是分成2组，一组带:，一组不带:，不带:的这组更加严格，只检查unset这种情况。以:+为例子, unset的情况均无返回：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ unset var &amp;&amp; echo $&#123;var:+hello&#125;</span><br><span class="line">$ unset var &amp;&amp; echo $&#123;var+hello&#125;</span><br></pre></td></tr></table></figure>
<p>当var为空时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ var&#x3D; &amp;&amp; echo &quot;$&#123;var:+hello&#125;&quot;</span><br><span class="line">$ var&#x3D; &amp;&amp; echo &quot;$&#123;var+hello&#125;&quot;</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
<p>当var为非空时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ var&#x3D;1 &amp;&amp; echo &quot;$&#123;var:+hello&#125;&quot;</span><br><span class="line">hello</span><br><span class="line">$ var&#x3D;1 &amp;&amp; echo &quot;$&#123;var+hello&#125;&quot;</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
<h3 id="15-冒号的多种使用场景"><a href="#15-冒号的多种使用场景" class="headerlink" title="15. 冒号的多种使用场景"></a>15. 冒号的多种使用场景</h3><p>冒号是一个比较奇怪的符号，它的用途有很多，这里介绍几种常用的：</p>
<ol>
<li>内置命令null command：nop，表示什么都不做，也可以被当作true值使用；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ :</span><br><span class="line">$ echo $?    # return 0</span><br></pre></td></tr></table></figure>
它也可以在循环中当作true值，例如:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while :; do   # 等价于 while true; do</span><br><span class="line">    take-some-action</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">if condition</span><br><span class="line">then :</span><br><span class="line">else </span><br><span class="line">    take-some-action</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li>占位符 冒号可以在很多场景下充当占位符，例如之前介绍的${parameter=var}，如果直接执行会报错，表示找不到命令；这时可以借用冒号来完成赋值：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">: $&#123;parameter&#x3D;var&#125;</span><br></pre></td></tr></table></figure>
同样地，可以来判断变量是否赋值：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">: $&#123;parameter1?&#125; $&#123;parameter2?&#125;</span><br></pre></td></tr></table></figure>
<h3 id="16-扩展的括号展开功能"><a href="#16-扩展的括号展开功能" class="headerlink" title="16. 扩展的括号展开功能"></a>16. 扩展的括号展开功能</h3>这个功能不能说鸡肋，也可以了解下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &#123;0..3&#125;</span><br><span class="line">0 1 2 3</span><br><span class="line">$ echo &#123;z..a&#125;</span><br><span class="line">z y x w v u t s r q p o n m l k j i h g f e d c b a</span><br><span class="line">$ echo &#123;a..z&#125;</span><br><span class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</span><br></pre></td></tr></table></figure>
<h3 id="17-安全的中括号"><a href="#17-安全的中括号" class="headerlink" title="17. 安全的中括号"></a>17. 安全的中括号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[[]]的功能比[]更加多，使用起来也更加安全。</span><br><span class="line"></span><br><span class="line">1. 首先[[]]内部不会发生文件名展开和单词分隔。 例如：</span><br><span class="line"></span><br><span class="line">$ touch hello\ world</span><br><span class="line">$ [[ -f $file ]] &amp;&amp; echo yes</span><br><span class="line">yes</span><br><span class="line">$ [ -f $file ] &amp;&amp; echo yes</span><br><span class="line">-bash: [: hello: binary operator expected</span><br><span class="line"></span><br><span class="line">2. 进制之间自动转化 当一个十进制与八进制做比较时，会自动计算两个数的值，统一后做比较：</span><br><span class="line">$ o&#x3D;017</span><br><span class="line">$ h&#x3D;0x0f</span><br><span class="line">$ [[ $o -eq $h ]] &amp;&amp; echo yes</span><br><span class="line">yes</span><br><span class="line">$ [[ $o -eq 15 ]] &amp;&amp; echo yes</span><br><span class="line">yes</span><br><span class="line"></span><br><span class="line">3. [[]]支持&amp;&amp;，||等运算符</span><br><span class="line">$ a&#x3D;1;b&#x3D;3</span><br><span class="line">$ [[ $a &gt; 0 &amp;&amp; $b &lt; 4 ]] &amp;&amp; echo yes</span><br><span class="line">yes</span><br></pre></td></tr></table></figure>
<h3 id="18-获取Bash脚本的最后一个参数"><a href="#18-获取Bash脚本的最后一个参数" class="headerlink" title="18. 获取Bash脚本的最后一个参数"></a>18. 获取Bash脚本的最后一个参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们都知道可以用$0，$1等来获取传递给脚本或者函数的参数，也可以用$*或者$@获取所有的参数，但是如果我只想要获取最后一个参数呢？</span><br></pre></td></tr></table></figure>
首先，你可能想到用遍历地方法（这里为了方便，我们使用set命令来设置位置参数）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ set -- arg1 arg2 arg3</span><br><span class="line">$ for i in $@; do :; done</span><br><span class="line">$ echo $i</span><br><span class="line">arg3</span><br></pre></td></tr></table></figure>
这里的循环什么事情都没做，我用冒号（:）完成这个任务；循环结束后, $i就是保存着最后一个参数的值。 下面是两种更加简单的方法的：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo $&#123;@: -1&#125;</span><br><span class="line">$ echo $&#123;!#&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上面的第一种方法事实上就是Parameter Expansion中的$&#123;parameter:offset:length&#125;这种形式，只不过offset为-1表示最后一个元素，忽略length表明是从offset开始往后直到最后一个元素，即只取最后一个元素。这里要注意的一点是，在冒号和短横之间的空格不能少，否则就变成15. $&#123;&#125;参数展开中介绍的$&#123;parameter:-var&#125;这种用法了。</span><br><span class="line"></span><br><span class="line">而第二种方法则是indirect referencing的一种表现，#这个特殊的变量存放参数的个数，!#则是对最后一个变量的引用。</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="19-Bash中的引用-indirect-referencing"><a href="#19-Bash中的引用-indirect-referencing" class="headerlink" title="19. Bash中的引用(indirect referencing)"></a>19. Bash中的引用(indirect referencing)</h3><p>有没有想法在Bash中也可以达到C++引用的效果？你可能不知道，但是你可能曾经有这种需求，我就有过：</p>
<p>有时候，我想要一个变量存放另外一个变量的名称，然后在后面我想通过这个变量的名称引用它的值<br>例子是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ a&#x3D;b</span><br><span class="line">$ b&#x3D;1</span><br><span class="line">$ echo $a</span><br><span class="line">b</span><br><span class="line">$ eval &quot;echo \$a&quot;</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>但是利用indirect referencing的用法，你可以这样获取b的值:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo $&#123;!a&#125;</span><br><span class="line">1</span><br><span class="line">$ b&#x3D;2</span><br><span class="line">$ echo $&#123;!a&#125;</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p><a href="https://yq.aliyun.com/articles/68540?spm=a2c4e.11153959.teamhomeleft.71.7e4c8bc1kg1JeI" target="_blank" rel="noopener"> 原文地址</a></p>
]]></content>
      <categories>
        <category>SHELL</category>
      </categories>
      <tags>
        <tag>SHELL</tag>
      </tags>
  </entry>
  <entry>
    <title>简洁的Bash Programming技巧(二)</title>
    <url>/2020/04/20/%E7%AE%80%E6%B4%81%E7%9A%84Bash-Programming%E6%8A%80%E5%B7%A7-%E4%BA%8C/</url>
    <content><![CDATA[<h2 id="简洁的Bash-Programming技巧-三"><a href="#简洁的Bash-Programming技巧-三" class="headerlink" title="简洁的Bash Programming技巧(三)"></a>简洁的Bash Programming技巧(三)</h2><p>这一系列的文章专门介绍 Bash 编程中一些简洁的技巧，帮助大家提高平时 Bash 编程的效率。</p>
<h3 id="1-替换语法-parameter-pattern-string-的妙用"><a href="#1-替换语法-parameter-pattern-string-的妙用" class="headerlink" title="1. 替换语法${parameter/pattern/string}的妙用"></a>1. 替换语法${parameter/pattern/string}的妙用</h3><p>${parameter/pattern/string}将parameter中匹配pattern的部分替换成string，例如下面的例子将字符串中的e替换成x：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ str&#x3D;&quot;three&quot;</span><br><span class="line">$ echo &quot;$&#123;str&#x2F;e&#x2F;x&#125;&quot;</span><br><span class="line">thrxe</span><br></pre></td></tr></table></figure>
<p>如果pattern部分以/开头，表示替换parameter中所有匹配的内容，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ str&#x3D;&quot;three&quot;</span><br><span class="line">$ echo &quot;$&#123;str&#x2F;&#x2F;e&#x2F;x&#125;&quot;  # thrxx</span><br></pre></td></tr></table></figure>
<p>如果pattern部分以#开头，表示仅当parameter开始处匹配pattern的时候替换，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str&#x3D;&quot;three&quot;</span><br><span class="line">$ echo &quot;$&#123;str&#x2F;#e&#x2F;x&#125;&quot; # three</span><br><span class="line">$ echo &quot;$&#123;str&#x2F;#t&#x2F;x&#125;&quot; # xhree</span><br></pre></td></tr></table></figure>
<p>与此对应地是，如果pattern部分以%开头，表示仅当parameter结尾处匹配pattern的时候替换，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ str&#x3D;&quot;three&quot;</span><br><span class="line">$ echo &quot;$&#123;str&#x2F;%e&#x2F;x&#125;&quot; # threx</span><br></pre></td></tr></table></figure>
<p>如果string部分为空，匹配pattern的部分被删除（替换为空），例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ str&#x3D;&quot;three&quot;</span><br><span class="line">$ echo &quot;$&#123;str&#x2F;h&#x2F;&#125;&quot;  # tree</span><br></pre></td></tr></table></figure>
<p>这个时候第二个斜杠可以删除，即：echo “${str/h}” 如果parameter是一个数组会怎么样呢？有兴趣的可以看看Bash的man手册说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">man -P &#39;less -p &quot;\\$\&#123;parameter&#x2F;pattern&#x2F;string&#125;&quot;&#39; bash</span><br></pre></td></tr></table></figure>
<h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. +=运算符"></a>2. +=运算符</h3><p>有一天，我看到这样一个用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ arr&#x3D;(1 2 3)</span><br><span class="line">$ arr+&#x3D;(4 5)</span><br></pre></td></tr></table></figure>
<p>原来数组还可以这样相加，后来我看了下Bash的手册，确实有一段这么说明的，这里未引用这段文字，有兴趣的可以查看<a href="http://www.gnu.org/software/bash/manual/bashref.html?spm=a2c4e.11153959.blogcont68524.12.4dbf3d2foIG0jZ#Shell-Parameters" target="_blank" rel="noopener">Bash Reference Manual</a> 自然地我们会想到如果一个变量是数字，是否也可以用+=作运算呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ i&#x3D;1</span><br><span class="line">$ i+&#x3D;1</span><br></pre></td></tr></table></figure>
<p>但是，运行后你会发现i的结果并不为2，而是11，这里bash并不认为i是一个整数，而是作为字符串。 这时可以通过declare声明一个变量为整数，上面的问题就解决了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ declare -i int&#x3D;1</span><br><span class="line">$ int+&#x3D;1</span><br><span class="line">$ echo $int</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<h3 id="3-Here-document不为人知的用法"><a href="#3-Here-document不为人知的用法" class="headerlink" title="3. Here document不为人知的用法"></a>3. Here document不为人知的用法</h3><p>Shell学得越多，越会发现一些神奇的用法，每天都觉得自己实在是一个刚入门的菜鸟。</p>
<ol>
<li>Here Document 是在Linux Shell 中的一种特殊的重定向方式，它的基本的形式如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd &lt;&lt; delimiter</span><br><span class="line">  Here Document Content</span><br><span class="line">delimiter</span><br></pre></td></tr></table></figure>
它的作用就是将两个 delimiter 之间的内容(Here Document Content 部分) 传递给cmd 作为输入参数。</li>
<li>比如在终端中输入cat &lt;&lt; EOF ，系统会提示继续进行输入，输入多行信息再输入EOF，中间输入的信息将会显示在屏幕上。如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &lt;&lt; EOF</span><br><span class="line">&gt;  First Line</span><br><span class="line">&gt; Second Line</span><br><span class="line">&gt; Third Line EOF</span><br><span class="line">&gt; EOF</span><br><span class="line"> First Line</span><br><span class="line">Second Line</span><br><span class="line">Third Line EOF</span><br></pre></td></tr></table></figure>
注⚠️： &gt;这个符号是终端产生的提示输入信息的标识符<br>这里要注意几点</li>
<li>EOF 只是一个标识而已，可以替换成任意的合法字符</li>
<li>作为结尾的delimiter一定要顶格写，前面不能有任何字符</li>
<li>作为结尾的delimiter后面也不能有任何的字符（包括空格）</li>
<li>作为起始的delimiter前后的空格会被省略掉<br>Here Document 不仅可以在终端上使用，在shell 文件中也可以使用，例如下面的here.sh 文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; output.sh</span><br><span class="line">echo &quot;hello&quot;</span><br><span class="line">echo &quot;world&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
使用 bash here.sh 运行这个脚本文件，会得到output.sh 这个新文件，里面的内容如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;hello&quot;</span><br><span class="line">echo &quot;world&quot;</span><br></pre></td></tr></table></figure></li>
<li>delimiter 与变量<br>在Here Document 的内容中，不仅可以包括普通的字符，还可以在里面使用变量,例如将上面的here.sh改为<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat here.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; output.sh  #没有引号</span><br><span class="line">echo &quot;hello, $USER&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ bash here.sh</span><br><span class="line">$ cat output.sh</span><br><span class="line">echo &quot;hello, shuke&quot;</span><br></pre></td></tr></table></figure>
使用bash here.sh HereDocument 运行脚本得到output.sh的内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat output.sh</span><br><span class="line">echo &quot;hello $USER&quot;</span><br></pre></td></tr></table></figure>
在这里 $1 被展开成为了脚本的参数 HereDocument<br>但是有时候不想展开这个变量怎么办呢，可以通过在起始的 delimiter的前后添加 “ 来实现,将EOF有引号括起来就可以：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat here.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; &quot;EOF&quot;     #注意引号</span><br><span class="line">echo &quot;hello, $USER&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ bash here.sh</span><br><span class="line">echo &quot;hello, $USER&quot;</span><br></pre></td></tr></table></figure>
<h3 id="4-«-变为-«"><a href="#4-«-变为-«" class="headerlink" title="4. « 变为 «-"></a>4. « 变为 «-</h3>Here Document 还有一个用法就是将 ‘«’ 变为 ‘«-‘。 使用 &lt;&lt;- 的唯一变化就是Here Document 的内容部分每行前面的 tab (制表符)将会被删除掉，这种用法是为了编写Here Document的时候可以将内容部分进行缩进，方便阅读代码.<br>如果你有强迫症，有时候使用here document的时候会很不爽，因为here document里面每行首部的空格都会被保留，而如果要顶格写，在缩进的地方又会有点打乱结构，例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat b.sh</span><br><span class="line"># part 1</span><br><span class="line">if :; then</span><br><span class="line">    cat &lt;&lt; EOF</span><br><span class="line">    hello, $USER    </span><br><span class="line">EOF</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># part 2</span><br><span class="line">if :; then</span><br><span class="line">    if :; then</span><br><span class="line">        cat &lt;&lt; EOF</span><br><span class="line">hello, $USER    </span><br><span class="line">EOF</span><br><span class="line">    fi</span><br></pre></td></tr></table></figure>
上面的脚本执行的结果为：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sh b.sh </span><br><span class="line">    hello, kodango   # part 1 result</span><br><span class="line">hello, kodango       # part 2 result</span><br></pre></td></tr></table></figure>
有没有办法既兼顾到缩进又能不保留行首空格呢？</li>
</ol>
<p>答案也是肯定的，只不过语法又要稍稍变一下，现在在&lt;&lt;的后面加一个短横，这个用法下，行首的Tab字符都会被忽略:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat b.sh </span><br><span class="line">if :; then</span><br><span class="line">    cat &lt;&lt;- EOF</span><br><span class="line">    hello, $USER    </span><br><span class="line">EOF</span><br><span class="line">fi</span><br><span class="line">$ sh b.sh </span><br><span class="line">hello, shuke</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>一定要是Tab键哦，空格也是不可以的，在vim里面还要注意如果设置了smarttab选项，行首插入的Tab键会替换成相应个数的空格(这里可以按ctrl+v tab插入实际的空格)</p>
<h3 id="5-使用内置命令declare显示脚本中定义的函数"><a href="#5-使用内置命令declare显示脚本中定义的函数" class="headerlink" title="5. 使用内置命令declare显示脚本中定义的函数"></a>5. 使用内置命令declare显示脚本中定义的函数</h3><p>declare的-F选项可以列出脚本中定义的函数名称：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat fun.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function one()</span><br><span class="line">&#123;</span><br><span class="line">    :</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function two()</span><br><span class="line">&#123;</span><br><span class="line">    :</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare -F | sed &#39;s&#x2F;declare -f &#x2F;&#x2F;&#39;</span><br><span class="line">shuke@MacBooKPro:&#x2F;tmp</span><br><span class="line">$ bash fun.sh</span><br><span class="line">one</span><br><span class="line">two</span><br></pre></td></tr></table></figure>
<h3 id="6-嵌套函数还可以这么用"><a href="#6-嵌套函数还可以这么用" class="headerlink" title="6. 嵌套函数还可以这么用"></a>6. 嵌套函数还可以这么用</h3><p>Bash中可以嵌套函数定义，即在一个函数中定义另外一个函数，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat fun.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">function out()</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;out&quot;</span><br><span class="line"></span><br><span class="line">    function inner() &#123;</span><br><span class="line">        echo &quot;inner&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">inner</span><br><span class="line">out</span><br><span class="line">inner</span><br></pre></td></tr></table></figure>
<p>这里out函数里面定义了inner函数，形成嵌套函数。但是，执行上面的例子会出错（nest.sh: line 12: inner: command not found），这是因为这是后inner函数还没定义。一旦out函数执行之后，inner函数就被定义了。整个例子的执行结果是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bash fun.sh</span><br><span class="line">fun.sh: line 13: inner: command not found</span><br><span class="line">out</span><br><span class="line">inner</span><br></pre></td></tr></table></figure>
<p>看到这里，你可能会想嵌套函数有什么用？事实上，在大多数情况下，我们基本不会用到嵌套函数。但是它并非一无是处，比如下面的例子就向我们展示了嵌套函数的神奇用法。</p>
<p>假设，我们要定义一个调试函数，同时需要一个开关控制该函数是否输出调试日志，最简单的写法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function log()</span><br><span class="line">&#123;</span><br><span class="line">    if [ &quot;$verbose&quot; &#x3D; &quot;1&quot; ]; then</span><br><span class="line">        echo &quot;$@&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它可以完成任务，但是唯一美中不足的是，每次调用该函数都要判断verbose的值是否为1。这时候可以使用嵌套函数来弥补这个不足：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat fun.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">verbose&#x3D;$&#123;1:-1&#125;</span><br><span class="line"></span><br><span class="line">function log()</span><br><span class="line">&#123;</span><br><span class="line">    if [ $verbose -eq 1 ]; then</span><br><span class="line">        function log() &#123;</span><br><span class="line">            echo &quot;$@&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        echo &quot;$@&quot;</span><br><span class="line">    else</span><br><span class="line">        function log() &#123;</span><br><span class="line">            :</span><br><span class="line">        &#125;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log what is your name</span><br><span class="line">log my name is shuke</span><br><span class="line"></span><br><span class="line">$ bash fun.sh</span><br><span class="line">what is your name</span><br><span class="line">my name is shuke</span><br></pre></td></tr></table></figure>
<p>上面的例子中，根据verbose的值定义了两个同名的log函数来覆盖之前的旧函数，以后调用的函数就都是后定义的函数了。</p>
<h3 id="7-删除ps-auxf-grep-python结果中的grep进程"><a href="#7-删除ps-auxf-grep-python结果中的grep进程" class="headerlink" title="7. 删除ps auxf | grep python结果中的grep进程"></a>7. 删除ps auxf | grep python结果中的grep进程</h3><p>在shell脚本中，经常需要利用ps和grep命令一起在查找进程相关的信息，尤其是针对python/java/shell等脚本进程，因为pidof本身不大支持查找脚本进程对应的pid。</p>
<p>在用ps auxf | grep python的时候，一个很恼人的事情是，经常会出现多余的grep进程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ps aux | grep python</span><br><span class="line">shuke            76718   0.1  0.5  4341192  42404 s001  S+   12:52下午   0:01.32 &#x2F;Users&#x2F;zhao&#x2F;anaconda3&#x2F;envs&#x2F;sloth&#x2F;bin&#x2F;python manage.py runserver 8000</span><br><span class="line">shuke            76732   0.0  0.0  4284136    884 s003  S+   12:53下午   0:00.00 grep python</span><br><span class="line">shuke            76716   0.0  0.4  4329332  32936 s001  S+   12:52下午   0:00.68 python manage.py runserver 8000</span><br></pre></td></tr></table></figure>
<p>所以我们需要再加一个grep -v grep来排除它。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ps aux | grep python | grep -v grep</span><br><span class="line">shuke            76718   0.1  0.5  4341192  42404 s001  R+   12:52下午   0:02.13 &#x2F;Users&#x2F;zhao&#x2F;anaconda3&#x2F;envs&#x2F;sloth&#x2F;bin&#x2F;python manage.py runserver 8000</span><br><span class="line">shuke            76716   0.0  0.4  4329332  32936 s001  S+   12:52下午   0:00.68 python manage.py runserver 8000</span><br></pre></td></tr></table></figure>
<p>还有一个解决方法是巧用正则表达式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ps aux | grep [p]ython</span><br><span class="line">shuke            76718   0.5  0.5  4341192  42412 s001  S+   12:52下午   0:03.58 &#x2F;Users&#x2F;zhao&#x2F;anaconda3&#x2F;envs&#x2F;sloth&#x2F;bin&#x2F;python manage.py runserver 8000</span><br><span class="line">shuke            76716   0.0  0.4  4329332  32936 s001  S+   12:52下午   0:00.68 python manage.py runserver 8000</span><br></pre></td></tr></table></figure>

<p> 一个很好的解释: shell在执行以上命令的时候，其实创建了一个管道，并且fork了两个子进程：ps auxf与grep python，并且将管道读的这一端绑定到grep的标准输入，管道写的这一段绑定到ps的标准输出。ps将自己的输出写到管道，grep从管道中读取输入。可能在这个时候，ps与grep是同时执行的，所以ps的结果中也会包含grep进程的信息。</p>
<h3 id="8-Shell如何实现timeout功能"><a href="#8-Shell如何实现timeout功能" class="headerlink" title="8. Shell如何实现timeout功能"></a>8. Shell如何实现timeout功能</h3><p> 有时候我们不希望某个命令执行太久，所以如果在给定的时间内没有完成，能够杀掉这个命令对应的进程，这就是timeout功能，可惜bash没有提供该功能。所以就得我们自己来实现。</p>
<p>实现代码如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function timeout()</span><br><span class="line">&#123;</span><br><span class="line">    local time cmd pid</span><br><span class="line"></span><br><span class="line">    if echo &quot;$1&quot; | grep -Eq &#39;^[0-9]+&#39;; then</span><br><span class="line">        time&#x3D;$1</span><br><span class="line">        shift &amp;&amp; cmd&#x3D;&quot;$@&quot;</span><br><span class="line">    else</span><br><span class="line">        time&#x3D;5</span><br><span class="line">        cmd&#x3D;&quot;$@&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    $cmd &amp;</span><br><span class="line">    pid&#x3D;$!</span><br><span class="line"></span><br><span class="line">    while kill -0 $pid &amp;&gt;&#x2F;dev&#x2F;null; do</span><br><span class="line">        sleep 1</span><br><span class="line">        let time-&#x3D;1</span><br><span class="line"></span><br><span class="line">        if [ &quot;$time&quot; &#x3D; &quot;0&quot; ]; then</span><br><span class="line">            kill -9 $pid &amp;&gt;&#x2F;dev&#x2F;null</span><br><span class="line">            wait $pid &amp;&gt;&#x2F;dev&#x2F;null</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设有一个测试脚本,内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat sleep.sh</span><br><span class="line">echo &quot;sleep $1 seconds&quot;</span><br><span class="line">sleep $1</span><br><span class="line">echo &quot;awake from sleep&quot;</span><br></pre></td></tr></table></figure>
<p>现在利用我们写的timeout函数来达到超时kill功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ time bash timeout.sh 2 &#39;sh sleep.sh 100&#39;</span><br><span class="line">sleep 100 seconds</span><br><span class="line"></span><br><span class="line">real    0m2.005s</span><br><span class="line">user    0m0.002s</span><br><span class="line">sys    0m0.001s</span><br></pre></td></tr></table></figure>
<p>看最终执行的时间，差不多就是2秒钟。<br>上面timeout函数实现的代码中，利用了两个技巧：</p>
<ol>
<li>kill -0 $pid：发送信号0给进程，可以检查进程是否存活，如果进程不存在或者没有权限，则返回错误，错误码为1；</li>
<li>wait $pid &amp;&gt;/dev/null：等待某个进程退出返回，这样相对比较优雅，同时将错误重定向到黑洞，从而隐藏后台进程被kill的错误输出；<h3 id="9-利用-etc-inittab实现watchdog"><a href="#9-利用-etc-inittab实现watchdog" class="headerlink" title="9. 利用/etc/inittab实现watchdog"></a>9. 利用/etc/inittab实现watchdog</h3>还在为实现watch dog而头疼吗，其实inittab中已经包含了该功能。可以将自己的脚本或者程序写到inittab文件中：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tt:2345:respawn:&#x2F;home&#x2F;kodango&#x2F;sleep.sh 100</span><br></pre></td></tr></table></figure>
然后执行telinit q使其生效，ps看下该脚本是否已经在运行了，尝试kill后，又会被起起来。</li>
</ol>
<h3 id="10-慎用波浪号展开"><a href="#10-慎用波浪号展开" class="headerlink" title="10. 慎用波浪号展开"></a>10. 慎用波浪号展开</h3><p>在shell中对比下面两种用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ home1&#x3D;~shuke</span><br><span class="line">$ home2&#x3D;&quot;~shuke&quot;</span><br><span class="line">$ echo -e &quot;$home1\n$home2&quot;</span><br><span class="line">&#x2F;Users&#x2F;zhao</span><br><span class="line">~shuke</span><br></pre></td></tr></table></figure>
<p>第一个变量赋值，波浪号正确展开，所以我们得到了kodango用户的家目录地址；第二个变量，我们使用了双引号，这个时候波波浪号并没有展开。这是一个比较容易出错的地方。</p>
<p>还有一点要注意的地方是，波浪号展开只在:或者=号后面才会执行。所以：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ path&#x3D;1~shuke</span><br><span class="line">$ echo &quot;$path&quot;</span><br><span class="line">1~shuke</span><br><span class="line"></span><br><span class="line">$ path&#x3D;1:~shuke</span><br><span class="line">$ echo &quot;$path&quot;</span><br><span class="line">1:&#x2F;Users&#x2F;shuke</span><br></pre></td></tr></table></figure>
<p>为什么要在:后面也可以展开呢？想想PATH的定义吧。</p>
<h3 id="11-pushd-popd"><a href="#11-pushd-popd" class="headerlink" title="11. pushd/popd"></a>11. pushd/popd</h3><p>这个在脚本中非常好用，特别是在循环中<br>如下所示，假设你正在写一个进入退出文件夹的for循环：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for d1 in $(ls -d *&#x2F;)</span><br><span class="line">do</span><br><span class="line"> # Store original working directory.</span><br><span class="line"> original_wd&#x3D;&quot;$(pwd)&quot;</span><br><span class="line"> cd &quot;$d1&quot;</span><br><span class="line"> for d2 in $(ls -d *&#x2F;)</span><br><span class="line"> do</span><br><span class="line">   pushd &quot;$d2&quot;</span><br><span class="line">   # Do something</span><br><span class="line">   popd</span><br><span class="line"> done</span><br><span class="line"> # Return to original working directory</span><br><span class="line"> cd &quot;$&#123;original_wd&#125;&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<p>你可以像这样使用pushd栈来重写上方代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for d1 in $(ls -d *)</span><br><span class="line">do</span><br><span class="line"> pushd &quot;$d1&quot;</span><br><span class="line"> for d2 in $(ls  -d *&#x2F;)</span><br><span class="line"> do</span><br><span class="line">   pushd &quot;$d2&quot;</span><br><span class="line">   # Do something</span><br><span class="line">   popd</span><br><span class="line"> done</span><br><span class="line"> popd</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>它可以追踪记录你切换的目录并进行入栈或出栈<br>注意，当使用pushd出现错误时，可能会丢失栈的记录并且popd多次。因此你可能会想要在脚本中使用set -e（见上一篇文章）</p>
<p>当然也可以用cd -，但是它不会使用栈——仅仅返回前一个目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">cd &#x2F;tmp</span><br><span class="line">cd blah</span><br><span class="line">cd - # Back to &#x2F;tmp</span><br><span class="line">cd - # Back to &#39;blah&#39;</span><br><span class="line">cd - # Back to &#x2F;tmp</span><br><span class="line">cd - # Back to &#39;blah&#39; ...</span><br></pre></td></tr></table></figure>

<h3 id="12-shopt-vs-set"><a href="#12-shopt-vs-set" class="headerlink" title="12.shopt vs set"></a>12.shopt vs set</h3><p>这两个命令困扰了我一阵子。<br>两者之间有什么不同呢？<br>set在之前的文章已经介绍过了，而shopt看起来与之相似。只输入shopt会显示一系列选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ shopt</span><br><span class="line">cdable_vars    off</span><br><span class="line">cdspell        on</span><br><span class="line">checkhash      off</span><br><span class="line">checkwinsize   on</span><br><span class="line">cmdhist        on</span><br><span class="line">compat31       off</span><br><span class="line">dotglob        off</span><br></pre></td></tr></table></figure>
<p>从根本上说，似乎有一系列的bash（和其他shells）建立在sh之上，而添加shopt命令则为设置额外的shell选项提供了一种方式</p>
<h3 id="13-Here-Docs-与-Here-Strings"><a href="#13-Here-Docs-与-Here-Strings" class="headerlink" title="13. Here Docs 与 Here Strings"></a>13. Here Docs 与 Here Strings</h3><p>“Here Docs”是在shell中用一些语句创建的文件。</p>
<p>“诀窍”很简单。定义一个用于结束的单词，则在这个单词单独出现在一行之前的所有输入行将构成文件。</p>
<p>像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &gt; afile &lt;&lt; SOMEENDSTRING</span><br><span class="line">&gt; here is a doc</span><br><span class="line">&gt; it has three lines</span><br><span class="line">&gt; SOMEENDSTRING alone on a line will save the doc</span><br><span class="line">&gt; SOMEENDSTRING</span><br><span class="line">$ cat afile</span><br><span class="line">here is a doc</span><br><span class="line">it has three lines</span><br><span class="line">SOMEENDSTRING alone on a line will save the doc</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>如果结束单词不是“单独”出现在一行中，那它可以构成文件</li>
<li>SOMEENDSTRING通常是END，但这仅仅只是习惯<br>更鲜为人知的是”here string”:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &gt; asd &lt;&lt;&lt; &#39;This file has one line&#39;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="14-字符串变量的操作"><a href="#14-字符串变量的操作" class="headerlink" title="14. 字符串变量的操作"></a>14. 字符串变量的操作</h3><p>以前你可能是像下面展示的那样写代码，用sed一类的工具来操作字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ VAR&#x3D;&#39;HEADERMy voice is my passwordFOOTER&#39;</span><br><span class="line">$ PASS&#x3D;&quot;$(echo $VAR | sed &#39;s&#x2F;^HEADER(.*)FOOTER&#x2F;1&#x2F;&#39;)&quot;</span><br><span class="line">$ echo $PASS</span><br></pre></td></tr></table></figure>
<p>但是你可能不知道bash本身也是可以的。<br>这意味着你可以省去大量的sed和awk。<br>一种重写上述代码的方式如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ VAR&#x3D;&#39;HEADERMy voice is my passwordFOOTER&#39;</span><br><span class="line">$ PASS&#x3D;&quot;$&#123;VAR#HEADER&#125;&quot;</span><br><span class="line">$ PASS&#x3D;&quot;$&#123;PASS%FOOTER&#125;&quot;</span><br><span class="line">$ echo $PASS</span><br></pre></td></tr></table></figure>
<ul>
<li>#表示”从字符串开头开始匹配并删除所给的模式串”</li>
<li>%表示”从字符串结尾开始匹配并删除所给的模式串”</li>
</ul>
<p>在我的电脑上，后一种方法比前一种快两倍。并且(令我吃惊的是),他的速度跟类似功能的python脚本速度大致相当<br>如果你想使用通配符（见前文）模式串并采用贪婪模式，你需要双写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ VAR&#x3D;&#39;HEADERMy voice is my passwordFOOTER&#39;</span><br><span class="line">$ echo $&#123;VAR##HEADER*&#125;</span><br><span class="line">$ echo $&#123;VAR%%*FOOTER&#125;</span><br></pre></td></tr></table></figure>

<h3 id="15-变量的默认值"><a href="#15-变量的默认值" class="headerlink" title="15.变量的默认值"></a>15.变量的默认值</h3><p>这些对写脚本来说非常好用。<br>如果你有一个没有赋值的变量，你可以像这样给它“赋默认值”<br>创建一个default.sh文件，写入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">FIRST_ARG&#x3D;&quot;$&#123;1:-no_first_arg&#125;&quot;</span><br><span class="line">SECOND_ARG&#x3D;&quot;$&#123;2:-no_second_arg&#125;&quot;</span><br><span class="line">THIRD_ARG&#x3D;&quot;$&#123;3:-no_third_arg&#125;&quot;</span><br><span class="line">echo $&#123;FIRST_ARG&#125;</span><br><span class="line">echo $&#123;SECOND_ARG&#125;</span><br><span class="line">echo $&#123;THIRD_ARG&#125;</span><br></pre></td></tr></table></figure>

<p>现在执行chmod +x default.sh并用./default.sh first second来运行脚本：<br>观察第三个参数的默认值是如何被分配的，而不是前两个。<br>你也可以直接用${VAR:=defaultval}(等号，不是破折号)，但是注意这不适用于脚本或函数中的位置变量。尝试修改上面的脚本来看它是如何失败的。</p>
<h3 id="16-Traps"><a href="#16-Traps" class="headerlink" title="16. Traps"></a>16. Traps</h3><p>当一个信号被送到脚本时，内建的trap可以用于“捕获”<br>下面是我用在自己的chepci脚本中的一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function cleanup() &#123;</span><br><span class="line">   rm -rf &quot;$&#123;BUILD_DIR&#125;&quot;</span><br><span class="line">   rm -f &quot;$&#123;LOCK_FILE&#125;&quot;</span><br><span class="line">   # get rid of &#x2F;tmp detritus, leaving anything accessed 2 days ago+</span><br><span class="line">   find &quot;$&#123;BUILD_DIR_BASE&#125;&quot;&#x2F;* -type d -atime +1 | rm -rf</span><br><span class="line">   echo &quot;cleanup done&quot;                                                     &#125;</span><br><span class="line">trap cleanup TERM INT QUIT</span><br></pre></td></tr></table></figure>
<p>任何使用TERM信号的CTRL-C,CTRL-或终止程序的操作将会首先调用cleanup<br>⚠️ 注意：</p>
<ul>
<li>trap的逻辑可能非常棘手（例如处理信号竞争条件）</li>
<li>KILL信号不能以这种方式捕获<br>但是大多数情况下，我会把它用于类似上述的‘cleanup’中，来达成函数的目的。</li>
</ul>
<h3 id="17-Shell变量"><a href="#17-Shell变量" class="headerlink" title="17. Shell变量"></a>17. Shell变量</h3><p>了解可用的标准shell变量是非常值得的。这些是我最喜欢的。<br>RANDOM<br>不要依赖这个来加密堆栈，但你可以生成随机数字，例如在脚本中创建临时文件时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo $&#123;RANDOM&#125;</span><br><span class="line">16313</span><br><span class="line">$ # Not enough digits?</span><br><span class="line">$ echo $&#123;RANDOM&#125;$&#123;RANDOM&#125;</span><br><span class="line">113610703</span><br><span class="line">$ NEWFILE&#x3D;&#x2F;tmp&#x2F;newfile_$&#123;RANDOM&#125;</span><br><span class="line">$ touch $NEWFILE</span><br></pre></td></tr></table></figure>

<p>REPLY<br>不在需要给read一个变量名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ read</span><br><span class="line">my input</span><br><span class="line">$ echo $&#123;REPLY&#125;</span><br></pre></td></tr></table></figure>

<p>LINENO 与 SECONDS<br>方便调试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo $&#123;LINENO&#125;</span><br><span class="line">115</span><br><span class="line">$ echo $&#123;SECONDS&#125;; sleep 1; echo $&#123;SECONDS&#125;; echo $LINENO</span><br><span class="line">174380</span><br><span class="line">174381</span><br><span class="line">116</span><br></pre></td></tr></table></figure>
<p>注意，即便使用;来隔开命令，上面的代码也要分两行</p>
<p>TMOUT<br>可以用来超时读取，在一些脚本中真的很好用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">TMOUT&#x3D;5</span><br><span class="line">echo You have 5 seconds to respond...</span><br><span class="line">read</span><br><span class="line">echo $&#123;REPLY:-noreply&#125;</span><br></pre></td></tr></table></figure>

<p>Extglobs</p>
<p>如果你真的沉迷bash不能自拔，那么你可能想要增强你的通配功能。你可以通过设置shell中的extglob选项。这是设置方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shopt -s extglob</span><br><span class="line">A&#x3D;&quot;12345678901234567890&quot;</span><br><span class="line">B&#x3D;&quot;  $&#123;A&#125;  &quot;</span><br></pre></td></tr></table></figure>

<p>现在来看看你是否能指出以下这些语句各自的功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;B      |$&#123;B&#125;|&quot;</span><br><span class="line">echo &quot;B#+( ) |$&#123;B#+( )&#125;|&quot;</span><br><span class="line">echo &quot;B#?( ) |$&#123;B#?( )&#125;|&quot;</span><br><span class="line">echo &quot;B#*( ) |$&#123;B#*( )&#125;|&quot;</span><br><span class="line">echo &quot;B##+( )|$&#123;B##+( )&#125;|&quot;</span><br><span class="line">echo &quot;B##*( )|$&#123;B##*( )&#125;|&quot;</span><br><span class="line">echo &quot;B##?( )|$&#123;B##?( )&#125;|&quot;</span><br></pre></td></tr></table></figure>
<p>虽然它可能很有用，但是很难想象出一种你必须要用这种方式的情况。通常你会使用一些更适合相应任务的工具（像sed）或者直接放弃bash去使用一些像python那样的“合适的”编程语言。</p>
<h3 id="18-关联数组"><a href="#18-关联数组" class="headerlink" title="18.关联数组"></a>18.关联数组</h3><p>谈到移植到其他语言，一条重要的规则是，如果我需要用到数组，那么我会放弃bash，使用python（为此我甚至创建了一个Docker Container来运行一个专门的工具）</p>
<p>知道读到它我才知道，在bash中有关联数组</p>
<p>以下是演示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ declare -A MYAA&#x3D;([one]&#x3D;1 [two]&#x3D;2 [three]&#x3D;3)</span><br><span class="line">$ MYAA[one]&#x3D;&quot;1&quot;</span><br><span class="line">$ MYAA[two]&#x3D;&quot;2&quot;</span><br><span class="line">$ echo $MYAA</span><br><span class="line">$ echo $&#123;MYAA[one]&#125;</span><br><span class="line">$ MYAA[one]&#x3D;&quot;1&quot;</span><br><span class="line">$ WANT&#x3D;two</span><br><span class="line">$ echo $&#123;MYAA[$WANT]&#125;</span><br></pre></td></tr></table></figure>
<p>注意仅适用于bash4.x+版本</p>
<h3 id="19-实用的shell文章"><a href="#19-实用的shell文章" class="headerlink" title="19. 实用的shell文章"></a>19. 实用的shell文章</h3><p><a href="http://mywiki.wooledge.org/BashPitfalls?spm=a2c4e.11153959.blogcont68524.18.4dbf3d2foIG0jZ" target="_blank" rel="noopener">BashPitfalls - Greg’s Wiki</a><br><a href="http://mywiki.wooledge.org/ProcessManagement?spm=a2c4e.11153959.blogcont68524.19.4dbf3d2foIG0jZ" target="_blank" rel="noopener">ProcessManagement - Greg’s Wiki</a><br><a href="http://mywiki.wooledge.org/BashGuide?spm=a2c4e.11153959.blogcont68524.20.4dbf3d2foIG0jZ" target="_blank" rel="noopener">BashGuide - Greg’s Wiki</a><br><a href="http://mywiki.wooledge.org/BashFAQ?spm=a2c4e.11153959.blogcont68524.21.4dbf3d2foIG0jZ" target="_blank" rel="noopener">BashFAQ - Greg’s Wiki</a></p>
<p><a href="https://yq.aliyun.com/articles/68524?spm=a2c4e.11153959.teamhomeleft.136.7e4c8bc1kg1JeI" target="_blank" rel="noopener">原文参考地址</a></p>
<p><a href="https://yq.aliyun.com/articles/72012?spm=a2c4e.11153959.teamhomeleft.10.7e4c8bc1kg1JeI" target="_blank" rel="noopener">Sed&amp;awk笔记系列-博客</a></p>
]]></content>
      <categories>
        <category>SHELL</category>
      </categories>
      <tags>
        <tag>SHELL</tag>
      </tags>
  </entry>
  <entry>
    <title>维护JAVA服务脚本示例</title>
    <url>/2020/04/20/%E7%BB%B4%E6%8A%A4JAVA%E6%9C%8D%E5%8A%A1%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h3 id="维护JAVA服务脚本示例"><a href="#维护JAVA服务脚本示例" class="headerlink" title="维护JAVA服务脚本示例"></a>维护JAVA服务脚本示例</h3><p>start_env.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">CURRENT_PATH&#x3D;$(cd &#96;dirname $0&#96;; pwd)</span><br><span class="line">PARENT_PATH&#x3D;$(cd &#96;dirname $0&#96;; cd ..; pwd)</span><br><span class="line">CURRENT_SERVICE_NAME&#x3D;$(echo $&#123;CURRENT_PATH&#125; | awk -F &#39;&#x2F;&#39; &#39;&#123;print $(NF)&#125;&#39;)</span><br><span class="line"></span><br><span class="line"># USE THOSE VARIABLE</span><br><span class="line">GC_LOG_PATH&#x3D;$&#123;CURRENT_PATH&#125;&#x2F;logs&#x2F;$&#123;CURRENT_SERVICE_NAME&#125;-gcdetail.log</span><br><span class="line">COMMON_CONFIG_PATH&#x3D;$&#123;PARENT_PATH&#125;</span><br><span class="line">CONFIG_PATH&#x3D;$&#123;CURRENT_PATH&#125;&#x2F;config</span><br><span class="line">JAR_PATH&#x3D;$&#123;CURRENT_PATH&#125;&#x2F;jar</span><br><span class="line">LOG_PATH&#x3D;$&#123;CURRENT_PATH&#125;&#x2F;logs</span><br><span class="line"></span><br><span class="line">## MODIFY FOLLOWING LINES</span><br><span class="line">EXECUT_JAR&#x3D;&quot;america-business-auth-impl-1.0-SNAPSHOT-all.jar&quot;</span><br><span class="line">DUBBO_PARAMETER&#x3D;&quot;</span><br><span class="line">-Dapp.id&#x3D;america-business-auth</span><br><span class="line">-Xdebug</span><br><span class="line">-server</span><br><span class="line">-Xmx512m</span><br><span class="line">-Xms512m</span><br><span class="line">-Xnoagent</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:NewRatio&#x3D;2</span><br><span class="line">-XX:SurvivorRatio&#x3D;8</span><br><span class="line">-XX:MetaspaceSize&#x3D;128m</span><br><span class="line">-XX:MaxMetaspaceSize&#x3D;128m</span><br><span class="line">-Xloggc:$&#123;GC_LOG_PATH&#125;</span><br><span class="line">-Ddubbo.registry.file&#x3D;$&#123;JAR_PATH&#125;&#x2F;dubbo.cache</span><br><span class="line">-Dconfig.path&#x3D;file:$&#123;COMMON_CONFIG_PATH&#125;&#x2F;common.properties;file:$&#123;CONFIG_PATH&#125;&#x2F;config.properties</span><br><span class="line">$&#123;JAR_PATH&#125;&#x2F;$&#123;EXECUT_JAR&#125;</span><br><span class="line">&quot;</span><br><span class="line">## STOP MODIFY</span><br><span class="line"></span><br><span class="line">java -jar $&#123;DUBBO_PARAMETER&#125; | &#x2F;usr&#x2F;bin&#x2F;cronolog $LOG_PATH&#x2F;out.%Y%m%d.nohup &gt;&gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>service_control.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">#set -x</span><br><span class="line"></span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line"># USE THOSE VARIABLE</span><br><span class="line">CURRENT_PATH&#x3D;$(cd &#96;dirname $0&#96;; pwd)</span><br><span class="line">PARENT_PATH&#x3D;$(cd &#96;dirname $0&#96;; cd ..; pwd)</span><br><span class="line">CURRENT_SERVICE_NAME&#x3D;$(echo $&#123;CURRENT_PATH&#125; | awk -F &#39;&#x2F;&#39; &#39;&#123;print $(NF)&#125;&#39;)</span><br><span class="line">STOP_WAIT_TIME&#x3D;10</span><br><span class="line">CURRENT_TIME&#x3D;&#96;date +%Y%m%d-%H%M%S&#96;</span><br><span class="line"></span><br><span class="line">DUMP_PATH&#x3D;$&#123;CURRENT_PATH&#125;&#x2F;dump</span><br><span class="line">LOG_PATH&#x3D;$&#123;CURRENT_PATH&#125;&#x2F;logs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log() &#123;</span><br><span class="line">    echo &quot;$(date +&quot;%Y-%m-%d %H:%M:%S&quot;): $1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exit_status() &#123;</span><br><span class="line">    if [ $? &#x3D;&#x3D; 0 ]</span><br><span class="line">    then</span><br><span class="line">        echo -e &quot;\\033[1;32m[OK]\\033[0;39m&quot;</span><br><span class="line">    else</span><br><span class="line">        echo -e &quot;\\033[1;31m[Failed]\\033[0;39m&quot;</span><br><span class="line">        log &quot;Error&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_user() &#123;</span><br><span class="line">    if [ &#96;whoami&#96; !&#x3D; &quot;app&quot; || &#96;whoami&#96; !&#x3D; &quot;root&quot; ]; then</span><br><span class="line">        log &quot;Please use app user to run this command.&quot;</span><br><span class="line">        false</span><br><span class="line">        exit_status</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop_service() &#123;</span><br><span class="line"></span><br><span class="line">    log &quot;Stop Service Service: $&#123;CURRENT_SERVICE_NAME&#125;&quot;</span><br><span class="line">    Service_NUM&#x3D;&#96;ps -ef|grep $&#123;CURRENT_SERVICE_NAME&#125;&#x2F;jar&#x2F;|grep -v grep|grep -v cronolog|grep -v $0|awk &#39;&#123;print $2&#125;&#39;|wc -l&#96;</span><br><span class="line">    if [ $((Service_NUM)) -gt 1 ]</span><br><span class="line">    then</span><br><span class="line">        log &quot;Service: $&#123;CURRENT_SERVICE_NAME&#125; run more than one process&quot;</span><br><span class="line">        false</span><br><span class="line">        exit_status</span><br><span class="line">    fi</span><br><span class="line">    Service_PID&#x3D;&#96;ps -ef|grep $&#123;CURRENT_SERVICE_NAME&#125;&#x2F;jar&#x2F;|grep -v grep|grep -v cronolog|grep -v $0|awk &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">    if [ x$Service_PID &#x3D;&#x3D; x ];then</span><br><span class="line">        log &quot;Service: $&#123;CURRENT_SERVICE_NAME&#125; process is NOT exist&quot;</span><br><span class="line">        exit_status</span><br><span class="line">    else</span><br><span class="line">        log &quot;KILL Service Service: $&#123;CURRENT_SERVICE_NAME&#125;&quot;</span><br><span class="line">        kill  $Service_PID</span><br><span class="line">        exit_status</span><br><span class="line">    fi</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    log &quot;Search Service Process ...&quot;</span><br><span class="line">    Check&#x3D;N</span><br><span class="line">    N&#x3D;0</span><br><span class="line">    while [ $Check &#x3D;&#x3D; &quot;N&quot; ]</span><br><span class="line">    do</span><br><span class="line">        N&#x3D;$(($N+1))</span><br><span class="line">        Service_PID&#x3D;&#96;ps -ef|grep $&#123;CURRENT_SERVICE_NAME&#125;&#x2F;jar&#x2F;|grep -v grep|grep -v cronolog|grep -v $0|awk &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line"></span><br><span class="line">        if [ &quot;$Service_PID&quot; &#x3D; &quot;&quot; ]</span><br><span class="line">        then</span><br><span class="line">            log &quot;Not found Service PID alive&quot;</span><br><span class="line">            break</span><br><span class="line">        else</span><br><span class="line">            log &quot;$N: Check Service PID:$Service_PID, Sleep 1 Sec Wait Service Exit ...&quot;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        if [ $((N)) -gt $STOP_WAIT_TIME ]</span><br><span class="line">        then</span><br><span class="line">            log &quot;Force KILL Service: $&#123;CURRENT_SERVICE_NAME&#125;&quot;</span><br><span class="line">            #jstack $Service_PID &gt;&gt; &#x2F;var&#x2F;log&#x2F;jstack.log</span><br><span class="line">            #skill -9 $Service_PID</span><br><span class="line">            kill -9 $Service_PID</span><br><span class="line">            exit_status</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line">        sleep 1</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start_service() &#123;</span><br><span class="line"></span><br><span class="line">    log &quot;Start Service Service: $&#123;CURRENT_SERVICE_NAME&#125;&quot;</span><br><span class="line">    Service_NUM&#x3D;&#96;ps -ef|grep $&#123;CURRENT_SERVICE_NAME&#125;&#x2F;jar&#x2F; | grep -v grep |grep -v $0|awk &#39;&#123;print $2&#125;&#39;|wc -l&#96;</span><br><span class="line">    if [ $((Service_NUM)) -gt 0 ]</span><br><span class="line">    then</span><br><span class="line">        log &quot;Service: $&#123;CURRENT_SERVICE_NAME&#125; already running&quot;</span><br><span class="line">        false</span><br><span class="line">        exit_status</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    if [ ! -d $LOG_PATH ]; then</span><br><span class="line">        mkdir -p $LOG_PATH</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    nohup &#x2F;bin&#x2F;bash $CURRENT_PATH&#x2F;start_env.sh &amp;&gt;&gt; &#x2F;dev&#x2F;null &amp;</span><br><span class="line"></span><br><span class="line">    #exit_status</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">status() &#123;</span><br><span class="line"></span><br><span class="line">    Service_NUM&#x3D;&#96;ps -ef|grep $&#123;CURRENT_SERVICE_NAME&#125;&#x2F;jar&#x2F;|grep -v grep|grep -v cronolog|grep -v $0|awk &#39;&#123;print $2&#125;&#39;|wc -l&#96;</span><br><span class="line">    if [ $((Service_NUM)) -gt 1 ]</span><br><span class="line">    then</span><br><span class="line">        echo &quot;Service run more than one process,please check&quot;</span><br><span class="line">        false</span><br><span class="line">        exit_status</span><br><span class="line">    fi</span><br><span class="line">    Service_PID&#x3D;&#96;ps -ef|grep $&#123;CURRENT_SERVICE_NAME&#125;&#x2F;jar&#x2F;|grep -v grep|grep -v cronolog|grep -v $0|awk &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">    if [ x$Service_PID &#x3D;&#x3D; x ];then</span><br><span class="line">        echo &quot;Service: $&#123;CURRENT_SERVICE_NAME&#125; process is NOT exist&quot;</span><br><span class="line">        false</span><br><span class="line">        exit_status</span><br><span class="line">    else</span><br><span class="line">        Service_startTime&#x3D;&#96;ps -p $&#123;Service_PID&#125; -o lstart|grep -v &quot;START&quot;&#96;</span><br><span class="line">        echo -e &quot;service: $&#123;CURRENT_SERVICE_NAME&#125; started,\npid: $&#123;Service_PID&#125;,\nstartTime: $&#123;Service_startTime&#125;,\nlogPath: $&#123;LOG_PATH&#125;&#x2F;out.&#96;date +%Y%m%d&#96;.nohup&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dump() &#123;</span><br><span class="line">    if [ ! -d $DUMP_PATH ]; then</span><br><span class="line">        mkdir -p $DUMP_PATH</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    echo -e &quot;Dumping the $&#123;CURRENT_SERVICE_NAME&#125; ...\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jstack $Service_PID &gt; $DUMP_PATH&#x2F;jstack-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jinfo $Service_PID &gt; $DUMP_PATH&#x2F;jinfo-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jstat -gcutil $Service_PID &gt; $DUMP_PATH&#x2F;jstat-gcutil-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jstat -gccapacity $Service_PID &gt; $DUMP_PATH&#x2F;jstat-gccapacity-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jmap $Service_PID &gt; $DUMP_PATH&#x2F;jmap-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jmap -heap $Service_PID &gt; $DUMP_PATH&#x2F;jmap-heap-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jmap -histo $Service_PID &gt; $DUMP_PATH&#x2F;jmap-histo-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    if [ -r &#x2F;usr&#x2F;sbin&#x2F;lsof ]; then</span><br><span class="line">    &#x2F;usr&#x2F;sbin&#x2F;lsof -p $Service_PID &gt; $DUMP_PATH&#x2F;lsof-$Service_PID.$&#123;CURRENT_TIME&#125;.dump</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo -e &quot;\nDump Complete, files in $&#123;DUMP_PATH&#125;\n&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tail_log() &#123;</span><br><span class="line">    if [ ! -n &quot;$1&quot; ] ; then</span><br><span class="line">        tail_num&#x3D;10</span><br><span class="line">    else</span><br><span class="line">        tail_num&#x3D;$1</span><br><span class="line">    fi</span><br><span class="line">    tail -$&#123;tail_num&#125;f $&#123;LOG_PATH&#125;&#x2F;out.&#96;date +%Y%m%d&#96;.nohup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">help() &#123;</span><br><span class="line">    echo &quot;USAGE: $0 &#123;stop|start|restart|status|dump|log [tail line of numbers:200]|help&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ $# -gt 0 ] ; then</span><br><span class="line"></span><br><span class="line">    case $1 in</span><br><span class="line">    start)</span><br><span class="line">        log &quot;Will Start Service ...&quot;</span><br><span class="line">        start_service</span><br><span class="line">        log &quot;Sleep 3 Sec for Status ...&quot;</span><br><span class="line">        sleep 3</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        log &quot;Will Stop Service ...&quot;</span><br><span class="line">        stop_service</span><br><span class="line">        ;;</span><br><span class="line">    restart)</span><br><span class="line">        log &quot;Will Restart Service ...&quot;</span><br><span class="line"></span><br><span class="line">        stop_service</span><br><span class="line">        log &quot;Sleep 3 Sec&quot;</span><br><span class="line">        sleep 3</span><br><span class="line"></span><br><span class="line">        start_service</span><br><span class="line">        log &quot;Sleep 3 Sec for Status ...&quot;</span><br><span class="line">        sleep 3</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">    dump)</span><br><span class="line">        check_user</span><br><span class="line">        status</span><br><span class="line">        if [ $? &#x3D;&#x3D; 0 ]</span><br><span class="line">        then</span><br><span class="line">            dump</span><br><span class="line">        else</span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        ;;</span><br><span class="line">    log)</span><br><span class="line">        tail_log $2</span><br><span class="line">        ;;</span><br><span class="line">    help)</span><br><span class="line">        help</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo &quot;Bad Parameter: $1&quot;</span><br><span class="line">        help</span><br><span class="line">        exit 1</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">    help</span><br><span class="line">    exit 1;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SHELL</category>
      </categories>
      <tags>
        <tag>SHELL</tag>
      </tags>
  </entry>
  <entry>
    <title>生产配置示例</title>
    <url>/2020/04/20/%E7%94%9F%E4%BA%A7%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="生产配置示例"><a href="#生产配置示例" class="headerlink" title="生产配置示例"></a>生产配置示例</h2><h4 id="1-nginx-conf"><a href="#1-nginx-conf" class="headerlink" title="1. nginx.conf"></a>1. nginx.conf</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user  www-data;</span><br><span class="line"></span><br><span class="line">worker_processes  auto;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log warn;</span><br><span class="line">pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  4096;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#39;$http_x_forwarded_for - $remote_addr - $remote_user &#39;</span><br><span class="line">    #                  &#39;[$time_local] &quot;$request&quot; $status $body_bytes_sent &#39;</span><br><span class="line">    #                  &#39;&quot;$http_referer&quot; &quot;$http_user_agent&quot;&#39;</span><br><span class="line">    #                  &#39;&quot;$http_x_forwarded_for&quot; $request_time&#39;;</span><br><span class="line"></span><br><span class="line">    #access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class="line">    ## LOG ##</span><br><span class="line">    log_format  main  &#39;$upstream_response_time $remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$request_time&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    log_format json &#39;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#39;</span><br><span class="line">                     &#39;&quot;department&quot;:&quot;devops&quot;,&#39;</span><br><span class="line">                     &#39;&quot;type&quot;:&quot;prod_america_nginx&quot;,&#39;</span><br><span class="line">                     &#39;&quot;@version&quot;:&quot;1&quot;,&#39;</span><br><span class="line">                     &#39;&quot;host&quot;:&quot;$server_addr&quot;,&#39;</span><br><span class="line">                     &#39;&quot;client&quot;:&quot;$remote_addr&quot;,&#39;</span><br><span class="line">                     &#39;&quot;real-client&quot;:&quot;$http_x_forwarded_for&quot;,&#39;</span><br><span class="line">                     &#39;&quot;auth_user&quot;:&quot;$remote_user&quot;,&#39;</span><br><span class="line">                     &#39;&quot;request&quot;:&quot;$request&quot;,&#39;</span><br><span class="line">                     &#39;&quot;method&quot;:&quot;$request_method&quot;,&#39;</span><br><span class="line">                     &#39;&quot;port&quot;:&quot;$server_port&quot;,&#39;</span><br><span class="line">                     &#39;&quot;size&quot;:$body_bytes_sent,&#39;</span><br><span class="line">                     &#39;&quot;responsetime&quot;:$request_time,&#39;</span><br><span class="line">                     &#39;&quot;domain&quot;:&quot;$host&quot;,&#39;</span><br><span class="line">                     &#39;&quot;UserAgent&quot;:&quot;$http_user_agent&quot;,&#39;</span><br><span class="line">                     &#39;&quot;url&quot;:&quot;$uri&quot;,&#39;</span><br><span class="line">                     &#39;&quot;status&quot;:&quot;$status&quot;&#125;&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--log_format logstash_json &#39;&#123; &quot;@timestamp&quot;: &quot;$time_iso8601&quot;, &#39;--&gt;</span><br><span class="line">        &lt;!--&#39;&quot;remote_addr&quot;: &quot;$remote_addr&quot;, &#39;--&gt;</span><br><span class="line">        &lt;!--&#39;&quot;referer&quot;: &quot;$http_referer&quot;, &#39;--&gt;</span><br><span class="line">        &lt;!--&#39;&quot;request&quot;: &quot;$request&quot;, &#39;--&gt;</span><br><span class="line">        &lt;!--&#39;&quot;status&quot;: $status, &#39;--&gt;</span><br><span class="line">        &lt;!--&#39;&quot;bytes&quot;:$body_bytes_sent, &#39;--&gt;</span><br><span class="line">        &lt;!--&#39;&quot;agent&quot;: &quot;$http_user_agent&quot;, &#39;--&gt;</span><br><span class="line">        &lt;!--&#39;&quot;x_forwarded&quot;: &quot;$http_x_forwarded_for&quot;, &#39;--&gt;</span><br><span class="line">        &lt;!--&#39;&quot;upstr_addr&quot;: &quot;$upstream_addr&quot;,&#39;--&gt;</span><br><span class="line">        &lt;!--&#39;&quot;upstr_host&quot;: &quot;$upstream_http_host&quot;,&#39;--&gt;</span><br><span class="line">        &lt;!--&#39;&quot;ups_resp_time&quot;: &quot;$upstream_response_time&quot; &#125;&#39;;--&gt;</span><br><span class="line"></span><br><span class="line">    access_log   &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;access_json.log   json;</span><br><span class="line">    error_log    &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;error.log   warn;</span><br><span class="line"></span><br><span class="line">    ssi on;</span><br><span class="line">    ssi_silent_errors off;</span><br><span class="line"></span><br><span class="line">    server_tokens   off;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush      on;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 8M;</span><br><span class="line">    client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 10k;</span><br><span class="line">    gzip_comp_level 3;</span><br><span class="line">    gzip_types text&#x2F;plain text&#x2F;css application&#x2F;javascript application&#x2F;json</span><br><span class="line">               application&#x2F;xml application&#x2F;xhtml+xml text&#x2F;csv;</span><br><span class="line"></span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-redirect-all-to-https-conf"><a href="#2-redirect-all-to-https-conf" class="headerlink" title="2. redirect-all-to-https.conf"></a>2. redirect-all-to-https.conf</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80  default_server;</span><br><span class="line">    listen 443 default_server;</span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;redirect-all-to-https.access.log main;</span><br><span class="line">    error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;redirect-all-to-https.error.log warn;</span><br><span class="line"></span><br><span class="line">    return 302 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-upstream"><a href="#3-upstream" class="headerlink" title="3. upstream"></a>3. upstream</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">####################</span><br><span class="line">#  数据挖掘</span><br><span class="line">####################</span><br><span class="line">upstream wecash_mining_apis &#123;</span><br><span class="line">    server 10.40.58.116:8080 max_fails&#x3D;2 fail_timeout&#x3D;30s;</span><br><span class="line">&#125;</span><br><span class="line">upstream wecash_mining_router &#123;</span><br><span class="line">    server 10.40.58.114:8080 max_fails&#x3D;2 fail_timeout&#x3D;30s;</span><br><span class="line">&#125;</span><br><span class="line">upstream wecash_restful_apis &#123;</span><br><span class="line">    server 10.40.58.115:8081 max_fails&#x3D;2 fail_timeout&#x3D;30s;</span><br><span class="line">    server 10.40.61.93:8081  max_fails&#x3D;2 fail_timeout&#x3D;30s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-Server段"><a href="#4-Server段" class="headerlink" title="4. Server段"></a>4. Server段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8081;</span><br><span class="line">    server_name  10.40.61.75;</span><br><span class="line">    aio threads&#x3D;default;</span><br><span class="line">    client_max_body_size    2048m;</span><br><span class="line">    access_log  logs&#x2F;wecash_mining.access.log main;</span><br><span class="line">    error_log  logs&#x2F;wecash_mining.error.log  error;</span><br><span class="line">    location ~ ^&#x2F;v1&#x2F;(sms|employer) &#123;</span><br><span class="line">       proxy_next_upstream error timeout http_503 http_502 http_504;</span><br><span class="line">       proxy_pass http:&#x2F;&#x2F;wecash_mining_apis;</span><br><span class="line">       proxy_set_header X-Forwarded-For $http_x_forwarded_for;</span><br><span class="line">       proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">       proxy_set_header Host $http_host;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ ^&#x2F;api&#x2F;v1&#x2F;dispatch &#123;</span><br><span class="line">        proxy_next_upstream error timeout http_503 http_502 http_504;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;wecash_mining_router;</span><br><span class="line">        proxy_set_header X-Forwarded-For $http_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ ^&#x2F;api&#x2F;v1&#x2F;(phone_book|segmentation|apply_info|lastest_company|fund|credit_report|social_security|simple_operator|phone_tag) &#123;</span><br><span class="line">        proxy_next_upstream error timeout http_503 http_502 http_504;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;wecash_restful_apis;</span><br><span class="line">        proxy_set_header X-Forwarded-For $http_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>让人想骂街的 Python 炫技操作：条件语句的七种写法</title>
    <url>/2020/04/20/%E8%AE%A9%E4%BA%BA%E6%83%B3%E9%AA%82%E8%A1%97%E7%9A%84-Python-%E7%82%AB%E6%8A%80%E6%93%8D%E4%BD%9C%EF%BC%9A%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E7%9A%84%E4%B8%83%E7%A7%8D%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<p>有的人说 Python 是一门入门容易，但是精通难的语言，这一点我非常赞同。</p>
<p>Python 语言里有许多（而且是越来越多）的高级特性，是 Python 发烧友们非常喜欢的。在这些人的眼里，能够写出那些一般开发者看不懂的高级特性，就是高手，就是大神。</p>
<p>但你要知道，在团队合作里，炫技是大忌。</p>
<p>为什么这么说呢？我说下自己的看法：</p>
<p>越简洁的代码，越清晰的逻辑，就越不容易出错；<br>在团队合作中，你的代码不只有你在维护，降低别人的阅读/理解代码逻辑的成本是一种良好的品德<br>简单的代码，只会用到最基本的语法糖，复杂的高级特性，会有更多的依赖（如语言的版本）<br>在这个系列里，我将总结列举一下，我所见过的那些炫技操作，今天先来个热身，写一写很简单的条件判断语句里有哪些让人想骂街的炫技操作，在这里，如果你是 Python 发烧友，你可以学到一些写出超酷的代码书写技巧，但学习归学习，希望你区分场景使用。</p>
<ol start="0">
<li>原代码<br>这是一段非常简单的通过年龄判断一个人是否成年的代码，由于代码行数过多，有些人就不太愿意这样写，因为这体现不出自己多年的 Python 功力。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if age &gt; 18:</span><br><span class="line">    return &quot;已成年&quot;</span><br><span class="line">else:</span><br><span class="line">    return &quot;未成年&quot;</span><br></pre></td></tr></table></figure>
下面我列举了六种这段代码的变异写法，一个比一个还 6 ，单独拿出来比较好理解，放在工程代码里，没用过这些学法的人，一定会看得一脸懵逼，理解了之后，又不经意大呼：卧槽，还可以这样写？，而后就要开始骂街了：这是给人看的代码？</li>
<li>第一种<br>语法:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;on_true&gt; if &lt;condition&gt; else &lt;on_false&gt;</span><br></pre></td></tr></table></figure>
例子<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; age1 &#x3D; 20</span><br><span class="line">&gt;&gt;&gt; age2 &#x3D; 17</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; msg1 &#x3D; &quot;已成年&quot; if age1 &gt; 18 else &quot;未成年&quot;</span><br><span class="line">&gt;&gt;&gt; print msg1</span><br><span class="line">已成年</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; msg2 &#x3D; &quot;已成年&quot; if age2 &gt; 18 else &quot;未成年&quot;</span><br><span class="line">&gt;&gt;&gt; print msg2</span><br><span class="line">未成年</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li>
<li>第二种<br>语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;expression&gt; and &lt;on_true&gt; or &lt;on_false&gt;</span><br></pre></td></tr></table></figure>
例子<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; msg1 &#x3D; age1 &gt; 18 and &quot;已成年&quot; or &quot;未成年&quot;</span><br><span class="line">&gt;&gt;&gt; msg2 &#x3D; &quot;已成年&quot; if age2 &gt; 18 else &quot;未成年&quot;</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; print(msg1)</span><br><span class="line">已成年</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; print(msg2)</span><br><span class="line">未成年</span><br></pre></td></tr></table></figure></li>
<li>第三种<br>语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&lt;on_true&gt;, &lt;on_false&gt;)[condition]</span><br></pre></td></tr></table></figure>
例子<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; msg1 &#x3D; (&quot;未成年&quot;, &quot;已成年&quot;)[age1 &gt; 18]</span><br><span class="line">&gt;&gt;&gt; print(msg1)</span><br><span class="line">已成年</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; msg2 &#x3D; (&quot;未成年&quot;, &quot;已成年&quot;)[age2 &gt; 18]</span><br><span class="line">&gt;&gt;&gt; print(msg2)</span><br><span class="line">未成年</span><br></pre></td></tr></table></figure></li>
<li>第四种<br>语法:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lambda: &lt;on_false&gt;, lambda:&lt;on_true&gt;)[&lt;condition&gt;]()</span><br></pre></td></tr></table></figure>
例子<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; msg1 &#x3D; (lambda:&quot;未成年&quot;, lambda:&quot;已成年&quot;)[age1 &gt; 18]()</span><br><span class="line">&gt;&gt;&gt; print(msg1)</span><br><span class="line">已成年</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; msg2 &#x3D; (lambda:&quot;未成年&quot;, lambda:&quot;已成年&quot;)[age2 &gt; 18]()</span><br><span class="line">&gt;&gt;&gt; print(msg2)</span><br><span class="line">未成年</span><br></pre></td></tr></table></figure></li>
<li>第五种<br>语法:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;True: &lt;on_true&gt;, False: &lt;on_false&gt;&#125;[&lt;condition&gt;]</span><br></pre></td></tr></table></figure>
例子<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; msg1 &#x3D; &#123;True: &quot;已成年&quot;, False: &quot;未成年&quot;&#125;[age1 &gt; 18]</span><br><span class="line">&gt;&gt;&gt; print(msg1)</span><br><span class="line">已成年</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; msg2 &#x3D; &#123;True: &quot;已成年&quot;, False: &quot;未成年&quot;&#125;[age2 &gt; 18]</span><br><span class="line">&gt;&gt;&gt; print(msg2)</span><br><span class="line">未成年</span><br></pre></td></tr></table></figure></li>
<li>第六种<br>语法:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">((&lt;condition&gt;) and (&lt;on_true&gt;,) or (&lt;on_false&gt;,))[0]</span><br></pre></td></tr></table></figure>
例子:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; msg1 &#x3D; ((age1 &gt; 18) and (&quot;已成年&quot;,) or (&quot;未成年&quot;,))[0]</span><br><span class="line">&gt;&gt;&gt; print(msg1)</span><br><span class="line">已成年</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; msg2 &#x3D; ((age2 &gt; 18) and (&quot;已成年&quot;,) or (&quot;未成年&quot;,))[0]</span><br><span class="line">&gt;&gt;&gt; print(msg2)</span><br><span class="line">未成年</span><br></pre></td></tr></table></figure>
以上代码，都比较简单，仔细看都能看懂，我就不做解释了。</li>
</ol>
<p>看到这里，有没有涨姿势了，学了这么久的 Python ，这么多骚操作，还真是活久见。。这六种写法里，我最推荐使用的是第一种，自己也经常在用，简洁直白，代码行还少。而其他的写法虽然能写，但是不会用，也不希望在我余生里碰到会在公共代码里用这些写法的同事。</p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝鲸进程管理脚本参考</title>
    <url>/2020/04/20/%E8%93%9D%E9%B2%B8%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E8%84%9A%E6%9C%AC%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<p>蓝鲸进程管理脚本参考</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># use bash to execute this script</span><br><span class="line">echo $BASH |grep -q &#39;bash&#39; || &#123; exec bash &quot;$0&quot; &quot;$@&quot; || exit 1; &#125;</span><br><span class="line"></span><br><span class="line"># enable extended pattern matching operators</span><br><span class="line">shopt -s extglob</span><br><span class="line"></span><br><span class="line">VERSION_BK&#x3D;&quot;1.1.1&quot;</span><br><span class="line"></span><br><span class="line">DIR_HOME&#x3D;&quot;$(readlink -f $(dirname $0))&quot;</span><br><span class="line"></span><br><span class="line">DIR_CMDB&#x3D;&quot;$DIR_HOME&#x2F;cmdb&quot;</span><br><span class="line">DIR_JOB&#x3D;&quot;$DIR_HOME&#x2F;job&quot;</span><br><span class="line">DIR_GSE&#x3D;&quot;$DIR_HOME&#x2F;gse&quot;</span><br><span class="line">DIR_ZK&#x3D;&quot;$DIR_HOME&#x2F;common&#x2F;zookeeper&#x2F;zookeeper-3.4.6&quot;</span><br><span class="line">DIR_DOWN&#x3D;&quot;$DIR_HOME&#x2F;index&#x2F;download&quot;</span><br><span class="line">DIR_SESSION&#x3D;&quot;$DIR_HOME&#x2F;.session&quot;</span><br><span class="line"></span><br><span class="line">FILE_CONF&#x3D;&quot;$DIR_HOME&#x2F;bk.conf&quot;</span><br><span class="line">FILE_LOG&#x3D;&quot;$DIR_HOME&#x2F;bk.log&quot;</span><br><span class="line"></span><br><span class="line">FILE_TPL&#x3D;&quot;$DIR_HOME&#x2F;common&#x2F;function.tpl&quot;</span><br><span class="line">FILE_FUNC&#x3D;&quot;$DIR_HOME&#x2F;common&#x2F;function&quot;</span><br><span class="line"></span><br><span class="line">FILE_SETUP&#x3D;&quot;$DIR_HOME&#x2F;init_data&#x2F;setup.sh&quot;</span><br><span class="line">FILE_INITDB&#x3D;&quot;$DIR_HOME&#x2F;init_data&#x2F;init_db.sh&quot;</span><br><span class="line"></span><br><span class="line">FILE_CRT&#x3D;&quot;$DIR_HOME&#x2F;ssl_certificates.tar.gz&quot;</span><br><span class="line">FILE_INIT&#x3D;&quot;$DIR_HOME&#x2F;.bkallowinit&quot;</span><br><span class="line">SO_libaio&#x3D;&quot;&#x2F;lib64&#x2F;libaio.so.1&quot;</span><br><span class="line"></span><br><span class="line">NGINX_LOGS&#x3D;&quot;$DIR_HOME&#x2F;common&#x2F;nginx&#x2F;logs&quot;</span><br><span class="line"></span><br><span class="line">PHP_EXE&#x3D;&quot;$DIR_HOME&#x2F;common&#x2F;php&#x2F;bin&#x2F;php&quot;</span><br><span class="line"></span><br><span class="line">MYSQL_HOME&#x3D;&quot;$DIR_HOME&#x2F;common&#x2F;mysql&quot;</span><br><span class="line">MYSQL_DATA&#x3D;&quot;$MYSQL_HOME&#x2F;data&#x2F;&quot;</span><br><span class="line">MYSQL_BIN&#x3D;&quot;$MYSQL_HOME&#x2F;bin&#x2F;mysql&quot;</span><br><span class="line">MYSOCK&#x3D;&quot;$MYSQL_HOME&#x2F;data&#x2F;mysql.sock&quot;</span><br><span class="line"></span><br><span class="line">TOMCAT_DIR&#x3D;&quot;$DIR_JOB&#x2F;apache-tomcat-7.0.19&quot;</span><br><span class="line">TOMCAT_LOGS&#x3D;&quot;$TOMCAT_DIR&#x2F;logs&quot;</span><br><span class="line">TOMCAT_BIN&#x3D;&quot;$TOMCAT_DIR&#x2F;bin&#x2F;catalina.sh&quot;</span><br><span class="line"></span><br><span class="line">JAVA_HOME&#x3D;&quot;$DIR_HOME&#x2F;common&#x2F;java&quot;</span><br><span class="line">JAVA_BIN&#x3D;&quot;$JAVA_HOME&#x2F;bin&quot;</span><br><span class="line">PATH&#x3D;$JAVA_BIN:$PATH</span><br><span class="line">CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br><span class="line"></span><br><span class="line">LC_ALL&#x3D;C</span><br><span class="line">LANG&#x3D;C</span><br><span class="line"></span><br><span class="line">ACTION&#x3D;&#39;@(start|stop|restart|status|summary|reload|report|init)&#39;</span><br><span class="line">MODULE&#x3D;&#39;@(all|redis-server|nginx|mysqld|zk1|zk2|zk3|gsedba|gsetask|gsebtfilesserver|yydba|gsedata|gsecacheapiserver|gseagent|cmdb|job|-*||)&#39;</span><br><span class="line">GROUP&#x3D;&#39;@(gse|zk)&#39;</span><br><span class="line"></span><br><span class="line">monit() &#123; </span><br><span class="line">    local MONIT_DIR&#x3D;&quot;$DIR_HOME&#x2F;common&#x2F;monit&quot;</span><br><span class="line">    local MONIT_BIN&#x3D;&quot;$MONIT_DIR&#x2F;bin&#x2F;monit&quot;</span><br><span class="line">    local MONIT_RC&#x3D;&quot;$MONIT_DIR&#x2F;conf&#x2F;monitrc&quot;</span><br><span class="line">    local MONIT_EXE&#x3D;&quot;$MONIT_BIN -c $MONIT_RC&quot;</span><br><span class="line">    </span><br><span class="line">    chmod 700 $MONIT_RC</span><br><span class="line">    </span><br><span class="line">    case &quot;$1&quot; in</span><br><span class="line">        self_start)</span><br><span class="line">            log &quot;Info: monit self_start...&quot;</span><br><span class="line">            $MONIT_EXE &amp;&gt;&#x2F;dev&#x2F;null</span><br><span class="line">            wait_check &quot;$MONIT_EXE summary&quot;</span><br><span class="line">            log &quot;Info: monit self_start, ok&quot;</span><br><span class="line">            ;;</span><br><span class="line">        self_stop)</span><br><span class="line">            $MONIT_EXE quit</span><br><span class="line">            ;;</span><br><span class="line">        self_reload) </span><br><span class="line">            $MONIT_EXE reload</span><br><span class="line">            ;;</span><br><span class="line">        self_restart)</span><br><span class="line">            monit self_stop</span><br><span class="line">            monit self_start</span><br><span class="line">            ;;</span><br><span class="line">        wait_stop)</span><br><span class="line">            wait_check &quot;$MONIT_EXE summary |grep -c monitored |grep -q 16&quot;</span><br><span class="line">            ;;  </span><br><span class="line">        *)</span><br><span class="line">            [[ $1 &#x3D;&#x3D; &quot;start&quot; ]] &amp;&amp; [[ $2 &#x3D;&#x3D; &quot;all&quot; ]] &amp;&amp; monit self_start</span><br><span class="line">            $MONIT_EXE &quot;$@&quot;</span><br><span class="line">            [[ $1 &#x3D;&#x3D; &quot;start&quot; ]] &amp;&amp; [[ $2 &#x3D;&#x3D; &quot;all&quot; ]] &amp;&amp; writed_ip</span><br><span class="line">            echo $1 |grep -Eq &#39;start|stop|restart&#39; &amp;&amp; &#123; sleep 3;monit summary; &#125;</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usage() &#123;</span><br><span class="line">    cat &lt;&lt;EOF</span><br><span class="line">Usage: $0 : &lt;action&gt; &lt;module&gt;</span><br><span class="line">action的取值为：(start|stop|restart|status|summary|reload|report|init)时，需要第二个参数module</span><br><span class="line">module的取值为：(all|redis-server|nginx|mysqld|zk1|zk2|zk3|gsedba|gsetask|gsebtfilesserver|yydba|gsedata|gsecacheapiserver|gseagent|cmdb|job)</span><br><span class="line"></span><br><span class="line">查看所有的进程状态：$0 summary </span><br><span class="line">EOF</span><br><span class="line">    exit 1 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo -en &quot;Current Version: $VERSION_BK \n&quot;</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">    init) </span><br><span class="line">        source $FILE_SETUP || &#123; echo -en &quot;Error: source $FILE_SETUP, failed\n&quot;;exit 1; &#125;</span><br><span class="line">        monit self_start &amp;&amp; monit unmonitor all</span><br><span class="line">        monit stop all &amp;&amp; monit wait_stop</span><br><span class="line">        monit start mysqld</span><br><span class="line">        monit -g zk start </span><br><span class="line">        init_db</span><br><span class="line">        exit $?</span><br><span class="line">        ;;</span><br><span class="line">    $ACTION)</span><br><span class="line">        : ;;</span><br><span class="line">    *)</span><br><span class="line">        usage</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">source $FILE_FUNC || log_exit &quot;Error: source $FILE_FUNC, failed&quot;</span><br><span class="line"></span><br><span class="line">case &quot;$2&quot; in </span><br><span class="line">    $MODULE)</span><br><span class="line">        monit &quot;$@&quot;</span><br><span class="line">        ;;</span><br><span class="line">    $GROUP)</span><br><span class="line">        monit -g $2 $1</span><br><span class="line">        ;;</span><br><span class="line">    monit)</span><br><span class="line">        monit self_$1</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        usage</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>SHELL</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SHELL</tag>
      </tags>
  </entry>
  <entry>
    <title>进程启停自定义脚本</title>
    <url>/2020/04/20/%E8%BF%9B%E7%A8%8B%E5%90%AF%E5%81%9C%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>进程启停自定义脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash </span><br><span class="line"></span><br><span class="line">usage()</span><br><span class="line">&#123; </span><br><span class="line">  echo &quot;Usage: $0 &#123;start|stop|restart|status&#125; [lineid]&quot; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">suffix&#x3D;_stable</span><br><span class="line">LINELIST&#x3D;&quot;1 2 3 4 5 6&quot;</span><br><span class="line">LINK_NUM&#x3D;3</span><br><span class="line">UNAMED_ACTIVE&#x3D;0</span><br><span class="line">PROGRAME_ACTIVE&#x3D;0</span><br><span class="line"></span><br><span class="line">start_line()</span><br><span class="line">&#123;</span><br><span class="line">	IDLIST&#x3D;$LINELIST</span><br><span class="line">	if [ ! -z $1 ]; then</span><br><span class="line">		IDLIST&#x3D;$1</span><br><span class="line">	fi</span><br><span class="line">	SELFID&#x3D;&#96;id -u&#96;</span><br><span class="line">	cd gamed</span><br><span class="line">	for LN in $IDLIST</span><br><span class="line">	do</span><br><span class="line">		PIDS&#x3D;&#96;pgrep -u $SELFID -f &quot;.&#x2F;gs$suffix gs.conf gmserver.conf config&#x2F;gsalias$LN.conf&quot;&#96;</span><br><span class="line">		if [ -z &quot;$PIDS&quot; ]; then</span><br><span class="line">			echo start line $LN</span><br><span class="line">			nohup setsid .&#x2F;gs$suffix gs.conf gmserver.conf config&#x2F;gsalias$LN.conf &amp;&gt;..&#x2F;logs&#x2F;game$LN.log &amp;</span><br><span class="line">			#nohup setsid .&#x2F;gs_asan$suffix gs.conf gmserver.conf config&#x2F;gsalias$LN.conf  &amp;&gt;..&#x2F;logs&#x2F;game$LN.log &amp;</span><br><span class="line">		else</span><br><span class="line">			echo line $LN is already running</span><br><span class="line">		fi</span><br><span class="line">		sleep 1</span><br><span class="line">	done</span><br><span class="line">	cd ..</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">status() </span><br><span class="line">&#123;</span><br><span class="line">	PROGRAME_ACTIVE&#x3D;0;</span><br><span class="line">	for LN in $LINELIST</span><br><span class="line">	do</span><br><span class="line">		check_line $LN</span><br><span class="line">		PROGRAME_ACTIVE&#x3D;&#96;expr $PROGRAME_ACTIVE + $?&#96;;</span><br><span class="line">	done</span><br><span class="line">	check_process zlogd </span><br><span class="line">	PROGRAME_ACTIVE&#x3D;&#96;expr $PROGRAME_ACTIVE + $?&#96;;</span><br><span class="line">	check_process gdeliveryd</span><br><span class="line">	PROGRAME_ACTIVE&#x3D;&#96;expr $PROGRAME_ACTIVE + $?&#96;;</span><br><span class="line">	check_process gamedbd</span><br><span class="line">	PROGRAME_ACTIVE&#x3D;&#96;expr $PROGRAME_ACTIVE + $?&#96;;</span><br><span class="line">	# check_process gonlineinfod</span><br><span class="line">	# PROGRAME_ACTIVE&#x3D;&#96;expr $PROGRAME_ACTIVE + $?&#96;;</span><br><span class="line">	if [ $UNAMED_ACTIVE -eq 1 ]; then</span><br><span class="line">		check_process unamed</span><br><span class="line">		PROGRAME_ACTIVE&#x3D;&#96;expr $PROGRAME_ACTIVE + $?&#96;;</span><br><span class="line">	fi</span><br><span class="line">	check_process glinkd</span><br><span class="line">	PROGRAME_ACTIVE&#x3D;&#96;expr $PROGRAME_ACTIVE + $?&#96;;</span><br><span class="line">	return $PROGRAME_ACTIVE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_process()</span><br><span class="line">&#123;</span><br><span class="line">	SELFID&#x3D;&#96;id -u&#96;</span><br><span class="line">	PIDS&#x3D;&#96;pgrep -u $SELFID -f &quot;.&#x2F;$1$suffix.*$1.conf&quot;&#96;</span><br><span class="line">	if [ ! -z &quot;$PIDS&quot; ]; then</span><br><span class="line">		echo service $1 is running, pid $PIDS</span><br><span class="line">		return 1;</span><br><span class="line">	else</span><br><span class="line">		echo service $1 is stopped.</span><br><span class="line">		return 0;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exists()</span><br><span class="line">&#123;</span><br><span class="line">	SELFID&#x3D;&#96;id -u&#96;</span><br><span class="line">	PIDS&#x3D;&#96;pgrep -u $SELFID -f &quot;.&#x2F;$1$suffix.*$1.conf&quot;&#96;</span><br><span class="line">	if [ ! -z &quot;$PIDS&quot; ]; then</span><br><span class="line">		echo service $1 is running, pid $PIDS</span><br><span class="line">		return 1</span><br><span class="line">	fi</span><br><span class="line">	return 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kill_process()</span><br><span class="line">&#123;</span><br><span class="line">	NAME&#x3D;$1</span><br><span class="line">	SIG&#x3D;$2</span><br><span class="line">	SELFID&#x3D;&#96;id -u&#96;</span><br><span class="line">	PIDS&#x3D;&#96;pgrep -u $SELFID -f &quot;.&#x2F;$NAME$suffix.*$NAME.conf&quot;&#96;</span><br><span class="line">	if [ -n &quot;$PIDS&quot; ]; then</span><br><span class="line">		for PID in $PIDS</span><br><span class="line">		do</span><br><span class="line">			kill -$SIG $PID</span><br><span class="line">			echo service $NAME pid $PID is killed.</span><br><span class="line">		done</span><br><span class="line">	else</span><br><span class="line">		echo service $NAME is not running.</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_line()</span><br><span class="line">&#123;</span><br><span class="line">	SELFID&#x3D;&#96;id -u&#96;</span><br><span class="line">	LN&#x3D;$1</span><br><span class="line">	PIDS&#x3D;&#96;pgrep -u $SELFID -f &quot;.&#x2F;gs$suffix gs.conf gmserver.conf config&#x2F;gsalias$LN.conf&quot;&#96;</span><br><span class="line">	if [ ! -z &quot;$PIDS&quot; ]; then</span><br><span class="line">		echo line $LN is running, pid $PIDS</span><br><span class="line">		return 1;</span><br><span class="line">	else</span><br><span class="line">		echo line $LN is stopped.</span><br><span class="line">		return 0;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kill_line()</span><br><span class="line">&#123;</span><br><span class="line">	SELFID&#x3D;&#96;id -u&#96;</span><br><span class="line">	LN&#x3D;$1</span><br><span class="line">	PIDS&#x3D;&#96;pgrep -u $SELFID -f &quot;.&#x2F;gs$suffix gs.conf gmserver.conf config&#x2F;gsalias$LN.conf&quot;&#96;</span><br><span class="line">	if [ -n &quot;$PIDS&quot; ]; then</span><br><span class="line">		for PID in $PIDS</span><br><span class="line">		do</span><br><span class="line">			kill -9 $PID</span><br><span class="line">			echo line $LN pid $PID is killed.</span><br><span class="line">		done</span><br><span class="line">	else</span><br><span class="line">		echo line $LN is not running.</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kill_grc()</span><br><span class="line">&#123;</span><br><span class="line">	kill -9  $(ps -ef|grep grc.jar$suffix |grep -v grep|awk &#39;&#123;print $2&#125;&#39;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start_grc()</span><br><span class="line">&#123;</span><br><span class="line">	cd grc</span><br><span class="line">	rm -rf .&#x2F;lib</span><br><span class="line">	unzip lib.zip</span><br><span class="line">	rm -rf grc.jar$suffix</span><br><span class="line">	cp grc.jar grc.jar$suffix</span><br><span class="line">	nohup java -jar .&#x2F;grc.jar$suffix  -Xms1G -Xmx2G &gt;&gt;&#x2F;dev&#x2F;null  2&gt;&gt;&#x2F;tmp&#x2F;grc.err$suffix &amp;</span><br><span class="line">	cd ..</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start()</span><br><span class="line">&#123;</span><br><span class="line">	mkdir -p logs</span><br><span class="line">        export LD_LIBRARY_PATH&#x3D;.:..&#x2F;..&#x2F;lib</span><br><span class="line">	ulimit -c unlimited</span><br><span class="line">	ulimit -n 4096</span><br><span class="line"></span><br><span class="line">	if [ ! -z $1 ]; then</span><br><span class="line">                start_line $1</span><br><span class="line">		return</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	exists zlogd</span><br><span class="line">	if [ $? -eq 0 ]; then</span><br><span class="line">		cd zlogd</span><br><span class="line">		echo &#39;start zlogd service&#39;</span><br><span class="line">		nohup setsid .&#x2F;zlogd$suffix zlogd.conf &amp;&gt;&#x2F;dev&#x2F;null &amp;</span><br><span class="line">		sleep 2</span><br><span class="line">		cd ..</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	exists gdeliveryd</span><br><span class="line">	if [ $? -eq 0 ]; then</span><br><span class="line">		cd gdeliveryd</span><br><span class="line">		echo &#39;start DS service&#39;</span><br><span class="line">		nohup setsid .&#x2F;gdeliveryd$suffix gdeliveryd.conf &amp;&gt;..&#x2F;logs&#x2F;gdelivery.log  &amp;</span><br><span class="line">		#nohup setsid valgrind --log-file&#x3D;..&#x2F;logs&#x2F;valgrind_ds.log .&#x2F;gdeliveryd$suffix gdeliveryd.conf &amp;&gt;..&#x2F;logs&#x2F;gdelivery.log  &amp;</span><br><span class="line">		cd ..</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	exists glinkd</span><br><span class="line">	if [ $? -eq 0 ]; then</span><br><span class="line">		cd glinkd</span><br><span class="line">		echo &#39;start LS service&#39;</span><br><span class="line">		nohup setsid .&#x2F;glinkd$suffix --ccs glinkd.conf &amp;&gt;..&#x2F;logs&#x2F;glinkd.ccs.log  &amp;</span><br><span class="line">		for ((i &#x3D; 1; i &lt;&#x3D; $LINK_NUM; i++))</span><br><span class="line">		do</span><br><span class="line">			nohup setsid .&#x2F;glinkd$suffix --cls -i $i glinkd.conf &amp;&gt;..&#x2F;logs&#x2F;glinkd.cls$i.log  &amp;</span><br><span class="line">		done</span><br><span class="line">		cd ..</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	exists gamedbd</span><br><span class="line">	if [ $? -eq 0 ]; then</span><br><span class="line">		cd gamedbd</span><br><span class="line">		echo &#39;start DB service&#39;</span><br><span class="line">		nohup setsid .&#x2F;gamedbd$suffix gamedbd.conf &amp;&gt;..&#x2F;logs&#x2F;gamedbd.log &amp;</span><br><span class="line">		cd ..</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">	if [ $UNAMED_ACTIVE -eq 1 ]; then</span><br><span class="line">		exists unamed</span><br><span class="line">		if [ $? -eq 0 ]; then</span><br><span class="line">			cd unamed</span><br><span class="line">			echo &#39;start unamed service&#39;</span><br><span class="line">			nohup setsid .&#x2F;unamed$suffix unamed.conf &amp;&gt;..&#x2F;logs&#x2F;unamed.log &amp;</span><br><span class="line">			cd ..</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">#	exists gonlineinfod</span><br><span class="line">#	if [ $? -eq 0 ]; then</span><br><span class="line">#		cd gonlineinfod</span><br><span class="line">#		echo &#39;start OL service&#39;</span><br><span class="line">#		nohup setsid .&#x2F;gonlineinfod$suffix gonlineinfod.conf &amp;&gt;..&#x2F;logs&#x2F;gonlineinfod.log  &amp;</span><br><span class="line">#		cd ..</span><br><span class="line">#	fi</span><br><span class="line"></span><br><span class="line">	#start_grc</span><br><span class="line"></span><br><span class="line">	start_line</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop()</span><br><span class="line">&#123;</span><br><span class="line">	if [ ! -z $1 ]; then</span><br><span class="line">                kill_line $1</span><br><span class="line">		return</span><br><span class="line">	fi</span><br><span class="line">	#kill_grc</span><br><span class="line">	kill_process glinkd KILL</span><br><span class="line">	kill_process gdeliveryd KILL</span><br><span class="line">	kill_process gamedbd USR1</span><br><span class="line">	#kill_process gonlineinfod KILL</span><br><span class="line">	if [ $UNAMED_ACTIVE -eq 1 ]; then</span><br><span class="line">		kill_process unamed USR1</span><br><span class="line">	fi</span><br><span class="line">        for LN in $LINELIST</span><br><span class="line">        do</span><br><span class="line">                kill_line $LN</span><br><span class="line">        done</span><br><span class="line">	kill_process zlogd KILL</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">wait()</span><br><span class="line">&#123;</span><br><span class="line">	for (( i&#x3D;0; i&lt;5; i++))</span><br><span class="line">	do</span><br><span class="line">		echo -n &quot;.&quot;</span><br><span class="line">		sleep 0.2</span><br><span class="line">	done</span><br><span class="line">	echo &quot;.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restart()</span><br><span class="line">&#123;</span><br><span class="line">        stop $1</span><br><span class="line">	if [ ! -z $1 ]; then</span><br><span class="line">		wait</span><br><span class="line">	else</span><br><span class="line">		PROGRAME_ACTIVE&#x3D;1;</span><br><span class="line">		while [ &quot;$PROGRAME_ACTIVE&quot; !&#x3D; &quot;0&quot; ]</span><br><span class="line">		do</span><br><span class="line">			wait</span><br><span class="line">			status</span><br><span class="line">			echo $PROGRAME_ACTIVE program is running</span><br><span class="line">		done</span><br><span class="line">	fi</span><br><span class="line">        start $1</span><br><span class="line">	wait</span><br><span class="line">	echo &#39;task accomplished&#39;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">case $1 in </span><br><span class="line">start) </span><br><span class="line">        start $2</span><br><span class="line">        ;; </span><br><span class="line">stop)</span><br><span class="line">        stop $2</span><br><span class="line">        ;; </span><br><span class="line">restart)</span><br><span class="line">        restart $2</span><br><span class="line">        ;; </span><br><span class="line">status)</span><br><span class="line">        status </span><br><span class="line">        ;; </span><br><span class="line">*) </span><br><span class="line">        usage </span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SHELL</category>
      </categories>
      <tags>
        <tag>SHELL</tag>
      </tags>
  </entry>
  <entry>
    <title>获取所有的AWS EC2主机信息</title>
    <url>/2020/04/20/%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E7%9A%84AWS-EC2%E4%B8%BB%E6%9C%BA%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h2 id="获取所有的AWS-EC2主机信息"><a href="#获取所有的AWS-EC2主机信息" class="headerlink" title="获取所有的AWS EC2主机信息"></a>获取所有的AWS EC2主机信息</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ol>
<li>本地需要安装aws cli工具,以及配置好相关的key;</li>
<li>EC2 主机需要添加Tag(环境/部门/业务);</li>
</ol>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ol>
<li>需要安装PrettyTable模块<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pip install PrettyTable</span><br></pre></td></tr></table></figure></li>
<li>脚本内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;2&#x2F;7</span><br><span class="line"></span><br><span class="line">from prettytable import PrettyTable</span><br><span class="line">import subprocess</span><br><span class="line">import datetime</span><br><span class="line">import xlwt</span><br><span class="line">import json</span><br><span class="line">import sys</span><br><span class="line">import getopt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_all_aws_ec2():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    所有的EC2实例ID</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        command &#x3D; &quot;aws ec2 describe-instances --query &#39;Reservations[*].Instances[*].[InstanceId]&#39;&quot;</span><br><span class="line">        ret &#x3D; subprocess.getoutput(command)</span><br><span class="line">        ret &#x3D; json.loads(ret)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;ERROR: &quot;, e)</span><br><span class="line">        sys.exit(&quot;Bey Bey!&quot;)</span><br><span class="line"></span><br><span class="line">    all_aws_ec2_list &#x3D; []</span><br><span class="line">    for ec2 in ret:</span><br><span class="line">        if len(ec2) &gt; 1:</span><br><span class="line">            for item in ec2:</span><br><span class="line">                all_aws_ec2_list.append(item[0])</span><br><span class="line">        else:</span><br><span class="line">            all_aws_ec2_list.append(ec2[0][0])</span><br><span class="line">    return all_aws_ec2_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_ec2_info():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    获取所有的 EC2 属性信息</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        command &#x3D; &quot;aws ec2 describe-instances --query &#39;Reservations[*].Instances[*].[InstanceId,Placement.AvailabilityZone,State.Name,Tags[?Key&#x3D;&#x3D;&#96;Name&#96;].Value,PrivateIpAddress,NetworkInterfaces[0].PrivateIpAddresses[0].Association.PublicIp,SecurityGroups[0].GroupName,SecurityGroups[1].GroupName,Tags[?Key&#x3D;&#x3D;&#96;环境&#96;].Value,Tags[?Key&#x3D;&#x3D;&#96;部门&#96;].Value,Tags[?Key&#x3D;&#x3D;&#96;业务&#96;].Value,Tags[?Key&#x3D;&#x3D;&#96;备注&#96;].Value]&#39;&quot;</span><br><span class="line">        ret &#x3D; subprocess.getoutput(command)</span><br><span class="line">        all_aws_ec2_list &#x3D; json.loads(ret)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;ERROR: &quot;, e)</span><br><span class="line">        sys.exit(&quot;Bey Bey!&quot;)</span><br><span class="line">    host_info_list &#x3D; []</span><br><span class="line">    for item in all_aws_ec2_list:</span><br><span class="line">        if len(item) &gt; 1:</span><br><span class="line">            for ec2 in item:</span><br><span class="line">                host_info_list.append([ec2])</span><br><span class="line">        else:</span><br><span class="line">            host_info_list.append(item)</span><br><span class="line"></span><br><span class="line">    return host_info_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def set_style(name, height, bold&#x3D;False):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    表格样式</span><br><span class="line">    :param name:</span><br><span class="line">    :param height:</span><br><span class="line">    :param bold:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    style &#x3D; xlwt.XFStyle()  # 初始化样式</span><br><span class="line"></span><br><span class="line">    font &#x3D; xlwt.Font()  # 为样式创建字体</span><br><span class="line">    font.name &#x3D; name  # &#39;Times New Roman&#39;</span><br><span class="line">    font.bold &#x3D; bold</span><br><span class="line">    font.color_index &#x3D; 3</span><br><span class="line">    font.height &#x3D; height</span><br><span class="line">    style.font &#x3D; font</span><br><span class="line"></span><br><span class="line">    return style</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def write_execl(filename):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    输出到excel文件中</span><br><span class="line">    :param filename:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    f &#x3D; xlwt.Workbook()  # 创建工作簿</span><br><span class="line">    sheet1 &#x3D; f.add_sheet(&#39;AWS主机信息表&#39;, cell_overwrite_ok&#x3D;True)</span><br><span class="line">    title &#x3D; [&#39;实例ID&#39;, &#39;region&#39;, &#39;状态&#39;, &#39;Name&#39;, &#39;内网IP&#39;, &#39;公网IP&#39;, &#39;安全组-1&#39;, &#39;安全组-2&#39;, &#39;环境&#39;, &#39;部门&#39;, &#39;业务&#39;, &#39;备注&#39;]</span><br><span class="line">    # 生成第一行</span><br><span class="line">    for i in range(0, len(title)):</span><br><span class="line">        sheet1.write(0, i, title[i], set_style(&#39;简体中文&#39;, 350, True))</span><br><span class="line"></span><br><span class="line">    host_info_list &#x3D; get_ec2_info()</span><br><span class="line">    i &#x3D; 1</span><br><span class="line">    while i &lt; int(len(host_info_list) + 1):</span><br><span class="line">        for j in range(0, len(title)):</span><br><span class="line">            if isinstance(host_info_list[i - 1][0][j], list):</span><br><span class="line">                cell &#x3D; host_info_list[i - 1][0][j] if host_info_list[i - 1][0][j] else None</span><br><span class="line">            else:</span><br><span class="line">                cell &#x3D; host_info_list[i - 1][0][j]</span><br><span class="line">            sheet1.write(i, j, cell)</span><br><span class="line">        i +&#x3D; 1</span><br><span class="line"></span><br><span class="line">    f.save(filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def table_stdout():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    输出为表格形式</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    table &#x3D; PrettyTable(</span><br><span class="line">        [&quot;编号&quot;, &quot;实例ID&quot;, &quot;region&quot;, &quot;状态&quot;, &quot;Name&quot;, &quot;内网IP&quot;, &quot;公网IP&quot;, &quot;安全组-1&quot;, &quot;安全组-2&quot;, &quot;环境&quot;, &quot;部门&quot;, &quot;业务&quot;, &quot;备注&quot;])</span><br><span class="line"></span><br><span class="line">    all_ec2_instance_id_list &#x3D; get_all_aws_ec2()</span><br><span class="line">    host_info_list &#x3D; get_ec2_info()</span><br><span class="line">    if len(all_ec2_instance_id_list) !&#x3D; len(host_info_list):</span><br><span class="line">        sys.exit(&quot;ERROR: 主机数量不一致，请检查!&quot;)</span><br><span class="line">    count &#x3D; 0</span><br><span class="line">    for ec2_info in host_info_list:</span><br><span class="line">        temp &#x3D; []</span><br><span class="line">        count +&#x3D; 1</span><br><span class="line">        ec2_info[0].insert(0, count)</span><br><span class="line">        for item in ec2_info[0]:</span><br><span class="line">            if isinstance(item, list):</span><br><span class="line">                temp.append(item[0] if item else None)</span><br><span class="line">            else:</span><br><span class="line">                temp.append(item)</span><br><span class="line">        table.add_row(temp)</span><br><span class="line">    table.reversesort &#x3D; True</span><br><span class="line">    print(table)</span><br><span class="line">    print(&quot;\033[0;32m%s:, AWS EC2 Total: %d\033[0m&quot; % (datetime.datetime.now(), len(all_ec2_instance_id_list)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main(argv, excel_path):</span><br><span class="line">    usage &#x3D; &quot;&quot;&quot;usage:</span><br><span class="line">        test.py -t&#x2F;--table</span><br><span class="line">        test.py -f&#x2F;--outfile</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        opts, args &#x3D; getopt.getopt(argv, &quot;htf&quot;, [&quot;help&quot;, &quot;table&quot;, &quot;outfile&quot;])</span><br><span class="line">    except getopt.GetoptError:</span><br><span class="line">        print(usage)</span><br><span class="line">        sys.exit(2)</span><br><span class="line">    for opt, arg in opts:</span><br><span class="line">        if opt in (&quot;-h&quot;, &quot;--help&quot;):</span><br><span class="line">            print(usage)</span><br><span class="line">            sys.exit(2)</span><br><span class="line">        elif opt in (&quot;-t&quot;, &quot;--table&quot;):</span><br><span class="line">            table_stdout()</span><br><span class="line">        elif opt in (&quot;-f&quot;, &quot;--outfile&quot;):</span><br><span class="line">            write_execl(excel_path)</span><br><span class="line">        else:</span><br><span class="line">            print(usage)</span><br><span class="line">            sys.exit(2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    excel_path &#x3D; &quot;&#x2F;tmp&#x2F;AWS主机信息表-&#123;date&#125;.xlsx&quot;.format(date&#x3D;datetime.date.today())</span><br><span class="line">    main(sys.argv[1:], excel_path</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>aws</category>
      </categories>
      <tags>
        <tag>aws</tag>
      </tags>
  </entry>
  <entry>
    <title>EditorConfig使用介绍</title>
    <url>/2020/05/03/EditorConfig%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>在github看到很多项目根目录都有 .editorconfig 文件，所以去了解一下。</p>
<p>这个文件是 EditorConfig 用来统一不同编辑器的代码风格的配置。</p>
<p>各种IDE的风格自然不一样，通过这样一个配置文件定义的标准统一风格，比如缩进用x个空格。再有就是多人一起协同开发一个项目，editorconfig 能起到很好的效果。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># EditorConfig: http:&#x2F;&#x2F;editorconfig.org&#x2F;</span><br><span class="line"></span><br><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 4</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">trim_trailing_whitespace &#x3D; true</span><br><span class="line">insert_final_newline &#x3D; true</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace &#x3D; false</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里巴巴 DevOps 转型后的运维平台建设</title>
    <url>/2020/04/20/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4-DevOps-%E8%BD%AC%E5%9E%8B%E5%90%8E%E7%9A%84%E8%BF%90%E7%BB%B4%E5%B9%B3%E5%8F%B0%E5%BB%BA%E8%AE%BE/</url>
    <content><![CDATA[<h2 id="实战-阿里巴巴-DevOps-转型后的运维平台建设"><a href="#实战-阿里巴巴-DevOps-转型后的运维平台建设" class="headerlink" title="实战:阿里巴巴 DevOps 转型后的运维平台建设"></a>实战:阿里巴巴 DevOps 转型后的运维平台建设</h2><blockquote>
<p>导读：阿里巴巴DevOps转型之后，运维平台是如何建设的？阿里巴巴高级技术专家陈喻结合运维自身的理解，业务场景的分析和业界方法论的一些思考，得出来一些最佳实践分享给大家.</p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>“我是这个应用的 Owner”是阿里巴巴DevOps转型的重要策略，运维有了这个策略以后，PE大量的日常工作就可以释放出来，会有更多的时间去思考沉淀，去做编码，去做以前不曾做的事情。</p>
<h3 id="运维的三个阶段"><a href="#运维的三个阶段" class="headerlink" title="运维的三个阶段"></a>运维的三个阶段</h3><p><img src="https://note.youdao.com/yws/api/personal/file/WEBbf3865e31808fe00f15398bbcc41424f?method=download&shareKey=f5bd11f6b941ca6316940227c22768bc" alt="运维三个阶段">  </p>
<ol>
<li>第一阶段：黑屏，三角形是代表整个运维给用户的一些体感或者给研发的体感，人工运维，目前很多企业可能还是这样。</li>
<li>第二阶段：白屏,自动化运维，以前把脚本做成工具去弄，有什么特征，人push机器去干活，自助运维。</li>
<li>第三阶段：用户对运维体感很少，但是运维这个领域是不变的。最重要的是人机交互变少了，无屏虽说是不可能的，非常极端，但是个趋势，少量的人机交互，它有自决策、自驱动。</li>
</ol>
<h3 id="自动化运维基础"><a href="#自动化运维基础" class="headerlink" title="自动化运维基础"></a>自动化运维基础</h3><p>做自动化运维，我认为有四大基础。</p>
<h4 id="第一-运维标准与规范"><a href="#第一-运维标准与规范" class="headerlink" title="第一: 运维标准与规范"></a>第一: 运维标准与规范</h4><p>我们的标准有什么好处，让研发 follow 这个标准，标准会在工具里固化。</p>
<h4 id="第二-泛监控，运行时，静态，数据化，可视化"><a href="#第二-泛监控，运行时，静态，数据化，可视化" class="headerlink" title="第二: 泛监控，运行时，静态，数据化，可视化"></a>第二: 泛监控，运行时，静态，数据化，可视化</h4><p>泛监控，不是说传统的监控，是把线上想知道的一切都数据化，最终数据不是给人看的，是给机器去消费的，数据是我们的生产资料，不是可视化，那不是我们的目标。</p>
<h4 id="第三-CMDB"><a href="#第三-CMDB" class="headerlink" title="第三: CMDB"></a>第三: CMDB</h4><p>1.CMDB 应该放什么，一般放服务器相关的、网络相关的、应用相关的这三个维度的相关信息。<br>2.经常有人会说 CMDB 不准，数据不准是因为没有把数据生产和数据消费形成闭环，如果形成了闭环数据不准，那是因为你不用这个数据，所以不准。</p>
<h4 id="第四-高效的CI-CD"><a href="#第四-高效的CI-CD" class="headerlink" title="第四: 高效的CI/CD"></a>第四: 高效的CI/CD</h4><p>我们一定要具备快速的交付能力，主要体现这两个方面：第一，新开发的能力能不能快速上线，第二，想扩容一台机器能不能快速扩出来。这两个能力抽象出来是三块。<br>持续集成(CI)，很多人说持续集成工具不好用，效率低，其实持续集成的本质是要自动化测试。如果研发部不具备自动化测试的能力，持续集成怎么做都是失败的。<br>持续集成里最重要的一点就是要推行单元测试、集成测试还有系统测试，单测是保证自己没问题，集成测试是保证跟上下游没问题，系统测试是保证整个系统没问题。<br>持续交付(CD)，有很多人说持续交付本质是一个 Pipeline，CI的目标是什么？快速正确打一个包出来。CD的目标是什么？能够快速把一个包在不同的环境验证它是ok的，可以放到线上去，这就是持续交付要干的事。持续交付里很关键的一点我们要解决，就是它的环境一致性、配置一致性。环境一致性可以用Docker解决，Docker 本身就是一种标准化的东西。所以说第一条用 Docker，肯定是标准化的，另外一个问题，配置是不是一致性，是不是动静分离。<br>持续部署(CD)，是一种能力，这种能力非常重要，就是把一个包快速部署在你想要的地方。</p>
<p>PS：持续部署的几个痛点。</p>
<ol>
<li>对包的文件的分发，阿里有一个叫蜻蜓的产品，是做了 SP2P，在 P2P 的基础上加了一个 Super。</li>
<li>应用启动，很多应用启动的时候要两三分钟，这是很有问题的。</li>
<li>部署起来以后这个业务是不是正确的，大家一定要做一个 HealthCheck，不是运维做，是PE做，一定要把这个要求说出来，执行 HealthCheck 这个脚本。</li>
</ol>
<h3 id="运维系统的重要特性"><a href="#运维系统的重要特性" class="headerlink" title="运维系统的重要特性"></a>运维系统的重要特性</h3><p>中间件研发首先关注稳定性，其次是效率，然后是易扩展。运维研发里面的六个重要特征，每一个都非常重要，以下是我感触比较深的几个。<br><img src="https://note.youdao.com/yws/api/personal/file/WEB620101a1629a2fdfbd0c36d6564055ff?method=download&shareKey=08971d6ce40134622e0c64456099e2ae" alt="运维系统重要特性">  </p>
<ol>
<li><p>高可用<br>在做同城容灾演练的时候，我把关一切，结果发现运维系统挂了，救命的东西没有了怎么办？所以说运维系统一定要是高可用，不一定是高并发。</p>
</li>
<li><p>幂等性<br>幂等性是分布式系统设计中十分重要的概念，这个也非常重要。</p>
</li>
<li><p>可回滚<br>这个是做运维最基本的一个 sense，你做的任何操作是不是可控的。如果真正做可回滚，其实事情没有这么复杂。</p>
</li>
<li><p>高效率<br>如果你的企业发展非常快速，你的规模性效应已经来了，你的运维系统一定要具备很高效率，快速扩容、快速部署这个效率我们要追求极致。</p>
</li>
</ol>
<h3 id="研发定义运维，配置驱动变更"><a href="#研发定义运维，配置驱动变更" class="headerlink" title="研发定义运维，配置驱动变更"></a>研发定义运维，配置驱动变更</h3><ol>
<li><p>从最下面看，是我们的基础设施，提供三种能力，包括集散、存储、网络。从右下角的位置看，画的是一个泛监控，它会知道系统、应用等，在旁边标了一个字，现状，我要通过这个现状把线上的系统全部数据化，然后放到决策中心。</p>
</li>
<li><p>左上角有 CMDB，现在很多变更系统，很多强调流程。我本人是做研发出身，非常抵触流程，流程不是一个效率工具，它是阻碍效率的。</p>
</li>
<li><p>比如故障搞完以后就是一堆的流程，非常阻碍效率，是质量控制的一个工具。流程不是不要，是把流程做到系统里面去，让系统帮人做决策，而不是人在那里点。</p>
</li>
<li><p>CMDB 定义了我刚才说的目标，现状通过监控拿到了，目标也知道了，这个时候还觉得这个事情很复杂吗？我认为这看你怎么去做。想做成人工还是做成自动或者做成智能，都取决于这个地方。所以智能里一定要有数据。</p>
</li>
<li><p>举个例子，通过智能分析出目标状态是使这个应用有100个VM，但是现在状态只有80个，一看这两个不一样，要扩容20台，如果系统做得更智能一点，通过图上左边的事件中心提示我20台负载较轻的放在哪，可以调度过去，然后去做执行变更。</p>
</li>
</ol>
<p>基于这些东西得出来两个结论，“研发定义运维”，“配置驱动变更”。</p>
<h3 id="为什么是研发定义运维？"><a href="#为什么是研发定义运维？" class="headerlink" title="为什么是研发定义运维？"></a>为什么是研发定义运维？</h3><p>研发定义运维（DDO），研发最贴近业务，最应该清楚这个业务应该具备什么样的能力，只有研发才知道这个业务KPS是多少。</p>
<h3 id="为什么是配置驱动变更"><a href="#为什么是配置驱动变更" class="headerlink" title="为什么是配置驱动变更?"></a>为什么是配置驱动变更?</h3><p>配置就是把目标改变一下，你跟我说一个运维场景，我可以在这个图里面 run 起来，配置只需要改你的目标状态，比如把你的状态10VM 变成15个VM。<br>这就是”研发定义运维，配置驱动变更”前因后果的思考。</p>
<h3 id="运维工具与方法论"><a href="#运维工具与方法论" class="headerlink" title="运维工具与方法论"></a>运维工具与方法论</h3><p><img src="https://note.youdao.com/yws/api/personal/file/WEB9c904e2294e2fc84199992da72822695?method=download&shareKey=ebfc4a36f6d42bca917684b002fd174d" alt="运维工具及方法论">  </p>
<h4 id="精益发现价值"><a href="#精益发现价值" class="headerlink" title="精益发现价值"></a>精益发现价值</h4><p>价值来源于用户的需求，而不是自己的YY，我们的价值来源于用户。</p>
<p>精益对我最大的感触就是要发现价值。精益思想，什么东西是有价值的，能够对用户带来物质上的或者身体上的愉悦的东西就是有价值的。</p>
<p>今天也有人问，DevOps 团队是该拆还是该合，我想他应该首先弄清楚面对的是什么样的问题，问题的优先级是什么？如果只解决一个问题，也许并不是DevOps 团队拆不拆的问题。</p>
<h4 id="敏捷交付价值"><a href="#敏捷交付价值" class="headerlink" title="敏捷交付价值"></a>敏捷交付价值</h4><p>敏捷也是对我影响很多的。很多人谈敏捷，我们团队里也搞敏捷，敏捷是要快速交付价值，它是一系列的方法论。但是在引入的时候千万注意，别人行的东西你不一定行，你需要的东西并不一定是敏捷，要因团队而异，形成一个环，持续反馈。</p>
<h4 id="OODA环"><a href="#OODA环" class="headerlink" title="OODA环"></a>OODA环</h4><p>OODA 环，就是形成闭环，让价值快速流动。</p>
<h3 id="应用运维平台ATOM"><a href="#应用运维平台ATOM" class="headerlink" title="应用运维平台ATOM"></a>应用运维平台ATOM</h3><p>应用运维平台的基础设施是一层，二层是运维中台，最上面一块是要做的 PaaS 平台，这个平台分几步。<br><img src="https://note.youdao.com/yws/api/personal/file/WEBcf540b68ea94cc7580696604fdd19476?method=download&shareKey=0a14435fa7c2bae87259c1ca63a072ff" alt="ATOM平台产品架构">  </p>
<h4 id="第一块，预算、容量、资源、弹性"><a href="#第一块，预算、容量、资源、弹性" class="headerlink" title="第一块，预算、容量、资源、弹性"></a>第一块，预算、容量、资源、弹性</h4><p>这个是PaaS 平台上非常重要的一块，目的就是让资源快速流动起来，流向正确的方向来产生价值。资源如果常年不增不减，是有问题的。</p>
<h4 id="第二块，应用管理"><a href="#第二块，应用管理" class="headerlink" title="第二块，应用管理"></a>第二块，应用管理</h4><p>这是日常要做的操作，规模化，要快速对一个单元建站、扩容、缩容。</p>
<h4 id="第三块，数据化运营"><a href="#第三块，数据化运营" class="headerlink" title="第三块，数据化运营"></a>第三块，数据化运营</h4><p>一定要讲数据，数据不是可视化出来一些报表，是要给结论，告诉用户这个数据完了以后应该是什么，规则中心是什么，是所有运维同学日常的运维经验沉淀。</p>
<h3 id="批量腾挪工具"><a href="#批量腾挪工具" class="headerlink" title="批量腾挪工具"></a>批量腾挪工具</h3><p>批量腾挪工具-背景</p>
<ul>
<li>痛点: <ul>
<li>机房搬迁</li>
<li>机器过保替换</li>
<li>机器故障频发,替换</li>
</ul>
</li>
<li>目标:<ul>
<li>规模化,系统化资源腾挪,提升运维效率</li>
<li>减少批量腾挪投入的人力,时间资源</li>
<li>单机替换自动化处理<br>这个工具不是所有人都需要，可以解决机房的搬迁，凑框迁移。<br>弹性伸缩是我们的决策中心。它决定你的资源往哪个地方流，非常关键。<br>最后，这里是运维领域技术含量最深的一个地方，要搞机器学习、深度学习、强化学习、算法等。<br>弹性一般有水平伸缩、垂直伸缩，对线上做管理，当然我们有额度，这是比较精细化的管理。弹性有观察者模式还有自动化执行，每次弹性完以后有一个控制台，双11做全年压测的时候一般情况下不看这个。</li>
</ul>
</li>
</ul>
<p>个人觉得本文内容总结的相当好,具有很高的参考意义和价值,故做整理,方便阅读!</p>
<p><a href="https://segmentfault.com/a/1190000014088336" target="_blank" rel="noopener">原文链接</a><br><a href="http://dbaplus.cn/news-134-1876-1.html" target="_blank" rel="noopener">参考文章</a>  </p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>python小技巧</title>
    <url>/2020/04/29/python%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>每天早晨洗一遍脑子特并清醒 </p>
</blockquote>

<ol>
<li><p>List: all_equal<br>功能实现: 检验一个列表中的所有元素是否都一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def all_equal(lst):</span><br><span class="line">    return lst[1:] &#x3D;&#x3D; lst[:-1]</span><br><span class="line"></span><br><span class="line">ret &#x3D; all_equal([1, 2, 3, 4, 5, 6])</span><br><span class="line"></span><br><span class="line">ret2 &#x3D; all_equal([1, 1, 1, 1])</span><br><span class="line"></span><br><span class="line">print(ret, ret2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># True False</span><br></pre></td></tr></table></figure>
</li>
<li><p>List: all_unique<br>功能实现: 如果列表所有值都是唯一的，返回True, 否则返回False</p>
<blockquote>
<p>解读: 在给定列表上使用集合set()去重, 比较它和原列表的长度</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def all_unique(lst):</span><br><span class="line">    return len(lst) &#x3D;&#x3D; len(set(lst))</span><br><span class="line"></span><br><span class="line"># 举例:</span><br><span class="line">x &#x3D; [1, 2, 3, 4, 5, 6]</span><br><span class="line">y &#x3D; [1, 2, 2, 3, 4, 5]</span><br><span class="line">z &#x3D; all_unique(x)</span><br><span class="line">b &#x3D; all_unique(y)</span><br><span class="line">print(z, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># True False</span><br></pre></td></tr></table></figure>
</li>
<li><p>List: bifucate<br>功能实现: 将列表值分组。如果filter的元素是True, 那么对应的元素属于第一个组,否则属于第二个组<br>解读: 使用列表推导式和enumerate()基于fiter元素到各组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def bifurcate(lst, filter):</span><br><span class="line">    return [</span><br><span class="line">        [x for i, x in enumerate(lst) if filter[i] &#x3D;&#x3D; True],</span><br><span class="line">        [x for i, x in enumerate(lst) if filter[i] &#x3D;&#x3D; False]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">r &#x3D; bifurcate([&quot;beep&quot;, &quot;boop&quot;, &quot;foo&quot;, &quot;bar&quot;], [True, True, False, True])</span><br><span class="line"># [[&#39;beep&#39;, &#39;boop&#39;, &#39;bar&#39;], [&#39;foo&#39;]]</span><br></pre></td></tr></table></figure>
</li>
<li><p>List: difference<br>功能实现: 返回两个iterables间的差异<br>解读: 创建b的集合，使用a的列表推导式保留不在_b中的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def difference(a, b):</span><br><span class="line">    _b &#x3D; set(b)</span><br><span class="line">    return [item for item in a if item not in _b]</span><br><span class="line"></span><br><span class="line">print(difference([1, 2, 3], [1, 2, 4]))</span><br><span class="line"></span><br><span class="line"># [3]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Math: digitize<br>功能实现: 将一个数分解转换为个位数字<br>解读: 将n字符化后使用map()函数结合int完成转化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def digitize(n):</span><br><span class="line">    return list(map(int, str(n)))</span><br><span class="line"></span><br><span class="line">print(digitize(123))</span><br><span class="line"># [1,2,3]</span><br></pre></td></tr></table></figure>
</li>
<li><p>List: shuffle<br>功能实现: 将列表元素顺序随机打乱<br>解读: 使用Fisher-Yates算法重新排序列表元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from copy import deepcopy</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">def shuffle(lst):</span><br><span class="line">    temp_lst &#x3D; deepcopy(lst)</span><br><span class="line">    m &#x3D; len(temp_lst)</span><br><span class="line">    while (m):</span><br><span class="line">        m -&#x3D; 1</span><br><span class="line">        i &#x3D; randint(0, m)</span><br><span class="line">        temp_lst[m], temp_lst[i] &#x3D; temp_lst[i], temp_lst[m]</span><br><span class="line">    return temp_lst</span><br><span class="line"></span><br><span class="line">foo &#x3D; [1, 2, 3]</span><br><span class="line">print(shuffle(foo))</span><br><span class="line"></span><br><span class="line"># [2, 1, 3]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Math: clamp_number<br>功能实现: 将数字num嵌在由a和b边界值规定的范围中<br>解读: 如果num落尽范围内,返回num 否则，返回范围内最接近的数字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def clamp_number(num, a, b):</span><br><span class="line">    return max(min(num, max(a, b)), min(a, b))</span><br><span class="line"></span><br><span class="line">a &#x3D; clamp_number(2, 3, 5)</span><br><span class="line">b &#x3D; clamp_number(1, -1, -5)</span><br><span class="line">print(a, b)</span><br><span class="line"></span><br><span class="line"># 3 -1</span><br></pre></td></tr></table></figure>
</li>
<li><p>String: byte_size<br>功能实现: 返回字符串的字节数<br>解读: 使用String.encode(‘utf-8’) 解码给定字符串, 返回长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def byte_size(string):</span><br><span class="line">    return len(string.encode(&#39;utf-8&#39;))</span><br><span class="line"></span><br><span class="line"># print(byte_size(&#39;😀&#39;)) # 4</span><br><span class="line"># print(byte_size(&#39;Hello World&#39;)) # 11</span><br></pre></td></tr></table></figure>
</li>
<li><p>Math: gcd<br>功能实现: 计算几个数的最大公因数<br>解读: 使用reduce()和math.gcd在给定列表上实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line">def gcd(numbers):</span><br><span class="line">    return reduce(math.gcd, numbers)</span><br><span class="line"></span><br><span class="line">print(gcd([8, 36, 28]))  # 4</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>最全的DevOps工具集合，再也不怕选型了！
</title>
    <url>/2020/04/20/%E6%9C%80%E5%85%A8%E7%9A%84DevOps%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88%EF%BC%8C%E5%86%8D%E4%B9%9F%E4%B8%8D%E6%80%95%E9%80%89%E5%9E%8B%E4%BA%86%EF%BC%81/</url>
    <content><![CDATA[<p>[TOC]</p>
<p>随着 DevOps 的出现频率越来越高，很多企业都在蠢蠢欲动，想要设计和开发 DevOps 平台。工欲善其事必先利其器，本文为大家总结了 DevOps 各个阶段可以选择的工具，也许 DevOps 平台的技术选型在这一篇文章中就可以完成。<br>DevOps 的目标是持续改进，因此技术选型也是分阶段的。</p>
<ol>
<li>规划工具<br>在规划阶段最重要的是要制定共同的目标、保证透明度和赋权。目前业内比较常用的规划工具主要包括 GitLab、TaskTop、CollabNet VersionOne、Pivotal Tracker、Trello 和 Azure Boards。</li>
</ol>
<p>GitLab<br>GitLab 是基于 Web 的 DevOps 生命周期工具。它提供了一个 Git 存储库管理器，使用由 GitLab Inc. 开发的开源许可证来提供 Wiki、问题跟踪和 CI/CD 管道功能。<br>GitLab 提供了一些工具用来在实践中规划事务，还可以用来查看工作的范围。</p>
<p>Tasktop<br>Tasktop 可以将所有这些工具添加到 Tasktop 支持的全套敏捷和应用程序生命周期管理（ALM）、PPM 和 ITSM 工具中，从而在整个生命周期中提供前所未有的可视化特性。</p>
<p>CollabNet VersionOne<br>VersionOne 支持 Scrum、看板、XP、SAFe 和混合开发方法，简化了跨所有团队、程序、软件产品组合和企业的计划、跟踪和报告工作</p>
<p>Pivotal Tracker<br>全球各地开发人员都可以使用这款敏捷项目管理工具，围绕一个共享的，带有优先级的 backlog 进行实时协作。</p>
<p>Trello<br>Trello 是基于 Web 的看板风格列表制作应用程序，是 Atlassian 的子应用。<br>许多团队在规划各个 sprint 时都会用它。</p>
<p>Azure Boards<br>可以跟踪软件项目，并使用敏捷工具（包括 Scrum boards、看板 boards 和仪表板等）改进规划工作。同时，还有工具可以帮助你可视化工作、共享计划、跟踪进度，并确保你正在向目标迈进。</p>
<ol start="2">
<li>问题跟踪<br>问题跟踪阶段是为了提供客户响应能力，减少知识浪费，缩短反馈链路。目前业内比较常用的问题跟踪工具包括 Atlassian Jira、JetBrains YouTrack 和 ZenDesk。</li>
</ol>
<p>Atlassian Jira<br>Jira 是 Atlassian 开发的专用问题跟踪产品，提供了错误跟踪和敏捷项目管理功能。</p>
<p>JetBrains YouTrack<br>YouTrack 是由 JetBrains 开发的，基于浏览器的专用商业软件，融合了错误跟踪器、问题跟踪系统以及项目管理软件。它的卖点是基于查询的问题搜索，拥有自动完成、分批处理问题、自定义问题属性集，以及创建自定义工作流的特性。</p>
<p>Zendesk<br>Zendesk 可以轻松地从所有渠道跟踪每一个客户问题。目前 Uber 和 Airbnb 等许多公司都在使用 Zendesk Support 作为他们的问题跟踪软件。</p>
<ol start="3">
<li>源代码控制<br>源代码控制主要是为了控制资产，减少沟通障碍，赋能团队。目前业内比较常用的 SCM 工具包括 Git、GitHub、GitLab、Bitbucket 和 Subversion。</li>
</ol>
<p>Git<br>Git 是一个分布式版本控制系统，用来在软件开发过程中跟踪源代码的更改。它是专为协调不同程序员的工作而设计的，也可用于跟踪各种文件集中的更改。它的优势包括速度、数据完整性以及对分布式非线性工作流的支持</p>
<p>GitHub<br>GitHub 提供了 Git 的分布式版本控制和源代码管理功能，自己也有很多特性。</p>
<p>GitLab<br>GitLab 中的版本控制提供了世界一流的源代码管理功能，可帮助你的开发团队共享、协作并尽可能提高生产力。</p>
<p>Bitbucket<br>Bitbucket 是 Atlassian 所有的、基于 Web 的版本控制库托管服务，可用在使用 Mercurial 或 Git 版本控制系统的源代码和开发项目上。</p>
<p>Subversion<br>Apache Subversion 是一个软件版本和修订控制系统，其根据 Apache 许可开源。软件开发人员可使用 Subversion 来维护源代码、网页和文档等文件的当前和历史版本。</p>
<ol start="4">
<li>构建工具<br>构建阶段主要是为了保持打包的一致性，自动执行容易出错的活动，生成早期质量信号。目前业内比较常用的构建工具包括 Maven/Gradle、MSBuild、Rake、JFrog Artifactory、Sonatype Nexus 和 NuGet。</li>
</ol>
<p>Maven/Gradle<br>Maven 是主要用于 Java 项目的自动化构建工具。Maven 还可以构建和管理以 C#、Ruby、Scala 等语言编写的项目。<br>Gradle 是一个开源的自动化构建系统，其基于 Apache Ant 和 Apache Maven 的理念，并引入了基于 Groovy 的领域特定语言，替代 Apache Maven 使用的 XML 格式来声明项目配置。</p>
<p>MSBuild<br>Microsoft Build Engine（通常称为 MSBuild）是用来托管代码及原生 C++ 代码的免费开源构建工具集，它之前是.NET Framework 的一部分。Visual Studio 依赖 MSBuild（反之则不然）。</p>
<p>Rake<br>Rake 是一个软件任务管理和自动化构建工具。它允许用户指定任务并描述依赖关系。你也可以对命名空间中的组任务执行这些操作。</p>
<p>JFrog Artifactory<br>JFrog Artifactory 这款工具可用来存储构建过程的二进制输出，以备分发和部署之用。Artifactory 支持许多软件包格式，如 Maven、Debian、npm、Helm、Ruby、Python 和 Docker。<br>JFrog 提供了高可用性、复制、灾难恢复和可伸缩特性，并兼容许多本地和云存储产品。</p>
<p>Sonatype Nexus<br>Sonatype Nexus 是一款存储库管理器。你可以用它代理、收集和管理依赖项，这样就用不着和一大堆 JAR 打交道了。它简化了软件分发的工作。<br>你可以配置自己的内部构建，然后发布到 Nexus 上供其他开发者使用。</p>
<p>NuGet<br>NuGet 是.NET 的软件包管理器。NuGet 客户端工具提供了生成和使用软件包的功能。<br>NuGet Gallery 是为所有包作者和使用者提供的软件包中心存储库。</p>
<ol start="5">
<li>测试工具<br>测试阶段主要是检测内部质量，建立对已部署构件的信心。目前业内常用的测试工具包括 JUnit、xUnit.net、Selenium、Jasmine 和 Cucumber。</li>
</ol>
<p>JUnit<br>JUnit 是用于 Java 编程语言的单元测试框架。JUnit 在测试驱动开发的环境中扮演着重要角色，从 SUnit 起源的一组单元测试框架（统称为 xUnit）之一。</p>
<p>xUnit.net<br>xUnit.net 是由 NUnit 的原作者编写的，用于.NET Framework 的开源单元测试工具。</p>
<p>Selenium<br>Selenium 是用于测试 Web 应用程序的可移植框架。Selenium 提供了一种回放工具，使用户无需学习测试脚本语言就能编写功能测试。</p>
<p>Jasmine<br>Jasmine 是用于 JavaScript 的开源测试框架。它可以在任何支持 JavaScript 的平台上运行，不会入侵应用程序或 IDE，还有着易读的语法。在它身上可以找到 Screw.Unit、JSSpec、JSpec 和 RSpec 等诸多单元测试框架的影子</p>
<p>Cucumber<br>Cucumber 是一种支持行为驱动开发的软件工具。Cucumber BDD 方法的核心是一种称为 Gherkin 的普通语言解析器。它能用客户可以理解的逻辑语言来指定预期的软件行为。</p>
<ol start="6">
<li>持续集成和部署（CI/CD）<br>CI 工具的存在是为了快速反馈和减少缺陷、等待。目前业务比较常用的 CI 工具包括 Jenkins、CircleCI、Travis CI、Concourse、AWS CodePipeline 和 Azure Pipelines。</li>
</ol>
<p>Jenkins<br>Jenkins 是一个免费的开源自动化服务器。Jenkins 可用来自动化软件开发过程中非人类参与的工作，基于 CI 和 CD 的技术理念。这是一个基于服务器的系统，可在 servlet 容器（例如 Apache Tomcat）中运行。</p>
<p>CircleCI<br>CircleCI 是世界上最大的共享 CI/CD 平台，也是代码从构思到交付过程的中央枢纽。<br>作为最常用的 DevOps 工具之一，CircleCI 每天处理超过 100 万个构建，因此收集了大量关于工程团队工作方式以及代码运行方式的数据。Spotify、Coinbase、Stitch Fix 和 BuzzFeed 等公司使用 CircleCI 来提升工程团队的生产力、发布更好的产品并更快地将产品推向市场。</p>
<p>Travis CI<br>TravisCI 是一项托管 CI 服务，用于构建和测试 GitHub 上托管的软件项目。Travis CI 为私有项目提供各种付费计划，并提供了开源的免费方案。TravisPro 提供了在客户自己的硬件上定制化部署专有版本的能力。</p>
<p>Concourse<br>Concourse 是用 Go 编写的自动化系统。人们经常将它用于 CI/CD，其卖点是强大的可伸缩性，可以提供很简单或者很复杂的自动化管道。</p>
<ol start="7">
<li><p>AWS CodePipeline<br>AWS CodePipeline 是一项完全托管的 CD 服务，可帮助你自动化发布管道，以实现快速、可靠的应用程序和基础架构更新流程。<br>每当你更改代码时，CodePipeline 都会根据你定义的发布模型自动执行发布流程中的构建、测试和部署阶段。这使你能够快速可靠地交付功能和更新。<br>你可以轻松地将 AWS CodePipeline 与第三方服务（例如 GitHub）或你自己的自制插件集成。使用 AWS CodePipeline 时你按需付费即可。它没有前期费用或长期承诺。</p>
</li>
<li><p>Azure Pipelines<br>可用它获取适用于 Linux、macOS 和 Windows 的云托管管道。生成 Web、桌面和移动应用程序。部署到云端或本地。<br>使用 Pipelines 自动化构建和部署流程可以节约很多时间，从而腾出更多资源投入创造活动。<br>而 CD 工具主要是为了将复杂的管道自动化，统一团队目标。目前业内比较常用的 CD 工具包括 Spinnaker、Octopus Deploy 和 AWS CodeDeploy。</p>
</li>
</ol>
<p>Spinnaker<br>Spinnaker 是一个免费的开源 CD 软件平台，最初由 Netflix 开发，不久被谷歌看中并发展起来。<br>Spinnaker 是一个多云 CD 平台，能够以高速度和强信心来发布软件更改。它提供了强大而灵活的管道管理系统，并支持与主流云提供商的集成。</p>
<p>Octopus Deploy<br>Octopus Deploy 是全球领先的 CD 团队使用的自动部署和发布管理工具。<br>Octopus 是一个工具集，可以显著简化任何 DevOps 流程，以通过云或虚拟机连续测试和部署大量微服务或应用程序。</p>
<p>AWS CodeDeploy<br>AWS CodeDeploy 是一项完全托管的部署服务，可自动将软件部署到各种计算服务上，例如 Amazon EC2、AWS Fargate、AWS Lambda 和你的本地服务器等。<br>你可以使用 AWS CodeDeploy 自动执行软件部署，无需容易出错的手动操作。</p>
<ol start="7">
<li>配置管理工具<br>配置管理工具的作用是将基础架构代码化，加强一致性。目前业内常用的配置管理工具包括 Terraform、BOSH、Chef、Ansible、Puppet、Google Cloud Deployment Manager。</li>
</ol>
<p>Terraform<br>Terraform 是由 HashiCorp 创建的开源基础架构即代码（IaC）软件工具。它让用户能够使用 Hashicorp 配置语言或 JSON（可选）这两种高级配置语言来定义和配置数据中心基础架构。</p>
<p>BOSH<br>BOSH 是一个将小型和大规模云软件的发布工程、部署和生命周期管理统一在一起的项目。BOSH 可以在数百个 VM 上配置和部署软件。它还能以接近零的停机时间执行监视、故障恢复和软件更新任务。<br>虽然 BOSH 是为了部署 Cloud Foundry 而开发的，但它也可以用来部署几乎所有软件（例如 Hadoop）。BOSH 特别适合大型分布式系统。<br>此外，BOSH 支持多个基础架构即服务（IaaS）提供商，例如 VMware vSphere、Google Cloud Platform、Amazon WebServices EC2、Microsoft Azure、OpenStack 和阿里云。它带有一个云提供商界面（CPI），使用户可以扩展 BOSH 以支持其他 IaaS 提供商，如 Apache CloudStack 和 VirtualBox 等。</p>
<p>Chef<br>Chef 是一种配置管理工具，用来处理物理服务器、虚拟机和云中的机器设置。许多公司使用 Chef 软件来控制和管理自己的基础架构，他们包括 Facebook、Etsy、Cheezburger 和 Indiegogo 等。<br>Chef 是持续自动化软件领域的领导者、应用程序自动化领域的创新者，也是 DevOps 运动的创始人之一。Chef 与全球 1000 多家最具创新力的公司合作，以实现他们数字化转型的愿景，并提供可快速交付软件的实践和平台。</p>
<p>Ansible<br>Ansible 是一种开源的软件预备、配置管理和应用程序部署工具。它可以在许多类 Unix 系统上运行，既可以配置类 Unix 系统也可以配置微软 Windows。它自带声明式语言来描述系统配置。</p>
<p>Puppet<br>Puppet 提供的能力可以定义系统所需的软件和配置，然后在初始设置后保持指定状态。<br>用户使用与 Ruby 类似的声明式领域特定语言（DSL）来定义指定环境或基础架构的配置参数。Puppet 使用称为 Facter 的一个实用程序获取系统信息，该程序跟随 Puppet 软件包一并安装。<br>Puppet master 是一个系统，使用清单来管理它所控制的所有节点的重要配置信息。<br>Master 控制的节点都安装了 Puppet 并运行 Puppet 代理（即守护程序）。代理收集的节点配置信息将发送到 Puppet master。然后，Puppet master 根据节点的配置策略来编制一个目录。每个节点都使用这些信息来将任何必要的配置更新应用到自己身上。<br>Puppet 使用的是 pull 模式，在该模式下，代理定期轮询 master，以检索特定于站点和节点的配置。在这种基础架构中，受管理的节点通常以后台服务的形式运行 Puppet 代理应用程序。</p>
<p>Google Cloud Deployment Manager<br>Google Cloud Deployment Manager 是一项基础架构管理服务，可轻松创建、部署和管理 Google Cloud Platform 资源。</p>
<ol start="8">
<li>云平台<br>云平台主要是为了自动化、观察软件的运行时，目前业内常用的云平台包括 Amazon Web Services、Microsoft Azure、Google Cloud Platform、Pivotal Cloud Foundry、Heroku 和 Container Schedulers。</li>
</ol>
<p>Amazon Web Services<br>Amazon Web Services（AWS）是一个安全的云服务平台，提供计算能力、数据库存储、内容交付等功能，以帮助业务扩展和成长。<br>简单来说，AWS 允许你进行以下操作：<br>在云中运行 Web 和应用程序服务器以托管动态网站<br>将所有文件安全地存储在云中，可以从任何地方访问它们<br>使用托管数据库（如 MySQL、PostgreSQL、Oracle 或 SQLServer）存储信息<br>使用内容交付网络（CDN）在世界范围内快速交付静态和动态文件<br>向你的众多客户发送大量电子邮件</p>
<p>Microsoft Azure<br>Microsoft Azure 是由微软创建的一种云计算服务，可通过微软管理的数据中心构建、测试、部署和管理应用程序和服务。<br>Microsoft Azure（以前称为 Windows Azure）是微软的公共云计算平台。它提供了多种云服务，包括计算、分析、存储和网络等用途。用户可以在这些服务中挑选自己所需的选项，以在公有云中开发和扩展新的应用程序，或运行现有应用程序。</p>
<p>Google Cloud Platform<br>由谷歌提供的 Google Cloud Platform 是一套云计算服务，运行在谷歌内部为其最终用户产品（例如 Google Search、Gmail 和 YouTube）打造的同一套基础架构上。<br>Google Cloud Platform 提供了计算资源，用于在 Web 上部署和运营应用程序。它的专长是为个人和企业提供构建和运行软件的场所，并使用 Web 来连接软件用户。<br>谷歌的云计算服务可帮助你直面各种业务挑战，包括数据管理、混合和多云以及 AI 和 ML 等。</p>
<p>Pivotal Cloud Foundry<br>Pivotal Cloud Foundry（PCF）是一个开源、多云的应用程序平台即服务（PaaS），由 501 组织 Cloud Foundry Foundation 管理。该软件最初由 VMware 开发，但之后转移到了 Pivotal Software。随着 VMware 于 2019 年底收购 Pivotal，它也重新回到了 VMware。<br>PCF 是用于部署、管理和持续交付应用程序、容器和函数的多云平台。PCF 允许开发人员快速部署和交付软件，而无需管理底层基础架构。</p>
<p>Pivotal Cloud Foundry<br>Pivotal Cloud Foundry（PCF）是一个开源、多云的应用程序平台即服务（PaaS），由 501 组织 Cloud Foundry Foundation 管理。该软件最初由 VMware 开发，但之后转移到了 Pivotal Software。随着 VMware 于 2019 年底收购 Pivotal，它也重新回到了 VMware。<br>PCF 是用于部署、管理和持续交付应用程序、容器和函数的多云平台。PCF 允许开发人员快速部署和交付软件，而无需管理底层基础架构。</p>
<ol start="9">
<li>容器调度程序<br>容器调度程序的主要任务是在最合适的主机上启动容器，并将它们连接起来。它必须具备自动故障转移能力，并且在数据太多，单个实例无法处理 / 计算时扩展容器。<br>三种最受欢迎的容器调度程序分别是 Docker Swarm、Apache Mesos 和 Kubernetes。</li>
</ol>
<p>Docker Swarm<br>DockerSwarm 是 Docker 开发的容器调度程序。由 Docker 开发的这个集群解决方案提供了很多优势，比如说它使用了标准的 Docker API。Swarm 的架构由两大元素组成：</p>
<p>Apache Mesos 和 Mesosphere Marathon<br>Mesos 的目的是建立一个可扩展且高效的系统，以支持当前和将来的各种框架。这也是主要问题所在：Hadoop 和 MPI 之类的框架都是独立开发的，因此无法在各个框架之间进行细粒度的共享。<br>Mesos 的对策是添加一个资源共享薄层，为框架提供访问集群资源的公共接口。Mesos 正在将对调度的控制权委派给框架，因为许多框架已经实现了复杂的调度机制。<br>根据要在集群上运行的作业类型可以将框架分为四类，其中一些具有 Marathon 之类的原生 Docker 支持。Mesos 0.20.0 中添加了对 Docker 容器的支持。<br>我们将重点介绍 Mesos 与 Marathon 的搭配用法，因为后者是 Mesosphere 积极维护的框架，在调度方面提供了许多功能，如约束、运行状况检查、服务发现和负载平衡等。</p>
<p>如图所见，集群中有四个元素。ZooKeeper 帮助 Marathon 查找 Mesos master 的地址，可以使用多个实例来处理故障。<br>Marathon 负责启动、监视并扩展容器。Mesos master 将分配给节点的任务发送给 Marathon，并在节点具有一些可用的 CPU/RAM 时向 Marathon 提出要约。Mesos slaves 负责运行容器并提交自身可用资源的列表。</p>
<p>Kubernetes<br>Kubernetes 是用于 Docker 容器的编排系统，使用标签和 pods 的概念将容器分为许多逻辑单元。Pod 是 Kubernetes 与其他两种解决方案之间的主要区别所在——它们是位于同一地点的容器的集合，共同组成部署和调度服务。与基于基于相似性的容器协同调度机制（如 Swarm 和 Mesos）相比，这种方法简化了集群的管理。<br>Kubernetes 调度程序的任务是监视 PodSpec 为空的 Pod。NodeName 赋予一个值，以将容器调度在集群中的某个位置。<br>这是与 Swarm 和 Mesos 不一样的地方，因为 Kubernetes 允许开发人员在运行 Pod 时通过定义 PodSpec.NodeName 来绕过调度程序。<br>调度程序使用谓词和优先级来定义容器应运行的节点。这些参数的默认值可以使用新的调度程序策略配置覆盖。<br>如果使用命令行标志 policy-config-file 指向描述启动 Kubernetes 时要使用的谓词和优先级的 JSON 文件，调度程序就会使用管理员定义的策略。</p>
<ol start="10">
<li>监控和记录工具<br>监控和记录工具主要是为了在发生故障时快速响应，快速恢复，同时减少事故期间的人员参与。目前业内比较常用的监控和记录工具包括 ELK Stack、Datadog、New Relic、Prometheus、Zipkin 和 Azure Monitor。</li>
</ol>
<p>ELK Stack<br>ELK Stack 是三个开源产品的集合——它们分别是 Elasticsearch、Logstash 和 Kibana。它们都是由 Elastic 公司开发、管理和维护的。<br>E 代表 ElasticSearch，用于存储日志<br>L 代表 Logstash，用于传输、处理和存储日志<br>K 代表 Kibana，是一种可视化工具（Web 界面）</p>
<p>Datadog<br>Datadog 是针对云规模应用程序的监视服务，可通过基于 SaaS 的数据分析平台来监视服务器、数据库、工具和服务。<br>Datadog Application Performance Monitoring（APM 或跟踪）可与你的日志和基础架构监视器并用，提供自动生成的仪表板（用于监视关键指标，如请求量和延迟）乃至单个请求的跟踪细节，帮助你深入了解应用程序的性能表现。<br>应用程序收到请求时，Datadog 可以在整个分布式系统上查看跟踪，并向你显示关于该请求状况的详细系统数据。</p>
<p>New Relic<br>New Relic 是一家位于加州旧金山的技术公司，致力于开发基于云的软件，以帮助网站和应用程序所有者跟踪服务性能。<br>New Relic 开发的用于应用程序性能监视（APM）的软件分析产品，可提供有关 Web 应用程序性能以及最终用户体验满意度的实时和趋势数据。</p>
<p>Prometheus<br>Prometheus 是用于事件监视和警报的免费软件应用程序。它将实时指标记录在一个时间序列数据库中，该数据库使用 HTTP 拉取模型构建，支持灵活查询和实时警报。<br>Prometheus 服务器的工作方式是抓取，也就是调用监视器上配置的各个节点的指标端点。它定期收集这些指标并将其存储在本地。节点在 Prometheus 服务器抓取的端点上公开这些指标。</p>
<p>Zipkin<br>Zipkin 是一个分布式跟踪系统。它能收集用来解决服务架构中延迟问题所需的时序数据。其功能包括收集和查找这类数据。<br>如果日志文件中有跟踪 ID，则你可以直接跳至该跟踪 ID。否则，你可以基于属性来查询，可用属性包括服务、操作名称、tagsm 和持续时间等。系统会为你总结一些有趣的数据，例如在一个服务中花费的时间百分比，以及操作是否失败等。</p>
<p>Azure Monitor<br>Azure Monitor 提供了一个全面的解决方案，从你的云和本地环境中收集、分析数据和执行遥测任务，从而最大程度地提高应用程序和服务的可用性和性能。<br>它可以帮助你了解应用程序的性能，并主动识别影响它们的问题以及它们所依赖的资源。<br>你可以使用 Azure Monitor 做很多事情，例如：<br>使用 Application Insights 检测和诊断跨应用程序和依赖项的问题<br>将基础架构问题与分别适用于 VM/ 容器的 AzureMonitor 相关联<br>使用 Log Analytics 深度分析监视数据，以进行故障排除和深度诊断<br>通过智能警报和自动化操作支持大规模运营<br>使用 Azure 仪表板和工作簿创建可视化内容</p>
<ol start="11">
<li>通讯工具<br>通讯工具主要是用于多团队沟通，减少等待时间，改善协作能力。目前业内比较常用的通讯工具包括 Slack、Microsoft Teams、Google Hangouts 和 Zoom。</li>
</ol>
<p>Slack<br>Slack 是 Slack Technologies 开发的专用即时消息平台。<br>Slack 本质上是整个公司的聊天室，旨在取代电子邮件作为你交流和共享信息的主要方法。它的工作空间使你可以按频道来组织小组讨论，并支持私信功能，可以一站式共享信息和文件等。</p>
<p>Microsoft Teams<br>Microsoft Teams 是一个统一的通信和协作平台，提供了可靠的工作聊天、视频会议、文件存储和应用程序集成特性。<br>Teams 是基于聊天的协作工具，可为跨越全球、远程和分散的团队提供在一个公共空间共同工作和共享信息的能力。它有一些很酷的功能，如文档协作、一对一聊天和团队聊天等等。</p>
<p>Google Hangouts<br>Google Hangouts 是谷歌开发的一种通讯软件产品。Hangouts 最初是 Google+ 的功能，后来在 2013 年成为独立产品，当时谷歌也开始将 Google+ Messenger 和 Google Talk 的功能集成到 Hangouts 中。<br>Hangouts Chat 是一种与组织中的成员交流的有效方法。你可以向一位或多位同事发送消息，创建空间来与多人开始持续会话，并使用机器助手来帮助你自动化操作。Chat 可在你的计算机浏览器以及适用于 Android 和 iOS 的移动应用中使用。</p>
<p>Zoom<br>Zoom Video Communications 是一家远程会议服务公司，总部位于加州圣何塞。它提供了将视频会议、在线会议、聊天和移动协作结合在一起的远程会议服务。<br>对于寻求整体业务解决方案的团队来说，Skype 是更好的选择。Zoom 非常适合经常进行视频聊天和会议的团队。但是，这两种工具都不是专门为远程工作而构建的。</p>
<ol start="12">
<li>知识共享工具<br>知识共享工具主要是为了提高新员工的生产力，减少重复错误。目前比较常用的知识共享工具包括 GitHub Pages、Confluence、Jekyll 和 Google Sites。</li>
</ol>
<p>GitHub Pages<br>GitHub Pages 是一种静态站点托管服务，可直接从 GitHub 上的存储库中获取 HTML、CSS 和 JavaScript 文件，还可以在构建过程中运行这些文件并发布网站。你可以在 GitHub Pages 示例集合中查看 GitHub Pages 网站的示例。</p>
<p>Confluence<br>Confluence 是 Atlassian 开发和发行的协作软件程序。Atlassian 用 Java 编程语言编写了 Confluence，并于 2004 年首次发布。<br>Confluence 是一个协作 Wiki 工具，用于帮助团队有效地协作和共享知识。借助 Confluence，你可以在 Team Calendars 附加组件的帮助下捕获项目需求、向特定用户分配任务，还能一次管理多个日历。</p>
<p>Jekyll<br>Jekyll 是一个简单的，博客型的静态网站生成器，可用于个人、项目或组织的网站生成。它是由 GitHub 的联合创始人 Tom Preston-Werner 用 Ruby 编写的，根据开源 MIT 许可发行。<br>Jekyll 是一个解析引擎，打包为一个 Ruby gem，用来从动态组件（例如模板、部件、液态代码、markdown 等）构建静态网站。Jekyll 被称为“简单、博客型的静态站点生成器”。</p>
<p>Google Sites<br>Google Sites 是谷歌提供的结构化 Wiki 和网页创建工具。Google Sites 宣称的目标是让任何人都能够创建让不同编辑者协作的简单网站。<br>你们可以一起用它为团队、项目或活动创建引人入胜的高质量站点。这些网站在各种设备的屏幕上看起来都很漂亮——所有这些工作都无需学习设计或编程知识。</p>
<ol start="13">
<li>小结<br>本文介绍整个 DevOps 工具链——包括规划工具、问题跟踪工具、源代码管理、构建和测试代码、持续集成和部署源代码、管理配置、使用云平台、监控和记录等工具，后面还有沟通和知识共享这些软工具的介绍。<br>DevOps 是一种令人兴奋的工作方式。这不是唯一可行的方法，甚至可能不是最好的方法，将来可能会出现更好的选择。但就目前而言，这是一种团队集体合作，且是通过可持</li>
</ol>
<h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><p><a href="https://medium.com/better-programming/the-devops-toolchain-a56713179700" target="_blank" rel="noopener">https://medium.com/better-programming/the-devops-toolchain-a56713179700</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>网站文档mkdocs</title>
    <url>/2020/05/03/%E7%BD%91%E7%AB%99%E6%96%87%E6%A1%A3mkdocs/</url>
    <content><![CDATA[<h2 id="Mkdocs"><a href="#Mkdocs" class="headerlink" title="Mkdocs"></a>Mkdocs</h2><p><a href="https://www.mkdocs.org/#mkdocs" target="_blank" rel="noopener">mkdocs.org</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>安装python2.7（安装时选中加入环境变量）</li>
<li>pip install mkdocs &amp; mkdocs –version</li>
<li>pip install click-man</li>
<li>mkdocs new my-project &amp; cd my-project</li>
<li>mkdocs serve</li>
<li>mkdocs build</li>
<li>mkdocs build –clean (清理已被删除的文档所生成的html文件)</li>
</ol>
<p>mkdocs-material主题配置<br><a href="https://squidfunk.github.io/mkdocs-material/getting-started/" target="_blank" rel="noopener">点击看效果 mkdocs-material</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. pip install mkdocs-material</span><br><span class="line">2. vim mkdocs.yml</span><br></pre></td></tr></table></figure>

<p>mkdocs.yml 配置示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site_name: 文档中心</span><br><span class="line">theme:</span><br><span class="line">  name: &#39;material&#39;</span><br><span class="line">  palette:</span><br><span class="line">    primary: &#39;teal&#39;</span><br><span class="line">    accent: &#39;teal&#39;</span><br><span class="line">  font:</span><br><span class="line">    text: &#39;Roboto&#39;</span><br><span class="line">    code: &#39;Roboto Mono&#39;</span><br></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdocs new [dir-name] - Create a new project.</span><br><span class="line">mkdocs serve - Start the live-reloading docs server.</span><br><span class="line">mkdocs build - Build the documentation site.</span><br><span class="line">mkdocs help - Print this help message.</span><br></pre></td></tr></table></figure>

<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdocs.yml    # The configuration file.</span><br><span class="line">docs&#x2F;</span><br><span class="line">    index.md  # The documentation homepage.</span><br><span class="line">    ...       # Other markdown pages, images and other files.</span><br></pre></td></tr></table></figure>

<h2 id="另外几种文档记录方式"><a href="#另外几种文档记录方式" class="headerlink" title="另外几种文档记录方式"></a>另外几种文档记录方式</h2><ul>
<li>gitbook</li>
<li>wiki</li>
<li>docusaurus</li>
<li>MM-wiki</li>
</ul>
]]></content>
      <categories>
        <category>docs</category>
      </categories>
      <tags>
        <tag>docs</tag>
      </tags>
  </entry>
  <entry>
    <title>简易HTTPS 加密证书的工具</title>
    <url>/2020/05/03/%E7%AE%80%E6%98%93HTTPS-%E5%8A%A0%E5%AF%86%E8%AF%81%E4%B9%A6%E7%9A%84%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p><a href="https://github.com/FiloSottile/mkcert" target="_blank" rel="noopener">mkcert</a> 是生成本地 HTTPS 加密证书的工具，一个命令就可以生成证书，不需要任何配置。</p>
<p>在 Linux 上，安装 certutil</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt install libnss3-tools</span><br><span class="line">$ sudo yum install nss-tools</span><br></pre></td></tr></table></figure>

<p>使用示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkcert -install</span><br><span class="line">Created a new local CA at &quot;&#x2F;Users&#x2F;filippo&#x2F;Library&#x2F;Application Support&#x2F;mkcert&quot; 💥</span><br><span class="line">The local CA is now installed in the system trust store! ⚡️</span><br><span class="line">The local CA is now installed in the Firefox trust store (requires restart)! 🦊</span><br><span class="line"></span><br><span class="line">$ mkcert example.com &#39;*.example.org&#39; myapp.dev localhost 127.0.0.1 ::1</span><br><span class="line">Using the local CA at &quot;&#x2F;Users&#x2F;filippo&#x2F;Library&#x2F;Application Support&#x2F;mkcert&quot; ✨</span><br><span class="line"></span><br><span class="line">Created a new certificate valid for the following names 📜</span><br><span class="line"> - &quot;example.com&quot;</span><br><span class="line"> - &quot;*.example.org&quot;</span><br><span class="line"> - &quot;myapp.dev&quot;</span><br><span class="line"> - &quot;localhost&quot;</span><br><span class="line"> - &quot;127.0.0.1&quot;</span><br><span class="line"> - &quot;::1&quot;</span><br><span class="line"></span><br><span class="line">The certificate is at &quot;.&#x2F;example.com+5.pem&quot; and the key at &quot;.&#x2F;example.com+5-key.pem&quot; ✅</span><br></pre></td></tr></table></figure>

<p><a href="https://keer.me/Using-mkcert-to-generate-local-HTTPS-certificates.html" target="_blank" rel="noopener">使用方法参考</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo内置标签</title>
    <url>/2020/04/23/Hexo%E5%86%85%E7%BD%AE%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="Hexo内置标签"><a href="#Hexo内置标签" class="headerlink" title="Hexo内置标签"></a>Hexo内置标签</h2><blockquote>
<p>「标签」(Tag Plugin) 是 Hexo 提供的一种快速生成特定内容的方式。 例如，在标准 Markdown 语法中，我们无法指定图片的大小。这种情景，我们即可使用标签来解决。 Hexo 内置来许多标签来帮助写作者可以更快的书写， <a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="noopener">完整的标签列表</a> 可以参考 Hexo 官网。 另外，Hexo 也开放来接口给主题，使主题有可能提供给写作者更简便的写作方法。 以下标签便是 NexT 主题当前提供的标签。</p>
</blockquote>
<h3 id="文本居中的引用"><a href="#文本居中的引用" class="headerlink" title="文本居中的引用"></a>文本居中的引用</h3><hr>
<p>此标签将生成一个带上下分割线的引用，同时引用内文本将自动居中。 文本居中时，多行文本若长度不等，视觉上会显得不对称，因此建议在引用单行文本的场景下使用。 例如作为文章开篇引用 或者 结束语之前的总结引用。</p>
<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ul>
<li>HTML方式：使用这种方式时，给 img 添加属性 class=”blockquote-center” 即可。</li>
<li>标签方式：使用 centerquote 或者 简写 cq<blockquote>
<p>此标签要求 NexT 的版本在 0.4.5 或以上。 若你正在使用的版本比较低，可以选择使用 HTML 方式。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span><br><span class="line">&lt;!-- 其中 class&#x3D;&quot;blockquote-center&quot; 是必须的 --&gt;</span><br><span class="line">&lt;blockquote class&#x3D;&quot;blockquote-center&quot;&gt;blah blah blah&lt;&#x2F;blockquote&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span><br><span class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签别名 --&gt;</span><br><span class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>云存储平台Seafile</title>
    <url>/2020/05/03/%E4%BA%91%E5%AD%98%E5%82%A8%E5%B9%B3%E5%8F%B0Seafile/</url>
    <content><![CDATA[<h2 id="云存储平台seafile"><a href="#云存储平台seafile" class="headerlink" title="云存储平台seafile"></a>云存储平台seafile</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;haiwen&#x2F;seafile</span><br></pre></td></tr></table></figure>

<p>Seafile 的目标是给企业提供一个安全的云存储平台，满足企业文件的共享和协作的需求。</p>
<p>Seafile 采用开源的方式来进行产品开发。开源帮助 Seafile 成为了一个国际化的项目，并吸引了全球用户的参与和贡献。目前我们已经在 Github 开源代码托管平台上有了 3900 多个关注。全球用户的使用、反馈和审核使得 Seafile 更加的安全和稳定。</p>
<p>截至 2016 年初，Seafile 已经有超过 30 万用户使用，并拥有卡巴斯基，德国 Mainz 大学，德国 HU Berlin 大学和法国 Strasbourg 大学等大型组织机构客户。</p>
<p><a href="https://www.seafile.com/home/" target="_blank" rel="noopener">https://www.seafile.com/home/</a></p>
<h2 id="nextcloud"><a href="#nextcloud" class="headerlink" title="nextcloud"></a>nextcloud</h2><blockquote>
<p>另一个开放云盘服务</p>
</blockquote>
]]></content>
      <categories>
        <category>Seafile</category>
      </categories>
      <tags>
        <tag>Seafile</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 聚合</title>
    <url>/2020/04/23/Django-%E8%81%9A%E5%90%88/</url>
    <content><![CDATA[<h1 id="Django-聚合"><a href="#Django-聚合" class="headerlink" title="Django 聚合"></a>Django 聚合</h1><hr>

<ol>
<li>在查询集上生成聚合(aggregate)<br>aggregate()是QuerySet 的一个终止子句，意思是说，它返回一个包含一些键值对的字典。键的名称是聚合值的标识符，值是计算出来的聚合值。键的名称是按照字段和聚合函数的名称自动生成出来的。如果你想要为聚合值指定一个名称，可以向聚合子句提供它。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Book.objects.aggregate(average_price&#x3D;Avg(&#39;price&#39;))</span><br><span class="line">&#123;&#39;average_price&#39;: 34.35&#125;</span><br></pre></td></tr></table></figure></li>
<li>为查询集的每一项生成聚合(annotate)<br>逐个对象的汇总结果可以由annotate()子句生成。当annotate()子句被指定之后，QuerySet中的每个对象都会被注上特定的值。<br>这些注解的语法都和aggregate()子句所使用的相同。annotate()的每个参数都描述了将要被计算的聚合。比如，给图书添加作者数量的注解：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Build an annotated queryset</span><br><span class="line">&gt;&gt;&gt; from django.db.models import Count</span><br><span class="line">&gt;&gt;&gt; q &#x3D; Book.objects.annotate(Count(&#39;authors&#39;))</span><br><span class="line"># Interrogate the first object in the queryset</span><br><span class="line">&gt;&gt;&gt; q[0]</span><br><span class="line">&lt;Book: The Definitive Guide to Django&gt;</span><br><span class="line">&gt;&gt;&gt; q[0].authors__count</span><br><span class="line">2</span><br><span class="line"># Interrogate the second object in the queryset</span><br><span class="line">&gt;&gt;&gt; q[1]</span><br><span class="line">&lt;Book: Practical Django Projects&gt;</span><br><span class="line">&gt;&gt;&gt; q[1].authors__count</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
和使用 aggregate()一样，注解的名称也根据聚合函数的名称和聚合字段的名称得到的。你可以在指定注解时，为默认名称提供一个别名：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; q &#x3D; Book.objects.annotate(num_authors&#x3D;Count(&#39;authors&#39;))</span><br><span class="line">&gt;&gt;&gt; q[0].num_authors</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; q[1].num_authors</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>与 aggregate() 不同的是， annotate() 不是一个终止子句。annotate()子句的返回结果是一个查询集 (QuerySet)；这个 QuerySet可以用任何QuerySet方法进行修改，包括 filter(), order_by(), 甚至是再次应用annotate()。</p>
<p><a href="http://python.usyiyi.cn/documents/django_182/topics/db/aggregation.html" target="_blank" rel="noopener">Django 聚合</a></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Nexus仓库迁移</title>
    <url>/2020/04/23/Nexus%E4%BB%93%E5%BA%93%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<h2 id="Nexus仓库迁移"><a href="#Nexus仓库迁移" class="headerlink" title="Nexus仓库迁移"></a>Nexus仓库迁移</h2><blockquote>
<p>下文主要介绍Nexus仓库迁移过程中遇到的一些问题和总结</p>
</blockquote>
<p>需求描述: 需要将源主机的Nexus服务以及相关数据信息,迁移至目标主机,数据迁移完成测试验证后,切换域名,完成迁移.</p>
<h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><table>
<thead>
<tr>
<th align="center">源主机</th>
<th align="center">目标主机</th>
<th align="center">域名</th>
<th align="center">Nexus版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">10.80.42.138</td>
<td align="center">10.14.46.12</td>
<td align="center">repo.wecash.asia</td>
<td align="center">3.8.0</td>
</tr>
</tbody></table>
<h3 id="迁移步骤"><a href="#迁移步骤" class="headerlink" title="迁移步骤"></a>迁移步骤</h3><ol>
<li>在主机B生成一对私钥,同时将公钥添加到主机A上,配置免密登录;</li>
<li>在主机B安装Maven环境;</li>
<li>Rsync增量方式同步数据</li>
<li>数据同步完成后,启动Nexus服务,本地写host绑定域名方式,进行验证;</li>
<li>验证通过后,切换域名,完全迁移;<br>⚠️: 强烈建议迁移时候,两台主机的Nexus数据及服务目录保持完全一致,仓库版本保持一致;</li>
</ol>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol>
<li>安装JDK(略)</li>
<li>安装Maven<br><a href="https://maven.apache.org/index.html" target="_blank" rel="noopener">Maven – Welcome to Apache Maven</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;src</span><br><span class="line"># wget https:&#x2F;&#x2F;www-us.apache.org&#x2F;dist&#x2F;maven&#x2F;maven-3&#x2F;3.6.0&#x2F;binaries&#x2F;apache-maven-3.6.0-bin.tar.gz</span><br><span class="line"># tar -zxvf apache-maven-3.6.0-bin.tar.gz -C &#x2F;data&#x2F;services&#x2F;</span><br><span class="line"># cd &#x2F;data&#x2F;services&#x2F; &amp;&amp; mv apache-maven-3.6.0 maven-3.6</span><br></pre></td></tr></table></figure>
安装配置参考: <a href="https://maven.apache.org/users/index.html" target="_blank" rel="noopener">Maven – Users Centre</a><br>配置环境变量:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export MAVEN_OPTS&#x3D;&quot;-Xms1g -Xmx1g&quot;</span><br><span class="line">export MAVEN_HOME&#x3D;&quot;&#x2F;data&#x2F;services&#x2F;maven-3.6&quot;</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$MAVEN_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure></li>
<li>Nexus安装</li>
</ol>
<ul>
<li>下载<br><a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="noopener">Download Repository OSS</a></li>
<li>Nexus启动脚本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;nexus.service</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;nexus service</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">LimitNOFILE&#x3D;65536</span><br><span class="line">ExecStart&#x3D;&#x2F;data&#x2F;services&#x2F;nexus-8081&#x2F;bin&#x2F;nexus start</span><br><span class="line">ExecStop&#x3D;&#x2F;data&#x2F;services&#x2F;nexus-8081&#x2F;bin&#x2F;nexus stop</span><br><span class="line">User&#x3D;nexus</span><br><span class="line">Restart&#x3D;on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure></li>
<li>Nginx代理Nexus仓库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;repo.wecash.asia-80.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen   80;</span><br><span class="line">    server_name  repo.wecash.asia;</span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    access_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;repo.wecash.asia.access.log main;</span><br><span class="line">    error_log &#x2F;data&#x2F;logs&#x2F;nginx&#x2F;repo.wecash.asia.error.log warn;</span><br><span class="line"></span><br><span class="line">    # allow large uploads of files</span><br><span class="line">    client_max_body_size 1G;</span><br><span class="line"></span><br><span class="line">    # optimize downloading files larger than 1G</span><br><span class="line">    #proxy_max_temp_file_size 2G;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8081;</span><br><span class="line">      proxy_set_header Host $host;</span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="迁移数据"><a href="#迁移数据" class="headerlink" title="迁移数据"></a>迁移数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># nohup rsync -vuazrtpP --progress --delete --exclude&#x3D;&quot;blobs&#x2F;docker-registry-sea&quot;  -e &#39;ssh&#39; root@10.80.42.138:&#x2F;data&#x2F;nexus3data&#x2F;nexus3&#x2F; &#x2F;data&#x2F;nexus3data&#x2F;nexus3&#x2F; &gt; &#x2F;tmp&#x2F;rsync.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3>在同步完成Blob数据后,启动Nexus服务,在使用仓库构建包的时候存在包的Meta-data信息更新或获取失败问题,导致return的code为500问题,client返回的错误信息如下所示:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy (default-deploy) on project indonesia-customer-center-biz-api: Failed to retrieve remote metadata net.wecash:indonesia-customer-center-biz-api:1.0-SNAPSHOT&#x2F;maven-metadata.xml: Could not transfer metadata net.wecash:indonesia-customer-center-biz-api:1.0-SNAPSHOT&#x2F;maven-metadata.xml from&#x2F;to nexus-snapshots (http:&#x2F;&#x2F;repo.wecash.asia&#x2F;repository&#x2F;maven-snapshots&#x2F;): Failed to transfer file: http:&#x2F;&#x2F;repo.wecash.asia&#x2F;repository&#x2F;maven-snapshots&#x2F;net&#x2F;wecash&#x2F;indonesia-customer-center-biz-api&#x2F;1.0-SNAPSHOT&#x2F;maven-metadata.xml. Return code is: 500 , ReasonPhrase:javax.servlet.ServletException: org.sonatype.nexus.repository.storage.RetryDeniedException: Reached max retries: 8&#x2F;8. -&gt; [Help 1]</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>迁移后源主机与目标主机路径不一致<br>同步Blob数据至迁移后的主机B,通过修改Nexus配置文件中的karaf.data参数指定数据目录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd &#x2F;data&#x2F;services&#x2F;nexus-3.8&#x2F;bin</span><br><span class="line"># cat nexus.vmoptions</span><br><span class="line">-Xms2G</span><br><span class="line">-Xmx2G</span><br><span class="line">-XX:MaxDirectMemorySize&#x3D;2G</span><br><span class="line">-XX:+UnlockDiagnosticVMOptions</span><br><span class="line">-XX:+UnsyncloadClass</span><br><span class="line">-XX:+LogVMOutput</span><br><span class="line">-XX:LogFile&#x3D;&#x2F;data&#x2F;nexus&#x2F;logs&#x2F;nexus.log</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line">-Djava.net.preferIPv4Stack&#x3D;true</span><br><span class="line">-Dkaraf.home&#x3D;.</span><br><span class="line">-Dkaraf.base&#x3D;.</span><br><span class="line">-Dkaraf.etc&#x3D;etc&#x2F;karaf</span><br><span class="line">-Djava.util.logging.config.file&#x3D;etc&#x2F;karaf&#x2F;java.util.logging.properties</span><br><span class="line">-Dkaraf.data&#x3D;&#x2F;data&#x2F;nexus&#x2F;nexus-data</span><br><span class="line">-Djava.io.tmpdir&#x3D;&#x2F;data&#x2F;nexus&#x2F;tmp</span><br><span class="line">-Dkaraf.startLocalConsole&#x3D;false</span><br></pre></td></tr></table></figure></li>
<li>尝试解决方法一<br>此时,server段会存在一些异常log,如果log中出现soft-deleted关键字,需要将对应Blob下vol下的*.properties文件中的delete=true标示删除,如果需要Deploy的包比较多,此时,手动操作就会比较繁琐且容易出错,思考,尝试从全局来修复该问题,初步使用Compact的Task来进行修复<a href="https://help.sonatype.com/repomanager3/configuration/repository-management#RepositoryManagement-BlobStores" target="_blank" rel="noopener">Repository Management</a>,并没有什么意义,问题依然存在…</li>
<li>尝试解决方法二<br>通过OrientDB Console尝试修改repository_blobstore表中对应的Blob的path信息,修改为绝对路径,默认表中存储的信息为karaf.data路径的相对路径,此方法依然无效…<br><a href="https://support.sonatype.com/hc/en-us/articles/235816228-Relocating-Blob-Stores" target="_blank" rel="noopener">Relocating Blob Stores – Sonatype Support</a></li>
<li>终极解决方法<blockquote>
<p>全量同步$data-dir or ${karaf.data}下的所有文件至新机器以及nexus源码安装文件至新机器,强烈建议文件存放的目录结构保持一致,增量完全同步完成之后,修改环境变量和权限,启动服务,进行验证;</p>
</blockquote>
</li>
<li>官方迁移指导<br><a href="https://support.sonatype.com/hc/en-us/articles/360010352014-Moving-a-Nexus-Repo-3-Installation-to-a-New-Location" target="_blank" rel="noopener">Moving a Nexus Repo 3 Installation to a New Location – Sonatype Support</a></li>
</ol>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ol>
<li>一般在迁移完成后需要创建Task任务,重建repo的Index和MetaData信息</li>
<li>Nexus仓库的元数据和配置信息存储在OrientDB(文件类型数据库)中</li>
<li>Nexus仓库的索引信息存储在内置的elasticsearch中</li>
<li>如果在Nexus日志中查看到有关elasticsearch的Index错误信息,删除${karaf.data}参数对应目录下的elasticsearch目录,重新同步数据即可</li>
</ol>
<h3 id="Maven配置文件"><a href="#Maven配置文件" class="headerlink" title="Maven配置文件"></a>Maven配置文件</h3><p><a href="http://matt33.com/2015/10/14/the-setting-of-repertory-maven/" target="_blank" rel="noopener">Nexus仓库Maven配置文件settings.xml参数介绍</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat settings.xml</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;settings xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;settings-1.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;pluginGroups&#x2F;&gt;</span><br><span class="line">  &lt;proxies&#x2F;&gt;</span><br><span class="line">  &lt;servers&gt;</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">      &lt;id&gt;wecash-nexus&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;username&gt;wecash-asia&lt;&#x2F;username&gt;</span><br><span class="line">      &lt;password&gt;Be2MFTpf6TPmcXw7BpEarGZt&lt;&#x2F;password&gt;</span><br><span class="line">    &lt;&#x2F;server&gt;</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">      &lt;id&gt;nexus-releases&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;username&gt;wecash-asia&lt;&#x2F;username&gt;</span><br><span class="line">      &lt;password&gt;Be2MFTpf6TPmcXw7BpEarGZt&lt;&#x2F;password&gt;</span><br><span class="line">    &lt;&#x2F;server&gt;</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">      &lt;id&gt;nexus-snapshots&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;username&gt;wecash-asia&lt;&#x2F;username&gt;</span><br><span class="line">      &lt;password&gt;Be2MFTpf6TPmcXw7BpEarGZt&lt;&#x2F;password&gt;</span><br><span class="line">    &lt;&#x2F;server&gt;</span><br><span class="line">  &lt;&#x2F;servers&gt;</span><br><span class="line">  &lt;mirrors&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;wecash-nexus&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;nexus repository&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;repo.wecash.asia&#x2F;repository&#x2F;maven-public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">  &lt;&#x2F;mirrors&gt;</span><br><span class="line">  &lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">      &lt;id&gt;nexus&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">          &lt;id&gt;wecash-nexus&lt;&#x2F;id&gt;</span><br><span class="line">          &lt;url&gt;http:&#x2F;&#x2F;repo.wecash.asia&#x2F;repository&#x2F;maven-public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">          &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;releases&gt;</span><br><span class="line">          &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">      &lt;&#x2F;repositories&gt;</span><br><span class="line">      &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">          &lt;id&gt;wecash-nexus&lt;&#x2F;id&gt;</span><br><span class="line">          &lt;url&gt;http:&#x2F;&#x2F;repo.wecash.asia&#x2F;repository&#x2F;maven-public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">          &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;releases&gt;</span><br><span class="line">          &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">          &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;pluginRepository&gt;</span><br><span class="line">      &lt;&#x2F;pluginRepositories&gt;</span><br><span class="line">    &lt;&#x2F;profile&gt;</span><br><span class="line">  &lt;&#x2F;profiles&gt;</span><br><span class="line">  &lt;activeProfiles&gt;</span><br><span class="line">    &lt;activeProfile&gt;nexus&lt;&#x2F;activeProfile&gt;</span><br><span class="line">  &lt;&#x2F;activeProfiles&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure>
<p>Maven基本命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 构建</span><br><span class="line">mvn clean package -Denv&#x3D;test-jkt -U -DskipTests&#x3D;True</span><br><span class="line"># 推送包</span><br><span class="line">mvn deploy -Denv&#x3D;test-jkt -U -DskipTests&#x3D;True</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Nexus</category>
      </categories>
      <tags>
        <tag>Nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>Python上下文管理器</title>
    <url>/2020/05/03/Python%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<h2 id="有趣的python上下文管理器"><a href="#有趣的python上下文管理器" class="headerlink" title="有趣的python上下文管理器"></a>有趣的<code>python</code>上下文管理器</h2><p><a href="https://mp.weixin.qq.com/s/h0YYmehLuO8QF5Ry7b7fiQ" target="_blank" rel="noopener">原文链接</a><br><a href="https://mp.weixin.qq.com/s/rPFL7KXwD8Bof60lewqTMA" target="_blank" rel="noopener">文章</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>运维知识体系</title>
    <url>/2020/04/20/%E8%BF%90%E7%BB%B4%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<p><img src="/2020/04/20/%E8%BF%90%E7%BB%B4%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/%E8%BF%90%E7%BB%B4%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BBV1.0.png" alt="运维知识体系"></p>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>SRE</tag>
      </tags>
  </entry>
  <entry>
    <title>Python concurrent.futures 线程池进程池模块</title>
    <url>/2020/04/23/Python-concurrent-futures-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%BF%9B%E7%A8%8B%E6%B1%A0%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="Python-concurrent-futures-线程池进程池模块"><a href="#Python-concurrent-futures-线程池进程池模块" class="headerlink" title="Python concurrent.futures 线程池进程池模块"></a>Python concurrent.futures 线程池进程池模块</h2><blockquote>
<p>在python3.2版本及以上使用concurrent.futures进行线程池和进程池的使用，实现数据高并发。</p>
</blockquote>
<blockquote class="blockquote-center"><p>如果一个人心里藏了那么多的喜怒哀乐，一定曾经活得伤痕累累。 </p>
</blockquote>
<p>在Python3.2开始就有concurrent_futures，其可以实现线程池，进程池，不必再自己使用管道传数据造成死锁的问题。并且这个模块具有线程池和进程池、管理并行编程任务、处理非确定性的执行流程、进程/线程同步等功能，但是平时用的最多的还是用来构建线程池和进程池。</p>
<p>此模块由以下部分组成：</p>
<ol>
<li>concurrent.futures.Executor: 这是一个虚拟基类，提供了异步执行的方法。</li>
<li>submit(function, argument): 调度函数（可调用的对象）的执行，将 argument 作为参数传入。</li>
<li>map(function, argument): 将 argument 作为参数执行函数，以 异步 的方式。</li>
<li>shutdown(Wait=True): 发出让执行者释放所有资源的信号。</li>
<li>concurrent.futures.Future: 其中包括函数的异步执行。Future对象是submit任务（即带有参数的functions）到executor的实例</li>
</ol>
<h3 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h3><p><a href="http://www.langzi.fun/Python%20threading%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9D%97.html" target="_blank" rel="noopener">线程与线程池</a><br><a href="http://www.langzi.fun/Python%20multiprocess%20%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9D%97.html" target="_blank" rel="noopener">进程与进程池</a><br><a href="http://www.langzi.fun/Python%E5%8D%8F%E7%A8%8B.html" target="_blank" rel="noopener">异步协程</a></p>
<h3 id="线程池案例"><a href="#线程池案例" class="headerlink" title="线程池案例"></a>线程池案例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">from concurrent.futures import ProcessPoolExecutor,ThreadPoolExecutor</span><br><span class="line"># 导入线程池和进程池模块</span><br><span class="line">import threading</span><br><span class="line"># 导入线程模块，作用是获取当前线程的名称</span><br><span class="line">import os,time</span><br><span class="line"></span><br><span class="line">def task(n):</span><br><span class="line">    print(&#39;%s:%s is running&#39; %(threading.currentThread().getName(),os.getpid()))</span><br><span class="line">    # 打印当前线程名和运行的id号码</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    return n**2</span><br><span class="line">    # 返回传入参数的二次幂</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    p&#x3D;ThreadPoolExecutor()</span><br><span class="line">    #实例化线程池，设置线程池的数量，不填则默认为cpu的个数*5</span><br><span class="line">    l&#x3D;[]</span><br><span class="line">    # 用来保存返回的数据，做计算总计</span><br><span class="line">    for i in range(10):</span><br><span class="line">        obj&#x3D;p.submit(task,i)</span><br><span class="line">        # 传入的参数是要执行的函数和该函数接受的参数</span><br><span class="line">        # -----------------------------------</span><br><span class="line">        # 这里执行的方式是异步执行</span><br><span class="line">        # # p.submit(task,i).result()即同步执行</span><br><span class="line">        # -----------------------------------</span><br><span class="line">        # 上面的方法使用range循环有个高级的写法，即map内置函数</span><br><span class="line">        # obj&#x3D;p.map(task,range(10))</span><br><span class="line">        # p.shutdown()</span><br><span class="line">        # -----------------------------------</span><br><span class="line">        l.append(obj)</span><br><span class="line">        # 把返回的结果保存在空的列表中，做总计算</span><br><span class="line">    p.shutdown()</span><br><span class="line">    # 所有计划运行完毕，关闭结束线程池</span><br><span class="line"></span><br><span class="line">    print(&#39;&#x3D;&#39;*30)</span><br><span class="line">    print([obj.result() for obj in l])</span><br><span class="line"></span><br><span class="line">#上面方法也可写成下面的方法</span><br><span class="line">    # with ThreadPoolExecutor() as p:   #类似打开文件,可省去.shutdown()</span><br><span class="line">    #     future_tasks &#x3D; [p.submit(task, i) for i in range(10)]</span><br><span class="line">    # print(&#39;&#x3D;&#39; * 30)</span><br><span class="line">    # print([obj.result() for obj in future_tasks])</span><br></pre></td></tr></table></figure>

<h3 id="进程池案例"><a href="#进程池案例" class="headerlink" title="进程池案例"></a>进程池案例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from concurrent.futures import ProcessPoolExecutor</span><br><span class="line">import os,time,random</span><br><span class="line">def task(n):</span><br><span class="line">    print(&#39;%s is running&#39; %os.getpid())</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    return n**2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    p&#x3D;ProcessPoolExecutor()  #不填则默认为cpu的个数</span><br><span class="line">    l&#x3D;[]</span><br><span class="line">    start&#x3D;time.time()</span><br><span class="line">    for i in range(10):</span><br><span class="line">        obj&#x3D;p.submit(task,i)   #submit()方法返回的是一个future实例，要得到结果需要用obj.result()</span><br><span class="line">        l.append(obj)</span><br><span class="line"></span><br><span class="line">    p.shutdown()  #类似用from multiprocessing import Pool实现进程池中的close及join一起的作用</span><br><span class="line">    print(&#39;&#x3D;&#39;*30)</span><br><span class="line">    # print([obj for obj in l])</span><br><span class="line">    print([obj.result() for obj in l])</span><br><span class="line">    print(time.time()-start)</span><br><span class="line"></span><br><span class="line">    #上面方法也可写成下面的方法</span><br><span class="line">    # start &#x3D; time.time()</span><br><span class="line">    # with ProcessPoolExecutor() as p:   #类似打开文件,可省去.shutdown()</span><br><span class="line">    #     future_tasks &#x3D; [p.submit(task, i) for i in range(10)]</span><br><span class="line">    # print(&#39;&#x3D;&#39; * 30)</span><br><span class="line">    # print([obj.result() for obj in future_tasks])</span><br><span class="line">    # print(time.time() - start)</span><br></pre></td></tr></table></figure>

<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="https://www.cnblogs.com/huchong/p/7458414.html" target="_blank" rel="noopener">进程池、线程池、回调函数 - 听风。 - 博客园</a><br><a href="https://www.cnblogs.com/huchong/p/7459324.html" target="_blank" rel="noopener">使用concurrent.futures模块并发，实现进程池、线程池 - 听风。 - 博客园</a><br><a href="http://www.langzi.fun/Python-concurrent-futures-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%BF%9B%E7%A8%8B%E6%B1%A0%E6%A8%A1%E5%9D%97.html" target="_blank" rel="noopener">Python concurrent.futures 线程池进程池模块 | Langzi - Never Setter 永不将就</a><br><a href="http://www.langzi.fun/Python-concurrent-futures-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%BF%9B%E7%A8%8B%E6%B1%A0%E6%A8%A1%E5%9D%97.html" target="_blank" rel="noopener">Python concurrent.futures 线程池进程池模块 | Langzi - Never Setter 永不将就</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python f-strings 3.6 版本新增加的字符串格式化功能</title>
    <url>/2020/04/23/Python-f-strings-3-6-%E7%89%88%E6%9C%AC%E6%96%B0%E5%A2%9E%E5%8A%A0%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h2 id="Python-f-strings-3-6-版本新增加的字符串格式化功能"><a href="#Python-f-strings-3-6-版本新增加的字符串格式化功能" class="headerlink" title="Python f-strings 3.6 版本新增加的字符串格式化功能"></a>Python f-strings 3.6 版本新增加的字符串格式化功能</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Python 3.6 新版本增加的新功能 formatted string literals ，简称 f-strings,f-string，亦称为格式化字符串常量（formatted string literals），是Python3.6新引入的一种字符串格式化方法，该方法源于PEP 498 – Literal String Interpolation，主要目的是使格式化字符串的操作更加简便。f-string在形式上是以 f 或 F 修饰符引领的字符串（f’xxx’ 或 F’xxx’），以大括号 {} 标明被替换的字段；f-string在本质上并不是字符串常量，而是一个在运行时运算求值的表达式:</p>
<blockquote>
<p>While other string literals always have a constant value, formatted strings are really expressions evaluated at run time.<br>（与具有恒定值的其它字符串常量不同，格式化字符串实际上是运行时运算求值的表达式。）<br>—— Python Documentation</p>
</blockquote>
</blockquote>
<hr>
<p>f-string在功能方面不逊于传统的%-formatting语句和str.format()函数，同时性能又优于二者，且使用起来也更加简洁明了，因此对于Python3.6及以后的版本，推荐使用f-string进行字符串格式化。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="这是一个让人兴奋的格式化字符串的方式，为什么这么说，先来看看效果"><a href="#这是一个让人兴奋的格式化字符串的方式，为什么这么说，先来看看效果" class="headerlink" title="这是一个让人兴奋的格式化字符串的方式，为什么这么说，先来看看效果"></a>这是一个让人兴奋的格式化字符串的方式，为什么这么说，先来看看效果</h3><ol>
<li>f-string用大括号 {} 表示被替换字段,其中直接填入替换内容：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; name &#x3D; &#39;wxnacy&#39;</span><br><span class="line">&gt;&gt;&gt; f&#39;my name is &#123;name&#125;&#39;</span><br><span class="line">&#39;my name is wxnacy&#39;</span><br><span class="line">&gt;&gt;&gt; f&#39;my name is &#123;name&#125; and length is &#123;len(name)&#125;&#39;</span><br><span class="line">&#39;my name is wxnacy and length is 6&#39;</span><br><span class="line">&gt;&gt;&gt; F&#39;my name is &#123;name&#125; and length is &#123;len(name)&#125;&#39;</span><br><span class="line">&#39;my name is wxnacy and length is 6&#39;</span><br></pre></td></tr></table></figure></li>
<li>之所以叫f-strings ，就是要用 f 作为字符串的开头，就像 b’’, u’’ 那样，然后用 {} 中使用变量，甚至可以使用函数方法，就可以完成格式化，如果你也接触 Node 开发，就知道现在在 Javascript 中字符串的格式化通常是这样的<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; name &#x3D; &#39;wxnacy&#39;</span><br><span class="line">&#39;wxnacy&#39;</span><br><span class="line">&gt; &#96;my name is $&#123;name&#125; and length is $&#123;name.length&#125;&#96;</span><br><span class="line">&#39;my name is wxnacy and length is 6</span><br></pre></td></tr></table></figure>
<h3 id="表达式求值与函数调用"><a href="#表达式求值与函数调用" class="headerlink" title="表达式求值与函数调用"></a>表达式求值与函数调用</h3></li>
<li>f-string的大括号 {} 可以填入表达式或调用函数，Python会求出其结果并填入返回的字符串内：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f&#39;A total number of &#123;24 * 8 + 4&#125;&#39;</span><br><span class="line">&#39;A total number of 196&#39;</span><br><span class="line">&gt;&gt;&gt; name &#x3D; &#39;ERIC&#39;</span><br><span class="line">&gt;&gt;&gt; f&#39;My name is &#123;name.lower()&#125;&#39;</span><br><span class="line">&#39;My name is eric&#39;</span><br><span class="line">&gt;&gt;&gt; import math</span><br><span class="line">&gt;&gt;&gt; f&#39;The answer is &#123;math.log(math.pi)&#125;&#39;</span><br><span class="line">&#39;The answer is 1.1447298858494002&#39;</span><br></pre></td></tr></table></figure>
<h3 id="引号、大括号与反斜杠"><a href="#引号、大括号与反斜杠" class="headerlink" title="引号、大括号与反斜杠"></a>引号、大括号与反斜杠</h3>f-string大括号内所用的引号不能和大括号外的引号定界符冲突，可根据情况灵活切换 ‘ 和 “ ：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f&#39;I am &#123;&quot;Eric&quot;&#125;&#39;</span><br><span class="line">&#39;I am Eric&#39;</span><br><span class="line">&gt;&gt;&gt; f&#39;I am &#123;&#39;Eric&#39;&#125;&#39;</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1</span><br><span class="line">    f&#39;I am &#123;&#39;Eric&#39;&#125;&#39;</span><br><span class="line">                ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>
若 ‘ 和 “ 不足以满足要求，还可以使用 ‘’’ 和 “””:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f&quot;He said &#123;&quot;I&#39;m Eric&quot;&#125;&quot;</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1</span><br><span class="line">    f&quot;He said &#123;&quot;I&#39;m Eric&quot;&#125;&quot;</span><br><span class="line">                ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line">&gt;&gt;&gt; f&#39;He said &#123;&quot;I&#39;m Eric&quot;&#125;&#39;</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1</span><br><span class="line">    f&#39;He said &#123;&quot;I&#39;m Eric&quot;&#125;&#39;</span><br><span class="line">                  ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line">&gt;&gt;&gt; f&quot;&quot;&quot;He said &#123;&quot;I&#39;m Eric&quot;&#125;&quot;&quot;&quot;</span><br><span class="line">&quot;He said I&#39;m Eric&quot;</span><br><span class="line">&gt;&gt;&gt; f&#39;&#39;&#39;He said &#123;&quot;I&#39;m Eric&quot;&#125;&#39;&#39;&#39;</span><br><span class="line">&quot;He said I&#39;m Eric&quot;</span><br></pre></td></tr></table></figure>
<h3 id="大括号外的引号还可以使用-转义，但大括号内不能使用-转义："><a href="#大括号外的引号还可以使用-转义，但大括号内不能使用-转义：" class="headerlink" title="大括号外的引号还可以使用 \ 转义，但大括号内不能使用 \ 转义："></a>大括号外的引号还可以使用 \ 转义，但大括号内不能使用 \ 转义：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f&#39;&#39;&#39;He\&#39;ll say &#123;&quot;I&#39;m Eric&quot;&#125;&#39;&#39;&#39;</span><br><span class="line">&quot;He&#39;ll say I&#39;m Eric&quot;</span><br><span class="line">&gt;&gt;&gt; f&#39;&#39;&#39;He&#39;ll say &#123;&quot;I\&#39;m Eric&quot;&#125;&#39;&#39;&#39;</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1</span><br><span class="line">SyntaxError: f-string expression part cannot include a backslash</span><br></pre></td></tr></table></figure>
<h3 id="f-string大括号外如果需要显示大括号，则应输入连续两个大括号-："><a href="#f-string大括号外如果需要显示大括号，则应输入连续两个大括号-：" class="headerlink" title="f-string大括号外如果需要显示大括号，则应输入连续两个大括号 ："></a>f-string大括号外如果需要显示大括号，则应输入连续两个大括号 ：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f&#39;5 &#123;&quot;&#123;stars&#125;&quot;&#125;&#39;</span><br><span class="line">&#39;5 &#123;stars&#125;&#39;</span><br><span class="line">&gt;&gt;&gt; f&#39;&#123;&#123;5&#125;&#125; &#123;&quot;stars&quot;&#125;&#39;</span><br><span class="line">&#39;&#123;5&#125; stars&#39;</span><br></pre></td></tr></table></figure>
<h3 id="上面提到，f-string大括号内不能使用-转义，事实上不仅如此，f-string大括号内根本就不允许出现-。如果确实需要-，则应首先将包含-的内容用一个变量表示，再在f-string大括号内填入变量名："><a href="#上面提到，f-string大括号内不能使用-转义，事实上不仅如此，f-string大括号内根本就不允许出现-。如果确实需要-，则应首先将包含-的内容用一个变量表示，再在f-string大括号内填入变量名：" class="headerlink" title="上面提到，f-string大括号内不能使用 \ 转义，事实上不仅如此，f-string大括号内根本就不允许出现 \。如果确实需要 \，则应首先将包含 \ 的内容用一个变量表示，再在f-string大括号内填入变量名："></a>上面提到，f-string大括号内不能使用 \ 转义，事实上不仅如此，f-string大括号内根本就不允许出现 \。如果确实需要 \，则应首先将包含 \ 的内容用一个变量表示，再在f-string大括号内填入变量名：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f&quot;newline: &#123;ord(&#39;\n&#39;)&#125;&quot;</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1</span><br><span class="line">SyntaxError: f-string expression part cannot include a backslash</span><br><span class="line">&gt;&gt;&gt; newline &#x3D; ord(&#39;\n&#39;)</span><br><span class="line">&gt;&gt;&gt; f&#39;newline: &#123;newline&#125;&#39;</span><br><span class="line">&#39;newline: 10&#39;</span><br></pre></td></tr></table></figure>
<h3 id="多行f-string"><a href="#多行f-string" class="headerlink" title="多行f-string"></a>多行f-string</h3>f-string还可用于多行字符串：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; name &#x3D; &#39;Eric&#39;</span><br><span class="line">&gt;&gt;&gt; age &#x3D; 27</span><br><span class="line">&gt;&gt;&gt; f&quot;Hello!&quot; \</span><br><span class="line">... f&quot;I&#39;m &#123;name&#125;.&quot; \</span><br><span class="line">... f&quot;I&#39;m &#123;age&#125;.&quot;</span><br><span class="line">&quot;Hello!I&#39;m Eric.I&#39;m 27.&quot;</span><br></pre></td></tr></table></figure>
<h3 id="与原始字符串联合使用"><a href="#与原始字符串联合使用" class="headerlink" title="与原始字符串联合使用"></a>与原始字符串联合使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; fr&#39;hello\nworld&#39;</span><br><span class="line">&#39;hello\\nworld&#39;</span><br></pre></td></tr></table></figure>
<h3 id="支持表达式-对象"><a href="#支持表达式-对象" class="headerlink" title="支持表达式(对象)"></a>支持表达式(对象)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; spurs &#x3D; &#123;&quot;Guard&quot;: &quot;Parker&quot;, &quot;Forward&quot;: &quot;Duncan&quot;&#125;</span><br><span class="line">&gt;&gt;&gt; f&quot;The &#123;len(spurs)&#125; players are: &#123;spurs[&#39;Guard&#39;]&#125; the guard, and &#123;spurs[&#39;Forward&#39;]&#125; the forward.&quot;</span><br><span class="line">&#39;The 2 players are: Parker the guard, and Duncan the forward.&#39;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; f&#39;Numbers from 1-10 are &#123;[_ for _ in range(1, 11)]&#125;&#39;</span><br><span class="line">&#39;Numbers from 1-10 are [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&#39;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="自定义格式：对齐、宽度、符号、补零、精度、进制等"><a href="#自定义格式：对齐、宽度、符号、补零、精度、进制等" class="headerlink" title="自定义格式：对齐、宽度、符号、补零、精度、进制等"></a>自定义格式：对齐、宽度、符号、补零、精度、进制等</h3><blockquote>
<p>f-string采用 {content:format} 设置字符串格式，其中 content 是替换并填入字符串的内容，可以是变量、表达式或函数等，format 是格式描述符。采用默认格式时不必指定 {:format}，如上面例子所示只写 {content} 即可</p>
</blockquote>
<ol>
<li>排版格式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; spurs &#x3D; &#123;&quot;Guard&quot;: &quot;Parker&quot;, &quot;Forward&quot;: &quot;Duncan&quot;&#125;</span><br><span class="line">&gt;&gt;&gt; def show_players():</span><br><span class="line">...     print(f&quot;&#123;&#39;Position&#39;:^10&#125;&#123;&#39;Name&#39;:^10&#125;&quot;)</span><br><span class="line">...     for player in spurs:</span><br><span class="line">...         print(f&quot;&#123;player:^10&#125;&#123;spurs[player]:^10&#125;&quot;)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; show_players()</span><br><span class="line"> Position    Name</span><br><span class="line">  Guard     Parker</span><br><span class="line"> Forward    Duncan</span><br></pre></td></tr></table></figure></li>
<li>示例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 123.456</span><br><span class="line">&gt;&gt;&gt; f&#39;a is &#123;a:8.2f&#125;&#39;</span><br><span class="line">&#39;a is   123.46&#39;</span><br><span class="line">&gt;&gt;&gt; f&#39;a is &#123;a:08.2f&#125;&#39;</span><br><span class="line">&#39;a is 00123.46&#39;</span><br><span class="line">&gt;&gt;&gt; f&#39;a is &#123;a:8.2e&#125;&#39;</span><br><span class="line">&#39;a is 1.23e+02&#39;</span><br><span class="line">&gt;&gt;&gt; f&#39;a is &#123;a:8.2%&#125;&#39;</span><br><span class="line">&#39;a is 12345.60%&#39;</span><br><span class="line">&gt;&gt;&gt; f&#39;a is &#123;a:8.2g&#125;&#39;</span><br><span class="line">&#39;a is  1.2e+02&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; s &#x3D; &#39;hello&#39;</span><br><span class="line">&gt;&gt;&gt; f&#39;s is &#123;s:8s&#125;&#39;</span><br><span class="line">&#39;s is hello   &#39;</span><br><span class="line">&gt;&gt;&gt; f&#39;s is &#123;s:8.3s&#125;&#39;</span><br><span class="line">&#39;s is hel     &#39;</span><br></pre></td></tr></table></figure></li>
<li>综合示例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 1234</span><br><span class="line">&gt;&gt;&gt; f&#39;a is &#123;a:^#10X&#125;&#39;      # 居中，宽度10位，十六进制整数（大写字母），显示0X前缀</span><br><span class="line">&#39;a is   0X4D2   &#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b &#x3D; 1234.5678</span><br><span class="line">&gt;&gt;&gt; f&#39;b is &#123;b:&lt;+10.2f&#125;&#39;    # 左对齐，宽度10位，显示正号（+），定点数格式，2位小数</span><br><span class="line">&#39;b is +1234.57  &#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; c &#x3D; 12345678</span><br><span class="line">&gt;&gt;&gt; f&#39;c is &#123;c:015,d&#125;&#39;      # 高位补零，宽度15位，十进制整数，使用,作为千分分割位</span><br><span class="line">&#39;c is 000,012,345,678&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d &#x3D; 0.5 + 2.5j</span><br><span class="line">&gt;&gt;&gt; f&#39;d is &#123;d:30.3e&#125;&#39;      # 宽度30位，科学计数法，3位小数</span><br><span class="line">&#39;d is           5.000e-01+2.500e+00j&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; import datetime</span><br><span class="line">&gt;&gt;&gt; e &#x3D; datetime.datetime.today()</span><br><span class="line">&gt;&gt;&gt; f&#39;the time is &#123;e:%Y-%m-%d (%a) %H:%M:%S&#125;&#39;   # datetime时间格式</span><br><span class="line">&#39;the time is 2018-07-14 (Sat) 20:46:02&#39;</span><br></pre></td></tr></table></figure>
<h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3>f-string大括号内也可填入lambda表达式，但lambda表达式的 : 会被f-string误认为是表达式与格式描述符之间的分隔符，为避免歧义，需要将lambda表达式置于括号()内:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f&#39;result is &#123;lambda x: x ** 2 + 1 (2)&#125;&#39;</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1</span><br><span class="line">    (lambda x)</span><br><span class="line">             ^</span><br><span class="line">SyntaxError: unexpected EOF while parsing</span><br><span class="line">&gt;&gt;&gt; f&#39;result is &#123;(lambda x: x ** 2 + 1) (2)&#125;&#39;</span><br><span class="line">&#39;result is 5&#39;</span><br><span class="line">&gt;&gt;&gt; f&#39;result is &#123;(lambda x: x ** 2 + 1) (2):&lt;+7.2f&#125;&#39;</span><br><span class="line">&#39;result is +5.00  &#39;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="与-format-对比"><a href="#与-format-对比" class="headerlink" title="与 format() 对比"></a>与 format() 对比</h2><p>f-strings 与 format() 格式化的语法完全一致，只是更加简洁</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import datetime</span><br><span class="line">&gt;&gt;&gt; f&#39;&#123;datetime.datetime.now():%Y-%m-%d %H:%M:%S.%s&#125;&#39;</span><br><span class="line">&#39;2018-12-28 11:06:16.1545966376&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:%Y-%m-%d %H:%M:%S.%s&#125;&#39;.format(datetime.datetime.now())</span><br><span class="line">&#39;2018-12-28 11:06:37.1545966397&#39;</span><br></pre></td></tr></table></figure>

<p><a href="https://wxnacy.com/2018/01/03/python-format/" target="_blank" rel="noopener">Python 格式化函数 format使用</a></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>可以想象如果你的项目版本全面提到 3.6 以后，f-strings 格式化方法一定是首选，因为它不但简洁，并且快，它的速度比format()快了一倍。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/sunxb10/article/details/81036693" target="_blank" rel="noopener">Python格式化字符串f-string概览 - sunxb10的博客 - CSDN博客</a><br><a href="https://mlln.cn/2018/05/19/python3%20f-string%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/#%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90" target="_blank" rel="noopener">python3 f-string格式化字符串的高级用法 - DataScience</a><br><a href="https://wxnacy.com/2018/01/16/python-f-strings/" target="_blank" rel="noopener">Python f-strings 3.6 版本新增加的字符串格式化功能</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 工匠：编写条件分支代码的技巧</title>
    <url>/2020/04/23/Python-%E5%B7%A5%E5%8C%A0%EF%BC%9A%E7%BC%96%E5%86%99%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="Python-工匠：编写条件分支代码的技巧"><a href="#Python-工匠：编写条件分支代码的技巧" class="headerlink" title="Python 工匠：编写条件分支代码的技巧"></a>Python 工匠：编写条件分支代码的技巧</h2><h3 id="『Python-工匠』是什么？"><a href="#『Python-工匠』是什么？" class="headerlink" title="『Python 工匠』是什么？"></a>『Python 工匠』是什么？</h3><p>我一直觉得编程某种意义上是一门『手艺』，因为优雅而高效的代码，就如同完美的手工艺品一样让人赏心悦目。 在雕琢代码的过程中，有大工程：比如应该用什么架构、哪种设计模式。也有更多的小细节，比如何时使用异常（Exceptions）、或怎么给变量起名。那些真正优秀的代码，正是由无数优秀的细节造就的。 『Python 工匠』这个系列文章，是我的一次小小尝试。它专注于分享 Python 编程中的一些偏『小』的东西。希望能够帮到每一位编程路上的匠人。</p>
<h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><p>编写条件分支代码是编码过程中不可或缺的一部分。 如果用道路来做比喻，现实世界中的代码从来都不是一条笔直的高速公路，而更像是由无数个岔路口组成的某个市区地图。我们编码者就像是驾驶员，需要告诉我们的程序，下个路口需要往左还是往右。 编写优秀的条件分支代码非常重要，因为糟糕、复杂的分支处理非常容易让人困惑，从而降低代码质量。所以，这篇文章将会种重点谈谈在 Python 中编写分支代码应该注意的地方。</p>
<h3 id="Python-里的分支代码"><a href="#Python-里的分支代码" class="headerlink" title="Python 里的分支代码"></a>Python 里的分支代码</h3><p>Python 支持最为常见的 if/else 条件分支语句，不过它缺少在其他编程语言中常见的 switch/case 语句。 除此之外，Python 还为 for/while 循环以及 try/except 语句提供了 else 分支，在一些特殊的场景下，它们可以大显身手。 下面我会从 最佳实践、常见技巧、常见陷阱 三个方面讲一下如果编写优秀的条件分支代码。</p>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ol>
<li>避免多层分支嵌套<br>如果这篇文章只能删减成一句话就结束，那么那句话一定是“要竭尽所能的避免分支嵌套”。 过深的分支嵌套是很多编程新手最容易犯的错误之一。假如有一位新手 JavaScript 程序员写了很多层分支嵌套，那么你可能会看到一层又一层的大括号：if { if { if { … }}}。俗称“嵌套 if 地狱（Nested If Statement Hell）”。 但是因为 Python 使用了缩进来代替 {}，所以过深的嵌套分支会产生比其他语言下更为严重的后果。比如过多的缩进层次很容易就会让代码超过 PEP8 中规定的每行字数限制。让我们看看这段代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def buy_fruit(nerd, store):</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;去水果店买苹果</span><br><span class="line"></span><br><span class="line">    - 先得看看店是不是在营业</span><br><span class="line"></span><br><span class="line">    - 如果有苹果的话，就买 1 个</span><br><span class="line"></span><br><span class="line">    - 如果钱不够，就回家取钱再来</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    if store.is_open():</span><br><span class="line">        if store.has_stocks(&quot;apple&quot;):</span><br><span class="line">            if nerd.can_afford(store.price(&quot;apple&quot;, amount&#x3D;1)):</span><br><span class="line">                nerd.buy(store, &quot;apple&quot;, amount&#x3D;1)</span><br><span class="line">                return</span><br><span class="line">            else:</span><br><span class="line">                nerd.go_home_and_get_money()</span><br><span class="line">                return buy_fruit(nerd, store)</span><br><span class="line">        else:</span><br><span class="line">            raise MadAtNoFruit(&quot;no apple in store!&quot;)</span><br><span class="line">    else:</span><br><span class="line">        raise MadAtNoFruit(&quot;store is closed!&quot;)</span><br></pre></td></tr></table></figure>
上面这段代码最大的问题，就是过于直接翻译了原始的条件分支要求，导致短短十几行代码包含了有三层嵌套分支。 这样的代码可读性和维护性都很差。不过我们可以用一个很简单的技巧：”提前结束”来优化这段代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def buy_fruit(nerd, store):</span><br><span class="line"></span><br><span class="line">    if not store.is_open():</span><br><span class="line">        raise MadAtNoFruit(&quot;store is closed!&quot;)</span><br><span class="line">    if not store.has_stocks(&quot;apple&quot;):</span><br><span class="line">        raise MadAtNoFruit(&quot;no apple in store!&quot;)</span><br><span class="line">    if nerd.can_afford(store.price(&quot;apple&quot;, amount&#x3D;1)):</span><br><span class="line">        nerd.buy(store, &quot;apple&quot;, amount&#x3D;1)</span><br><span class="line">        return</span><br><span class="line">    else:</span><br><span class="line">        nerd.go_home_and_get_money()</span><br><span class="line">        return buy_fruit(nerd, store)</span><br></pre></td></tr></table></figure>
“提前结束”指：在函数内使用 return 或 raise 等语句提前在分支内结束函数。比如，在新的 buy_fruit 函数里，当分支条件不满足时，我们直接抛出异常，结束这段这代码分支。这样的代码没有嵌套分支，更直接也更易读。</li>
<li>封装那些过于复杂的逻辑判断<br>如果条件分支里的表达式过于复杂，出现了太多的 not/and/or，那么这段代码的可读性就会大打折扣，比如下面这段代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果活动还在开放，并且活动剩余名额大于 10，为所有性别为女性，或者级别大于 3</span><br><span class="line"></span><br><span class="line"># 的活跃用户发放 10000 个金币</span><br><span class="line"></span><br><span class="line">if activity.is_active and activity.remaining &gt; 10 and \</span><br><span class="line"></span><br><span class="line">        user.is_active and (user.sex &#x3D;&#x3D; &#39;female&#39; or user.level &gt; 3):</span><br><span class="line"></span><br><span class="line">    user.add_coins(10000)</span><br><span class="line"></span><br><span class="line">    return</span><br></pre></td></tr></table></figure>
对于这样的代码，我们可以考虑将具体的分支逻辑封装成函数或者方法，来达到简化代码的目的：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if activity.allow_new_user() and user.match_activity_condition():</span><br><span class="line">    user.add_coins(10000)</span><br><span class="line">    return</span><br></pre></td></tr></table></figure>
事实上，将代码改写后，之前的注释文字其实也可以去掉了。因为后面这段代码已经达到了自说明的目的。至于具体的 什么样的用户满足活动条件？ 这种问题，就应由具体的<code>match_activity_condition()</code>方法来回答了。<blockquote>
<p>Hint: 恰当的封装不光直接改善了代码的可读性，事实上，如果上面的活动判断逻辑在代码中出现了不止一次的话，封装更是必须的。不然重复代码会极大的破坏这段逻辑的可维护性。</p>
</blockquote>
</li>
<li>留意不同分支下的重复代码<br>重复代码是代码质量的天敌，而条件分支语句又非常容易成为重复代码的重灾区。所以，当我们编写条件分支语句时，需要特别留意，不要生产不必要的重复代码。 让我们看下这个例子：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 对于新用户，创建新的用户资料，否则更新旧资料</span><br><span class="line"></span><br><span class="line">if user.no_profile_exists:</span><br><span class="line">    create_user_profile(</span><br><span class="line">        username&#x3D;user.username,</span><br><span class="line">        email&#x3D;user.email,</span><br><span class="line">        age&#x3D;user.age,</span><br><span class="line">        address&#x3D;user.address,</span><br><span class="line">        # 对于新建用户，将用户的积分置为 0</span><br><span class="line">        points&#x3D;0,</span><br><span class="line">        created&#x3D;now(),</span><br><span class="line">    )</span><br><span class="line">else:</span><br><span class="line">    update_user_profile(</span><br><span class="line">        username&#x3D;user.username,</span><br><span class="line">        email&#x3D;user.email,</span><br><span class="line">        age&#x3D;user.age,</span><br><span class="line">        address&#x3D;user.address,</span><br><span class="line">        updated&#x3D;now(),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
在上面的代码中，我们可以一眼看出，在不同的分支下，程序调用了不同的函数，做了不一样的事情。但是，因为那些重复代码的存在，我们却很难简单的区分出，二者的不同点到底在哪。 其实，得益于 Python 的动态特性，我们可以简单的改写一下上面的代码，让可读性可以得到显著的提升：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if user.no_profile_exists:</span><br><span class="line">    profile_func &#x3D; create_user_profile</span><br><span class="line">    extra_args &#x3D; &#123;&#39;points&#39;: 0, &#39;created&#39;: now()&#125;</span><br><span class="line">else:</span><br><span class="line">    profile_func &#x3D; update_user_profile</span><br><span class="line">    extra_args &#x3D; &#123;&#39;updated&#39;: now()&#125;</span><br><span class="line"></span><br><span class="line">profile_func(</span><br><span class="line">    username&#x3D;user.username,</span><br><span class="line">    email&#x3D;user.email,</span><br><span class="line">    age&#x3D;user.age,</span><br><span class="line">    address&#x3D;user.address,</span><br><span class="line">    **extra_args</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
当你编写分支代码时，请额外关注由分支产生的重复代码块，如果可以简单的消灭它们，那就不要迟疑。</li>
<li>谨慎使用三元表达式<br>三元表达式是 Python 2.5 版本后才支持的语法。在那之前，Python 社区一度认为三元表达式没有必要，我们需要使用 x and a or b 的方式来模拟它。[注] 事实是，在很多情况下，使用普通的 if/else 语句的代码可读性确实更好。盲目追求三元表达式很容易诱惑你写出复杂、可读性差的代码。 所以，请记得只用三元表达式处理简单的逻辑分支。<blockquote>
<p>language = “python” if you.favor(“dynamic”) else “golang”<br>对于绝大多数情况，还是使用普通的 if/else 语句吧。</p>
</blockquote>
</li>
</ol>
<h3 id="常见技巧"><a href="#常见技巧" class="headerlink" title="常见技巧"></a>常见技巧</h3><ol>
<li>使用”德摩根定律”<br>在做分支判断时，我们有时候会写成这样的代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果用户没有登录或者用户没有使用 chrome，拒绝提供服务</span><br><span class="line">if not user.has_logged_in or not user.is_from_chrome:</span><br><span class="line">    return &quot;our service is only available for chrome logged in user&quot;</span><br></pre></td></tr></table></figure>
第一眼看到代码时，是不是需要思考一会才能理解它想干嘛？这是因为上面的逻辑表达式里面出现了2个not和1个or。而我们人类恰好不擅长处理过多的“否定”以及“或”这种逻辑关系。 这个时候，就该 德摩根定律 出场了。通俗的说，德摩根定律就是<code>not A or not B</code>等价于<code>not (A and B)</code>通过这样的转换，上面的代码可以改写成这样：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if not (user.has_logged_in and user.is_from_chrome):</span><br><span class="line">    return &quot;our service is only open for chrome logged in user&quot;</span><br></pre></td></tr></table></figure>
怎么样，代码是不是易读了很多？记住德摩根定律，很多时候它对于简化条件分支里的代码逻辑非常有用。</li>
<li>自定义对象的”布尔真假”<br>我们常说，在 Python 里，”万物皆对象”。其实，不光”万物皆对象”，我们还可以利用很多魔法方法（文档中称为：user-defined method），来自定义对象的各种行为。我们可以用很多在别的语言里面无法做到、有些魔法的方式来影响代码的执行。 比如，Python的所有对象都有自己的”布尔真假”：</li>
</ol>
<ul>
<li>布尔值为假的对象：None, 0, False, [], (), {}, set(), frozenset(), … …</li>
<li>布尔值为真的对象：非 0 的数值、True，非空的序列、元组，普通的用户类实例，… …<br>通过内建函数 bool()，你可以很方便的查看某个对象的布尔真假。而 Python 进行条件分支判断时用到的也是这个值：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(object())</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
重点来了，虽然所有用户类实例的布尔值都是真。但是 Python 提供了改变这个行为的办法：自定义类的<code>__bool__</code>魔法方法 （在 Python 2.X 版本中为 <strong>nonzero</strong>）。当类定义了<code>__bool__</code>方法后，它的返回值将会被当作类实例的布尔值。 另外，<code>__bool__</code>不是影响实例布尔真假的唯一方法。如果类没有定义<code>__bool__</code>方法，Python 还会尝试调用<code>__len__</code>方法（也就是对任何序列对象调用 len 函数），通过结果是否为 0 判断实例真假。 那么这个特性有什么用呢？看看下面这段代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class UserCollection(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, users):</span><br><span class="line">        self._users &#x3D; users</span><br><span class="line"></span><br><span class="line">users &#x3D; UserCollection([piglei, raymond])</span><br><span class="line">if len(users._users) &gt; 0:</span><br><span class="line">    print(&quot;There&#39;s some users in collection!&quot;)</span><br></pre></td></tr></table></figure>
上面的代码里，判断<code>UserCollection</code>是否有内容时用到了<code>users._users</code>的长度。其实，通过为 UserCollection 添加<code>__len__</code>魔法方法，上面的分支可以变得更简单：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class UserCollection:</span><br><span class="line"></span><br><span class="line">    def __init__(self, users):</span><br><span class="line">        self._users &#x3D; users</span><br><span class="line"></span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self._users)</span><br><span class="line"></span><br><span class="line">users &#x3D; UserCollection([piglei, raymond])</span><br><span class="line"></span><br><span class="line"># 定义了 __len__ 方法后，UserCollection 对象本身就可以被用于布尔判断了</span><br><span class="line">if users:</span><br><span class="line">    print(&quot;There&#39;s some users in collection!&quot;)</span><br></pre></td></tr></table></figure>
通过定义魔法方法<code>__len__</code>和<code>__bool__</code>，我们可以让类自己控制想要表现出的布尔真假值，让代码变得更pythonic。</li>
</ul>
<ol start="3">
<li>在条件判断中使用 <code>all()/any()</code><br>all() 和 any() 两个函数非常适合在条件判断中使用。这两个函数接受一个可迭代对象，返回一个布尔值，其中：</li>
</ol>
<ul>
<li>all(seq)：仅当 seq 中所有对象都为布尔真时返回 True，否则返回 False</li>
<li>any(seq)：只要 seq 中任何一个对象为布尔真就返回 True，否则返回 False<br>假如我们有下面这段代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def all_numbers_gt_10(numbers):</span><br><span class="line">    &quot;&quot;&quot;仅当序列中所有数字大于 10 时，返回 True</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if not numbers:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    for n in numbers:</span><br><span class="line">        if n &lt;&#x3D; 10:</span><br><span class="line">            return False</span><br><span class="line">    return True</span><br></pre></td></tr></table></figure>
如果使用<code>all()</code>内建函数，再配合一个简单的生成器表达式，上面的代码可以写成这样：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def all_numbers_gt_10_2(numbers):</span><br><span class="line">    return bool(numbers) and all(n &gt; 10 for n in numbers)</span><br></pre></td></tr></table></figure>
简单、高效，同时也没有损失可用性。</li>
</ul>
<ol start="4">
<li>使用 try/while/for 中 else 分支<br>让我们看看这个函数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def do_stuff():</span><br><span class="line">    first_thing_successed &#x3D; False</span><br><span class="line">    try:</span><br><span class="line">        do_the_first_thing()</span><br><span class="line">        first_thing_successed &#x3D; True</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;Error while calling do_some_thing&quot;)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 仅当 first_thing 成功完成时，做第二件事</span><br><span class="line">    if first_thing_successed:</span><br><span class="line">        return do_the_second_thing()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>在函数 do_stuff 中，我们希望只有当<code>do_the_first_thing()</code>成功调用后（也就是不抛出任何异常），才继续做第二个函数调用。为了做到这一点，我们需要定义一个额外的变量<code>first_thing_successed</code>来作为标记。 其实，我们可以用更简单的方法达到同样的效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def do_stuff():</span><br><span class="line">    try:</span><br><span class="line">        do_the_first_thing()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;Error while calling do_some_thing&quot;)</span><br><span class="line">        return</span><br><span class="line">    else:</span><br><span class="line">        return do_the_second_thing()</span><br></pre></td></tr></table></figure>
<p>在 try 语句块最后追加上 else 分支后，分支下的<code>do_the_second_thing()</code>便只会在 try 下面的所有语句正常执行（也就是没有异常，没有 return、break 等）完成后执行。 类似的，Python 里的 for/while 循环也支持添加 else 分支，它们表示：当循环使用的迭代对象被正常耗尽、或 while 循环使用的条件变量变为 False 后才执行 else 分支下的代码。</p>
<h3 id="常见陷阱"><a href="#常见陷阱" class="headerlink" title="常见陷阱"></a>常见陷阱</h3><ol>
<li>与 None 值的比较<br>在 Python 中，有两种比较变量的方法：== 和 is，二者在含义上有着根本的区别：</li>
</ol>
<ul>
<li>==：表示二者所指向的的值是否一致</li>
<li>is：表示二者是否指向内存中的同一份内容，也就是 id(x) 是否等于 id(y)<br>None 在 Python 语言中是一个单例对象，如果你要判断某个变量是否为 None 时，记得使用 is 而不是 ==，因为只有 is 才能在严格意义上表示某个变量是否是 None。 否则，可能出现下面这样的情况：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Foo(object):</span><br><span class="line">...     def __eq__(self, other):</span><br><span class="line">...         return True</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; foo &#x3D; Foo()</span><br><span class="line">&gt;&gt;&gt; foo &#x3D;&#x3D; None</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
在上面代码中，Foo 这个类通过自定义<code>__eq__</code>魔法方法的方式，很容易就满足了<code>== None</code>这个条件。 所以，当你要判断某个变量是否为 None 时，请使用 is 而不是 ==。</li>
</ul>
<ol start="2">
<li>留意 and 和 or 的运算优先级<br>看看下面这两个表达式，猜猜它们的值一样吗？<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; (True or False) and False</span><br><span class="line">&gt;&gt;&gt; True or False and False</span><br></pre></td></tr></table></figure>
答案是：不一样，它们的值分别是 False 和 True，你猜对了吗？ 问题的关键在于：and 运算符的优先级大于 or。因此上面的第二个表达式在 Python 看来实际上是 True or (False and False)。所以结果是 True 而不是 False。 在编写包含多个 and 和 or 的表达式时，请额外注意 and 和 or 的运算优先级。即使执行优先级正好是你需要的那样，你也可以加上额外的括号来让代码更清晰。</li>
</ol>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>以上就是『Python 工匠』系列文章的第二篇。不知道文章的内容是否对你的胃口。 代码内的分支语句不可避免，我们在编写代码时，需要尤其注意它的可读性，避免对其他看到代码的人造成困扰。</p>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>事实上<code>x and a or b</code>不是总能给你正确的结果，只有当 a 与 b 的布尔值为真时，这个表达式才能正常工作，这是由逻辑运算的短路特性决定的。你可以在命令行中运行<code>True and None or 0</code>试试看，结果是0而非 None。</p>
<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="http://python.jobbole.com/89060/" target="_blank" rel="noopener">Python 工匠：编写条件分支代码的技巧</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>LDAP 部署文档</title>
    <url>/2020/04/23/LDAP-%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h2 id="LDAP-基本概念"><a href="#LDAP-基本概念" class="headerlink" title="LDAP 基本概念"></a>LDAP 基本概念</h2><table>
<thead>
<tr>
<th align="left">关键字</th>
<th align="right">英文名称</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">dc</td>
<td align="right">Domain Compnent</td>
<td align="center">域名的部分，其格式是将完整的域名分成几部分，如域名为example.com变成dc=example,dc=com（一条记录的所属位置</td>
</tr>
<tr>
<td align="left">uid</td>
<td align="right">User Id</td>
<td align="center">用户ID <code>shuke.com</code>（一条记录的ID）</td>
</tr>
<tr>
<td align="left">ou</td>
<td align="right">Organization Unit</td>
<td align="center">组织单位，组织单位可以包含其他各种对象(包括其他组织单元)，如”oa组”(一条记录的所属组织)</td>
</tr>
<tr>
<td align="left">cn</td>
<td align="right">Common Name</td>
<td align="center">公共名称，如”Thomas Johansson”(一条记录的名称)</td>
</tr>
<tr>
<td align="left">sn</td>
<td align="right">Surname</td>
<td align="center">姓,如”赵”</td>
</tr>
<tr>
<td align="left">dn</td>
<td align="right">Distinguished Name</td>
<td align="center">“uid=songtao.xu,ou=oa组,dc=example,dc=com”，一条记录的位置(唯一)</td>
</tr>
<tr>
<td align="left">rdn</td>
<td align="right">Relative dn</td>
<td align="center">相对辨别名,类似于文件系统中的相对路径，它是与目录树结构无关的部分，如”uid=tom”或”cn= Thomas Johansson”</td>
</tr>
</tbody></table>
<h2 id="LDAP-部署文档"><a href="#LDAP-部署文档" class="headerlink" title="LDAP 部署文档"></a>LDAP 部署文档</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &#x2F;etc&#x2F;issue</span><br><span class="line">Ubuntu 16.04.6 LTS \n \l</span><br><span class="line"># uname -r</span><br><span class="line">4.4.0-142-generic</span><br><span class="line"># slapd -VV</span><br><span class="line">@(#) $OpenLDAP: slapd  (Ubuntu) (Apr 10 2019 13:01:36) $</span><br><span class="line">	buildd@lgw01-amd64-031:&#x2F;build&#x2F;openldap-QaSHhB&#x2F;openldap-2.4.42+dfsg&#x2F;debian&#x2F;build&#x2F;servers&#x2F;slapd</span><br></pre></td></tr></table></figure>

<h3 id="一-安装"><a href="#一-安装" class="headerlink" title="一. 安装"></a>一. 安装</h3><ol>
<li>安装软件包<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt install slapd ldap-utils -y</span><br><span class="line">在安装过程中,将要求您输入并确认LDAP的管理员密码。</span><br></pre></td></tr></table></figure></li>
<li>初始化配置<blockquote>
<p>OpenLDAP 2.3 and later have transitioned to using a dynamic runtime configuration engine, slapd-config. <a href="https://www.openldap.org/doc/admin24/slapdconf2.html" target="_blank" rel="noopener">Configuring slapd</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># dpkg-reconfigure slapd</span><br><span class="line">1. Omit OpenLDAP server configuration: No</span><br><span class="line">2. DNS domain name as base DN: wecash.net</span><br><span class="line">3. Organization name: wecash Organization</span><br><span class="line">4. Administrator password: wecash@2019</span><br><span class="line">5. Database backend to use: MDB</span><br><span class="line">6. Do you want the database to be removed when slapd is purged: No</span><br><span class="line">7. Move old database: Yes</span><br><span class="line">8. Allow LDAPv2 protocol? No</span><br></pre></td></tr></table></figure></li>
<li>Configuration Layout<br>A sample config tree is shown<br><img src="https://www.openldap.org/doc/admin24/config_dit.png" alt="config_dit.png"></li>
<li>验证是否运行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ps -ef | grep slapd</span><br><span class="line">openldap 11394     1  0 11:54 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;slapd -h ldap:&#x2F;&#x2F;&#x2F; ldapi:&#x2F;&#x2F;&#x2F; -g openldap -u openldap -F &#x2F;etc&#x2F;ldap&#x2F;slapd.d</span><br><span class="line">root     11419  1227  0 11:55 pts&#x2F;0    00:00:00 grep --color&#x3D;auto slapd</span><br><span class="line"># netstat -ntlp | grep 389</span><br><span class="line">tcp        0      0 0.0.0.0:389             0.0.0.0:*               LISTEN      11394&#x2F;slapd</span><br><span class="line">tcp6       0      0 :::389                  :::*                    LISTEN      11394&#x2F;slapd</span><br></pre></td></tr></table></figure>
注: 软件默认安装路径为<code>/etc/ldap</code>,mdb数据库文件存放路径为<code>/var/lib/ldap/</code></li>
<li>测试LDAP的接口<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ldapwhoami -H ldap:&#x2F;&#x2F; -x</span><br><span class="line">anonymous</span><br></pre></td></tr></table></figure>
anonymous是匿名用户的查询结果,因为我们运行ldapwhoami而不登录到LDAP服务器.这意味着服务器正在运行并应答查询.</li>
<li>启动停止<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl stop slapd.service</span><br><span class="line"># systemctl start slapd.service</span><br></pre></td></tr></table></figure>
至此,LDAP的初步基本配置已经完成.官方文档解释在2.3之后的版本使用动态的配置文件的方式,使用ldapadd, ldapdelete or ldapmodify修改更新配置信息以及数据库信息,不建议使用slapd.conf配置文件方式进行管理.</li>
</ol>
<h3 id="二-查看初始化信息"><a href="#二-查看初始化信息" class="headerlink" title="二. 查看初始化信息"></a>二. 查看初始化信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:&#x2F;&#x2F;&#x2F; -b cn&#x3D;config dn</span><br><span class="line">dn: cn&#x3D;config</span><br><span class="line">dn: cn&#x3D;module&#123;0&#125;,cn&#x3D;config</span><br><span class="line">dn: cn&#x3D;schema,cn&#x3D;config</span><br><span class="line">dn: cn&#x3D;&#123;0&#125;core,cn&#x3D;schema,cn&#x3D;config</span><br><span class="line">dn: cn&#x3D;&#123;1&#125;cosine,cn&#x3D;schema,cn&#x3D;config</span><br><span class="line">dn: cn&#x3D;&#123;2&#125;nis,cn&#x3D;schema,cn&#x3D;config</span><br><span class="line">dn: cn&#x3D;&#123;3&#125;inetorgperson,cn&#x3D;schema,cn&#x3D;config</span><br><span class="line">dn: olcBackend&#x3D;&#123;0&#125;mdb,cn&#x3D;config</span><br><span class="line">dn: olcDatabase&#x3D;&#123;-1&#125;frontend,cn&#x3D;config</span><br><span class="line">dn: olcDatabase&#x3D;&#123;0&#125;config,cn&#x3D;config</span><br><span class="line">dn: olcDatabase&#x3D;&#123;1&#125;mdb,cn&#x3D;config</span><br><span class="line"></span><br><span class="line"># ldapsearch -x -LLL -H ldap:&#x2F;&#x2F;&#x2F; -b dc&#x3D;wecash,dc&#x3D;net dn</span><br><span class="line">dn: dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: cn&#x3D;admin,dc&#x3D;wecash,dc&#x3D;net</span><br></pre></td></tr></table></figure>
<h3 id="三-TLS"><a href="#三-TLS" class="headerlink" title="三. TLS"></a>三. TLS</h3><ol>
<li>Install the gnutls-bin and ssl-cert packages<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt install gnutls-bin ssl-cert</span><br></pre></td></tr></table></figure></li>
<li>Create a private key for the Certificate Authority<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sh -c &quot;certtool --generate-privkey &gt; &#x2F;etc&#x2F;ssl&#x2F;private&#x2F;cakey.pem&quot;</span><br></pre></td></tr></table></figure></li>
<li>Create the template/file /etc/ssl/ca.info to define the CA<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cn &#x3D; Wecash Company</span><br><span class="line">ca</span><br><span class="line">cert_signing_key</span><br></pre></td></tr></table></figure></li>
<li>Create the self-signed CA certificate<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># certtool --generate-self-signed --load-privkey &#x2F;etc&#x2F;ssl&#x2F;private&#x2F;cakey.pem --template &#x2F;etc&#x2F;ssl&#x2F;ca.info --outfile &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;cacert.pem</span><br></pre></td></tr></table></figure></li>
<li>Make a private key for the server<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># certtool --generate-privkey --sec-param Medium --outfile &#x2F;etc&#x2F;ssl&#x2F;private&#x2F;tldap.wecash.net-key.pem</span><br></pre></td></tr></table></figure></li>
<li>Create the /etc/ssl/tldap.wecash.net.info info file containing<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">organization &#x3D; Wecash Company</span><br><span class="line">cn &#x3D; tldap.wecash.net</span><br><span class="line">tls_www_server</span><br><span class="line">encryption_key</span><br><span class="line">signing_key</span><br><span class="line">expiration_days &#x3D; 3650</span><br></pre></td></tr></table></figure></li>
<li>Create the server’s certificate<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># certtool --generate-certificate --load-privkey &#x2F;etc&#x2F;ssl&#x2F;private&#x2F;tldap.wecash.net-key.pem --load-ca-certificate &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;cacert.pem --load-ca-privkey &#x2F;etc&#x2F;ssl&#x2F;private&#x2F;cakey.pem --template &#x2F;etc&#x2F;ssl&#x2F;tldap.wecash.net.info --outfile &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;tldap.wecash.net.pem</span><br></pre></td></tr></table></figure></li>
<li>Adjust permissions and ownership<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir &#x2F;etc&#x2F;ldap&#x2F;certs</span><br><span class="line"># cp &#x2F;etc&#x2F;ssl&#x2F;private&#x2F;tldap.wecash.net-key.pem &#x2F;etc&#x2F;ldap&#x2F;certs&#x2F;</span><br><span class="line"># cp &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;cacert.pem &#x2F;etc&#x2F;ldap&#x2F;certs&#x2F;</span><br><span class="line"># cp &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;tldap.wecash.net.pem &#x2F;etc&#x2F;ldap&#x2F;certs&#x2F;</span><br><span class="line"># chown -R openldap.openldap &#x2F;etc&#x2F;ldap&#x2F;certs&#x2F;</span><br><span class="line"># chmod 0640 &#x2F;etc&#x2F;ssl&#x2F;private&#x2F;tldap.wecash.net-key.pem</span><br><span class="line"># gpasswd -a openldap ssl-cert</span><br></pre></td></tr></table></figure></li>
<li>Create the file certinfo.ldif<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat certinfo.ldif</span><br><span class="line"># create new</span><br><span class="line">dn: cn&#x3D;config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcTLSCACertificateFile</span><br><span class="line">olcTLSCACertificateFile: &#x2F;etc&#x2F;ldap&#x2F;certs&#x2F;cacert.pem</span><br><span class="line">-</span><br><span class="line">replace: olcTLSCertificateFile</span><br><span class="line">olcTLSCertificateFile: &#x2F;etc&#x2F;ldap&#x2F;certs&#x2F;tldap.wecash.net.pem</span><br><span class="line">-</span><br><span class="line">replace: olcTLSCertificateKeyFile</span><br><span class="line">olcTLSCertificateKeyFile: &#x2F;etc&#x2F;ldap&#x2F;certs&#x2F;tldap.wecash.net-key.pem</span><br></pre></td></tr></table></figure></li>
<li>Use the ldapmodify command to tell slapd about our TLS work via the slapd-config database<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ldapmodify -Y EXTERNAL -H ldapi:&#x2F;&#x2F;&#x2F; -f certinfo.ldif</span><br><span class="line">SASL&#x2F;EXTERNAL authentication started</span><br><span class="line">SASL username: gidNumber&#x3D;0+uidNumber&#x3D;0,cn&#x3D;peercred,cn&#x3D;external,cn&#x3D;auth</span><br><span class="line">SASL SSF: 0</span><br><span class="line">modifying entry &quot;cn&#x3D;config&quot;</span><br></pre></td></tr></table></figure></li>
<li>Contratry to popular belief, you do need Add <code>ldaps:///</code> in /etc/default/slapd in order to use encryption. You should have just<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;default&#x2F;slapd</span><br><span class="line">SLAPD_SERVICES&#x3D;&quot;ldap:&#x2F;&#x2F;&#x2F; ldapi:&#x2F;&#x2F;&#x2F; ldaps:&#x2F;&#x2F;&#x2F;&quot;</span><br></pre></td></tr></table></figure></li>
<li>修改请求域名<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat slapd.ldif</span><br><span class="line"># log</span><br><span class="line">dn: cn&#x3D;config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcLogLevel</span><br><span class="line">olcLogLevel: stats</span><br><span class="line">-</span><br><span class="line">add: olcIdleTimeout</span><br><span class="line">olcIdleTimeout: 30</span><br><span class="line">-</span><br><span class="line">add: olcReferral</span><br><span class="line">olcReferral: ldaps:&#x2F;&#x2F;tldap.wecash.net</span><br><span class="line">-</span><br><span class="line">add: olcLogFile</span><br><span class="line">olcLogFile: &#x2F;var&#x2F;log&#x2F;sladp.log</span><br><span class="line"></span><br><span class="line"># ldapmodify -Q -Y EXTERNAL -H ldapi:&#x2F;&#x2F;&#x2F; -f slapd.ldif</span><br><span class="line">modifying entry &quot;cn&#x3D;config&quot;</span><br><span class="line"></span><br><span class="line"># ldapsearch -Y external -H ldapi:&#x2F;&#x2F;&#x2F; -b cn&#x3D;config &quot;(objectClass&#x3D;olcGlobal)&quot;  olcReferral</span><br><span class="line">SASL&#x2F;EXTERNAL authentication started</span><br><span class="line">SASL username: gidNumber&#x3D;0+uidNumber&#x3D;0,cn&#x3D;peercred,cn&#x3D;external,cn&#x3D;auth</span><br><span class="line">SASL SSF: 0</span><br><span class="line"># extended LDIF</span><br><span class="line">#</span><br><span class="line"># LDAPv3</span><br><span class="line"># base &lt;cn&#x3D;config&gt; with scope subtree</span><br><span class="line"># filter: (objectClass&#x3D;olcGlobal)</span><br><span class="line"># requesting: olcReferral</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># config</span><br><span class="line">dn: cn&#x3D;config</span><br><span class="line">olcReferral: ldaps:&#x2F;&#x2F;tldap.wecash.net</span><br><span class="line"></span><br><span class="line"># search result</span><br><span class="line">search: 2</span><br><span class="line">result: 0 Success</span><br><span class="line"></span><br><span class="line"># numResponses: 2</span><br><span class="line"># numEntries: 1</span><br></pre></td></tr></table></figure></li>
<li>restart slapd<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl restart slapd.service</span><br><span class="line"># netstat -ntlp | grep slapd</span><br><span class="line">tcp        0      0 0.0.0.0:389             0.0.0.0:*               LISTEN      13728&#x2F;slapd</span><br><span class="line">tcp        0      0 0.0.0.0:636             0.0.0.0:*               LISTEN      13728&#x2F;slapd</span><br><span class="line">tcp6       0      0 :::389                  :::*                    LISTEN      13728&#x2F;slapd</span><br><span class="line">tcp6       0      0 :::636                  :::*                    LISTEN      13728&#x2F;slapd</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="四-验证数据"><a href="#四-验证数据" class="headerlink" title="四. 验证数据"></a>四. 验证数据</h3><ol>
<li>初始化一些数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat add_content.ldif</span><br><span class="line">dn: ou&#x3D;People,dc&#x3D;example,dc&#x3D;com</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line">ou: People</span><br><span class="line"></span><br><span class="line">dn: ou&#x3D;Groups,dc&#x3D;example,dc&#x3D;com</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line">ou: Groups</span><br><span class="line"></span><br><span class="line">dn: cn&#x3D;miners,ou&#x3D;Groups,dc&#x3D;example,dc&#x3D;com</span><br><span class="line">objectClass: posixGroup</span><br><span class="line">cn: miners</span><br><span class="line">gidNumber: 5000</span><br><span class="line"></span><br><span class="line">dn: uid&#x3D;john,ou&#x3D;People,dc&#x3D;example,dc&#x3D;com</span><br><span class="line">objectClass: inetOrgPerson</span><br><span class="line">objectClass: posixAccount</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line">uid: john</span><br><span class="line">sn: Doe</span><br><span class="line">givenName: John</span><br><span class="line">cn: John Doe</span><br><span class="line">displayName: John Doe</span><br><span class="line">uidNumber: 10000</span><br><span class="line">gidNumber: 5000</span><br><span class="line">userPassword: johnldap</span><br><span class="line">gecos: John Doe</span><br><span class="line">loginShell: &#x2F;bin&#x2F;bash</span><br><span class="line">homeDirectory: &#x2F;home&#x2F;john</span><br><span class="line"># ldapadd -x -W -D &quot;cn&#x3D;admin,dc&#x3D;wecash,dc&#x3D;net&quot; -f add_content.ldif</span><br><span class="line">Enter LDAP Password: ********</span><br><span class="line">adding new entry &quot;ou&#x3D;People,dc&#x3D;example,dc&#x3D;com&quot;</span><br><span class="line">adding new entry &quot;ou&#x3D;Groups,dc&#x3D;example,dc&#x3D;com&quot;</span><br><span class="line">adding new entry &quot;cn&#x3D;miners,ou&#x3D;Groups,dc&#x3D;example,dc&#x3D;com&quot;</span><br><span class="line">adding new entry &quot;uid&#x3D;john,ou&#x3D;People,dc&#x3D;example,dc&#x3D;com&quot;</span><br></pre></td></tr></table></figure>
此时,使用客户端工具phpLDAPadmin或者LDAP Admin Tool访问LDAP server端即可以查看到数据.</li>
<li>查询目录结构树<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ldapsearch -x -LLL -H ldap:&#x2F;&#x2F;&#x2F; -b dc&#x3D;wecash,dc&#x3D;net dn</span><br><span class="line">dn: dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: cn&#x3D;admin,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: ou&#x3D;Hosts,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: ou&#x3D;Devops,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: ou&#x3D;Groups,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: ou&#x3D;People,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: ou&#x3D;Marketing,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: ou&#x3D;department,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: cn&#x3D;iris+ipHostNumber&#x3D;192.168.1.51,ou&#x3D;Hosts,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: cn&#x3D;gojira+ipHostNumber&#x3D;192.168.1.1,ou&#x3D;Hosts,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: cn&#x3D;zedan+ipHostNumber&#x3D;192.168.1.52,ou&#x3D;Hosts,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: cn&#x3D;gamera+ipHostNumber&#x3D;192.168.1.50,ou&#x3D;Hosts,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: cn&#x3D;git-wecash01cn-p001.pek3.wecash.net,ou&#x3D;Hosts,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: uid&#x3D;shuke,ou&#x3D;Devops,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: cn&#x3D;dba,ou&#x3D;Groups,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: cn&#x3D;devops,ou&#x3D;Groups,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: cn&#x3D;tester,ou&#x3D;Groups,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: cn&#x3D;manager,ou&#x3D;Groups,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: cn&#x3D;developer,ou&#x3D;Groups,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line">dn: cn&#x3D;Pete Minsky,ou&#x3D;Marketing,dc&#x3D;wecash,dc&#x3D;net</span><br><span class="line"></span><br><span class="line"># 账号登录认证</span><br><span class="line"># ldapwhoami -H ldapi:&#x2F;&#x2F;&#x2F; -x  -D cn&#x3D;admin,dc&#x3D;wecash,dc&#x3D;net -W</span><br><span class="line">Enter LDAP Password:</span><br><span class="line">dn:cn&#x3D;admin,dc&#x3D;wecash,dc&#x3D;net</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="五-Logging设置"><a href="#五-Logging设置" class="headerlink" title="五. Logging设置"></a>五. Logging设置</h3><ol>
<li>Create the file logging.ldif with the following contents<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat logging.ldif</span><br><span class="line">dn: cn&#x3D;config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcLogLevel</span><br><span class="line">olcLogLevel: stats</span><br></pre></td></tr></table></figure></li>
<li>更新数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ldapmodify -Q -Y EXTERNAL -H ldapi:&#x2F;&#x2F;&#x2F; -f logging.ldif</span><br></pre></td></tr></table></figure></li>
<li>在/etc/rsyslog.conf增加内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Disable rate limiting</span><br><span class="line"># (default is 200 messages in 5 seconds; below we make the 5 become 0)</span><br><span class="line">$SystemLogRateLimitInterval 0</span><br></pre></td></tr></table></figure></li>
<li>restart the rsyslog daemon<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart syslog.service</span><br></pre></td></tr></table></figure>
此时,<code>tail -f /var/log/syslog</code>查看日志文件内容,可以查看到LDAP相关log</li>
</ol>
<h3 id="六-LDAP命令介绍"><a href="#六-LDAP命令介绍" class="headerlink" title="六. LDAP命令介绍"></a>六. LDAP命令介绍</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldapmodrdn 命令用于对 OpenLDAP 目录树中 RDN 条目的修改，可以从标准的条目信息输入或者使用 -f 指定 LDIF 文件的格式输入。</span><br><span class="line"># ldapmodrdn -x -D cn&#x3D;admin,dc&#x3D;wecash,dc&#x3D;net -w weopenldap -H ldapi:&#x2F;&#x2F;&#x2F; &quot;cn&#x3D;dba,ou&#x3D;Groups,dc&#x3D;wecash,dc&#x3D;net&quot; cn&#x3D;wedba</span><br><span class="line">ldappasswd 命令用于修改密码</span><br><span class="line"># ldappasswd -x -D cn&#x3D;admin,dc&#x3D;wecash,dc&#x3D;net -w weopenldap -H ldapi:&#x2F;&#x2F;&#x2F; &quot;cn&#x3D;wedba,ou&#x3D;Groups,dc&#x3D;wecash,dc&#x3D;net&quot; -S</span><br><span class="line">ldapdelete 命令用于从目录树中删除指定条目，并根据 DN 条目删除一个或多个条目，但必须提供所要删除指定条目的权限所绑定的 DN（整个目录树的唯一标识名称）。</span><br><span class="line"># ldapdelete -x -w weopenldap -D cn&#x3D;admin,dc&#x3D;wecash,dc&#x3D;net &quot;cn&#x3D;tester,ou&#x3D;Groups,dc&#x3D;wecash,dc&#x3D;net&quot;</span><br><span class="line">要检测配置文件的可用性，可设置输出级别:</span><br><span class="line"># slaptest -F &#x2F;etc&#x2F;ldap&#x2F;slapd.d</span><br><span class="line">config file testing succeeded</span><br><span class="line"># slaptest -d 3 -F &#x2F;etc&#x2F;ldap&#x2F;slapd.d</span><br><span class="line">slapcat 命令用于将数据条目转换为 OpenLDAP 的 LDIF 文件，可用于 OpenLDAP 条目的备份以及结合 slapdadd 指定用于恢复条目。</span><br><span class="line">下面通过slapcat 备份 OpenLDAP 所有目录树条目：</span><br><span class="line"># slapcat -v -l openldap.ldif</span><br><span class="line">LDAP客户端机器验证:</span><br><span class="line"># getent passwd shuke</span><br><span class="line">shuke:*:12514:10202:shuke:&#x2F;home&#x2F;shuke:&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p><a href="https://wiki.shileizcc.com/confluence/pages/viewpage.action?pageId=39223593#OpenLDAP%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D-ldapsearch%E5%91%BD%E4%BB%A4" target="_blank" rel="noopener">OpenLDAP 命令介绍-OpenLDAP</a></p>
<h3 id="七-卸载LDAP"><a href="#七-卸载LDAP" class="headerlink" title="七. 卸载LDAP"></a>七. 卸载LDAP</h3><ol>
<li>命令卸载<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get purge --auto-remove slapd ldap-utils</span><br></pre></td></tr></table></figure></li>
<li>删除目录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># rm -rf &#x2F;etc&#x2F;ldap &amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;ldap</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="八-Backup-and-Restore"><a href="#八-Backup-and-Restore" class="headerlink" title="八. Backup and Restore"></a>八. Backup and Restore</h3><ol>
<li>下载脚本文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;alexanderjackson&#x2F;ldap-backup-and-restore&#x2F;master&#x2F;ldap-backup -O &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;ldap-backup</span><br><span class="line">wget --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;alexanderjackson&#x2F;ldap-backup-and-restore&#x2F;master&#x2F;ldap-restore -O &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;ldap-restore</span><br><span class="line">chown root.root &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;ldap-backup &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;ldap-restore</span><br><span class="line">chmod 500 &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;ldap-backup &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;ldap-restore</span><br></pre></td></tr></table></figure></li>
<li>备份脚本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># grep -v &#39;^#&#39; &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;ldap-backup</span><br><span class="line">TIMESTAMP&#x3D;$(date +%Y%m%d-%H%M%S)</span><br><span class="line">BACKUP_PATH&#x3D;&#x2F;data&#x2F;backups&#x2F;ldap&#x2F;$&#123;TIMESTAMP&#125;</span><br><span class="line">echo &quot;  Creating backup at $&#123;BACKUP_PATH&#125;&quot;</span><br><span class="line">mkdir -p $&#123;BACKUP_PATH&#125;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;nice &#x2F;usr&#x2F;sbin&#x2F;slapcat -n 0 &gt; $&#123;BACKUP_PATH&#125;&#x2F;config.ldif</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;nice &#x2F;usr&#x2F;sbin&#x2F;slapcat -n 1 &gt; $&#123;BACKUP_PATH&#125;&#x2F;domain.ldif</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;nice &#x2F;usr&#x2F;sbin&#x2F;slapcat -n 2 &gt; $&#123;BACKUP_PATH&#125;&#x2F;access.ldif</span><br><span class="line">chmod 640 $&#123;BACKUP_PATH&#125;&#x2F;*.ldif</span><br><span class="line">tar cpzf $&#123;BACKUP_PATH&#125;&#x2F;etc_ldap.tgz &#x2F;etc&#x2F;ldap &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br><span class="line">tar cpzf $&#123;BACKUP_PATH&#125;&#x2F;var_lib_ldap.tgz &#x2F;var&#x2F;lib&#x2F;ldap &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br><span class="line">ls -ahl $&#123;BACKUP_PATH&#125;</span><br><span class="line">echo &quot;Run ldap-restore to restore previous backups...&quot;</span><br></pre></td></tr></table></figure></li>
<li>计划任务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &#x2F;etc&#x2F;cron.d&#x2F;ldap-backup</span><br><span class="line">MAILTO&#x3D;yunwei@wecash.net</span><br><span class="line">0 0 * * *  root    &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;ldap-backup</span><br></pre></td></tr></table></figure></li>
<li>恢复LDAP数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop slapd.service</span><br><span class="line">sudo mkdir &#x2F;var&#x2F;lib&#x2F;ldap&#x2F;accesslog</span><br><span class="line">sudo slapadd -F &#x2F;etc&#x2F;ldap&#x2F;slapd.d -n 0 -l &#x2F;data&#x2F;backups&#x2F;ldap&#x2F;$&#123;TIMESTAMP&#125;&#x2F;config.ldif</span><br><span class="line">sudo slapadd -F &#x2F;etc&#x2F;ldap&#x2F;slapd.d -n 1 -l &#x2F;data&#x2F;backups&#x2F;ldap&#x2F;$&#123;TIMESTAMP&#125;&#x2F;domain.com.ldif</span><br><span class="line">sudo slapadd -F &#x2F;etc&#x2F;ldap&#x2F;slapd.d -n 2 -l &#x2F;data&#x2F;backups&#x2F;ldap&#x2F;$&#123;TIMESTAMP&#125;&#x2F;access.ldif</span><br><span class="line">sudo chown -R openldap:openldap &#x2F;etc&#x2F;ldap&#x2F;slapd.d&#x2F;</span><br><span class="line">sudo chown -R openldap:openldap &#x2F;var&#x2F;lib&#x2F;ldap&#x2F;</span><br><span class="line">sudo systemctl start slapd.service</span><br></pre></td></tr></table></figure>
参考脚本文件:<br><a href="https://github.com/alexanderjackson/ldap-backup-and-restore" target="_blank" rel="noopener">GitHub - alexanderjackson/ldap-backup-and-restore</a><br><a href="https://tylersguides.com/articles/backup-restore-openldap/" target="_blank" rel="noopener">How To Backup and Restore OpenLDAP - Tyler’s Guides</a></li>
</ol>
<h3 id="ldap3-client-example"><a href="#ldap3-client-example" class="headerlink" title="ldap3 client example"></a>ldap3 client example</h3><p><a href="git@git.wecash.net:devops/ldap3-client.git">ldap3-client-example</a></p>
<h3 id="ldapPublicKey"><a href="#ldapPublicKey" class="headerlink" title="ldapPublicKey"></a>ldapPublicKey</h3><ol>
<li>配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat openssh-lpk.ldif</span><br><span class="line"># LDAP SSH Public Key schema</span><br><span class="line"># Source: https:&#x2F;&#x2F;serverfault.com&#x2F;questions&#x2F;653792&#x2F;ssh-key-authentication-using-ldap</span><br><span class="line"># Homepage: https:&#x2F;&#x2F;github.com&#x2F;AndriiGrytsenko&#x2F;openssh-ldap-publickey</span><br><span class="line"></span><br><span class="line">dn: cn&#x3D;openssh-lpk,cn&#x3D;schema,cn&#x3D;config</span><br><span class="line">objectClass: olcSchemaConfig</span><br><span class="line">cn: openssh-lpk</span><br><span class="line">olcAttributeTypes: ( 1.3.6.1.4.1.24552.500.1.1.1.13 NAME &#39;sshPublicKey&#39;</span><br><span class="line">    DESC &#39;MANDATORY: OpenSSH Public key&#39;</span><br><span class="line">    EQUALITY octetStringMatch</span><br><span class="line">    SYNTAX 1.3.6.1.4.1.1466.115.121.1.40 )</span><br><span class="line">olcObjectClasses: ( 1.3.6.1.4.1.24552.500.1.1.2.0 NAME &#39;ldapPublicKey&#39;</span><br><span class="line">    DESC &#39;MANDATORY: OpenSSH LPK objectclass&#39;</span><br><span class="line">    SUP top AUXILIARY</span><br><span class="line">    MAY ( sshPublicKey $ uid )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></li>
<li>导入配置信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ldapadd -Y EXTERNAL -H ldapi:&#x2F;&#x2F;&#x2F; -f openssh-lpk.ldif</span><br><span class="line">SASL&#x2F;EXTERNAL authentication started</span><br><span class="line">SASL username: gidNumber&#x3D;0+uidNumber&#x3D;0,cn&#x3D;peercred,cn&#x3D;external,cn&#x3D;auth</span><br><span class="line">SASL SSF: 0</span><br><span class="line">adding new entry &quot;cn&#x3D;openssh-lpk,cn&#x3D;schema,cn&#x3D;config&quot;</span><br></pre></td></tr></table></figure>
此时,可以使用sshPublicKey属性进行user登录验证.</li>
</ol>
<h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><ol>
<li>如何修改默认的数据库文件创建路径?<br>默认的数据库文件路径是/var/lib/ldap</li>
</ol>
<ul>
<li><p>创建存放DB数据的路径,并修改权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir &#x2F;data&#x2F;ldap&#x2F;data -pv</span><br><span class="line"># chown -R openldap.openldap &#x2F;data&#x2F;ldap&#x2F;data</span><br></pre></td></tr></table></figure></li>
<li><p>编写修改db路径的ldif文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat dbpath.ldif</span><br><span class="line">dn: olcDatabase&#x3D;&#123;1&#125;mdb,cn&#x3D;config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcDbDirectory</span><br><span class="line">olcDbDirectory: &#x2F;data&#x2F;ldap&#x2F;data</span><br></pre></td></tr></table></figure></li>
<li><p>执行修改命令,提示错误信息如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldapmodify -Q -Y EXTERNAL -H ldapi:&#x2F;&#x2F;&#x2F; -f dbpath.ldif</span><br><span class="line">adding new entry &quot;olcDatabase&#x3D;&#123;1&#125;hdb,cn&#x3D;config&quot;</span><br><span class="line">ldap_add: Other (e.g., implementation specific) error (80)</span><br><span class="line">	additional info: olcDbDirectory: value #0: invalid path: Permission denied</span><br></pre></td></tr></table></figure></li>
<li><p>log信息<br>ldap启动失败，/var/log/syslog日志显示:olcDbDirectory: value #0: invalid path: Permission denied</p>
</li>
<li><p>问题原因<br>AppArmor的配置导致</p>
<blockquote>
<p>AppArmor (Application Armor) 是一个类似于 SELinux 的一个强制访问控制方法，通过它你可以指定程序可以读、写或运行哪些文件，是否可以打开网络端口等。AppArmor 配置比 SELinux 更加方便比较适合学习<br>I believe if you want to install the LDAP Db to another directory you would need to add that directory to the apparmor profile for slapd. In my case that would have been editing “/etc/apparmor.d/usr.sbin.slapd” and changing</p>
</blockquote>
</li>
<li><p>解决方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;apparmor.d&#x2F;usr.sbin.slapd</span><br><span class="line">  # the databases and logs</span><br><span class="line">  &#x2F;var&#x2F;lib&#x2F;ldap&#x2F; r,</span><br><span class="line">  &#x2F;var&#x2F;lib&#x2F;ldap&#x2F;** rwk,</span><br><span class="line"></span><br><span class="line">  # lock file</span><br><span class="line">  &#x2F;var&#x2F;lib&#x2F;ldap&#x2F;alock kw,</span><br><span class="line"></span><br><span class="line">  &#x2F;data&#x2F;ldap&#x2F;data&#x2F; r,</span><br><span class="line">  &#x2F;data&#x2F;ldap&#x2F;data&#x2F;** rwk,</span><br><span class="line"></span><br><span class="line">  # lock file</span><br><span class="line">  &#x2F;data&#x2F;ldap&#x2F;data&#x2F;alock kw,</span><br><span class="line"> 添加DB路径到配置文件中,如上所示</span><br><span class="line">重启apparmor服务</span><br><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;apparmor restart</span><br></pre></td></tr></table></figure></li>
<li><p>修改路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ldapmodify -Q -Y EXTERNAL -H ldapi:&#x2F;&#x2F;&#x2F; -f dbpath.ldif</span><br><span class="line">modifying entry &quot;olcDatabase&#x3D;&#123;1&#125;mdb,cn&#x3D;config&quot;</span><br><span class="line">重启ldap服务</span><br><span class="line"># systemctl restart slapd.service</span><br></pre></td></tr></table></figure></li>
<li><p>查看验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ldapsearch -H ldapi:&#x2F;&#x2F; -Y EXTERNAL -b &quot;olcDatabase&#x3D;&#123;1&#125;mdb,cn&#x3D;config&quot; &quot;(objectClass&#x3D;olcDatabaseConfig)&quot; olcDbDirectory -LLL</span><br><span class="line">SASL&#x2F;EXTERNAL authentication started</span><br><span class="line">SASL username: gidNumber&#x3D;0+uidNumber&#x3D;0,cn&#x3D;peercred,cn&#x3D;external,cn&#x3D;auth</span><br><span class="line">SASL SSF: 0</span><br><span class="line">dn: olcDatabase&#x3D;&#123;1&#125;mdb,cn&#x3D;config</span><br><span class="line">olcDbDirectory: &#x2F;data&#x2F;ldap&#x2F;data</span><br></pre></td></tr></table></figure>
<p><a href="https://yilutongxing.wordpress.com/2013/11/07/ldap/" target="_blank" rel="noopener">参考资料</a></p>
</li>
</ul>
<ol start="2">
<li>如何设置LDAP管理员密码?</li>
</ol>
<ul>
<li>生成密码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># slappasswd</span><br><span class="line">New password:</span><br><span class="line">Re-enter new password:</span><br><span class="line">&#123;SSHA&#125;XsxctHt+Ae3Saq2Kcead4UdZ0kOTZRn8</span><br></pre></td></tr></table></figure></li>
<li>生成LDIF文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; chrootpw.ldif </span><br><span class="line">dn: olcDatabase&#x3D;&#123;0&#125;config,cn&#x3D;config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcRootPW</span><br><span class="line">olcRootPW: &#123;SSHA&#125;XsxctHt+Ae3Saq2Kcead4UdZ0kOTZRn8</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li>
<li>执行LDIF文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ldapadd -Y EXTERNAL -H ldapi:&#x2F;&#x2F;&#x2F; -f chrootpw.ldif</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="http://www.openldap.org/doc/admin24/quickstart.html" target="_blank" rel="noopener">编译安装</a></p>
<p>主要参考资料<br><a href="https://help.ubuntu.com/lts/serverguide/openldap-server.html.en" target="_blank" rel="noopener">OpenLDAP Server</a><br><a href="https://wiki.shileizcc.com/confluence/display/openldap/OpenLDAP" target="_blank" rel="noopener">OpenLDAP - OpenLDAP - Wiki.Shileizcc.com</a><br><a href="https://www.openldap.org/doc/admin24/slapdconf2.html" target="_blank" rel="noopener">OpenLDAP Software 2.4 Administrator’s Guide: Configuring slapd</a></p>
<p>其他参考<br><a href="https://segmentfault.com/a/1190000014683418" target="_blank" rel="noopener">我花了一个五一终于搞懂了OpenLDAP - 日新亭 - SegmentFault 思否</a><br><a href="http://tutoriels.meddeb.net/openldap-tutorial-log/" target="_blank" rel="noopener">Enable the production of Openldap Log file - Tutoriels pour la construction de logiciels</a><br><a href="https://blog.mallux.me/2017/03/03/openldap/" target="_blank" rel="noopener">OpenLDAP 初识 | Mallux - 宁静致远</a><br><a href="https://linuxguideandhints.com/centos/openldap.html" target="_blank" rel="noopener">OpenLDAP — Linux Guide and Hints</a><br><a href="https://www.server-world.info/en/note?os=Ubuntu_17.04&p=ssl" target="_blank" rel="noopener">Ubuntu 17.04 : Create SSL Certificates : Server World</a><br><a href="https://help.ubuntu.com/lts/serverguide/openldap-server.html.en#openldap-server-installation" target="_blank" rel="noopener">OpenLDAP Server</a><br><a href="https://www.howtoing.com/how-to-use-ldif-files-to-make-changes-to-an-openldap-system" target="_blank" rel="noopener">如何使用LDIF文件来进行更改OpenLDAP系统</a><br><a href="https://www.ldapsoft.com/download.html" target="_blank" rel="noopener">LDAP Admin Tool</a><br><a href="https://www.server-world.info/en/note?os=CentOS_7&p=openldap&f=4" target="_blank" rel="noopener">ldap over ssl</a></p>
]]></content>
      <categories>
        <category>LDAP</category>
      </categories>
      <tags>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的一些高级技巧</title>
    <url>/2020/04/23/Python%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="Python中的一些高级技巧"><a href="#Python中的一些高级技巧" class="headerlink" title="Python中的一些高级技巧"></a>Python中的一些高级技巧</h2><blockquote>
<p>Python 开发中有哪些高级技巧？这是知乎上一个问题，我总结了一些常见的技巧在这里，可能谈不上多高级，但掌握这些至少可以让你的代码看起来 Pythonic 一点。如果你还在按照类C语言的那套风格来写的话，在 code review 恐怕会要被吐槽了.</p>
</blockquote>
<h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; chars &#x3D; [ c for c in &#39;python&#39; ]</span><br><span class="line">&gt;&gt;&gt; chars</span><br><span class="line">[&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]</span><br></pre></td></tr></table></figure>

<h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; dict1 &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 5&#125;</span><br><span class="line">&gt;&gt;&gt; double_dict1 &#x3D; &#123;k:v*2 for (k,v) in dict1.items()&#125;</span><br><span class="line">&gt;&gt;&gt; double_dict1</span><br><span class="line">&#123;&#39;a&#39;: 2, &#39;b&#39;: 4, &#39;c&#39;: 6, &#39;d&#39;: 8, &#39;e&#39;: 10&#125;</span><br></pre></td></tr></table></figure>

<h3 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; set1 &#x3D; &#123;1,2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; double_set &#x3D; &#123;i*2 for i in set1&#125;</span><br><span class="line">&gt;&gt;&gt; double_set</span><br><span class="line">&#123;8, 2, 4, 6&#125;</span><br></pre></td></tr></table></figure>

<h3 id="合并字典"><a href="#合并字典" class="headerlink" title="合并字典"></a>合并字典</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x &#x3D; &#123;&#39;a&#39;:1,&#39;b&#39;:2&#125;</span><br><span class="line">&gt;&gt;&gt; y &#x3D; &#123;&#39;c&#39;:3, &#39;d&#39;:4&#125;</span><br><span class="line">&gt;&gt;&gt; z &#x3D; &#123;**x, **y&#125;</span><br><span class="line">&gt;&gt;&gt; z</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br></pre></td></tr></table></figure>

<h3 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; nums &#x3D; [1,2,3]</span><br><span class="line">&gt;&gt;&gt; nums[::]</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; copy_nums &#x3D; nums[::]</span><br><span class="line">&gt;&gt;&gt; copy_nums</span><br><span class="line">[1, 2, 3]</span><br></pre></td></tr></table></figure>

<h3 id="反转列表"><a href="#反转列表" class="headerlink" title="反转列表"></a>反转列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; reverse_nums &#x3D; nums[::-1]</span><br><span class="line">&gt;&gt;&gt; reverse_nums</span><br><span class="line">[3, 2, 1]</span><br></pre></td></tr></table></figure>

<h3 id="变量交换"><a href="#变量交换" class="headerlink" title="变量交换"></a>变量交换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a,b &#x3D; 1, 2</span><br><span class="line">&gt;&gt;&gt; a ,b &#x3D; b,a</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h3 id="高级拆包"><a href="#高级拆包" class="headerlink" title="高级拆包"></a>高级拆包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a, *b &#x3D; 1,2,3</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[2, 3]</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a, *b, c &#x3D; 1,2,3,4,5</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h3 id="函数返回多个值-其实是自动packing成元组-然后unpacking赋值给4个变量"><a href="#函数返回多个值-其实是自动packing成元组-然后unpacking赋值给4个变量" class="headerlink" title="函数返回多个值(其实是自动packing成元组)然后unpacking赋值给4个变量"></a>函数返回多个值(其实是自动packing成元组)然后unpacking赋值给4个变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def f():</span><br><span class="line">...     return 1, 2, 3, 4</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; a, b, c, d &#x3D; f()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="列表合并成字符串"><a href="#列表合并成字符串" class="headerlink" title="列表合并成字符串"></a>列表合并成字符串</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot; &quot;.join([&quot;I&quot;, &quot;Love&quot;, &quot;Python&quot;])</span><br><span class="line">&#39;I Love Python&#39;</span><br></pre></td></tr></table></figure>

<h3 id="链式比较"><a href="#链式比较" class="headerlink" title="链式比较"></a>链式比较</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; if a &gt; 2 and a &lt; 5:</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; if 2&lt;a&lt;5:</span><br><span class="line">...     pass</span><br></pre></td></tr></table></figure>

<h3 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 没有使用 field from</span><br><span class="line">def dup(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        yield i</span><br><span class="line">        yield i</span><br><span class="line"></span><br><span class="line"># 使用yield from</span><br><span class="line">def dup(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">    yield from [i, i]</span><br><span class="line"></span><br><span class="line">for i in dup(3):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="in-代替-or"><a href="#in-代替-or" class="headerlink" title="in 代替 or"></a>in 代替 or</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; if x &#x3D;&#x3D; 1 or x &#x3D;&#x3D; 2 or x &#x3D;&#x3D; 3:</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; if x in (1,2,3):</span><br><span class="line">...     pass</span><br></pre></td></tr></table></figure>

<h3 id="字典代替多个if-else"><a href="#字典代替多个if-else" class="headerlink" title="字典代替多个if else"></a>字典代替多个if else</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def fun(x):</span><br><span class="line">    if x &#x3D;&#x3D; &#39;a&#39;:</span><br><span class="line">        return 1</span><br><span class="line">    elif x &#x3D;&#x3D; &#39;b&#39;:</span><br><span class="line">        return 2</span><br><span class="line">    else:</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">def fun(x):</span><br><span class="line">    return &#123;&quot;a&quot;: 1, &quot;b&quot;: 2&#125;.get(x)</span><br></pre></td></tr></table></figure>

<h3 id="有下标索引的枚举"><a href="#有下标索引的枚举" class="headerlink" title="有下标索引的枚举"></a>有下标索引的枚举</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; for i, e in enumerate([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]):</span><br><span class="line">...     print(i, e)</span><br><span class="line">...</span><br><span class="line">0 a</span><br><span class="line">1 b</span><br><span class="line">2 c</span><br></pre></td></tr></table></figure>

<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>注意区分列表推导式，生成器效率更高</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; g &#x3D; (i**2 for i in range(5))</span><br><span class="line">&gt;&gt;&gt; g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x10881e518&gt;</span><br><span class="line">&gt;&gt;&gt; for i in g:</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">16</span><br></pre></td></tr></table></figure>

<h3 id="注意区分列表推导式，生成器效率更高"><a href="#注意区分列表推导式，生成器效率更高" class="headerlink" title="注意区分列表推导式，生成器效率更高"></a>注意区分列表推导式，生成器效率更高</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; g &#x3D; (i**2 for i in range(5))</span><br><span class="line">&gt;&gt;&gt; g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x10881e518&gt;</span><br><span class="line">&gt;&gt;&gt; for i in g:</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">16</span><br></pre></td></tr></table></figure>

<h3 id="默认字典-defaultdict"><a href="#默认字典-defaultdict" class="headerlink" title="默认字典 defaultdict"></a>默认字典 defaultdict</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; dict()</span><br><span class="line">&gt;&gt;&gt; d[&#39;nums&#39;]</span><br><span class="line">KeyError: &#39;nums&#39;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from collections import defaultdict</span><br><span class="line">&gt;&gt;&gt; d &#x3D; defaultdict(list)</span><br><span class="line">&gt;&gt;&gt; d[&quot;nums&quot;]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>

<h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; lang &#x3D; &#39;python&#39;</span><br><span class="line">&gt;&gt;&gt; f&#39;&#123;lang&#125; is most popular language in the world&#39;</span><br><span class="line">&#39;python is most popular language in the world&#39;</span><br></pre></td></tr></table></figure>

<h3 id="列表中出现次数最多的元素"><a href="#列表中出现次数最多的元素" class="headerlink" title="列表中出现次数最多的元素"></a>列表中出现次数最多的元素</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; nums &#x3D; [1,2,3,3]</span><br><span class="line">&gt;&gt;&gt; max(set(nums), key&#x3D;nums.count)</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">from collections import Counter</span><br><span class="line">&gt;&gt;&gt; Counter(nums).most_common()[0][0]</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; with open(&quot;test.txt&quot;, &quot;w&quot;) as f:</span><br><span class="line">...     f.writelines(&quot;hello&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="判断对象类型，可指定多个类型"><a href="#判断对象类型，可指定多个类型" class="headerlink" title="判断对象类型，可指定多个类型"></a>判断对象类型，可指定多个类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(a, (int, str))</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h3 id="类似的还有字符串的-startswith，endswith"><a href="#类似的还有字符串的-startswith，endswith" class="headerlink" title="类似的还有字符串的 startswith，endswith"></a>类似的还有字符串的 startswith，endswith</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;http:&#x2F;&#x2F;foofish.net&quot;.startswith((&#39;http&#39;,&#39;https&#39;))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;https:&#x2F;&#x2F;foofish.net&quot;.startswith((&#39;http&#39;,&#39;https&#39;))</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h3 id="str-与-repr-区别"><a href="#str-与-repr-区别" class="headerlink" title="str 与 repr 区别"></a><strong>str</strong> 与 <strong>repr</strong> 区别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; str(datetime.now())</span><br><span class="line">&#39;2018-11-20 00:31:54.839605&#39;</span><br><span class="line">&gt;&gt;&gt; repr(datetime.now())</span><br><span class="line">&#39;datetime.datetime(2018, 11, 20, 0, 32, 0, 579521)&#39;</span><br></pre></td></tr></table></figure>
<p>前者对人友好，可读性更强，后者对计算机友好，支持 obj == eval(repr(obj))</p>
<h3 id="使用装饰器"><a href="#使用装饰器" class="headerlink" title="使用装饰器"></a>使用装饰器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def makebold(f):</span><br><span class="line">return lambda: &quot;&lt;b&gt;&quot; + f() + &quot;&lt;&#x2F;b&gt;&quot;</span><br><span class="line"></span><br><span class="line">def makeitalic(f):</span><br><span class="line">return lambda: &quot;&lt;i&gt;&quot; + f() + &quot;&lt;&#x2F;i&gt;&quot;</span><br><span class="line"></span><br><span class="line">@makebold</span><br><span class="line">@makeitalic</span><br><span class="line">def say():</span><br><span class="line">return &quot;Hello&quot;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; say()</span><br><span class="line">&lt;b&gt;&lt;i&gt;Hello&lt;&#x2F;i&gt;&lt;&#x2F;b&gt;</span><br></pre></td></tr></table></figure>

<h3 id="不使用装饰器-可读性非常差"><a href="#不使用装饰器-可读性非常差" class="headerlink" title="不使用装饰器,可读性非常差"></a>不使用装饰器,可读性非常差</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def say():</span><br><span class="line">return &quot;Hello&quot;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; makebold(makeitalic(say))()</span><br><span class="line">&lt;b&gt;&lt;i&gt;Hello&lt;&#x2F;i&gt;&lt;&#x2F;b&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://mp.weixin.qq.com/s/cGHEJRUQ3CeuvL5rOqul8A" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python技术进阶</title>
    <url>/2020/04/23/Python%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Python代码热重载函数reload</title>
    <url>/2020/04/23/Python%E4%BB%A3%E7%A0%81%E7%83%AD%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0reload/</url>
    <content><![CDATA[<h2 id="Python代码热重载函数reload"><a href="#Python代码热重载函数reload" class="headerlink" title="Python代码热重载函数reload"></a>Python代码热重载函数reload</h2><blockquote>
<p>代码热重载是在一个项目中比较常见的需求，而不是每次修改代码后需要重启服务就变得尤为重要。由于最近正好在一个Python项目中需要实现热重载需求，因此写了个python版的代码热重载demo，仅供参考。</p>
</blockquote>
<h3 id="Python-reload-函数介绍"><a href="#Python-reload-函数介绍" class="headerlink" title="Python reload()函数介绍"></a>Python reload()函数介绍</h3><ul>
<li>描述<br>reload() 用于重新载入之前载入的模块。</li>
<li>语法<br>reload() 函数语法：<br>reload(module)</li>
<li>参数<br>module – 模块对象。</li>
<li>返回值<br>返回模块对象。</li>
</ul>
<h3 id="python中的reload函数"><a href="#python中的reload函数" class="headerlink" title="python中的reload函数"></a>python中的reload函数</h3><p>python2中的reload函数可以直接使用，无需导入第三方模块，可以直接使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reload(module) # reload接收的参数必须是已经导入的模块</span><br></pre></td></tr></table></figure>
<p>python3中的reload函数移到了imp库里面，因此ß需要导入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from imp import reload</span><br><span class="line">reload(module)</span><br></pre></td></tr></table></figure>
<h3 id="Demo-01"><a href="#Demo-01" class="headerlink" title="Demo-01"></a>Demo-01</h3><p>demo1是基于最常见的需求，即同一个目录下有2个文件(plugin.py，scan.py),scan.py文件调用plugin.py文件。<br>plugin.py文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">Now &#x3D; time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)</span><br><span class="line">print(&quot;Now: %s,Start executing plugin code...&quot; % Now)</span><br></pre></td></tr></table></figure>
<p>scan.py文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from imp import reload</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">import plugin</span><br><span class="line">while 1:</span><br><span class="line">    reload(plugin)</span><br><span class="line">    time.sleep(1)</span><br></pre></td></tr></table></figure>
<p>运行scan.py,然后手工修改plugin.py文件内容，观察输出的变化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python scan.py</span><br><span class="line">Now: 2019-04-11 16:14:43,Start executing plugin code ...</span><br><span class="line">Now: 2019-04-11 16:14:44,Start executing plugin code ...</span><br><span class="line">Now: 2019-04-11 16:14:45,Start executing plugin code ...</span><br><span class="line">Now: 2019-04-11 16:14:46,Start executing plugin code ...</span><br><span class="line">Now: 2019-04-11 16:14:47,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:14:48,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:14:49,Start executing plugin code ......</span><br></pre></td></tr></table></figure>
<h3 id="Demo-02"><a href="#Demo-02" class="headerlink" title="Demo-02"></a>Demo-02</h3><p>Demo-02会稍微复杂一点点，即同一个目录下有2个文件(plugin.py，scan.py),scan.py文件调用plugin.py文件里面的crack函数。<br>plugin.py文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">def crack():</span><br><span class="line">    import time</span><br><span class="line">    Now &#x3D; time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)</span><br><span class="line">    print(&quot;Now: %s,Start executing plugin code ......&quot; % Now)</span><br></pre></td></tr></table></figure>
<p>scan.py文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from imp import reload</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">import plugin</span><br><span class="line">while 1:</span><br><span class="line">    reload(plugin)</span><br><span class="line">    eval(&quot;plugin.crack()&quot;)</span><br><span class="line">    time.sleep(1)</span><br></pre></td></tr></table></figure>
<p>运行scan.py,然后手工修改plugin.py文件内容，观察输出的变化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python scan.py</span><br><span class="line">Now: 2019-04-11 16:18:49,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:18:50,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:18:51,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:18:52,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:18:53,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:18:54,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:18:55,Start executing plugin code ...</span><br><span class="line">Now: 2019-04-11 16:18:56,Start executing plugin code ...</span><br><span class="line">Now: 2019-04-11 16:18:57,Start executing plugin code ...</span><br><span class="line">Now: 2019-04-11 16:18:58,Start executing plugin code ...</span><br><span class="line">Now: 2019-04-11 16:18:59,Start executing plugin code ...</span><br></pre></td></tr></table></figure>
<p>观察运行结果可以看出,在调用之前先reload一下模块，然后再利用eval调用该模块的crack函数。</p>
<h3 id="Demo-03"><a href="#Demo-03" class="headerlink" title="Demo-03"></a>Demo-03</h3><p>Demo-03针对更为现实的需求，即不同目录下的2个文件（./scan.py，./plugins/plugin.py），scan.py文件调用plugins目录下的plugin.py文件里面的crack函数。<br>plugin.py文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">def crack():</span><br><span class="line">    import time</span><br><span class="line">    Now &#x3D; time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)</span><br><span class="line">    print(&quot;Now: %s,Start executing plugin code ......&quot; % Now)</span><br></pre></td></tr></table></figure>
<p>scan.py文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from imp import reload</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">exec(&quot;import plugins.plugin&quot;)</span><br><span class="line"></span><br><span class="line">while 1:</span><br><span class="line">    reload(eval(&quot;plugins.plugin&quot;))</span><br><span class="line">    eval(&quot;plugins.plugin.crack()&quot;)</span><br><span class="line">    time.sleep(1)</span><br></pre></td></tr></table></figure>
<p>运行scan.py,然后手工修改plugin.py文件内容，观察输出的变化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python scan.py</span><br><span class="line">Now: 2019-04-11 16:25:10,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:25:11,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:25:12,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:25:13,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:25:14,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:25:15,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:25:16,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:25:17,Start executing plugin code ......</span><br><span class="line">Now: 2019-04-11 16:25:18,Start executing plugin code ...</span><br><span class="line">Now: 2019-04-11 16:25:19,Start executing plugin code ...</span><br><span class="line">Now: 2019-04-11 16:25:20,Start executing plugin code ...</span><br><span class="line">Now: 2019-04-11 16:25:21,Start executing plugin code ...</span><br></pre></td></tr></table></figure>
<p>观察运行结果可以看出,reload不支持<code>from plugins improt plugin</code>的方式重载模块，因此可以使用<code>import plugins.plugin</code>的方式导入模块并重载。</p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python技术进阶yield</title>
    <url>/2020/04/23/Python%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6yield/</url>
    <content><![CDATA[<h2 id="Python技术进阶yield"><a href="#Python技术进阶yield" class="headerlink" title="Python技术进阶yield"></a>Python技术进阶<code>yield</code></h2><blockquote>
<p><code>yield</code>关键字在Python中开发中使用较为频繁，它为我们某些开发场景提供了便利，这篇文章我们来深入讲解<code>yield</code>相关知识。</p>
</blockquote>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>在讲<code>yield</code>之前，我们先复习一下迭代器与生成器的区别，可以参考我之前写的文章：Python技术进阶——迭代器、可迭代对象、生成器。</p>
<p>简单总结如下：</p>
<ul>
<li>实现了迭代器协议<code>__iter__</code>和<code>next/__next__</code>方法的对象被称作迭代器</li>
<li>迭代器可以使用<code>for</code>执行输出每个元素</li>
<li>生成器是一种特殊的迭代器</li>
</ul>
<p>一个函数内，如果包含了<code>yield</code>关键字，这个函数就是一个生成器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 生成器函数</span><br><span class="line">def gen(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        yield i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g &#x3D; gen(3)  # 创建一个生成器</span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line">print(type(g))  # &lt;type &#39;generator&#39;&gt;</span><br><span class="line"></span><br><span class="line"># 生成器迭代</span><br><span class="line">for i in g:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"># output</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&lt;generator object gen at 0x10a1cbaf0&gt;</span><br><span class="line">&lt;class &#39;generator&#39;&gt;</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>注意，在执行<code>g = gen(3)</code>时，函数中的代码并没有执行，此时我们只是创建了一个生成器对象，他的类型是<code>generator</code>。<br>当执行<code>for i in g</code>时，每执行一次循环，直到执行到<code>yield</code>时，返回<code>yield</code>后面的值。<br>换句话说，我们想输出5个元素，在创建生成器时，这个5个元素此时并没有产生，什么时候产生呢？在执行for循环遇到<code>yield</code>时，此时才会逐个生成每个元素。</p>
<p>生成器除了实现迭代器协议可以进行迭代之外，还包含一些方法：</p>
<ul>
<li><code>generator.next()</code>：每次执行到遇到<code>yield</code>后返回，直到没有<code>yield</code>，抛出<code>StopIterator</code>异常</li>
<li><code>generator.send(value)``：将</code>yield<code>的值设置为</code>value`</li>
<li><code>generator.throw(type[, value[, traceback]])</code>：向生成器当前状态抛出一个异常</li>
<li><code>generator.close()</code>：关闭生成器</li>
</ul>
<h3 id="next"><a href="#next" class="headerlink" title="next"></a>next</h3><p>为了更便于你理解只有在遇到<code>yield</code>时才产生值，我们可以改写程序如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def gen(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        print(&#39;yield before&#39;)</span><br><span class="line">        yield i</span><br><span class="line">        print(&#39;yield after&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g &#x3D; gen(3)  # 创建一个生成器</span><br><span class="line"># print(g.__next__)</span><br><span class="line">print(next(g))  # 0</span><br><span class="line">print(&#39;-&#39; * 5)</span><br><span class="line">print(next(g))  # 1</span><br><span class="line">print(&#39;-&#39; * 5)</span><br><span class="line">print(next(g))  # 2</span><br><span class="line">print(&#39;-&#39; * 5)</span><br><span class="line">print(next(g))  # StopIteration</span><br><span class="line"></span><br><span class="line"># output</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">yield before</span><br><span class="line">0</span><br><span class="line">-----</span><br><span class="line">yield after</span><br><span class="line">yield before</span><br><span class="line">1</span><br><span class="line">-----</span><br><span class="line">yield after</span><br><span class="line">yield before</span><br><span class="line">2</span><br><span class="line">-----</span><br><span class="line">yield after</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;learn.py&quot;, line 53, in &lt;module&gt;</span><br><span class="line">    print(next(g))  # StopIteration</span><br><span class="line">StopIteration</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>只有在执行<code>next(g)</code>时，才会产生值，并且生成器会保留上下文信息，在再次执行<code>next(g)</code>时继续返回。</p>
<h3 id="send"><a href="#send" class="headerlink" title="send"></a>send</h3><p>上面的例子只展示了在<code>yield</code>后有值的情况，其实也可以使用<code>j = yield i</code>这种语法，我们看下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">def gen():</span><br><span class="line">    i &#x3D; 1</span><br><span class="line">    while True:</span><br><span class="line">        j &#x3D; yield i</span><br><span class="line">        i *&#x3D; 2</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        if j &#x3D;&#x3D; -1:</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">for i in gen():</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"># output</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">8</span><br><span class="line">16</span><br><span class="line">32</span><br><span class="line">64</span><br><span class="line">128</span><br><span class="line">256</span><br><span class="line">^CTraceback (most recent call last):</span><br><span class="line">  File &quot;learn.py&quot;, line 86, in &lt;module&gt;</span><br><span class="line">    for i in gen():</span><br><span class="line">  File &quot;learn.py&quot;, line 81, in gen</span><br><span class="line">    time.sleep(2)</span><br><span class="line">KeyboardInterrupt</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>这个生成器函数相当于无限生成每次翻倍的数字，一直循环下去，直到我们杀死进程才能停止。<br>在上面的代码你会发现，貌似永远执行不到<code>j == -1</code>这个分支里，如果想让代码执行到这，如何做？<br>这里就要用到生成的send方法，它可以在外部传入一个值，使得改变生成器当前的状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g &#x3D; gen()            # 创建一个生成器</span><br><span class="line">print(next(g))       # 1</span><br><span class="line">print(next(g))       # 2</span><br><span class="line">print(next(g))       # 4</span><br><span class="line">print(g.send(-1))    # j &#x3D; -1 程序退出</span><br><span class="line"></span><br><span class="line"># output</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;learn.py&quot;, line 112, in &lt;module&gt;</span><br><span class="line">    print(g.send(-1))    # j &#x3D; -1 程序退出</span><br><span class="line">StopIteration</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>执行<code>g.send(-1)</code>,相当于把-1传入生成器，赋值给了<code>yield</code>之前的j，从而改变了生成器内部的执行状态。</p>
<h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h3><p>除了可以向生成器内部传入指定值，还可以传入指定异常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def gen():</span><br><span class="line">    try:</span><br><span class="line">        yield 1</span><br><span class="line">    except ValueError:</span><br><span class="line">        yield &#39;ValueError&#39;</span><br><span class="line">    finally:</span><br><span class="line">        print(&#39;finally&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g &#x3D; gen()  # 创建一个生成器</span><br><span class="line">print(next(g))  # 1</span><br><span class="line">print(g.throw(ValueError))  # 向内部传入异常，返回ValueError，并打印出finally</span><br><span class="line"></span><br><span class="line"># output</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">1</span><br><span class="line">ValueError</span><br><span class="line">finally</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p><code>throw</code>与<code>next</code>类似，但是以传入异常的方式使生成器执行,<code>throw</code>一般在开发中很少被用到。</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>上面简单介绍了生成器和<code>yield</code>的使用方式，那么<code>yield</code>一般在哪些场景中被使用？</p>
<h4 id="大列表的生成"><a href="#大列表的生成" class="headerlink" title="大列表的生成"></a>大列表的生成</h4><blockquote>
<p>如果你想生成一个非常大的列表，使用list时只能一次性在内存中创建出这个列表，这可能导致内存资源申请非常大，甚至有可能被操作系统杀死进程。</p>
</blockquote>
<p>直接在内存中生成一个大列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def big_list():</span><br><span class="line">    result &#x3D; []</span><br><span class="line">    for i in range(1000000000000):</span><br><span class="line">        result.append(i)</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 一次性在内存中生成大列表 内存占用非常大</span><br><span class="line">for i in big_list():</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>
<p>由于生成器只有在执行到<code>yield</code>时才会产生值，我们可以使用这个特性优雅地解决这类问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def big_list():</span><br><span class="line">    for i in range(1000000000000):</span><br><span class="line">        yield i</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"># 大列表只有在迭代时 才逐个生成元素 减少内存占用</span><br><span class="line">for i in big_list():</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<h4 id="简化代码结构"><a href="#简化代码结构" class="headerlink" title="简化代码结构"></a>简化代码结构</h4><p>如果一个函数中要产生一个列表，但这个列表可能是多个逻辑块组合后才能产生的，这就会导致我们的代码结构变得复杂：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def gen_list():</span><br><span class="line">    # 多个逻辑块 组成生成一个列表</span><br><span class="line">    result &#x3D; []</span><br><span class="line">    for i in range(10):</span><br><span class="line">        result.append(i)</span><br><span class="line">    for j in range(5):</span><br><span class="line">        result.append(j * j)</span><br><span class="line">    for k in [100, 200, 300]:</span><br><span class="line">        result.append(k)</span><br><span class="line">    return result</span><br><span class="line">    </span><br><span class="line">for item in gen_list():</span><br><span class="line">    print item</span><br></pre></td></tr></table></figure>
<p>使用<code>yield</code>生成这个列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 多个逻辑块 使用yield 生成一个列表</span><br><span class="line">def gen_list():</span><br><span class="line">    for i in range(10):</span><br><span class="line">        yield i</span><br><span class="line">    for j in range(5):</span><br><span class="line">        yield j * j</span><br><span class="line">    for k in [100, 200, 300]:</span><br><span class="line">        yield k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for item in gen_list():</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>
<p>我们看到，在第一个例子中，我们只能先声明一个<code>list</code>类型的变量，然后在每个逻辑块中产生元素，之后<code>append</code>到结果中，最终<code>return</code>返回这个结果。<br>而使用<code>yield</code>后，只需在每个逻辑块需要产生并返回元素时，使用<code>yield</code>即可，代码更加简洁，结构更清晰，同时还拥有减少内存占用的好处。</p>
<h3 id="协程与并发"><a href="#协程与并发" class="headerlink" title="协程与并发"></a>协程与并发</h3><p>我们都比较熟悉进程、线程，一般为了提高程序的运行效率，会使用多进程、多线程进行开发，最常用的编程模型就是生产者-消费者模型，即一个进程/线程生产数据，其他进程/线程消费数据。</p>
<p>在多进程、多线程开发时，为了防止资源被篡改，往往会进行加锁，这就导致了编程的复杂程度。</p>
<p>在Python开发中，也提供了多进程和多线程的开发方式，但由于解释器<code>GIL</code>的存在，多线程开发并不能提高执行效率。所以在Python中，更多提高执行效率的编程模型是：协程。</p>
<p>什么是协程？简单来说，由多个程序块组合协作执行的程序，称之为协程。可能这么说还是太过模糊，我们用<code>yield</code>实现一个生产者-消费者的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def consumer():</span><br><span class="line">    i &#x3D; None</span><br><span class="line">    while True:</span><br><span class="line">        j &#x3D; yield i  # 拿到producer发来的数据</span><br><span class="line">        print(&#39;consume %s&#39; % j)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def producer(c):</span><br><span class="line">    next(c)</span><br><span class="line">    for i in range(5):</span><br><span class="line">        print(&#39;produce %s&#39; % i)</span><br><span class="line">        c.send(i)  # 发数据给consumer</span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c &#x3D; consumer()</span><br><span class="line">producer(c)</span><br><span class="line"></span><br><span class="line"># output</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">produce 0</span><br><span class="line">consume 0</span><br><span class="line">produce 1</span><br><span class="line">consume 1</span><br><span class="line">produce 2</span><br><span class="line">consume 2</span><br><span class="line">produce 3</span><br><span class="line">consume 3</span><br><span class="line">produce 4</span><br><span class="line">consume 4</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>整个程序执行流程如下：</p>
<ul>
<li><code>c = consumer()</code>创建一个生成器对象</li>
<li><code>producer(c)</code>开始执行代码，<code>next(c)</code>会启动生成器<code>consumer</code>直到代码运行到<code>j = yield i</code>处，此时<code>consumer</code>第一次执行完毕，返回</li>
<li><code>producer</code>函数继续向下执行，直到<code>c.send(i)</code>，利用生成器的<code>send</code>方法，向<code>consumer</code>发送数据</li>
<li><code>consumer</code>函数被唤醒，从<code>j = yield i</code>处开始执行，并接收<code>producer</code>传来的数据赋值给j，然后打印输出，直到再次执行到<code>yield</code>处，返回</li>
<li><code>producer</code>继续执行循环，执行上面的过程，逐个发送数据给<code>cosnumer</code>，直到循环结束</li>
<li>最终<code>c.close()</code>关闭<code>consumer</code>生成器，程序退出<br>在上面的代码中我们发现，程序运行时，在<code>producer</code>和<code>consumer</code>这2个函数之间来回切换执行，完成了生产任务、消费任务的场景，而且整个程序运行在单进程单线程下。<br>这其中的原理就是利用了生成器的<code>yield</code>关键字以及生成器的<code>next</code>和<code>send</code>方法。<br>这么做的好处在于：</li>
<li>整个程序运行过程中无锁，编程复杂度降低</li>
<li>程序在函数之间来回切换，是在用户态下进行的，不像进程/线程切换陷入内核状态，没有内核态的上下文切换，损耗更小，执行效率更高</li>
</ul>
<p>Python的生成器实现了协程的编程方式，为程序的并发执行提供了编程基础。<br>Python的很多第三方包都是基于这一特性进行封装的，例如<code>gevent、tornado</code>，它们都大大提高了程序的运行效率。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章主要讲了Python中生成器与<code>yield</code>的相关知识，总结如下：</p>
<ul>
<li>生成器在生成很大的列表的场景，能够节省内存空间的占用</li>
<li>在复杂逻辑块生成列表元素时，使用<code>yield</code>能极大简化代码结构</li>
<li>生成器的特性为Python的并发编程模型——协程，提供了编程基础</li>
</ul>
<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="http://kaito-kidd.com/2018/05/21/python-advance-yield/" target="_blank" rel="noopener">原文参考</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python代码一行实现并行</title>
    <url>/2020/04/23/Python%E4%BB%A3%E7%A0%81%E4%B8%80%E8%A1%8C%E5%AE%9E%E7%8E%B0%E5%B9%B6%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="Python代码一行实现并行"><a href="#Python代码一行实现并行" class="headerlink" title="Python代码一行实现并行"></a>Python代码一行实现并行</h2><blockquote>
<p>Python 在程序并行化方面多少有些声名狼藉。撇开技术上的问题，例如线程的实现和 GIL，我觉得错误的教学指导才是主要问题。常见的经典 Python 多线程、多进程教程多显得偏”重”。而且往往隔靴搔痒，没有深入探讨日常工作中最有用的内容。</p>
</blockquote>
<h3 id="传统的例子"><a href="#传统的例子" class="headerlink" title="传统的例子"></a>传统的例子</h3><p>简单搜索下”Python 多线程教程”，不难发现几乎所有的教程都给出涉及类和队列的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os </span><br><span class="line">import PIL </span><br><span class="line"></span><br><span class="line">from multiprocessing import Pool </span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">SIZE &#x3D; (75,75)</span><br><span class="line">SAVE_DIRECTORY &#x3D; &#39;thumbs&#39;</span><br><span class="line"></span><br><span class="line">def get_image_paths(folder):</span><br><span class="line">    return (os.path.join(folder, f) </span><br><span class="line">            for f in os.listdir(folder) </span><br><span class="line">            if &#39;jpeg&#39; in f)</span><br><span class="line"></span><br><span class="line">def create_thumbnail(filename): </span><br><span class="line">    im &#x3D; Image.open(filename)</span><br><span class="line">    im.thumbnail(SIZE, Image.ANTIALIAS)</span><br><span class="line">    base, fname &#x3D; os.path.split(filename) </span><br><span class="line">    save_path &#x3D; os.path.join(base, SAVE_DIRECTORY, fname)</span><br><span class="line">    im.save(save_path)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    folder &#x3D; os.path.abspath(</span><br><span class="line">        &#39;11_18_2013_R000_IQM_Big_Sur_Mon__e10d1958e7b766c3e840&#39;)</span><br><span class="line">    os.mkdir(os.path.join(folder, SAVE_DIRECTORY))</span><br><span class="line"></span><br><span class="line">    images &#x3D; get_image_paths(folder)</span><br><span class="line"></span><br><span class="line">    pool &#x3D; Pool()</span><br><span class="line">    pool.map(creat_thumbnail, images)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure>
<p>哈，看起来有些像 Java 不是吗？<br>我并不是说使用生产者/消费者模型处理多线程/多进程任务是错误的（事实上，这一模型自有其用武之地）。只是，处理日常脚本任务时我们可以使用更有效率的模型。</p>
<h3 id="问题在于…"><a href="#问题在于…" class="headerlink" title="问题在于…"></a>问题在于…</h3><p>首先，你需要一个样板类；<br>其次，你需要一个队列来传递对象；<br>而且，你还需要在通道两端都构建相应的方法来协助其工作(如果需想要进行双向通信或是保存结果还需要再引入一个队列)</p>
<h3 id="worker-越多，问题越多"><a href="#worker-越多，问题越多" class="headerlink" title="worker 越多，问题越多"></a>worker 越多，问题越多</h3><p>按照这一思路，你现在需要一个 worker 线程的线程池。下面是一篇 IBM 经典教程中的例子——在进行网页检索时通过多线程进行加速。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Example2.py</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">A more realistic thread pool example </span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">import time </span><br><span class="line">import threading </span><br><span class="line">import Queue </span><br><span class="line">import urllib2 </span><br><span class="line"></span><br><span class="line">class Consumer(threading.Thread): </span><br><span class="line">    def __init__(self, queue): </span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self._queue &#x3D; queue </span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        while True: </span><br><span class="line">            content &#x3D; self._queue.get() </span><br><span class="line">            if isinstance(content, str) and content &#x3D;&#x3D; &#39;quit&#39;:</span><br><span class="line">                break</span><br><span class="line">            response &#x3D; urllib2.urlopen(content)</span><br><span class="line">        print &#39;Bye byes!&#39;</span><br><span class="line"></span><br><span class="line">def Producer():</span><br><span class="line">    urls &#x3D; [</span><br><span class="line">        &#39;http:&#x2F;&#x2F;www.python.org&#39;, &#39;http:&#x2F;&#x2F;www.yahoo.com&#39;</span><br><span class="line">        &#39;http:&#x2F;&#x2F;www.scala.org&#39;, &#39;http:&#x2F;&#x2F;www.google.com&#39;</span><br><span class="line">        # etc.. </span><br><span class="line">    ]</span><br><span class="line">    queue &#x3D; Queue.Queue()</span><br><span class="line">    worker_threads &#x3D; build_worker_pool(queue, 4)</span><br><span class="line">    start_time &#x3D; time.time()</span><br><span class="line"></span><br><span class="line">    # Add the urls to process</span><br><span class="line">    for url in urls: </span><br><span class="line">        queue.put(url)  </span><br><span class="line">    # Add the poison pillv</span><br><span class="line">    for worker in worker_threads:</span><br><span class="line">        queue.put(&#39;quit&#39;)</span><br><span class="line">    for worker in worker_threads:</span><br><span class="line">        worker.join()</span><br><span class="line"></span><br><span class="line">    print &#39;Done! Time taken: &#123;&#125;&#39;.format(time.time() - start_time)</span><br><span class="line"></span><br><span class="line">def build_worker_pool(queue, size):</span><br><span class="line">    workers &#x3D; []</span><br><span class="line">    for _ in range(size):</span><br><span class="line">        worker &#x3D; Consumer(queue)</span><br><span class="line">        worker.start() </span><br><span class="line">        workers.append(worker)</span><br><span class="line">    return workers</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    Producer()</span><br></pre></td></tr></table></figure>
<p>这段代码能正确的运行，但仔细看看我们需要做些什么：构造不同的方法、追踪一系列的线程，还有为了解决恼人的死锁问题，我们需要进行一系列的 join 操作。这还只是开始……<br>至此我们回顾了经典的多线程教程，多少有些空洞不是吗？样板化而且易出错，这样事倍功半的风格显然不那么适合日常使用，好在我们还有更好的方法。</p>
<h3 id="何不试试-map"><a href="#何不试试-map" class="headerlink" title="何不试试 map"></a>何不试试 map</h3><p>map 这一小巧精致的函数是简捷实现 Python 程序并行化的关键。map 源于 Lisp 这类函数式编程语言。它可以通过一个序列实现两个函数之间的映射。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urls &#x3D; [&#39;http:&#x2F;&#x2F;www.yahoo.com&#39;, &#39;http:&#x2F;&#x2F;www.reddit.com&#39;]</span><br><span class="line">results &#x3D; map(urllib2.urlopen, urls)</span><br></pre></td></tr></table></figure>
<p>上面的这两行代码将urls这一序列中的每个元素作为参数传递到urlopen方法中，并将所有结果保存到results这一列表中。其结果大致相当于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">results &#x3D; []</span><br><span class="line">for url in urls: </span><br><span class="line">    results.append(urllib2.urlopen(url))</span><br></pre></td></tr></table></figure>
<p>map 函数一手包办了序列操作、参数传递和结果保存等一系列的操作。<br>为什么这很重要呢？这是因为借助正确的库，map可以轻松实现并行化操作。<br><img src="https://mmbiz.qpic.cn/mmbiz_png/MQ4FoG1HmnIy074cLZKEl2OBicGelE08V6PYrOCazDyYtRWuqibrpXSUjTOeibBzy9icztOcR9Ptibf8xxpvp1KE21Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="map-image"></p>
<p>在 Python 中有个两个库包含了 map 函数： multiprocessing 和它鲜为人知的子库 multiprocessing.dummy.</p>
<ol>
<li>扯两句： multiprocessing.dummy？ mltiprocessing 库的线程版克隆？这是虾米？即便在 multiprocessing 库的官方文档里关于这一子库也只有一句相关描述。而这句描述译成人话基本就是说:”嘛，有这么个东西，你知道就成.”相信我，这个库被严重低估了！</li>
<li>my 是 multiprocessing 模块的完整克隆，唯一的不同在于 multiprocessing 作用于进程，而 dummy 模块作用于线程（因此也包括了 Python 所有常见的多线程限制）。 </li>
<li>换使用这两个库异常容易。你可以针对 IO 密集型任务和 CPU 密集型任务来选择不同的库。</li>
</ol>
<h3 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h3><p>使用下面的两行代码来引用包含并行化 map 函数的库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from multiprocessing import Pool</span><br><span class="line">from multiprocessing.dummy import Pool as ThreadPool</span><br></pre></td></tr></table></figure>
<p>实例化Pool对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pool &#x3D; ThreadPool()</span><br></pre></td></tr></table></figure>
<p>这条简单的语句替代了 example2.py 中 buildworkerpool 函数 7 行代码的工作。它生成了一系列的 worker 线程并完成初始化工作、将它们储存在变量中以方便访问。</p>
<p>Pool 对象有一些参数，这里我所需要关注的只是它的第一个参数：processes. 这一参数用于设定线程池中的线程数。其默认值为当前机器 CPU 的核数。</p>
<p>一般来说，执行 CPU 密集型任务时，调用越多的核速度就越快。但是当处理网络密集型任务时，事情有有些难以预计了，通过实验来确定线程池的大小才是明智的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pool &#x3D; ThreadPool(4) # Sets the pool size to 4</span><br></pre></td></tr></table></figure>
<p>线程数过多时，切换线程所消耗的时间甚至会超过实际工作时间。对于不同的工作，通过尝试来找到线程池大小的最优值是个不错的主意。<br>创建好 Pool 对象后，并行化的程序便呼之欲出了。我们来看看改写后的<code>xample2.py</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib2 </span><br><span class="line">from multiprocessing.dummy import Pool as ThreadPool </span><br><span class="line"></span><br><span class="line">urls &#x3D; [</span><br><span class="line">    &#39;http:&#x2F;&#x2F;www.python.org&#39;, </span><br><span class="line">    &#39;http:&#x2F;&#x2F;www.python.org&#x2F;about&#x2F;&#39;,</span><br><span class="line">    &#39;http:&#x2F;&#x2F;www.onlamp.com&#x2F;pub&#x2F;a&#x2F;python&#x2F;2003&#x2F;04&#x2F;17&#x2F;metaclasses.html&#39;,</span><br><span class="line">    &#39;http:&#x2F;&#x2F;www.python.org&#x2F;doc&#x2F;&#39;,</span><br><span class="line">    &#39;http:&#x2F;&#x2F;www.python.org&#x2F;download&#x2F;&#39;,</span><br><span class="line">    &#39;http:&#x2F;&#x2F;www.python.org&#x2F;getit&#x2F;&#39;,</span><br><span class="line">    &#39;http:&#x2F;&#x2F;www.python.org&#x2F;community&#x2F;&#39;,</span><br><span class="line">    &#39;https:&#x2F;&#x2F;wiki.python.org&#x2F;moin&#x2F;&#39;,</span><br><span class="line">    &#39;http:&#x2F;&#x2F;planet.python.org&#x2F;&#39;,</span><br><span class="line">    &#39;https:&#x2F;&#x2F;wiki.python.org&#x2F;moin&#x2F;LocalUserGroups&#39;,</span><br><span class="line">    &#39;http:&#x2F;&#x2F;www.python.org&#x2F;psf&#x2F;&#39;,</span><br><span class="line">    &#39;http:&#x2F;&#x2F;docs.python.org&#x2F;devguide&#x2F;&#39;,</span><br><span class="line">    &#39;http:&#x2F;&#x2F;www.python.org&#x2F;community&#x2F;awards&#x2F;&#39;</span><br><span class="line">    # etc.. </span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"># Make the Pool of workers</span><br><span class="line">pool &#x3D; ThreadPool(4) </span><br><span class="line"># Open the urls in their own threads</span><br><span class="line"># and return the results</span><br><span class="line">results &#x3D; pool.map(urllib2.urlopen, urls)</span><br><span class="line">#close the pool and wait for the work to finish </span><br><span class="line">pool.close() </span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure>
<p>实际起作用的代码只有4行，其中只有一行是关键的。map 函数轻而易举的取代了前文中超过 40 行的例子。为了更有趣一些，我统计了不同方法、不同线程池大小的耗时情况。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># results &#x3D; [] </span><br><span class="line"># for url in urls:</span><br><span class="line">#   result &#x3D; urllib2.urlopen(url)</span><br><span class="line">#   results.append(result)</span><br><span class="line"></span><br><span class="line"># # ------- VERSUS ------- # </span><br><span class="line"></span><br><span class="line"># # ------- 4 Pool ------- # </span><br><span class="line"># pool &#x3D; ThreadPool(4) </span><br><span class="line"># results &#x3D; pool.map(urllib2.urlopen, urls)</span><br><span class="line"></span><br><span class="line"># # ------- 8 Pool ------- # </span><br><span class="line"></span><br><span class="line"># pool &#x3D; ThreadPool(8) </span><br><span class="line"># results &#x3D; pool.map(urllib2.urlopen, urls)</span><br><span class="line"></span><br><span class="line"># # ------- 13 Pool ------- # </span><br><span class="line"></span><br><span class="line"># pool &#x3D; ThreadPool(13) </span><br><span class="line"># results &#x3D; pool.map(urllib2.urlopen, urls)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#        Single thread:  14.4 Seconds </span><br><span class="line">#               4 Pool:   3.1 Seconds</span><br><span class="line">#               8 Pool:   1.4 Seconds</span><br><span class="line">#              13 Pool:   1.3 Seconds</span><br></pre></td></tr></table></figure>
<p>很棒的结果不是吗？这一结果也说明了为什么要通过实验来确定线程池的大小。在我的机器上当线程池大小大于 9 带来的收益就十分有限了。</p>
<h3 id="另一个真实的例子"><a href="#另一个真实的例子" class="headerlink" title="另一个真实的例子"></a>另一个真实的例子</h3><p>生成上千张图片的缩略图<br>这是一个 CPU 密集型的任务，并且十分适合进行并行化。</p>
<h4 id="基础单进程版本"><a href="#基础单进程版本" class="headerlink" title="基础单进程版本"></a>基础单进程版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os </span><br><span class="line">import PIL </span><br><span class="line"></span><br><span class="line">from multiprocessing import Pool </span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">SIZE &#x3D; (75,75)</span><br><span class="line">SAVE_DIRECTORY &#x3D; &#39;thumbs&#39;</span><br><span class="line"></span><br><span class="line">def get_image_paths(folder):</span><br><span class="line">    return (os.path.join(folder, f) </span><br><span class="line">            for f in os.listdir(folder) </span><br><span class="line">            if &#39;jpeg&#39; in f)</span><br><span class="line"></span><br><span class="line">def create_thumbnail(filename): </span><br><span class="line">    im &#x3D; Image.open(filename)</span><br><span class="line">    im.thumbnail(SIZE, Image.ANTIALIAS)</span><br><span class="line">    base, fname &#x3D; os.path.split(filename) </span><br><span class="line">    save_path &#x3D; os.path.join(base, SAVE_DIRECTORY, fname)</span><br><span class="line">    im.save(save_path)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    folder &#x3D; os.path.abspath(</span><br><span class="line">        &#39;11_18_2013_R000_IQM_Big_Sur_Mon__e10d1958e7b766c3e840&#39;)</span><br><span class="line">    os.mkdir(os.path.join(folder, SAVE_DIRECTORY))</span><br><span class="line"></span><br><span class="line">    images &#x3D; get_image_paths(folder)</span><br><span class="line"></span><br><span class="line">    for image in images:</span><br><span class="line">        create_thumbnail(Image)</span><br></pre></td></tr></table></figure>

<p>上边这段代码的主要工作就是将遍历传入的文件夹中的图片文件，一一生成缩略图，并将这些缩略图保存到特定文件夹中。<br>这我的机器上，用这一程序处理 6000 张图片需要花费 27.9 秒。<br>如果我们使用 map 函数来代替 for 循环：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os </span><br><span class="line">import PIL </span><br><span class="line"></span><br><span class="line">from multiprocessing import Pool </span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">SIZE &#x3D; (75,75)</span><br><span class="line">SAVE_DIRECTORY &#x3D; &#39;thumbs&#39;</span><br><span class="line"></span><br><span class="line">def get_image_paths(folder):</span><br><span class="line">    return (os.path.join(folder, f) </span><br><span class="line">            for f in os.listdir(folder) </span><br><span class="line">            if &#39;jpeg&#39; in f)</span><br><span class="line"></span><br><span class="line">def create_thumbnail(filename): </span><br><span class="line">    im &#x3D; Image.open(filename)</span><br><span class="line">    im.thumbnail(SIZE, Image.ANTIALIAS)</span><br><span class="line">    base, fname &#x3D; os.path.split(filename) </span><br><span class="line">    save_path &#x3D; os.path.join(base, SAVE_DIRECTORY, fname)</span><br><span class="line">    im.save(save_path)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    folder &#x3D; os.path.abspath(</span><br><span class="line">        &#39;11_18_2013_R000_IQM_Big_Sur_Mon__e10d1958e7b766c3e840&#39;)</span><br><span class="line">    os.mkdir(os.path.join(folder, SAVE_DIRECTORY))</span><br><span class="line"></span><br><span class="line">    images &#x3D; get_image_paths(folder)</span><br><span class="line"></span><br><span class="line">    pool &#x3D; Pool()</span><br><span class="line">    pool.map(creat_thumbnail, images)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure>
<p>5.6 秒！<br>虽然只改动了几行代码，我们却明显提高了程序的执行速度。在生产环境中，我们可以为 CPU 密集型任务和 IO 密集型任务分别选择多进程和多线程库来进一步提高执行速度——这也是解决死锁问题的良方。此外，由于 map 函数并不支持手动线程管理，反而使得相关的 debug 工作也变得异常简单。<br>到这里，我们就实现了（基本）通过一行 Python 实现并行化。</p>
<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="https://mp.weixin.qq.com/s/LMlq2BSUJwkF-xQ4UkgkUg" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之禅</title>
    <url>/2020/04/23/Python%E4%B9%8B%E7%A6%85/</url>
    <content><![CDATA[<h2 id="Python之禅"><a href="#Python之禅" class="headerlink" title="Python之禅"></a>Python之禅</h2><blockquote>
<p>在Python交互式解释器中输 入import this就会显示Tim Peters的The Zen of python</p>
</blockquote>
<p><img src="https://pic4.zhimg.com/v2-3c27b47e4d5ef618a86252b39bb6db94_1200x500.jpg" alt="python"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import this</span><br><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful is better than ugly.</span><br><span class="line">Explicit is better than implicit.</span><br><span class="line">Simple is better than complex.</span><br><span class="line">Complex is better than complicated.</span><br><span class="line">Flat is better than nested.</span><br><span class="line">Sparse is better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren&#39;t special enough to break the rules.</span><br><span class="line">Although practicality beats purity.</span><br><span class="line">Errors should never pass silently.</span><br><span class="line">Unless explicitly silenced.</span><br><span class="line">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="line">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="line">Although that way may not be obvious at first unless you&#39;re Dutch.</span><br><span class="line">Now is better than never.</span><br><span class="line">Although never is often better than *right* now.</span><br><span class="line">If the implementation is hard to explain, it&#39;s a bad idea.</span><br><span class="line">If the implementation is easy to explain, it may be a good idea.</span><br><span class="line">Namespaces are one honking great idea -- let&#39;s do more of those!</span><br></pre></td></tr></table></figure>
<p>翻译和解释:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python之禅 by Tim Peters</span><br><span class="line"></span><br><span class="line">优美胜于丑陋（Python 以编写优美的代码为目标）</span><br><span class="line">明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</span><br><span class="line">简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</span><br><span class="line">复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</span><br><span class="line">扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</span><br><span class="line">间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</span><br><span class="line">可读性很重要（优美的代码是可读的）</span><br><span class="line">即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</span><br><span class="line">不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）</span><br><span class="line">当存在多种可能，不要尝试去猜测</span><br><span class="line">而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</span><br><span class="line">虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）</span><br><span class="line">做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</span><br><span class="line">如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</span><br><span class="line">命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python合并两个字典成一个新字典的几种方法分析比较</title>
    <url>/2020/04/23/Python%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E5%AD%97%E5%85%B8%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%B0%E5%AD%97%E5%85%B8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%E5%88%86%E6%9E%90%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<h2 id="Python合并两个字典成一个新字典的几种方法分析比较"><a href="#Python合并两个字典成一个新字典的几种方法分析比较" class="headerlink" title="Python合并两个字典成一个新字典的几种方法分析比较"></a>Python合并两个字典成一个新字典的几种方法分析比较</h2><p>两个字典如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d1 &#x3D; &#123;&#39;name&#39; : &#39;revotu&#39;, &#39;age&#39; : 99&#125;</span><br><span class="line">&gt;&gt;&gt; d2 &#x3D; &#123;&#39;age&#39; : 24, &#39;sex&#39; : &#39;male&#39;&#125;</span><br></pre></td></tr></table></figure>
<p>合并后的结果如下（即，key相同时后面字典值覆盖前面字典）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;&#39;sex&#39;: &#39;male&#39;, &#39;name&#39;: &#39;revotu&#39;, &#39;age&#39;: 24&#125;</span><br></pre></td></tr></table></figure>
<p>首先，说明字典并不支持+加法运算：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d1 + d2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unsupported operand type(s) for +: &#39;dict&#39; and &#39;dict&#39;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>现总结如下几种方法以及简要分析比较。</p>
<ol>
<li><p>多次更新<br>下面是最简单的合并字典的方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; &#123;&#125;</span><br><span class="line">&gt;&gt;&gt; d.update(d1)</span><br><span class="line">&gt;&gt;&gt; d.update(d2)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>首先创建一个空字典，并使用update方法向字典中添加元素。注意，先添加的是d1，以保证后面添加的d2重复键会覆盖d1。<br>此方法满足了我们的要求，而且清晰明确，可是三行代码总感觉不够Pythonic。</p>
</blockquote>
</li>
<li><p>先复制，后更新<br>先复制d1字典创建一个新字典，然后使用d2来更新前面创建的新字典。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; d1.copy()</span><br><span class="line">&gt;&gt;&gt; d.update(d2)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对比方法一，这种复制d1的方法，更明显的表现出d1作为默认值。</p>
</blockquote>
</li>
<li><p>字典构造器<br>还可以使用字典的构造器dict()复制字典，然后再更新：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; dict(d1)</span><br><span class="line">&gt;&gt;&gt; d.update(d2)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>与方法二很相似，但是没有方法二直接明了。</p>
</blockquote>
</li>
<li><p>关键字参数hack<br>你可能见过下面这个巧妙的解决办法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; dict(d1 , **d2)</span><br></pre></td></tr></table></figure>
<p>只有一行代码，看上去很酷，但是有一个问题，这种hack技巧只有在字典的键是字符串时才有效。</p>
<blockquote>
<p>看上去很cool，但是不通用，字典的键必须是字符串才可以用这种关键字参数方法。</p>
</blockquote>
</li>
<li><p>字典推导式<br>可以用字典推导式解决此问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; &#123;k:v for d in [d1, d2] for k,v in d.items()&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>字典推导式方法满足要求，只是嵌套的字典推导式，不那么清晰，不易于理解。</p>
</blockquote>
</li>
<li><p>元素拼接<br>我们从每个字典中获取一个元素列表，将列表拼接起来，然后再用拼接的列表构造字典：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; dict(list(d1.items()) + list(d2.items()))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>而且，d2的元素在列表后面，所以在键重复时可以覆盖d1。如果在Python2中，items()方法本身返回的就是列表，无需用list()转成列表。</p>
</blockquote>
</li>
</ol>
<p>元素拼接在构造字典可以满足要求，只是看上去代码有些重复。</p>
<ol start="7">
<li><p>元素并集<br>在Python3中，字典返回的是视图对象，键的视图对象是一个类似集合的对象，如果字典中的值可以保证是唯一的可哈希的，此时items返回的视图对象也是一个类似集合的对象：</p>
<figure class="highlight plain"><figcaption><span>d </span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; 这种方法挺有意思，可是并不准确，因为集合是无序的，键重复时不能保证谁覆盖谁，而且字典中的值通常也是不可哈希的，当然也就不能返回一个类似集合的对象。</span><br><span class="line"></span><br><span class="line">8. chain items</span><br><span class="line">目前为止，我们讨论的解决方案中，最符合Python语言习惯而且只有一行代码实现的，是创建两个items的列表，然后拼接成字典。</span><br><span class="line">我们可以用itertools.chain来简化items拼接过程：</span><br><span class="line">&#96;&#96;&#96;&gt;&gt;&gt; d &#x3D; dict(chain(d1.items(), d2.items()))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种方案很不错，可能比另外创建两个不必要的列表更高效。</p>
</blockquote>
</li>
<li><p>ChainMap<br>collections.ChainMap可以将多个字典或映射，在逻辑上将它们合并为一个单独的映射结构：</p>
<figure class="highlight plain"><figcaption><span>from collections import ChainMap</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; dict(ChainMap(d1, d2))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种方法也很pythonic，而且也是通用方法。</p>
</blockquote>
</li>
<li><p>字典拆分<br>在Python3.5+中，可以使用一种全新的字典合并方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; &#123;**d1, **d2&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这行代码很pythonic，如果是你的python版本是3.5+，用这种方法是很不错的选择。</p>
</blockquote>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面说了十种可以合并两个字典成一个新字典的方式，具体用哪个取决于你。<br>如果使用的是Python3.5+的版本，那么字典拆分这种新语法应该很适合你：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d &#x3D; &#123;**d1, **d2&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://www.revotu.com/python-merge-two-dicts-into-one-dict.html#more" target="_blank" rel="noopener">原文博客</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python高效编程技巧18个</title>
    <url>/2020/04/23/Python%E9%AB%98%E6%95%88%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A718%E4%B8%AA/</url>
    <content><![CDATA[<h2 id="Python高效编程技巧18个"><a href="#Python高效编程技巧18个" class="headerlink" title="Python高效编程技巧18个"></a>Python高效编程技巧18个</h2><p>初识Python语言，觉得python满足了我上学时候对编程语言的所有要求.</p>
<ol>
<li><p>交换变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a&#x3D;3</span><br><span class="line">&gt;&gt;&gt;b&#x3D;6</span><br></pre></td></tr></table></figure>
<p>这个情况如果要交换变量在c++中，肯定需要一个空变量。但是python不需要，只需一行，大家看清楚了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a,b&#x3D;b,a</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;print(a)</span><br><span class="line">&gt;&gt;&gt;6</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;ptint(b)</span><br><span class="line">&gt;&gt;&gt;5</span><br></pre></td></tr></table></figure></li>
<li><p>字典推导(Dictionary comprehensions)和集合推导(Set comprehensions)</p>
<blockquote>
<p>大多数的Python程序员都知道且使用过列表推导(list comprehensions)。如果你对list comprehensions概念不是很熟悉——一个list comprehension就是一个更简短、简洁的创建一个list的方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; some_list &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; another_list &#x3D; [ x + 1 for x in some_list ]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; another_list</span><br><span class="line">[2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure>
<p>自从python 3.1 起，我们可以用同样的语法来创建集合和字典表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; # Set Comprehensions</span><br><span class="line">&gt;&gt;&gt; some_list &#x3D; [1, 2, 3, 4, 5, 2, 5, 1, 4, 8]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; even_set &#x3D; &#123; x for x in some_list if x % 2 &#x3D;&#x3D; 0 &#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; even_set</span><br><span class="line">set([8, 2, 4])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; # Dict Comprehensions</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d &#x3D; &#123; x: x % 2 &#x3D;&#x3D; 0 for x in range(1, 11) &#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;1: False, 2: True, 3: False, 4: True, 5: False, 6: True, 7: False, 8: True, 9: False, 10: True&#125;</span><br></pre></td></tr></table></figure>
<p>在第一个例子里，我们以some_list为基础，创建了一个具有不重复元素的集合，而且集合里只包含偶数。而在字典表的例子里，我们创建了一个key是不重复的1到10之间的整数，value是布尔型，用来指示key是否是偶数。<br>这里另外一个值得注意的事情是集合的字面量表示法。我们可以简单的用这种方法创建一个集合：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; my_set &#x3D; &#123;1, 2, 1, 2, 3, 4&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; my_set</span><br><span class="line">set([1, 2, 3, 4])</span><br></pre></td></tr></table></figure>
<p>而不需要使用内置函数set()。</p>
</li>
<li><p>计数时使用Counter计数对象<br>这听起来显而易见，但经常被人忘记。对于大多数程序员来说，数一个东西是一项很常见的任务，而且在大多数情况下并不是很有挑战性的事情——这里有几种方法能更简单的完成这种任务。<br>Python的collections类库里有个内置的dict类的子类，是专门来干这种事情的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Counter</span><br><span class="line">&gt;&gt;&gt; c &#x3D; Counter(&#39;hello world&#39;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">Counter(&#123;&#39;l&#39;: 3, &#39;o&#39;: 2, &#39; &#39;: 1, &#39;e&#39;: 1, &#39;d&#39;: 1, &#39;h&#39;: 1, &#39;r&#39;: 1, &#39;w&#39;: 1&#125;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; c.most_common(2)</span><br><span class="line">[(&#39;l&#39;, 3), (&#39;o&#39;, 2)]</span><br></pre></td></tr></table></figure></li>
<li><p>漂亮的打印出JSON<br>JSON是一种非常好的数据序列化的形式，被如今的各种API和web service大量的使用。使用python内置的json处理，可以使JSON串具有一定的可读性，但当遇到大型数据时，它表现成一个很长的、连续的一行时，人的肉眼就很难观看了。<br>为了能让JSON数据表现的更友好，我们可以使用indent参数来输出漂亮的JSON。当在控制台交互式编程或做日志时，这尤其有用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import json</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(json.dumps(data))  # No indention</span><br><span class="line">&#123;&quot;status&quot;: &quot;OK&quot;, &quot;count&quot;: 2, &quot;results&quot;: [&#123;&quot;age&quot;: 27, &quot;name&quot;: &quot;Oz&quot;, &quot;lactose_intolerant&quot;: true&#125;, &#123;&quot;age&quot;: 29, &quot;name&quot;: &quot;Joe&quot;, &quot;lactose_intolerant&quot;: false&#125;]&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(json.dumps(data, indent&#x3D;2))  # With indention</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;OK&quot;,</span><br><span class="line">  &quot;count&quot;: 2,</span><br><span class="line">  &quot;results&quot;: [</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: 27,</span><br><span class="line">      &quot;name&quot;: &quot;Oz&quot;,</span><br><span class="line"></span><br><span class="line">      &quot;lactose_intolerant&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: 29,</span><br><span class="line"></span><br><span class="line">      &quot;name&quot;: &quot;Joe&quot;,</span><br><span class="line">      &quot;lactose_intolerant&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样，使用内置的pprint模块，也可以让其它任何东西打印输出的更漂亮。</p>
</li>
<li><p>解决FizzBuzz<br>前段时间Jeff Atwood 推广了一个简单的编程练习叫FizzBuzz，问题引用如下：</p>
<blockquote>
<p>写一个程序，打印数字1到100，3的倍数打印“Fizz”来替换这个数，5的倍数打印“Buzz”，对于既是3的倍数又是5的倍数的数字打印“FizzBuzz”。<br>这里就是一个简短的，有意思的方法解决这个问题：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for x in range(1,101):</span><br><span class="line">    print&quot;fizz&quot;[x%3*len(&#39;fizz&#39;)::]+&quot;buzz&quot;[x%5*len(&#39;buzz&#39;)::] or x</span><br></pre></td></tr></table></figure></li>
<li><p>if 语句在行内</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print &quot;Hello&quot; if True else &quot;World&quot;</span><br><span class="line">&gt;&gt;&gt; Hello</span><br></pre></td></tr></table></figure></li>
<li><p>连接<br>下面的最后一种方式在绑定两个不同类型的对象时显得很cool。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nfc &#x3D; [&quot;Packers&quot;, &quot;49ers&quot;]</span><br><span class="line">afc &#x3D; [&quot;Ravens&quot;, &quot;Patriots&quot;]</span><br><span class="line">print nfc + afc</span><br><span class="line">&gt;&gt;&gt; [&#39;Packers&#39;, &#39;49ers&#39;, &#39;Ravens&#39;, &#39;Patriots&#39;]</span><br><span class="line"></span><br><span class="line">print str(1) + &quot; world&quot;</span><br><span class="line">&gt;&gt;&gt; 1 world</span><br><span class="line"></span><br><span class="line">print &#96;1&#96; + &quot; world&quot;</span><br><span class="line">&gt;&gt;&gt; 1 world</span><br><span class="line"></span><br><span class="line">print 1, &quot;world&quot;</span><br><span class="line">&gt;&gt;&gt; 1 world</span><br><span class="line">print nfc, 1</span><br><span class="line">&gt;&gt;&gt; [&#39;Packers&#39;, &#39;49ers&#39;] 1</span><br></pre></td></tr></table></figure></li>
<li><p>数值比较</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x3D; 2</span><br><span class="line">if 3 &gt; x &gt; 1:</span><br><span class="line">   print x</span><br><span class="line">&gt;&gt;&gt; 2</span><br><span class="line">if 1 &lt; x &gt; 0:</span><br><span class="line">   print x</span><br><span class="line">&gt;&gt;&gt; 2</span><br></pre></td></tr></table></figure></li>
<li><p>同时迭代两个列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nfc &#x3D; [&quot;Packers&quot;, &quot;49ers&quot;]</span><br><span class="line">afc &#x3D; [&quot;Ravens&quot;, &quot;Patriots&quot;]</span><br><span class="line">for teama, teamb in zip(nfc, afc):</span><br><span class="line">     print teama + &quot; vs. &quot; + teamb</span><br><span class="line">&gt;&gt;&gt; Packers vs. Ravens</span><br><span class="line">&gt;&gt;&gt; 49ers vs. Patriots</span><br></pre></td></tr></table></figure></li>
<li><p>带索引的列表迭代</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">teams &#x3D; [&quot;Packers&quot;, &quot;49ers&quot;, &quot;Ravens&quot;, &quot;Patriots&quot;]</span><br><span class="line">for index, team in enumerate(teams):</span><br><span class="line">    print index, team</span><br><span class="line">&gt;&gt;&gt; 0 Packers</span><br><span class="line">&gt;&gt;&gt; 1 49ers</span><br><span class="line">&gt;&gt;&gt; 2 Ravens</span><br><span class="line">&gt;&gt;&gt; 3 Patriots</span><br></pre></td></tr></table></figure></li>
<li><p>列表推导式</p>
<blockquote>
<p>已知一个列表，我们可以刷选出偶数列表方法：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">numbers &#x3D; [1,2,3,4,5,6]</span><br><span class="line">even &#x3D; []</span><br><span class="line">for number in numbers:</span><br><span class="line">    if number%2 &#x3D;&#x3D; 0:</span><br><span class="line">        even.append(number)</span><br></pre></td></tr></table></figure>
<p>转变成如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">numbers &#x3D; [1,2,3,4,5,6]</span><br><span class="line">even &#x3D; [number for number in numbers if number%2 &#x3D;&#x3D; 0]</span><br></pre></td></tr></table></figure></li>
<li><p>字典推导<br>和列表推导类似，字典可以做同样的工作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">teams &#x3D; [&quot;Packers&quot;, &quot;49ers&quot;, &quot;Ravens&quot;, &quot;Patriots&quot;]</span><br><span class="line">print &#123;key: value for value, key in enumerate(teams)&#125;</span><br><span class="line">&gt;&gt;&gt; &#123;&#39;49ers&#39;: 1, &#39;Ravens&#39;: 2, &#39;Patriots&#39;: 3, &#39;Packers&#39;: 0&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>初始化列表的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">items &#x3D; [0]*3</span><br><span class="line">print items</span><br><span class="line">&gt;&gt;&gt; [0,0,0]</span><br></pre></td></tr></table></figure></li>
<li><p>列表转换为字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">teams &#x3D; [&quot;Packers&quot;, &quot;49ers&quot;, &quot;Ravens&quot;, &quot;Patriots&quot;]</span><br><span class="line">print &quot;, &quot;.join(teams)</span><br><span class="line">&gt;&gt;&gt; &#39;Packers, 49ers, Ravens, Patriots&#39;</span><br></pre></td></tr></table></figure></li>
<li><p>从字典中获取元素<br>我承认try/except代码并不雅致，不过这里有一种简单方法，尝试在字典中查找key，如果没有找到对应的alue将用第二个参数设为其变量值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data &#x3D; &#123;&#39;user&#39;: 1, &#39;name&#39;: &#39;Max&#39;, &#39;three&#39;: 4&#125;</span><br><span class="line">try:</span><br><span class="line">   is_admin &#x3D; data[&#39;admin&#39;]</span><br><span class="line">except KeyError:</span><br><span class="line">   is_admin &#x3D; False</span><br></pre></td></tr></table></figure>
<p>替换成这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data &#x3D; &#123;&#39;user&#39;: 1, &#39;name&#39;: &#39;Max&#39;, &#39;three&#39;: 4&#125;</span><br><span class="line">is_admin &#x3D; data.get(&#39;admin&#39;, False)</span><br></pre></td></tr></table></figure></li>
<li><p>获取列表的子集<br>有时，你只需要列表中的部分元素，这里是一些获取列表子集的方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x3D; [1,2,3,4,5,6]</span><br><span class="line">#前3个</span><br><span class="line">print x[:3]</span><br><span class="line">&gt;&gt;&gt; [1,2,3]</span><br><span class="line">#中间4个</span><br><span class="line">print x[1:5]</span><br><span class="line">&gt;&gt;&gt; [2,3,4,5]</span><br><span class="line">#最后3个</span><br><span class="line">print x[3:]</span><br><span class="line">&gt;&gt;&gt; [4,5,6]</span><br><span class="line">#奇数项</span><br><span class="line">print x[::2]</span><br><span class="line">&gt;&gt;&gt; [1,3,5]</span><br><span class="line">#偶数项</span><br><span class="line">print x[1::2]</span><br><span class="line">&gt;&gt;&gt; [2,4,6]</span><br></pre></td></tr></table></figure>
<p>除了python内置的数据类型外，在collection模块同样还包括一些特别的用例，在有些场合Counter非常实用。如果你参加过在这一年的Facebook HackerCup，你甚至也能找到他的实用之处。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import Counter</span><br><span class="line">print Counter(&quot;hello&quot;)</span><br><span class="line">&gt;&gt;&gt; Counter(&#123;&#39;l&#39;: 2, &#39;h&#39;: 1, &#39;e&#39;: 1, &#39;o&#39;: 1&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>迭代工具<br>和collections库一样，还有一个库叫itertools，对某些问题真能高效地解决。其中一个用例是查找所有组合，他能告诉你在一个组中元素的所有不能的组合方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from itertools import combinations</span><br><span class="line">teams &#x3D; [&quot;Packers&quot;, &quot;49ers&quot;, &quot;Ravens&quot;, &quot;Patriots&quot;]</span><br><span class="line">for game in combinations(teams, 2):</span><br><span class="line">    print game</span><br><span class="line">&gt;&gt;&gt; (&#39;Packers&#39;, &#39;49ers&#39;)</span><br><span class="line">&gt;&gt;&gt; (&#39;Packers&#39;, &#39;Ravens&#39;)</span><br><span class="line">&gt;&gt;&gt; (&#39;Packers&#39;, &#39;Patriots&#39;)</span><br><span class="line">&gt;&gt;&gt; (&#39;49ers&#39;, &#39;Ravens&#39;)</span><br><span class="line">&gt;&gt;&gt; (&#39;49ers&#39;, &#39;Patriots&#39;)</span><br><span class="line">&gt;&gt;&gt; (&#39;Ravens&#39;, &#39;Patriots&#39;)</span><br></pre></td></tr></table></figure></li>
<li><p>False == True<br>比起实用技术来说这是一个很有趣的事，在python中，True和False是全局变量，因此：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">False &#x3D; True</span><br><span class="line">if False:</span><br><span class="line">   print &quot;Hello&quot;</span><br><span class="line">else:</span><br><span class="line">   print &quot;World&quot;</span><br><span class="line">&gt;&gt;&gt; Hello</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="https://mp.weixin.qq.com/s/sIbOR71lqXxEA6ul9nt4Ag" target="_blank" rel="noopener">18个Python高效编程技巧！</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>Python面向对象入门教程</title>
    <url>/2020/04/23/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="Python面向对象入门教程"><a href="#Python面向对象入门教程" class="headerlink" title="Python面向对象入门教程"></a>Python面向对象入门教程</h2><blockquote>
<p>面向对象编程和函数式编程（面向过程编程）都是程序设计的方法，不过稍有区别</p>
</blockquote>
<h3 id="面向过程与面向对象编程区别"><a href="#面向过程与面向对象编程区别" class="headerlink" title="面向过程与面向对象编程区别"></a>面向过程与面向对象编程区别</h3><ol>
<li>面向过程编程:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 导入各种外部库</span><br><span class="line">2. 设计各种全局变量</span><br><span class="line">3. 写一个函数完成某个功能</span><br><span class="line">4. 写一个函数完成某个功能</span><br><span class="line">5. 写一个函数完成某个功能</span><br><span class="line">6. 写一个函数完成某个功能</span><br><span class="line">7. 写一个函数完成某个功能</span><br><span class="line">8. ......</span><br><span class="line">9. 写一个main函数作为程序入口</span><br></pre></td></tr></table></figure>
在多函数程序中，许多重要的数据被放置在全局数据区，这样它们可以被所有的函数访问。每个函数都可以具有它们自己的局部数据，将某些功能代码封装到函数中，日后便无需重复编写，仅调用函数即可。从代码的组织形式来看就是根据业务逻辑从上到下垒代码,程序从上到下顺序执行.</li>
<li>面向对象编程:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 导入各种外部库</span><br><span class="line">2. 设计各种全局变量</span><br><span class="line">3. 决定你要的类</span><br><span class="line">4. 给每个类提供完整的一组操作</span><br><span class="line">5. 明确地使用继承来表现不同类之间的共同点</span><br><span class="line">6. 根据需要，决定是否写一个main函数作为程序入口</span><br></pre></td></tr></table></figure>
面向对象编程中，将函数和变量进一步封装成类，类才是程序的基本元素，它将数据和操作紧密地连结在一起，并保护数据不会被外界的函数意外地改变。类和和类的实例(也称对象)是面向对象的核心概念，是和面向过程编程、函数式编程的根本区别。</li>
</ol>
<p>⚠️ 并不是非要用面向对象编程，要看你的程序怎么设计方便，但是就目前来说，基本上都是在使用面向对象编程。</p>
<h3 id="类的基本用法"><a href="#类的基本用法" class="headerlink" title="类的基本用法"></a>类的基本用法</h3><p>面向对象是通过定义class类来定义，这么说面向对象编程就是只使用class类，在class类中有封装，继承的功能，并且还可以构造要传入的参数，方便控制。</p>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">class studetn:</span><br><span class="line">    # 定义一个类名为studetn</span><br><span class="line">    def __init__(self,idx):</span><br><span class="line">    # 定义初始化构造，这里使用init，还有别的属性比如reversed，iter之类的</span><br><span class="line">        self.idx&#x3D;idx</span><br><span class="line">        self.age &#x3D; 18</span><br><span class="line">        # 初始化变量，方便继承</span><br><span class="line">        </span><br><span class="line">    def runx(self):</span><br><span class="line">    # 定义运行函数，从上面继承变量</span><br><span class="line">        print(self.idx)</span><br><span class="line">        time.sleep(1)</span><br><span class="line"></span><br><span class="line"># 这是类的调用，一定要记得类的使用方法，首先传入参数，类赋值给一个变量a</span><br><span class="line"># 然后调用这个类下面定义的函数        </span><br><span class="line">a&#x3D;studetn(&#39;a&#39;)</span><br><span class="line">a.runx()</span><br></pre></td></tr></table></figure>
<p>术语介绍:</p>
<ol>
<li>类(Class): 用来描述具有相同属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。其中的对象被称作类的实例。</li>
<li>实例：也称对象。通过类定义的初始化方法，赋予具体的值，成为一个”有血有肉的实体”。</li>
<li>实例化：创建类的实例的过程或操作。</li>
<li>实例变量：定义在实例中的变量，只作用于当前实例。</li>
<li>类变量：类变量是所有实例公有的变量。类变量定义在类中，但在方法体之外。</li>
<li>数据成员：类变量、实例变量、方法、类方法、静态方法和属性等的统称。</li>
<li>方法：类中定义的函数。</li>
<li>静态方法：不需要实例化就可以由类执行的方法</li>
<li>类方法：类方法是将类本身作为对象进行操作的方法。</li>
<li>方法重写：如果从父类继承的方法不能满足子类的需求，可以对父类的方法进行改写，这个过程也称override。</li>
<li>封装：将内部实现包裹起来，对外透明，提供api接口进行调用的机制</li>
<li>继承：即一个派生类(derived class)继承父类(base class)的变量和方法。</li>
<li>多态：根据对象类型的不同以不同的方式进行处理。</li>
</ol>
<h4 id="类与实例"><a href="#类与实例" class="headerlink" title="类与实例"></a>类与实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: shuke</span><br><span class="line">@file: ec2.py </span><br><span class="line">@time: 2019&#x2F;03&#x2F;14 10:52</span><br><span class="line">@contact: zhaofengfeng@wecash.net</span><br><span class="line">@software:  learn</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">class cc:</span><br><span class="line">    ccc &#x3D; &#39;ccc&#39;</span><br><span class="line">    # cc就是类名 如果想要继承别的类 就class cc(threading) 意思就是从threading继承</span><br><span class="line">    def __init__(self,a,b,c):</span><br><span class="line">        self.a&#x3D;a</span><br><span class="line">        self.b&#x3D;b</span><br><span class="line">        self.c&#x3D;c</span><br><span class="line">        # 定义构造的过程就是实例化</span><br><span class="line">    def runx(self):</span><br><span class="line">        print self.a*10</span><br><span class="line">        print self.b*5</span><br><span class="line">        print self.c*2</span><br><span class="line">    def runy(self):</span><br><span class="line">        print requests.get(&#39;http:&#x2F;&#x2F;www.langzi.fun&#39;).headers</span><br><span class="line">e &#x3D; cc(&#39;AAA&#39;,&#39;CCC&#39;,&#39;EEE&#39;)</span><br><span class="line">e.runx()</span><br><span class="line">e.runy()</span><br><span class="line"># 这两个就是调用类里面的方法</span><br><span class="line">print e.c</span><br><span class="line">#实例变量指的是实例本身拥有的变量。每个实例的变量在内存中都不一样。</span><br><span class="line">print e.ccc</span><br><span class="line">#类变量，在类里面找到定义的变量。</span><br></pre></td></tr></table></figure>
<h4 id="调用类的三种方法"><a href="#调用类的三种方法" class="headerlink" title="调用类的三种方法"></a>调用类的三种方法</h4><ol>
<li>实例方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">class dd:</span><br><span class="line">    def __init__(self,url):</span><br><span class="line">        self.url&#x3D;url</span><br><span class="line">    def runx(self):</span><br><span class="line">        print requests.get(self.url).status_code</span><br><span class="line"></span><br><span class="line">a &#x3D; dd(&#39;http:&#x2F;&#x2F;www.langzi.fun&#39;)</span><br><span class="line">a.runx()</span><br><span class="line"># 这种调用方法就是实例方法</span><br></pre></td></tr></table></figure></li>
<li>静态方法<blockquote>
<p>静态方法由类调用，无默认参数。将实例方法参数中的self去掉，然后在方法定义上方加上<code>@staticmethod</code>，就成为静态方法。它属于类，和实例无关。建议只使用类名.静态方法的调用方式。（虽然也可以使用实例名.静态方法的方式调用）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import requests</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&#39;utf-8&#39;)</span><br><span class="line">class ff:</span><br><span class="line">    @staticmethod</span><br><span class="line">    def runx():</span><br><span class="line">        print requests.get(&#39;http:&#x2F;&#x2F;www.langzi.fun&#39;).status_code</span><br><span class="line">ff.runx()</span><br><span class="line">#这里就直接调用了类的变量，只在类中运行而不在实例中运行的方法</span><br></pre></td></tr></table></figure>
经常有一些跟类有关系的功能但在运行时又不需要实例和类参与的情况下需要用到静态方法. 比如更改环境变量或者修改其他类的属性等能用到静态方法. 这种情况可以直接用函数解决, 但这样同样会扩散类内部的代码，造成维护困难。</li>
<li>类方法<blockquote>
<p>类方法由类调用，采用<code>@classmethod</code>装饰，至少传入一个cls（代指类本身，类似self）参数。执行类方法时，自动将调用该方法的类赋值给cls。建议只使用类名.类方法的调用方式。（虽然也可以使用实例名.类方法的方式调用）<br>如果要构造一个类，接受一个网站和这个网站的状态码，然后打印出来。就像这样：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import requests</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&#39;utf-8&#39;)</span><br><span class="line">class gg:</span><br><span class="line">    def __init__(self,url,stat):</span><br><span class="line">        self.url&#x3D;url</span><br><span class="line">        self.stat&#x3D;stat</span><br><span class="line">    def outer(self):</span><br><span class="line">        print self.url</span><br><span class="line">        print self.stat</span><br><span class="line">a &#x3D; gg(&#39;langzi&#39;,200)</span><br><span class="line">a.outer()</span><br></pre></td></tr></table></figure>
这样就是使用实例方法，虽然可以实现，但是有的时候传入的参数并不是(‘shuke’,200)这样的格式，而是(‘shuke-200’)这样的，那该怎么做？首先要把这个拆分，但是要使用实例方法实现起来很麻烦，这个时候就可以使用类方法。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import requests</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&#39;utf-8&#39;)</span><br><span class="line">class gg:</span><br><span class="line">    url &#x3D; 0</span><br><span class="line">    stat &#x3D; 0</span><br><span class="line">    # 因为使用classmethod后会传入新的变量，所以一开始是需要自己先定义类变量</span><br><span class="line">    def __init__(self,url&#x3D;0,stat&#x3D;0):</span><br><span class="line">    # 这里按照正常的定义构造函数</span><br><span class="line">        self.url&#x3D;url</span><br><span class="line">        self.stat&#x3D;stat</span><br><span class="line">    @classmethod</span><br><span class="line">    # 装饰器，立马执行下面的函数</span><br><span class="line">    def split(cls,info):</span><br><span class="line">        # 这个函数接受两个参数，默认的cls就是这个类的init函数，info就是外面传入进来的</span><br><span class="line">        url,stat&#x3D;map(str,info.split(&#39;-&#39;))</span><br><span class="line">        # 这里转换成了格式化的结构</span><br><span class="line">        data &#x3D; cls(url,stat)</span><br><span class="line">        # 然后执行这个类第一个方法，这个类构造函数需要传入两个参数，于是就传入了两个参数</span><br><span class="line">        return data</span><br><span class="line">        # 这里就直接返回了函数结果</span><br><span class="line">    def outer(self):</span><br><span class="line">        print self.url</span><br><span class="line">        print self.stat</span><br><span class="line"></span><br><span class="line">r &#x3D; gg.split((&#39;langzi-200&#39;))</span><br><span class="line">r.outer()</span><br><span class="line"># 这里是调用类方法，与调用实例方法一样</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="类的特性"><a href="#类的特性" class="headerlink" title="类的特性"></a>类的特性</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><blockquote>
<p>封装是指将数据与具体操作的实现代码放在某个对象内部，外部无法访问。必须要先调用类的方法才能启动。</p>
</blockquote>
<ol>
<li>Example<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class cc:</span><br><span class="line">    ccc &#x3D; &#39;ccc&#39;</span><br><span class="line">    # cc就是类名 如果想要继承别的类 就class cc(threading) 意思就是从threading继承</span><br><span class="line">    def __init__(self,a,b,c):</span><br><span class="line">        self.a&#x3D;a</span><br><span class="line">        self.b&#x3D;b</span><br><span class="line">        self.c&#x3D;c</span><br><span class="line">print e.ccc</span><br><span class="line">#类变量，在类里面找到定义的变量。</span><br><span class="line">print ccc</span><br><span class="line"># 这里会报错，这就是封装。类中的函数同理。</span><br></pre></td></tr></table></figure>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><blockquote>
<p>当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。<br>比如，我们已经编写了一个名为Animal的class，有一个run()方法可以直接打印：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Animal(object):</span><br><span class="line">    def run(self):</span><br><span class="line">        print &#39;Animal is running...&#39;</span><br></pre></td></tr></table></figure>
当我们需要编写Dog和Cat类时，就可以直接从Animal类继承：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Dog(Animal):</span><br><span class="line">    pass</span><br><span class="line">class Cat(Animal):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
继承有什么好处？最大的好处是子类获得了父类的全部功能。由于Animial实现了run()方法，因此，Dog和Cat作为它的子类，什么事也没干，就自动拥有了run()方法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dog &#x3D; Dog()</span><br><span class="line">dog.run()</span><br><span class="line">cat &#x3D; Cat()</span><br><span class="line">cat.run()</span><br></pre></td></tr></table></figure>
当子类和父类都存在相同的run()方法时，我们说，子类的run()覆盖了父类的run()，在代码运行的时候，总是会调用子类的run()。这样，我们就获得了继承的另一个好处: 多态。<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><blockquote>
<p>要理解多态的好处，我们还需要再编写一个函数，这个函数接受一个Animal类型的变量：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def run_twice(animal):</span><br><span class="line">    animal.run()</span><br><span class="line">    animal.run()</span><br></pre></td></tr></table></figure>
当我们传入Animal的实例时，run_twice()就打印出：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run_twice(Animal())</span><br><span class="line">运行结果：</span><br><span class="line">Animal is running...</span><br><span class="line">Animal is running...</span><br></pre></td></tr></table></figure>
当我们传入Dog的实例时，run_twice()就打印出:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run_twice(Dog())</span><br><span class="line">运行结果：</span><br><span class="line">Dog is running...</span><br><span class="line">Dog is running...</span><br></pre></td></tr></table></figure>
当我们传入Cat的实例时，run_twice()就打印出：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run_twice(Cat())</span><br><span class="line">运行结果：</span><br><span class="line">Cat is running...</span><br><span class="line">Cat is running...</span><br></pre></td></tr></table></figure>
看上去没啥意思，但是仔细想想，现在，如果我们再定义一个Tortoise类型，也从Animal派生：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Tortoise(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        print &#39;Tortoise is running slowly...&#39;</span><br></pre></td></tr></table></figure>
当我们调用run_twice()时，传入Tortoise的实例:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run_twice(Tortoise())</span><br><span class="line">运行结果：</span><br><span class="line">Tortoise is running slowly...</span><br><span class="line">Tortoise is running slowly...</span><br></pre></td></tr></table></figure></li>
<li>你会发现，新增一个Animal的子类，不必对run_twice()做任何修改，实际上，任何依赖Animal作为参数的函数或者方法都可以不加修改地正常运行，原因就在于多态。</li>
<li>多态的好处就是，当我们需要传入Dog、Cat、Tortoise……时，我们只需要接收Animal类型就可以了，因为Dog、Cat、Tortoise……都是Animal类型，然后，按照Animal类型进行操作即可。由于Animal类型有run()方法，因此，传入的任意类型，只要是Animal类或者子类，就会自动调用实际类型的run()方法，这就是多态的意思.</li>
<li>对于一个变量，我们只需要知道它是Animal类型，无需确切地知道它的子类型，就可以放心地调用run()方法，而具体调用的run()方法是作用在Animal、Dog、Cat还是Tortoise对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则</li>
</ol>
<ul>
<li>对扩展开放：允许新增Animal子类</li>
<li>对修改封闭：不需要修改依赖Animal类型的run_twice()等函数<br>⚠️ 总结: </li>
</ul>
<ol>
<li>继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写；</li>
<li>有了继承，才能有多态。在调用类实例方法的时候，尽量把变量视作父类类型，这样，所有子类类型都可以正常被接收；</li>
<li>旧的方式定义Python类允许不从object类继承，但这种编程方式已经严重不推荐使用。任何时候，如果没有合适的类可以继承，就继承自object类。</li>
</ol>
<h3 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h3><p>在上面有提到除了<strong>init</strong>之外还有iter,reverse的方法，这里就详细说下除了init初始化还有哪些别的方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__init__ :      构造函数，在生成对象时调用</span><br><span class="line">__del__ :       析构函数，释放对象时使用</span><br><span class="line">__repr__ :      打印，转换</span><br><span class="line">__setitem__ :   按照索引赋值</span><br><span class="line">__getitem__:    按照索引获取值</span><br><span class="line">__len__:        获得长度</span><br><span class="line">__cmp__:        比较运算</span><br><span class="line">__call__:       调用</span><br><span class="line">__add__:        加运算</span><br><span class="line">__sub__:        减运算</span><br><span class="line">__mul__:        乘运算</span><br><span class="line">__div__:        除运算</span><br><span class="line">__mod__:        求余运算</span><br><span class="line">__pow__:        幂</span><br><span class="line">__doc__:        文档和信息</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h4 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h4><ol>
<li><strong>doc</strong><br>说明性文档和信息。Python自建，无需自定义。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    &quot;&quot;&quot; 描述类信息，可被自动收集 &quot;&quot;&quot;</span><br><span class="line">    def func(self):</span><br><span class="line">        pass</span><br><span class="line"># 打印类的说明文档 </span><br><span class="line">print(Foo.__doc__)</span><br></pre></td></tr></table></figure></li>
<li><strong>init</strong>()<br>实例化方法，通过类创建实例时，自动触发执行。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; 18</span><br><span class="line">obj &#x3D; Foo(&#39;jack&#39;) # 自动执行类中的 __init__ 方法</span><br></pre></td></tr></table></figure></li>
<li><strong>module</strong> 和 <strong>class</strong><br>module 表示当前操作的对象在属于哪个模块。<br>class 表示当前操作的对象属于哪个类。<br>这两者也是Python内建，无需自定义。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    pass</span><br><span class="line">obj &#x3D; Foo()</span><br><span class="line">print(obj.__module__)</span><br><span class="line">print(obj.__class__)</span><br></pre></td></tr></table></figure></li>
<li><strong>del</strong>()<blockquote>
<p>析构方法，当对象在内存中被释放时，自动触发此方法。<br>注：此方法一般无须自定义，因为Python自带内存分配和释放机制，除非你需要在释放的时候指定做一些动作。析构函数的调用是由解释器在进行垃圾回收时自动触发执行的。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&quot;我被回收了！&quot;)</span><br><span class="line"></span><br><span class="line">obj &#x3D; Foo()</span><br><span class="line">del obj</span><br></pre></td></tr></table></figure></li>
<li><strong>call</strong>()<blockquote>
<p>构造方法的执行是由类加括号执行的，即：对象 = 类名()，而对于call() 方法，是由对象后加括号触发的，即：对象() 或者 类()()<br>如果为一个类编写了该方法，那么在该类的实例后面加括号，可会调用这个方法。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">    def __call__(self, *args, **kwargs):</span><br><span class="line">        print(&#39;__call__&#39;)</span><br><span class="line">obj &#x3D; Foo()     # 执行 __init__</span><br><span class="line">obj()       # 执行 __call__</span><br></pre></td></tr></table></figure>
可以用Python内建的callable()函数进行测试，判断一个对象是否可以被执行。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">callable(Student())</span><br><span class="line">运行结果：</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li>
<li><strong>dict</strong><br>列出类或对象中的所有成员！非常重要和有用的一个属性，Python自建，无需用户自己定义。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Province:</span><br><span class="line">    country &#x3D; &#39;China&#39;</span><br><span class="line">    def __init__(self, name, count):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.count &#x3D; count</span><br><span class="line">    def func(self, *args, **kwargs):</span><br><span class="line">        print（&#39;func&#39;）</span><br><span class="line"># 获取类的成员</span><br><span class="line">print(Province.__dict__)</span><br><span class="line"># 获取 对象obj1 的成员 </span><br><span class="line">obj1 &#x3D; Province(&#39;HeBei&#39;,10000)</span><br><span class="line">print(obj1.__dict__)</span><br><span class="line"># 获取 对象obj2 的成员 </span><br><span class="line">obj2 &#x3D; Province(&#39;HeNan&#39;, 3888)</span><br><span class="line">print(obj2.__dict__)</span><br></pre></td></tr></table></figure></li>
<li><strong>str</strong>()</li>
</ol>
<p>如果一个类中定义了str()方法，那么在打印对象时，默认输出该方法的返回值。这也是一个非常重要的方法，需要用户自己定义。　<br>下面的类，没有定义str()方法，打印结果是：&lt;main.Foo object at 0x32io4u2389572394885&gt;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    pass</span><br><span class="line">obj &#x3D; Foo()</span><br><span class="line">print(obj)</span><br><span class="line">定义了__str__()方法后，打印结果是：&#39;jack&#39;。</span><br><span class="line">class Foo:</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &#39;jack&#39;</span><br><span class="line">obj &#x3D; Foo()</span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure>
<ol start="8">
<li><strong>getitem</strong>()、<strong>setitem</strong>()、<strong>delitem</strong>()<br>取值、赋值、删除这”三剑客”的套路，在Python中，我们已经见过很多次了，比如前面的<code>@property</code>装饰器。<br>Python中，标识符后面加圆括号，通常代表执行或调用方法的意思。而在标识符后面加中括号[]，通常代表取值的意思。Python设计了<code>getitem()、setitem()、delitem()</code>这三个特殊成员，用于执行与中括号有关的动作。它们分别表示取值、赋值、删除数<br>也就是如下的操作：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 标识符[]　： 　　执行__getitem__方法</span><br><span class="line">标识符[] &#x3D; a  ： 　　执行__setitem__方法</span><br><span class="line">del 标识符[]　： 　　执行__delitem__方法</span><br></pre></td></tr></table></figure>
如果有一个类同时定义了这三个魔法方法，那么这个类的实例的行为看起来就像一个字典一样，如下例所示:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    def __getitem__(self, key):</span><br><span class="line">        print(&#39;__getitem__&#39;,key)</span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        print(&#39;__setitem__&#39;,key,value)</span><br><span class="line">    def __delitem__(self, key):</span><br><span class="line">        print(&#39;__delitem__&#39;,key)</span><br><span class="line">obj &#x3D; Foo()</span><br><span class="line">result &#x3D; obj[&#39;k1&#39;]      # 自动触发执行 __getitem__</span><br><span class="line">obj[&#39;k2&#39;] &#x3D; &#39;jack&#39;      # 自动触发执行 __setitem__</span><br><span class="line">del obj[&#39;k1&#39;]</span><br></pre></td></tr></table></figure></li>
<li><strong>iter</strong>()<blockquote>
<p>这是迭代器方法！列表、字典、元组之所以可以进行for循环，是因为其内部定义了 iter()这个方法。如果用户想让自定义的类的对象可以被迭代，那么就需要在类中定义这个方法，并且让该方法的返回值是一个可迭代的对象。当在代码中利用for循环遍历对象时，就会调用类的这个iter()方法。<br>普通的类：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    pass</span><br><span class="line">obj &#x3D; Foo()</span><br><span class="line">for i in obj:</span><br><span class="line">    print(i)</span><br><span class="line"># 报错：TypeError: &#39;Foo&#39; object is not iterable&lt;br&gt;# 原因是Foo对象不可迭代</span><br><span class="line">添加一个__iter__()，但什么都不返回：</span><br><span class="line">class Foo:</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        pass</span><br><span class="line">obj &#x3D; Foo()</span><br><span class="line">for i in obj:</span><br><span class="line">    print(i)</span><br><span class="line"># 报错：TypeError: iter() returned non-iterator of type &#39;NoneType&#39;</span><br><span class="line">#原因是 __iter__方法没有返回一个可迭代的对象</span><br></pre></td></tr></table></figure>
返回一个可迭代对象：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    def __init__(self, sq):</span><br><span class="line">        self.sq &#x3D; sq</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter(self.sq)</span><br><span class="line">obj &#x3D; Foo([11,22,33,44])</span><br><span class="line">for i in obj:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>
最好的方法是使用生成器：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        yield 1</span><br><span class="line">        yield 2</span><br><span class="line">        yield 3</span><br><span class="line">obj &#x3D; Foo()</span><br><span class="line">for i in obj:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li>
<li><strong>len</strong>()<blockquote>
<p>在Python中，如果你调用内置的len()函数试图获取一个对象的长度，在后台，其实是去调用该对象的len()方法，所以，下面的代码是等价的：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">len(&#39;ABC&#39;)</span><br><span class="line">3</span><br><span class="line">&#39;ABC&#39;.__len__()</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
Python的list、dict、str等内置数据类型都实现了该方法，但是你自定义的类要实现len方法需要好好设计。</li>
<li><strong>repr</strong>()<blockquote>
<p>这个方法的作用和str()很像，两者的区别是str()返回用户看到的字符串，而repr()返回程序开发者看到的字符串，也就是说，repr()是为调试服务的。通常两者代码一样。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &quot;this is %s&quot; % self.name</span><br><span class="line">    __repr__ &#x3D; __str__</span><br></pre></td></tr></table></figure></li>
<li><strong>add</strong>: 加运算 <strong>sub</strong>: 减运算 <strong>mul</strong>: 乘运算 <strong>div</strong>: 除运算 <strong>mod</strong>: 求余运算 <strong>pow</strong>: 幂运算<blockquote>
<p>这些都是算术运算方法，需要你自己为类设计具体运算代码。有些Python内置数据类型，比如int就带有这些方法。Python支持运算符的重载，也就是重写。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Vector:</span><br><span class="line">   def __init__(self, a, b):</span><br><span class="line">      self.a &#x3D; a</span><br><span class="line">      self.b &#x3D; b</span><br><span class="line">   def __str__(self):</span><br><span class="line">      return &#39;Vector (%d, %d)&#39; % (self.a, self.b)</span><br><span class="line">   def __add__(self,other):</span><br><span class="line">      return Vector(self.a + other.a, self.b + other.b)</span><br><span class="line">v1 &#x3D; Vector(2,10)</span><br><span class="line">v2 &#x3D; Vector(5,-2)</span><br><span class="line">print (v1 + v2)</span><br></pre></td></tr></table></figure></li>
<li><strong>author</strong>作者信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__author__ &#x3D; &quot;shuke&quot;</span><br><span class="line">def show():</span><br><span class="line">    print(__author__)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure></li>
<li><strong>slots</strong><blockquote>
<p>Python作为一种动态语言，可以在类定义完成和实例化后，给类或者对象继续添加随意个数或者任意类型的变量或方法，这是动态语言的特性。例如： </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def print_doc(self):</span><br><span class="line">    print(&quot;haha&quot;)</span><br><span class="line"></span><br><span class="line">class Foo:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">obj1 &#x3D; Foo()</span><br><span class="line">obj2 &#x3D; Foo()</span><br><span class="line"># 动态添加实例变量</span><br><span class="line">obj1.name &#x3D; &quot;jack&quot;</span><br><span class="line">obj2.age &#x3D; 18</span><br><span class="line"># 动态的给类添加实例方法</span><br><span class="line">Foo.show &#x3D; print_doc</span><br><span class="line">obj1.show()</span><br><span class="line">obj2.show()</span><br></pre></td></tr></table></figure>
但是！如果我想限制实例可以添加的变量怎么办？可以使slots限制实例的变量，比如，只允许Foo的实例添加name和age属性。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def print_doc(self):</span><br><span class="line">    print(&quot;haha&quot;)</span><br><span class="line">class Foo:</span><br><span class="line">    __slots__ &#x3D; (&quot;name&quot;, &quot;age&quot;)</span><br><span class="line">    pass</span><br><span class="line">obj1 &#x3D; Foo()</span><br><span class="line">obj2 &#x3D; Foo()</span><br><span class="line"># 动态添加实例变量</span><br><span class="line">obj1.name &#x3D; &quot;jack&quot;</span><br><span class="line">obj2.age &#x3D; 18</span><br><span class="line">obj1.sex &#x3D; &quot;male&quot;       # 这一句会弹出错误</span><br><span class="line"># 但是无法限制给类添加方法</span><br><span class="line">Foo.show &#x3D; print_doc</span><br><span class="line">obj1.show()</span><br><span class="line">obj2.show()</span><br><span class="line">由于&#39;sex&#39;不在__slots__的列表中，所以不能绑定sex属性，试图绑定sex将得到AttributeError的错误。</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;F:&#x2F;Python&#x2F;pycharm&#x2F;201705&#x2F;1.py&quot;, line 14, in &lt;module&gt;</span><br><span class="line">    obj1.sex &#x3D; &quot;male&quot;</span><br><span class="line">AttributeError: &#39;Foo&#39; object has no attribute &#39;sex&#39;</span><br></pre></td></tr></table></figure>
需要提醒的是，slots定义的属性仅对当前类的实例起作用，对继承了它的子类是不起作用的。想想也是这个道理，如果你继承一个父类，却莫名其妙发现有些变量无法定义，那不是大问题么？如果非要子类也被限制，除非在子类中也定义slots，这样，子类实例允许定义的属性就是自身的slots加上父类的slots。</li>
</ol>
<h3 id="成员保护与访问机制"><a href="#成员保护与访问机制" class="headerlink" title="成员保护与访问机制"></a>成员保护与访问机制</h3><p>有些对象你不想外部访问，即使是通过调用类对象也无法访问</p>
<h4 id="私有成员"><a href="#私有成员" class="headerlink" title="私有成员"></a>私有成员</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class obj:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line">    def pri(self):</span><br><span class="line">        print self.name</span><br><span class="line">    __age &#x3D; 18</span><br><span class="line">    # 加上双下划线的就是私有变量，只能在类的内部访问，外部无法访问</span><br><span class="line">a &#x3D; obj(&#39;zhao&#39;)</span><br><span class="line">a.pri()</span><br><span class="line"># output</span><br><span class="line">zhao</span><br></pre></td></tr></table></figure>
<p>如果要在类中调用这个私有成员，可以这么用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class obj:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line">    def prin(self):</span><br><span class="line">        print self.name</span><br><span class="line">    __age &#x3D; 18</span><br><span class="line">    # 加上双下划线的就是私有变量，只能在类的内部访问，外部无法访问</span><br><span class="line">    @classmethod</span><br><span class="line">    # 如果要在类中调用，首先调用类方法</span><br><span class="line">    def pri(cls):</span><br><span class="line">        print cls.__age</span><br><span class="line">        # 然后在使用</span><br><span class="line">a &#x3D; obj(&#39;zhao&#39;)</span><br><span class="line">a.prin()</span><br><span class="line">obj.pri()</span><br><span class="line"># 通过这样直接调用类中的私有变量</span><br><span class="line"># output</span><br><span class="line">zhao</span><br><span class="line">18</span><br></pre></td></tr></table></figure>
<h3 id="使用get-set-del方法操作私有成员"><a href="#使用get-set-del方法操作私有成员" class="headerlink" title="使用get-set-del方法操作私有成员"></a>使用get-set-del方法操作私有成员</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class obj:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line">    def prin(self):</span><br><span class="line">        print self.name</span><br><span class="line">    __age &#x3D; 18</span><br><span class="line">    # 加上双下划线的就是私有变量，只能在类的内部访问，外部无法访问</span><br><span class="line">    @classmethod</span><br><span class="line">    # 如果要在类中调用，首先调用类方法</span><br><span class="line">    def pri(cls):</span><br><span class="line">        print cls.__age</span><br><span class="line">        # 然后在使用</span><br><span class="line">    @classmethod</span><br><span class="line">    def set_age(cls,value):</span><br><span class="line">        cls.__age &#x3D; value</span><br><span class="line">        return cls.__age</span><br><span class="line">        # 这个用法就是改变__age的值</span><br><span class="line">    @classmethod</span><br><span class="line">    def get_age(cls):</span><br><span class="line">        return cls.__age</span><br><span class="line">        # 这个用法就是直接返回__age的值</span><br><span class="line">    @classmethod</span><br><span class="line">    def del_age(cls):</span><br><span class="line">        del cls.__age</span><br><span class="line">        # 这个用法就是直接删除__age的值</span><br><span class="line"></span><br><span class="line">print obj.get_age()</span><br><span class="line"># 这里是直接调用出__age的值  返回值18</span><br><span class="line">print obj.set_age(20)</span><br><span class="line"># 这里是直接改变__age的值  返回值20</span><br><span class="line">obj.del_age()</span><br><span class="line"># 这里是直接删除__age的值</span><br></pre></td></tr></table></figure>
<p>思考： 既然是私有变量，不让外部访问，为何有要在后面调用又改变呢？因为可以对私有变量进行额外的检测，处理，加工等等。比如判断value的值，使用isinstance然后做if-else判断。<br>使用私有变量可以对内部变量进行保护，外部无法改变，但是可以对它进行检测处理。<br>这里引申一下私有成员的保护机制，使用<code>_age</code>私有变量其实就是<code>obj._obj__age</code>样子进行保护，说白了你直接使用<code>bj._obj__age</code>可以直接调用内部私有变量age了。</p>
<h4 id="Propety装饰器"><a href="#Propety装饰器" class="headerlink" title="Propety装饰器"></a>Propety装饰器</h4><blockquote>
<p>把类的方法伪装成属性调用的方式，就是把类里面的一个函数，变成一个属性一样的东西~<br>一开始调用类的方法要使用圆括号，现在变成了属性进行读取设置存储。<br>举个例子来说明：</p>
</blockquote>
<ol>
<li>调用方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class obj:</span><br><span class="line">    def __init__(self,name,age):</span><br><span class="line">        self.__name&#x3D;name</span><br><span class="line">        self.__age&#x3D;age</span><br><span class="line">        # 讲这些设置成私有变量</span><br><span class="line">    def get_age(self):</span><br><span class="line">        return self.__age</span><br><span class="line">    def set_age(self,value):</span><br><span class="line">        if isinstance(value,int):</span><br><span class="line">            self.__age&#x3D;value</span><br><span class="line">        else:</span><br><span class="line">            raise ValueError(&#39;非整数类型&#39;)</span><br><span class="line">    def del_age(self):</span><br><span class="line">        print &#39;delete over&#39;</span><br><span class="line">a &#x3D; obj(&#39;langzi&#39;,18)</span><br><span class="line">print a.get_age()</span><br><span class="line">a.set_age(20)</span><br><span class="line">print a.get_age()</span><br></pre></td></tr></table></figure></li>
<li>使用装饰器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class obj:</span><br><span class="line">    def __init__(self,name,age):</span><br><span class="line">        self.__name&#x3D;name</span><br><span class="line">        self.__age&#x3D;age</span><br><span class="line">        # 把这些设置成私有变量</span><br><span class="line">    @property</span><br><span class="line">    def age(self):</span><br><span class="line">        return self.__age</span><br><span class="line">    @age.setter</span><br><span class="line">    def age(self,value):</span><br><span class="line">        if isinstance(value,int):</span><br><span class="line">            self.__age&#x3D;value</span><br><span class="line">        else:</span><br><span class="line">            raise ValueError(&#39;非整数类型&#39;)</span><br><span class="line">    @age.deleter</span><br><span class="line">    def age(self):</span><br><span class="line">        print &#39;delete over&#39;</span><br><span class="line">a &#x3D; obj(&#39;langzi&#39;,18)</span><br><span class="line"># 使用这些装饰器，可以使用类与对象的方法直接调用</span><br><span class="line">print a.age</span><br><span class="line"># 这里就是直接调用返回age的值</span><br><span class="line">a.age&#x3D;20</span><br><span class="line"># 这里就是直接使用setter把值转换</span><br><span class="line">print a.age</span><br><span class="line">del a.age</span><br><span class="line"># 删除age</span><br></pre></td></tr></table></figure>
当然这种调用方法有些麻烦，每次都是一个一个去实例类与对象，有个更加简单直观的方法。<h4 id="更加简便的使用property-函数"><a href="#更加简便的使用property-函数" class="headerlink" title="更加简便的使用property()函数"></a>更加简便的使用property()函数</h4><blockquote>
<p>装饰器的方式将一个方法伪装成属性外，Python内置的<code>uiltins</code>块中的<code>roperty()</code>数，为我们提供了第二种设置类属性的手段。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class People:</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.__name &#x3D; name</span><br><span class="line">        self.__age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def get_age(self):</span><br><span class="line">        return self.__age</span><br><span class="line"></span><br><span class="line">    def set_age(self, age):</span><br><span class="line">        if isinstance(age, int):</span><br><span class="line">            self.__age &#x3D; age</span><br><span class="line">        else:</span><br><span class="line">            raise ValueError</span><br><span class="line"></span><br><span class="line">    def del_age(self):</span><br><span class="line">        print(&quot;删除年龄数据！&quot;)</span><br><span class="line"></span><br><span class="line">    # 核心在这句</span><br><span class="line">    age &#x3D; property(get_age, set_age, del_age, &quot;年龄&quot;)    </span><br><span class="line"></span><br><span class="line">obj &#x3D; People(&quot;jack&quot;, 18)</span><br><span class="line">print(obj.age)</span><br><span class="line">obj.age &#x3D; 19</span><br><span class="line">print(&quot;obj.age:  &quot;, obj.age)</span><br><span class="line">del obj.ag</span><br></pre></td></tr></table></figure>
通过语句<code>ge = property(get_age, set_age, del_age, &quot;龄&quot;</code>一个方法伪装成为属性。其效果和装饰器的方法是一样的。<br>property()函数的参数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一个参数是方法名，调用 实例.属性 时自动执行的方法</span><br><span class="line">第二个参数是方法名，调用 实例.属性 ＝ XXX时自动执行的方法</span><br><span class="line">第三个参数是方法名，调用 del实例.属性 时自动执行的方法</span><br><span class="line">第四个参数是字符串，调用 实例.属性.__doc__时的描述信息。</span><br></pre></td></tr></table></figure>
在Django框架源码中有使用到此特性</li>
</ol>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>SFTP</title>
    <url>/2020/04/23/SFTP/</url>
    <content><![CDATA[<h2 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h2><p>服务器地址：10.40.14.26(内网)  47.94.162.132(公网)   域名：ftp.wecash.net</p>
<p>SFTP配置过程<br>   1 连接用户根据用户需求添加系统用户配置密码，例：</p>
<pre><code>useradd sftp_test

passwd sftp_test</code></pre><p>   2  将用户加入sftp-group组（已预先添加）</p>
<pre><code>usermod -a -G  sftp-group sftp_test</code></pre><p>   3 创建chroot目录，该目录为sftp用户登录的目录，权限为root，限制用户在此目录操作权限，并且创建用户的操作目录</p>
<pre><code>mkdir /data/sftp

mkdir /data/sftp/test 

授权操作目录

chown sftp_test:sftp-group /data/sftp/test</code></pre><p>4 配置ssh配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">Protocol 2</span><br><span class="line">Port 22</span><br><span class="line">AddressFamily any</span><br><span class="line">ListenAddress 0.0.0.0</span><br><span class="line">AllowGroups root</span><br><span class="line">AllowGroups yunwei deploy sftp-group</span><br><span class="line">AuthorizedKeysCommand &#x2F;usr&#x2F;bin&#x2F;sss_ssh_authorizedkeys</span><br><span class="line">AuthorizedKeysCommandUser root</span><br><span class="line">ChallengeResponseAuthentication yes</span><br><span class="line">LogLevel INFO</span><br><span class="line">PasswordAuthentication yes</span><br><span class="line">PermitEmptyPasswords no</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">Subsystem sftp-user &#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;sftp-server</span><br><span class="line">SyslogFacility AUTHPRIV</span><br><span class="line">UsePAM yes</span><br><span class="line">X11Forwarding yes</span><br><span class="line">Subsystem sftp &#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;sftp-server</span><br><span class="line">Match Group sftp-group</span><br><span class="line">ChrootDirectory &#x2F;data&#x2F;sftp</span><br><span class="line">AllowTcpForwarding no</span><br><span class="line">PermitTunnel no</span><br><span class="line">ForceCommand internal-sftp</span><br></pre></td></tr></table></figure>
<p>新增配置：<br>         AllowGroups yunwei deploy sftp-group<br>         Subsystem sftp /usr/lib/openssh/sftp-servers<br>         Match Group sftp-group<br>         ChrootDirectory /data/sftp<br>         AllowTcpForwarding no<br>         PermitTunnel no<br>         ForceCommand internal-sftp<br>    重启sshd服务</p>
<pre><code>连接方式： sftp sftp_test@10.40.14.26

使用ssh连接会提示仅用sftp连接：

        This service allows sftp connections only.

        Connection to 10.40.14.26 closed.</code></pre>]]></content>
      <categories>
        <category>SFTP</category>
      </categories>
      <tags>
        <tag>SFTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群部署</title>
    <url>/2020/04/23/Redis%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="Redis集群部署"><a href="#Redis集群部署" class="headerlink" title="Redis集群部署"></a>Redis集群部署</h2><h2 id="Redis集群部署-1"><a href="#Redis集群部署-1" class="headerlink" title="Redis集群部署"></a>Redis集群部署</h2><ol>
<li>编译安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;</span><br><span class="line"># wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.0.tar.gz</span><br><span class="line"># tar zxvf redis-5.0.0.tar.gz</span><br><span class="line"># apt-get update &amp;&amp; apt-get install -y gcc automake make</span><br><span class="line"># cd redis-5.0.0 &amp;&amp; make &amp;&amp; make install</span><br><span class="line"># cp .&#x2F;src&#x2F;redis-server &#x2F;usr&#x2F;bin&#x2F;</span><br><span class="line"># cp .&#x2F;src&#x2F;redis-cli &#x2F;usr&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>创建服务启停脚本(如果需要)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cp .&#x2F;utils&#x2F;redis_init_script &#x2F;etc&#x2F;init.d&#x2F;redisd</span><br><span class="line"># service redisd start</span><br></pre></td></tr></table></figure></li>
<li>创建目录及配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir &#x2F;tmp&#x2F;redis-cluster&#x2F;&#123;7000,7001,7002,7003,7004,7005&#125;&#x2F;log -pv</span><br><span class="line"># cp &#x2F;usr&#x2F;local&#x2F;src&#x2F;redis-5.0.0&#x2F;redis.conf &#x2F;data&#x2F;redis-cluster&#x2F;7000&#x2F;redis.conf</span><br><span class="line"># cd &#x2F;data&#x2F;redis-cluster&#x2F; &amp;&amp; cat 7000&#x2F;redis.conf</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode yes</span><br><span class="line">port 7000</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">daemonize yes</span><br><span class="line">supervised no</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_7000.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile &quot;&#x2F;data&#x2F;redis-cluster&#x2F;7000&#x2F;log&#x2F;redis-7000.log&quot;</span><br><span class="line">databases 16</span><br><span class="line">always-show-logo yes</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir .&#x2F;</span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line">replica-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">replica-priority 100</span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events &quot;&quot;</span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">dynamic-hz yes</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line">masterauth AuDdQdpuEZpXgNthP6CjYjPb</span><br><span class="line">requirepass AuDdQdpuEZpXgNthP6CjYjPb</span><br><span class="line">修改其他端口配置文件</span><br><span class="line"># cp 7000&#x2F;redis.conf 7001&#x2F;</span><br><span class="line"># cp 7000&#x2F;redis.conf 7002&#x2F;</span><br><span class="line"># cp 7000&#x2F;redis.conf 7003&#x2F;</span><br><span class="line"># cp 7000&#x2F;redis.conf 7004&#x2F;</span><br><span class="line"># cp 7000&#x2F;redis.conf 7005&#x2F;</span><br><span class="line"># sed -i &#39;s&#x2F;7000&#x2F;7001&#x2F;g&#39; 7001&#x2F;redis.conf</span><br><span class="line"># sed -i &#39;s&#x2F;7000&#x2F;7002&#x2F;g&#39; 7002&#x2F;redis.conf</span><br><span class="line"># sed -i &#39;s&#x2F;7000&#x2F;7003&#x2F;g&#39; 7003&#x2F;redis.conf</span><br><span class="line"># sed -i &#39;s&#x2F;7000&#x2F;7004&#x2F;g&#39; 7004&#x2F;redis.conf</span><br><span class="line"># sed -i &#39;s&#x2F;7000&#x2F;7005&#x2F;g&#39; 7005&#x2F;redis.conf</span><br></pre></td></tr></table></figure></li>
<li>调整下内存分配使用方式并使其生效<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#此参数可用的值为0,1,2 </span><br><span class="line">#0表示当用户空间请求更多的内存时，内核尝试估算出可用的内存 </span><br><span class="line">#1表示内核允许超量使用内存直到内存用完为止 </span><br><span class="line">#2表示整个内存地址空间不能超过swap+(vm.overcommit_ratio)%的RAM值 </span><br><span class="line">echo &quot;vm.overcommit_memory&#x3D;1&quot;&gt;&gt;&#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></li>
<li>制作启动脚本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat start-redis-cluster.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">cd &#x2F;data&#x2F;redis-cluster</span><br><span class="line"></span><br><span class="line">cd 7000 &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;redis-server &#x2F;data&#x2F;redis-cluster&#x2F;7000&#x2F;redis.conf</span><br><span class="line">cd ..&#x2F;7001 &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;redis-server &#x2F;data&#x2F;redis-cluster&#x2F;7001&#x2F;redis.conf</span><br><span class="line">cd ..&#x2F;7002 &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;redis-server &#x2F;data&#x2F;redis-cluster&#x2F;7002&#x2F;redis.conf</span><br><span class="line">cd ..&#x2F;7003 &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;redis-server &#x2F;data&#x2F;redis-cluster&#x2F;7003&#x2F;redis.conf</span><br><span class="line">cd ..&#x2F;7004 &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;redis-server &#x2F;data&#x2F;redis-cluster&#x2F;7004&#x2F;redis.conf</span><br><span class="line">cd ..&#x2F;7005 &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;redis-server &#x2F;data&#x2F;redis-cluster&#x2F;7005&#x2F;redis.conf</span><br></pre></td></tr></table></figure></li>
<li>启动服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># bash start-redis-cluster.sh</span><br><span class="line"># ps -ef|grep redis</span><br><span class="line">root     30192     1  0 06:54 ?        00:00:04 &#x2F;usr&#x2F;bin&#x2F;redis-server 0.0.0.0:7000 [cluster]</span><br><span class="line">root     30194     1  0 06:54 ?        00:00:05 &#x2F;usr&#x2F;bin&#x2F;redis-server 0.0.0.0:7001 [cluster]</span><br><span class="line">root     30196     1  0 06:54 ?        00:00:04 &#x2F;usr&#x2F;bin&#x2F;redis-server 0.0.0.0:7002 [cluster]</span><br><span class="line">root     30201     1  0 06:54 ?        00:00:04 &#x2F;usr&#x2F;bin&#x2F;redis-server 0.0.0.0:7003 [cluster]</span><br><span class="line">root     30206     1  0 06:54 ?        00:00:05 &#x2F;usr&#x2F;bin&#x2F;redis-server 0.0.0.0:7004 [cluster]</span><br><span class="line">root     30211     1  0 06:54 ?        00:00:04 &#x2F;usr&#x2F;bin&#x2F;redis-server 0.0.0.0:7005 [cluster]</span><br></pre></td></tr></table></figure></li>
<li>创建集群<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># redis-cli --cluster create 10.20.71.215:7000 10.20.73.204:7001 10.20.71.67:7002 10.20.71.215:7003 10.20.73.204:7004 10.20.71.67:7005 --cluster-replicas 1 -a AuDdQdpuEZpXgNthP6CjYjPb</span><br></pre></td></tr></table></figure></li>
<li>查看集群信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-t001:&#x2F;usr&#x2F;local&#x2F;src&#x2F;redis-5.0.0# redis-cli -c -p 7000</span><br><span class="line">127.0.0.1:7000&gt; auth AuDdQdpuEZpXgNthP6CjYjPb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7000&gt; cluster nodes</span><br><span class="line">ab8eeb87cc65dd14d03b8ac1b1e8cf7956cec1f5 10.20.71.67:7005@17005 slave 113373eeb8450caf99f8bef80f7cf5e8be41f370 0 1556958626898 6 connected</span><br><span class="line">387497dd41e34c90f4ccfa5909e2c63987d2f0d6 10.20.71.67:7002@17002 master - 0 1556958624893 3 connected 10923-16383</span><br><span class="line">356ac5e0988889a793c055b99c1abff6579ba322 10.20.73.204:7004@17004 slave 387497dd41e34c90f4ccfa5909e2c63987d2f0d6 0 1556958625000 5 connected</span><br><span class="line">3c1d7c057ac1d325fcf63895ae52733242abc72b 10.20.73.204:7001@17001 master - 0 1556958625000 2 connected 5461-10922</span><br><span class="line">113373eeb8450caf99f8bef80f7cf5e8be41f370 10.20.71.215:7000@17000 myself,master - 0 1556958625000 1 connected 0-5460</span><br><span class="line">54c72a2901af3dd72cbbb816bd6c5283eec6eec9 10.20.71.215:7003@17003 slave 3c1d7c057ac1d325fcf63895ae52733242abc72b 0 1556958625894 4 connected</span><br></pre></td></tr></table></figure>
控制台信息显示: 当前集群中存在3个主节点和3个从节点，说明我们的集群已经搭建成功<br>至此，Redis Cluster集群就搭建完成了!</li>
<li>测试数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-t001:~# redis-cli -h 10.20.73.204 -p 7001</span><br><span class="line">10.20.73.204:7001&gt; auth AuDdQdpuEZpXgNthP6CjYjPb</span><br><span class="line">OK</span><br><span class="line">10.20.73.204:7001&gt;</span><br><span class="line">10.20.73.204:7001&gt;</span><br><span class="line">10.20.73.204:7001&gt;</span><br><span class="line">10.20.73.204:7001&gt; set name shuke</span><br><span class="line">OK</span><br><span class="line">10.20.73.204:7001&gt;</span><br><span class="line">10.20.73.204:7001&gt;</span><br><span class="line">10.20.73.204:7001&gt;</span><br><span class="line">10.20.73.204:7001&gt; get name</span><br><span class="line">&quot;shuke&quot;</span><br></pre></td></tr></table></figure></li>
<li>cluster saveconfig<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将节点的配置文件保存到硬盘里面.</span><br><span class="line">试一下：</span><br><span class="line">127.0.0.1:7009&gt; cluster saveconfig</span><br><span class="line">OK</span><br><span class="line">ok说明成功了,它会覆盖配置文件夹里的nodes.conf文件.这样做是为了某种情况下nodes文件丢失,这样就会生成一个最新的节点配置文件。</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>Tips :</p>
<ol>
<li>如果想重新创建集群，需要登录到每个节点，执行flushdb，然后执行cluster reset，重启节点;</li>
</ol>
<h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><p><a href="http://www.redis.cn/topics/cluster-tutorial.html" target="_blank" rel="noopener">Redis 集群教程</a><br><a href="http://blog.huangz.me/2018/redis-cluster-manage-cheatsheet.html" target="_blank" rel="noopener">集群管理常见操作</a><br><a href="https://www.zybuluo.com/phper/note/205009" target="_blank" rel="noopener">常用命令</a></p>
<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="https://hoxis.github.io/redis-sentinel-ha.html" target="_blank" rel="noopener">Redis 高可用部署方案</a><br><a href="https://wizardforcel.gitbooks.io/redis-doc/content/doc/9.html" target="_blank" rel="noopener">Redis集群规范</a></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim命令合集</title>
    <url>/2020/04/23/Vim%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h2 id="Vim命令合集"><a href="#Vim命令合集" class="headerlink" title="Vim命令合集"></a>Vim命令合集</h2><h3 id="命令历史"><a href="#命令历史" class="headerlink" title="命令历史"></a>命令历史</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">以:和&#x2F;开头的命令都有历史纪录，可以首先键入:或&#x2F;然后按上下箭头来选择某个历史命令。</span><br></pre></td></tr></table></figure>

<h3 id="启动vim"><a href="#启动vim" class="headerlink" title="启动vim"></a>启动vim</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在命令行窗口中输入以下命令即可</span><br><span class="line"></span><br><span class="line">vim 直接启动vim</span><br><span class="line"></span><br><span class="line">vim filename 打开vim并创建名为filename的文件</span><br></pre></td></tr></table></figure>

<h3 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开单个文件</span><br><span class="line">vim file</span><br><span class="line"></span><br><span class="line">同时打开多个文件</span><br><span class="line">vim file1 file2 file3 …</span><br><span class="line"></span><br><span class="line">在vim窗口中打开一个新文件</span><br><span class="line">:open file</span><br><span class="line"></span><br><span class="line">在新窗口中打开文件</span><br><span class="line">:split file</span><br><span class="line"></span><br><span class="line">切换到下一个文件</span><br><span class="line">:bn</span><br><span class="line"></span><br><span class="line">切换到上一个文件</span><br><span class="line">:bp</span><br><span class="line"></span><br><span class="line">查看当前打开的文件列表，当前正在编辑的文件会用[]括起来。</span><br><span class="line">:args</span><br><span class="line"></span><br><span class="line">### 打开远程文件，比如ftp或者share folder</span><br><span class="line">:e ftp:&#x2F;&#x2F;192.168.10.76&#x2F;abc.txt</span><br><span class="line">:e \\qadrive\test\1.txt</span><br></pre></td></tr></table></figure>

<h3 id="vim的模式"><a href="#vim的模式" class="headerlink" title="vim的模式"></a>vim的模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正常模式（按Esc或Ctrl+[进入） 左下角显示文件名或为空</span><br><span class="line"></span><br><span class="line">插入模式（按i键进入） 左下角显示–INSERT–</span><br><span class="line"></span><br><span class="line">可视模式（不知道如何进入） 左下角显示–VISUAL–</span><br></pre></td></tr></table></figure>

<h3 id="导航命令"><a href="#导航命令" class="headerlink" title="导航命令"></a>导航命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% 括号匹配</span><br></pre></td></tr></table></figure>

<h3 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i 在当前位置生前插入</span><br><span class="line"></span><br><span class="line">I 在当前行首插入</span><br><span class="line"></span><br><span class="line">a 在当前位置后插入</span><br><span class="line"></span><br><span class="line">A 在当前行尾插入</span><br><span class="line"></span><br><span class="line">o 在当前行之后插入一行</span><br><span class="line"></span><br><span class="line">O 在当前行之前插入一行</span><br></pre></td></tr></table></figure>

<h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;text　　查找text，按n健查找下一个，按N健查找前一个</span><br><span class="line"></span><br><span class="line">?text　　查找text，反向查找，按n健查找下一个，按N健查找前一个。</span><br><span class="line"></span><br><span class="line">vim中有一些特殊字符在查找时需要转义　　.*[]^%&#x2F;?~$</span><br><span class="line"></span><br><span class="line">:set ignorecase　　忽略大小写的查找</span><br><span class="line"></span><br><span class="line">:set noignorecase　　不忽略大小写的查找</span><br><span class="line"></span><br><span class="line">查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于&#x2F;搜索。而#命令相当于?搜索。</span><br><span class="line"></span><br><span class="line">:set hlsearch　　高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。</span><br><span class="line">:set nohlsearch　　关闭高亮搜索显示</span><br><span class="line">:nohlsearch　　关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。</span><br><span class="line">:set incsearch　　逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。</span><br><span class="line">:set wrapscan　　重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。</span><br></pre></td></tr></table></figure>

<h3 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ra 将当前字符替换为a，当期字符即光标所在字符。</span><br><span class="line"></span><br><span class="line">s&#x2F;old&#x2F;new&#x2F; 用old替换new，替换当前行的第一个匹配</span><br><span class="line"></span><br><span class="line">s&#x2F;old&#x2F;new&#x2F;g 用old替换new，替换当前行的所有匹配</span><br><span class="line"></span><br><span class="line">%s&#x2F;old&#x2F;new&#x2F; 用old替换new，替换所有行的第一个匹配</span><br><span class="line"></span><br><span class="line">%s&#x2F;old&#x2F;new&#x2F;g 用old替换new，替换整个文件的所有匹配</span><br><span class="line"></span><br><span class="line">:10,20 s&#x2F;^&#x2F;    &#x2F;g 在第10行知第20行每行前面加四个空格，用于缩进。</span><br><span class="line"></span><br><span class="line">ddp 交换光标所在行和其下紧邻的一行。</span><br></pre></td></tr></table></figure>

<h3 id="移动命令"><a href="#移动命令" class="headerlink" title="移动命令"></a>移动命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- h 左移一个字符</span><br><span class="line">- l 右移一个字符，这个命令很少用，一般用w代替。</span><br><span class="line">- k 上移一个字符</span><br><span class="line">- j 下移一个字符</span><br><span class="line"></span><br><span class="line">以上四个命令可以配合数字使用，比如20j就是向下移动20行，5h就是向左移动5个字符，在Vim中，很多命令都可以配合数字使用，比如删除10个字符10x，在当前位置后插入3个！，3a！&lt;Esc&gt;，这里的Esc是必须的，否则命令不生效。</span><br><span class="line"></span><br><span class="line">w 向前移动一个单词（光标停在单词首部），如果已到行尾，则转至下一行行首。此命令快，可以代替l命令。</span><br><span class="line"></span><br><span class="line">b 向后移动一个单词 2b 向后移动2个单词</span><br><span class="line"></span><br><span class="line">e，同w，只不过是光标停在单词尾部</span><br><span class="line"></span><br><span class="line">ge，同b，光标停在单词尾部。</span><br><span class="line"></span><br><span class="line">^ 移动到本行第一个非空白字符上。</span><br><span class="line"></span><br><span class="line">0（数字0）移动到本行第一个字符上，</span><br><span class="line"></span><br><span class="line">&lt;HOME&gt; 移动到本行第一个字符。同0健。</span><br><span class="line"></span><br><span class="line">$ 移动到行尾 3$ 移动到下面3行的行尾</span><br><span class="line"></span><br><span class="line">gg 移动到文件头。 &#x3D; [[</span><br><span class="line"></span><br><span class="line">G（shift + g） 移动到文件尾。 &#x3D; ]]</span><br><span class="line"></span><br><span class="line">f（find）命令也可以用于移动，fx将找到光标后第一个为x的字符，3fd将找到第三个为d的字符。</span><br><span class="line"></span><br><span class="line">F 同f，反向查找。</span><br><span class="line"></span><br><span class="line">跳到指定行，冒号+行号，回车，比如跳到240行就是 :240回车。另一个方法是行号+G，比如230G跳到230行。</span><br><span class="line"></span><br><span class="line">Ctrl + e 向下滚动一行</span><br><span class="line"></span><br><span class="line">Ctrl + y 向上滚动一行</span><br><span class="line"></span><br><span class="line">Ctrl + d 向下滚动半屏</span><br><span class="line"></span><br><span class="line">Ctrl + u 向上滚动半屏</span><br><span class="line"></span><br><span class="line">Ctrl + f 向下滚动一屏</span><br><span class="line"></span><br><span class="line">Ctrl + b 向上滚动一屏</span><br></pre></td></tr></table></figure>

<h3 id="撤销和重做"><a href="#撤销和重做" class="headerlink" title="撤销和重做"></a>撤销和重做</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">u 撤销（Undo）</span><br><span class="line"></span><br><span class="line">U 撤销对整行的操作</span><br><span class="line"></span><br><span class="line">Ctrl + r 重做（Redo），即撤销的撤销。</span><br></pre></td></tr></table></figure>

<h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x 删除当前字符</span><br><span class="line"></span><br><span class="line">3x 删除当前光标开始向后三个字符</span><br><span class="line"></span><br><span class="line">X 删除当前字符的前一个字符。X&#x3D;dh</span><br><span class="line"></span><br><span class="line">dl 删除当前字符， dl&#x3D;x</span><br><span class="line"></span><br><span class="line">dh 删除前一个字符</span><br><span class="line"></span><br><span class="line">dd 删除当前行</span><br><span class="line"></span><br><span class="line">dj 删除上一行</span><br><span class="line"></span><br><span class="line">dk 删除下一行</span><br><span class="line"></span><br><span class="line">10d 删除当前行开始的10行。</span><br><span class="line"></span><br><span class="line">D 删除当前字符至行尾。D&#x3D;d$</span><br><span class="line"></span><br><span class="line">d$ 删除当前字符之后的所有字符（本行）</span><br><span class="line"></span><br><span class="line">kdgg 删除当前行之前所有行（不包括当前行）</span><br><span class="line"></span><br><span class="line">jdG（jd shift + g）   删除当前行之后所有行（不包括当前行）</span><br><span class="line"></span><br><span class="line">:1,10d 删除1-10行</span><br><span class="line"></span><br><span class="line">:11,$d 删除11行及以后所有的行</span><br><span class="line"></span><br><span class="line">:1,$d 删除所有行</span><br><span class="line"></span><br><span class="line">J(shift + j)　　删除两行之间的空行，实际上是合并两行。</span><br></pre></td></tr></table></figure>

<h3 id="拷贝和粘贴"><a href="#拷贝和粘贴" class="headerlink" title="拷贝和粘贴"></a>拷贝和粘贴</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yy 拷贝当前行</span><br><span class="line"></span><br><span class="line">nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。</span><br><span class="line"></span><br><span class="line">p  在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。</span><br><span class="line"></span><br><span class="line">shift+p 在当前行前粘贴</span><br><span class="line"></span><br><span class="line">:1,10 co 20 将1-10行插入到第20行之后。</span><br><span class="line"></span><br><span class="line">:1,$ co $ 将整个文件复制一份并添加到文件尾部。</span><br><span class="line"></span><br><span class="line">正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制</span><br><span class="line">ddp交换当前行和其下一行</span><br><span class="line"></span><br><span class="line">xp交换当前字符和其后一个字符</span><br></pre></td></tr></table></figure>

<h3 id="剪切命令"><a href="#剪切命令" class="headerlink" title="剪切命令"></a>剪切命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切</span><br><span class="line"></span><br><span class="line">ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴</span><br><span class="line"></span><br><span class="line">:1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。</span><br><span class="line"></span><br><span class="line">:1, 10 m 20 将第1-10行移动到第20行之后。</span><br></pre></td></tr></table></figure>


<h3 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a>退出命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:wq 保存并退出</span><br><span class="line"></span><br><span class="line">ZZ 保存并退出</span><br><span class="line"></span><br><span class="line">:q! 强制退出并忽略所有更改</span><br><span class="line"></span><br><span class="line">:e! 放弃所有修改，并打开原来文件。</span><br></pre></td></tr></table></figure>


<h3 id="窗口命令"><a href="#窗口命令" class="headerlink" title="窗口命令"></a>窗口命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:split或new 打开一个新窗口，光标停在顶层的窗口上</span><br><span class="line"></span><br><span class="line">:split file或:new file 用新窗口打开文件</span><br><span class="line"></span><br><span class="line">split打开的窗口都是横向的，使用vsplit可以纵向打开窗口。</span><br><span class="line"></span><br><span class="line">Ctrl+ww 移动到下一个窗口</span><br><span class="line"></span><br><span class="line">Ctrl+wj 移动到下方的窗口</span><br><span class="line"></span><br><span class="line">Ctrl+wk 移动到上方的窗口</span><br></pre></td></tr></table></figure>

<h3 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:close 最后一个窗口不能使用此命令，可以防止意外退出vim。</span><br><span class="line"></span><br><span class="line">:q 如果是最后一个被关闭的窗口，那么将退出vim。</span><br><span class="line"></span><br><span class="line">ZZ 保存并退出。</span><br><span class="line"></span><br><span class="line">关闭所有窗口，只保留当前窗口</span><br><span class="line"></span><br><span class="line">:only</span><br></pre></td></tr></table></figure>

<h3 id="录制宏"><a href="#录制宏" class="headerlink" title="录制宏"></a>录制宏</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按q键加任意字母开始录制，再按q键结束录制（这意味着vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">执行shell命令</span><br><span class="line"></span><br><span class="line">:!command</span><br><span class="line"></span><br><span class="line">:!ls 列出当前目录下文件</span><br><span class="line"></span><br><span class="line">:!perl -c script.pl 检查perl脚本语法，可以不用退出vim，非常方便。</span><br><span class="line"></span><br><span class="line">:!perl script.pl 执行perl脚本，可以不用退出vim，非常方便。</span><br><span class="line"></span><br><span class="line">:suspend或Ctrl – Z 挂起vim，回到shell，按fg可以返回vim。</span><br></pre></td></tr></table></figure>

<h3 id="注释命令"><a href="#注释命令" class="headerlink" title="注释命令"></a>注释命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perl程序中#开始的行为注释，所以要注释某些行，只需在行首加入#</span><br><span class="line"></span><br><span class="line">3,5 s&#x2F;^&#x2F;#&#x2F;g 注释第3-5行</span><br><span class="line"></span><br><span class="line">3,5 s&#x2F;^#&#x2F;&#x2F;g 解除3-5行的注释</span><br><span class="line"></span><br><span class="line">1,$ s&#x2F;^&#x2F;#&#x2F;g 注释整个文档。</span><br><span class="line"></span><br><span class="line">:%s&#x2F;^&#x2F;#&#x2F;g 注释整个文档，此法更快。</span><br></pre></td></tr></table></figure>

<h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:help or F1 显示整个帮助</span><br><span class="line"></span><br><span class="line">:help xxx 显示xxx的帮助，比如 :help i, :help CTRL-[（即Ctrl+[的帮助）。</span><br><span class="line"></span><br><span class="line">:help ‘number’ Vim选项的帮助用单引号括起</span><br><span class="line"></span><br><span class="line">:help &lt;Esc&gt;特殊键的帮助用&lt;&gt;扩起</span><br><span class="line"></span><br><span class="line">:help -t Vim启动参数的帮助用-</span><br><span class="line"></span><br><span class="line">:help i_&lt;Esc&gt; 插入模式下Esc的帮助，某个模式下的帮助用模式_主题的模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">帮助文件中位于||之间的内容是超链接，可以用Ctrl+]进入链接，Ctrl+o（Ctrl + t）返回</span><br></pre></td></tr></table></figure>

<h3 id="其他非编辑命令"><a href="#其他非编辑命令" class="headerlink" title="其他非编辑命令"></a>其他非编辑命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">. 重复前一次命令</span><br><span class="line"></span><br><span class="line">:set ruler?　　查看是否设置了ruler，在.vimrc中，使用set命令设制的选项都可以通过这个命令查看</span><br><span class="line"></span><br><span class="line">:scriptnames　　查看vim脚本文件的位置，比如.vimrc文件，语法文件及plugin等。</span><br><span class="line"></span><br><span class="line">:set list 显示非打印字符，如tab，空格，行尾等。如果tab无法显示，请确定用set lcs&#x3D;tab:&gt;-命令设置了.vimrc文件，并确保你的文件中的确有tab，如果开启了expendtab，那么tab将被扩展为空格。</span><br></pre></td></tr></table></figure>

<h3 id="Vim教程"><a href="#Vim教程" class="headerlink" title="Vim教程"></a>Vim教程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Unix系统上</span><br><span class="line"></span><br><span class="line">$ vimtutor</span><br><span class="line"></span><br><span class="line">在Windows系统上</span><br><span class="line">:help tutor</span><br><span class="line"></span><br><span class="line">:syntax 列出已经定义的语法项</span><br><span class="line"></span><br><span class="line">:syntax clear 清除已定义的语法规则</span><br><span class="line"></span><br><span class="line">:syntax case match 大小写敏感，int和Int将视为不同的语法元素</span><br><span class="line"></span><br><span class="line">:syntax case ignore 大小写无关，int和Int将视为相同的语法元素，并使用同样的配色方案</span><br></pre></td></tr></table></figure>

<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p>[<a href="http://www.cnblogs.com/softwaretesting/archive/2011/07/12/2104435.html" target="_blank" rel="noopener">Vim命令合集</a>]</p>
]]></content>
      <categories>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka专题</title>
    <url>/2020/04/23/kafka%E4%B8%93%E9%A2%98/</url>
    <content><![CDATA[<h1 id="kafka专题"><a href="#kafka专题" class="headerlink" title="kafka专题"></a>kafka专题</h1><blockquote>
<p><a href="https://www.cnblogs.com/BYRans/p/6054930.html" target="_blank" rel="noopener">Kafka简介</a></p>
</blockquote>
<h2 id="消息系统介绍"><a href="#消息系统介绍" class="headerlink" title="消息系统介绍"></a>消息系统介绍</h2><p>一个消息系统负责将数据从一个应用传递到另外一个应用，应用只需关注于数据，无需关注数据在两个或多个应用间是如何传递的。分布式消息传递基于可靠的消息队列，在客户端应用和消息系统之间异步传递消息。有两种主要的消息传递模式：点对点传递模式、发布-订阅模式。大部分的消息系统选用发布-订阅模式。</p>
<h2 id="点对点消息系统"><a href="#点对点消息系统" class="headerlink" title="点对点消息系统"></a>点对点消息系统</h2><p>在点对点消息系统中，消息持久化到一个队列中。此时，将有一个或多个消费者消费队列中的数据。但是一条消息只能被消费一次。当一个消费者消费了队列中的某条数据之后，该条数据则从消息队列中删除。该模式即使有多个消费者同时消费数据，也能保证数据处理的顺序.</p>
<h2 id="发布-订阅消息系统"><a href="#发布-订阅消息系统" class="headerlink" title="发布-订阅消息系统"></a>发布-订阅消息系统</h2><p>在发布-订阅消息系统中，消息被持久化到一个topic中。与点对点消息系统不同的是，消费者可以订阅一个或多个topic，消费者可以消费该topic中所有的数据，同一条数据可以被多个消费者消费，数据被消费后不会立马删除。在发布-订阅消息系统中，消息的生产者称为发布者，消费者称为订阅者。该模式的示例图如下：</p>
<h2 id="Kafka概述"><a href="#Kafka概述" class="headerlink" title="Kafka概述"></a>Kafka概述</h2><p>Apache Kafka是一个分布式的发布-订阅消息系统，能够支撑海量数据的数据传递。在离线和实时的消息处理业务系统中，Kafka都有广泛的应用。Kafka将消息持久化到磁盘中，并对消息创建了备份保证了数据的安全。Kafka在保证了较高的处理速度的同时，又能保证数据处理的低延迟和数据的零丢失。</p>
<p>Kafka的优势在于：</p>
<p>可靠性：Kafka是一个具有分区机制、副本机制和容错机制的分布式消息系统<br>可扩展性：Kafka消息系统支持集群规模的热扩展<br>高性能：Kafka在数据发布和订阅过程中都能保证数据的高吞吐量。即便在TB级数据存储的情况下，仍然能保证稳定的性能。</p>
<h2 id="Kafka-专用术语"><a href="#Kafka-专用术语" class="headerlink" title="Kafka 专用术语"></a>Kafka 专用术语</h2><p>一个topic配置了3个partition。Partition1有两个offset：0和1。Partition2有4个offset。Partition3有1个offset。副本的id和副本所在的机器的id恰好相同。</p>
<p>如果一个topic的副本数为3，那么Kafka将在集群中为每个partition创建3个相同的副本。集群中的每个broker存储一个或多个partition。多个producer和consumer可同时生产和消费数据。</p>
<p>各个术语的详细介绍如下:</p>
<ul>
<li>Topic：在Kafka中，使用一个类别属性来划分数据的所属类，划分数据的这个类称为topic。如果把Kafka看做为一个数据库，topic可以理解为数据库中的一张表，topic的名字即为表名。</li>
<li>Partition：topic中的数据分割为一个或多个partition。每个topic至少有一个partition。每个partition中的数据使用多个segment文件存储。partition中的数据是有序的，partition间的数据丢失了数据的顺序。如果topic有多个partition，消费数据时就不能保证数据的顺序。在需要严格保证消息的消费顺序的场景下，需要将partition数目设为1。</li>
<li>Partition offset：每条消息都有一个当前Partition下唯一的64字节的offset，它指明了这条消息的起始位置。</li>
<li>Replicas of partition：副本是一个分区的备份。副本不会被消费者消费，副本只用于防止数据丢失，即消费者不从为follower的partition中消费数据，而是从为leader的partition中读取数据。</li>
<li>Broker：<ul>
<li>Kafka 集群包含一个或多个服务器，服务器节点称为broker。</li>
<li>broker存储topic的数据。如果某topic有N个partition，集群有N个broker，那么每个broker存储该topic的一个partition。</li>
<li>如果某topic有N个partition，集群有(N+M)个broker，那么其中有N个broker存储该topic的一个partition，剩下的M个broker不存储该topic的partition数据。</li>
<li>如果某topic有N个partition，集群中broker数目少于N个，那么一个broker存储该topic的一个或多个partition。在实际生产环境中，尽量避免这种情况的发生，这种情况容易导致Kafka集群数据不均衡。</li>
</ul>
</li>
<li>Producer：生产者即数据的发布者，该角色将消息发布到Kafka的topic中。broker接收到生产者发送的消息后，broker将该消息追加到当前用于追加数据的segment文件中。生产者发送的消息，存储到一个partition中，生产者也可以指定数据存储的partition。</li>
<li>Consumer：消费者可以从broker中读取数据。消费者可以消费多个topic中的数据。</li>
<li>Leader：每个partition有多个副本，其中有且仅有一个作为Leader，Leader是当前负责数据的读写的partition。</li>
<li>Follower：Follower跟随Leader，所有写请求都通过Leader路由，数据变更会广播给所有Follower，Follower与Leader保持数据同步。如果Leader失效，则从Follower中选举出一个新的Leader。当Follower与Leader挂掉、卡住或者同步太慢，leader会把这个follower从“in sync replicas”（ISR）列表中删除，重新创建一个Follower。</li>
</ul>
<h2 id="Kafka架构"><a href="#Kafka架构" class="headerlink" title="Kafka架构"></a>Kafka架构</h2><ul>
<li>Broker：Kafka的broker是无状态的，broker使用Zookeeper维护集群的状态。Leader的选举也由Zookeeper负责。</li>
<li>Zookeeper：Zookeeper负责维护和协调broker。当Kafka系统中新增了broker或者某个broker发生故障失效时，由ZooKeeper通知生产者和消费者。生产者和消费者依据Zookeeper的broker状态信息与broker协调数据的发布和订阅任务。</li>
<li>Producer：生产者将数据推送到broker上，当集群中出现新的broker时，所有的生产者将会搜寻到这个新的broker，并自动将数据发送到这个broker上。</li>
<li>Consumer：因为Kafka的broker是无状态的，所以consumer必须使用partition offset来记录消费了多少数据。如果一个consumer指定了一个topic的offset，意味着该consumer已经消费了该offset之前的所有数据。consumer可以通过指定offset，从topic的指定位置开始消费数据。consumer的offset存储在Zookeeper中。</li>
</ul>
<h2 id="Kafka工作流程"><a href="#Kafka工作流程" class="headerlink" title="Kafka工作流程"></a>Kafka工作流程</h2><p>Kafka将某topic的数据存储到一个或多个partition中。一个partition内数据是有序的，每条数据都有一个唯一的index，这个index叫做offset。新来的数据追加到partition的尾部。每条数据可以在不同的broker上做备份，从而保证了Kafka使用的可靠性。</p>
<p>生产者将消息发送到topic中，消费者可以选择多种消费方式消费Kafka中的数据。下面介绍两种消费方式的流程。</p>
<h3 id="一个消费者订阅数据："><a href="#一个消费者订阅数据：" class="headerlink" title="一个消费者订阅数据："></a>一个消费者订阅数据：</h3><ul>
<li>生产者将数据发送到指定topic中</li>
<li>Kafka将数据以partition的方式存储到broker上。Kafka支持数据均衡，例如生产者生成了两条消息，topic有两个partition，那么Kafka将在两个partition上分别存储一条消息</li>
<li>消费者订阅指定topic的数据</li>
<li>当消费者订阅topic中消息时，Kafka将当前的offset发给消费者，同时将offset存储到Zookeeper中</li>
<li>消费者以特定的间隔（如100ms）向Kafka请求数据</li>
<li>当Kafka接收到生产者发送的数据时，Kafka将这些数据推送给消费者</li>
<li>消费者受到Kafka推送的数据，并进行处理</li>
<li>当消费者处理完该条消息后，消费者向Kafka broker发送一个该消息已被消费的反馈</li>
<li>当Kafka接到消费者的反馈后，Kafka更新offset包括Zookeeper中的offset。</li>
<li>以上过程一直重复，直到消费者停止请求数据</li>
<li>消费者可以重置offset，从而可以灵活消费存储在Kafka上的数据</li>
</ul>
<h3 id="消费者组数据消费流程"><a href="#消费者组数据消费流程" class="headerlink" title="消费者组数据消费流程"></a>消费者组数据消费流程</h3><p>Kafka支持消费者组内的多个消费者同时消费一个topic，一个消费者组由具有同一个Group ID的多个消费者组成。具体流程如下：</p>
<ol>
<li>生产者发送数据到指定的topic</li>
<li>Kafka将数据存储到broker上的partition中</li>
<li>假设现在有一个消费者订阅了一个topic，topic名字为“test”，消费者的Group ID为“Group1”</li>
<li>此时Kafka的处理方式与只有一个消费者的情况一样</li>
<li>当Kafka接收到一个同样Group ID为“Group1”、消费的topic同样为“test”的消费者的请求时，Kafka把数据操作模式切换为分享模式，此时数据将在两个消费者上共享。</li>
<li>当消费者的数目超过topic的partition数目时，后来的消费者将消费不到Kafka中的数据。因为在Kafka给每一个消费者消费者至少分配一个partition，一旦partition都被指派给消费者了，新来的消费者将不会再分配partition。即一个partition只能分配给一个消费者，一个消费者可以消费多个partition。</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="http://kafka.apache.org/" target="_blank" rel="noopener">Apache Kafka</a></p>
<h2 id="安装zookeeper依赖"><a href="#安装zookeeper依赖" class="headerlink" title="安装zookeeper依赖"></a>安装zookeeper依赖</h2><p><a href="http://zookeeper.apache.org/" target="_blank" rel="noopener">Apache ZooKeeper - Home</a><br>启动kafka很简单，配置好前置的操作后，先进入zookeeper的目录下，启动zookeeper,可以单独安装,也可以使用kafka中集成的zookeeper,默认在bin目录下有zookeeper的启动脚本,zookeeper和kafka的配置均在kafka安装包下的config目录下,下面采用单独安装kafka的方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;soft&#x2F;zookeeper</span><br><span class="line">&#x2F;&#x2F; 启动脚本使用方法</span><br><span class="line">Usage: .&#x2F;bin&#x2F;zkServer.sh &#123;start|start-foreground|stop|restart|status|upgrade|print-cmd&#125;</span><br><span class="line">&#x2F;&#x2F; 启动Zookeeper</span><br><span class="line">.&#x2F;bin&#x2F;zkServer.sh  start</span><br><span class="line">&#x2F;&#x2F; 关闭Zookeeper</span><br><span class="line">.&#x2F;bin&#x2F;zkServer.sh  stop</span><br><span class="line">&#x2F;&#x2F; 查看进程是否启动</span><br><span class="line">ps -ef | grep zookeepe</span><br></pre></td></tr></table></figure>
<p>PS：因为kafka是需要注册在zookeeper上面，通过zookeeper进行管理和调度的，所以启动kafka之前，我们必须要启动zookeeper。</p>
<h2 id="2-kafka安装"><a href="#2-kafka安装" class="headerlink" title="2. kafka安装"></a>2. kafka安装</h2><p>随后我们进入Kafka目录下，启动kafka，具体操作命令如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;kafka_2.11-1.0.0</span><br><span class="line">&#x2F;&#x2F; 修改配置</span><br><span class="line">vim &#x2F;usr&#x2F;local&#x2F;kafka&#x2F;config&#x2F;server.properties  kafka配置</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;kafka&#x2F;config&#x2F;zookeeper.properties   kafka集成的zookeeper配置</span><br><span class="line">&#x2F;&#x2F; 启动kafka</span><br><span class="line">.&#x2F;bin&#x2F;kafka-server-start.sh -daemon .&#x2F;config&#x2F;server.properties</span><br><span class="line">&#x2F;&#x2F; 查看</span><br><span class="line">jps -lm</span><br><span class="line">11776 &#x2F;usr&#x2F;local&#x2F;cerebro-0.7.2&#x2F;lib&#x2F;cerebro.cerebro-0.7.2-launcher.jar</span><br><span class="line">1392 &#x2F;usr&#x2F;share&#x2F;jenkins&#x2F;jenkins.war --webroot&#x3D;&#x2F;var&#x2F;cache&#x2F;jenkins&#x2F;war --httpPort&#x3D;8080</span><br><span class="line">24209 sun.tools.jps.Jps -lm</span><br><span class="line">20867 com.github.ltsopensource.startup.jobtracker.JobTrackerStartup &#x2F;data&#x2F;soft&#x2F;lts&#x2F;conf&#x2F;zoo</span><br><span class="line">20755 com.github.ltsopensource.startup.admin.JettyContainer &#x2F;data&#x2F;soft&#x2F;lts</span><br><span class="line">7972 org.apache.zookeeper.server.quorum.QuorumPeerMain &#x2F;data&#x2F;soft&#x2F;zookeeper-3.3.6&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfg</span><br><span class="line">10486 kafka.Kafka ..&#x2F;config&#x2F;server.properties</span><br><span class="line">12029 com.quantifind.kafka.offsetapp.OffsetGetterWeb --zk 127.0.0.1:2181 --port 9001 --refresh 10.seconds --retain 2.days</span><br><span class="line">11471 org.elasticsearch.bootstrap.Elasticsearch</span><br><span class="line">PS: 可以看到zookeeper和kafka都已经运行起来了，当然这个是单机的命令，集群的命令后面再讲。</span><br></pre></td></tr></table></figure>

<h2 id="kafka常用命令总结"><a href="#kafka常用命令总结" class="headerlink" title="kafka常用命令总结"></a>kafka常用命令总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 查看topic的详细信息</span><br><span class="line">bin&#x2F;kafka-topics.sh -zookeeper 127.0.0.1:2181 -describe -topic testKJ1</span><br><span class="line"></span><br><span class="line">2. 为topic增加副本</span><br><span class="line">bin&#x2F;kafka-reassign -partitions.sh -zookeeper 127.0.0.1:2181 -reassignment-json-file json&#x2F;partitions-to-move.json -execute</span><br><span class="line"></span><br><span class="line">3. 创建topic</span><br><span class="line">bin&#x2F;kafka-topics.sh --create --zookeeper localhost:2181 --replication -factor1 --partitions 1 --topic testKJ1</span><br><span class="line"></span><br><span class="line">4. 为topic增加partition</span><br><span class="line">bin&#x2F;bin&#x2F;kafka-topics.sh –zookeeper 127.0.0.1:2181 –alter –partitions2 –topic testKJ1</span><br><span class="line"></span><br><span class="line">5. kafka生产者客户端命令</span><br><span class="line">bin&#x2F;kafka-console-producer.sh --broker-list localhost:9092 --topic testKJ1</span><br><span class="line"></span><br><span class="line">6. kafka消费者客户端命令</span><br><span class="line">bin&#x2F;kafka-console-consumer.sh -zookeeper localhost:2181 --from-beginning --topic testKJ1</span><br><span class="line"></span><br><span class="line">7. kafka服务启动</span><br><span class="line">bin&#x2F;kafka-server-start.sh -daemon ..&#x2F;config&#x2F;server.properties</span><br><span class="line"></span><br><span class="line">8. 下线broker</span><br><span class="line">bin&#x2F;kafka-run-class.sh kafka.admin.ShutdownBroker --zookeeper 127.0.0.1:2181 --broker #brokerId# --num.retries3--retry.interval.ms 60</span><br><span class="line">shutdown broker</span><br><span class="line"></span><br><span class="line">9. 删除topic,只会删除zookeeper中的元数据，消息文件须手动删除</span><br><span class="line">.&#x2F;bin&#x2F;kafka-topics.sh  --delete --zookeeper 127.0.0.1:2181 --topic topic-name</span><br><span class="line"></span><br><span class="line">10. 查看topic消费进度</span><br><span class="line">这个会显示出consumer group的offset情况， 必须参数为--group， 不指定--topic，默认为所有topic</span><br><span class="line">查看consumer组内消费的offset</span><br><span class="line">bin&#x2F;kafka-run-class.sh kafka.tools.ConsumerOffsetChecker --zookeeper localhost:2181 --group test --topic testKJ1</span><br><span class="line">bin&#x2F;kafka-consumer-offset-checker.sh --zookeeper 192.168.0.201:12181 --group group1 --topic group1</span><br><span class="line"></span><br><span class="line">11. 列出所有的TOPIC</span><br><span class="line">bin&#x2F;kafka-topics.sh --zookeeper 127.0.0.1:2181 --list</span><br></pre></td></tr></table></figure>
<h2 id="Connecting-to-ZooKeeper"><a href="#Connecting-to-ZooKeeper" class="headerlink" title="Connecting to ZooKeeper"></a>Connecting to ZooKeeper</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. check status</span><br><span class="line">$ bin&#x2F;zkServer.sh status</span><br><span class="line">2. connect</span><br><span class="line">$ bin&#x2F;zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure>
<p>更多信息: <a href="http://zookeeper.apache.org/doc/current/zookeeperStarted.html" target="_blank" rel="noopener">ZooKeeper Getting Started Guide</a></p>
]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>python-socket编程</title>
    <url>/2020/04/23/python-socket%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="python-socket编程"><a href="#python-socket编程" class="headerlink" title="python-socket编程"></a>python-socket编程</h2><h2 id="五层网络模型"><a href="#五层网络模型" class="headerlink" title="五层网络模型"></a>五层网络模型</h2><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>功能：文件传输，电子邮件，文件服务，数据传输<br>TCP/IP协议：HTTP,FTP,SMTP,DNS,TELNET,SSH</p>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>功能：提供端口对端口的接口<br>TCP/IP协议：TCP-UDP</p>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>功能：为数据包选择路由<br>TCP/IP协议：IP,ICMP</p>
<h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>功能：传输有地址的帧，错误检测功能<br>TCP/IP协议：ARP</p>
<h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>功能：物理媒体，光纤<br>TCP/IP协议：1000BASE-SX</p>
<p>每次的网络传输请求都是通过 应用层–-&gt;传输层–-&gt;网络层–-&gt;数据链路层–-&gt;物理层传递。<br>除了应用层，其他的层都由操作系统，物理设备完成，所以通过操作系统提供的接口socket直接走传输层(通过TCP链接，socket不属于网络协议，属于自己定义的协议)可以完成大部分不同协议的网络请求。</p>
<h3 id="c-s实现通信"><a href="#c-s实现通信" class="headerlink" title="c/s实现通信"></a>c/s实现通信</h3><p>使用socket实现客户端与服务端的通信，偷一张图(socket的固定编程模式)<br><img src="http://www.langzi.fun/upload/TIM%E6%88%AA%E5%9B%BE20190225114621.png" alt="TIM%E6%88%AA%E5%9B%BE20190225114621.png"></p>
<h3 id="服务端代码："><a href="#服务端代码：" class="headerlink" title="服务端代码："></a>服务端代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">s &#x3D; socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"># 指定网络类型，指定类型对应的协议(TCP协议)</span><br><span class="line"># AF_INET &#x3D; 2</span><br><span class="line"># # IPV4</span><br><span class="line"># AF_INET6 &#x3D; 23</span><br><span class="line"># # IPV6</span><br><span class="line"># AF_IPX &#x3D; 6</span><br><span class="line"># # UNIX下的进程间通信</span><br><span class="line"></span><br><span class="line">s.bind((&#39;0.0.0.0&#39;,9999))</span><br><span class="line"># 绑定IP与端口，传入元组类型，</span><br><span class="line">s.listen()</span><br><span class="line"># 开始监听绑定的IP与端口</span><br><span class="line"></span><br><span class="line">sock,addr &#x3D; s.accept()</span><br><span class="line"># sock是传输对象，addr是传输对象的IP地址</span><br><span class="line"></span><br><span class="line">data &#x3D; sock.recv(1024)</span><br><span class="line"># 获取客户端发来的1kb大小的始据</span><br><span class="line">print(data.decode(&#39;utf-8&#39;))</span><br><span class="line"># 打印出客户端发来的数据，返回的是bytes类型，需要编码成utf-8</span><br><span class="line">sock.send(&#39;总部收到总部收到&#39;.encode(&#39;utf-8&#39;))</span><br><span class="line"># 然后向客户端发送一条数据</span><br><span class="line">s.close()</span><br><span class="line">sock.close()</span><br><span class="line"># 关闭连接</span><br></pre></td></tr></table></figure>

<p>客户端代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">c &#x3D; socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">c.connect((&#39;127.0.0.1&#39;,9999))</span><br><span class="line">c.send(&#39;shuke呼叫总部&#39;.encode(&#39;utf-8&#39;))</span><br><span class="line"># 因为传递的是bytes类型的数据，需要编码</span><br><span class="line">data &#x3D; c.recv(1024)</span><br><span class="line"># 客户端接收服务端发来的1kb数据</span><br><span class="line">print(data.decode(&#39;utf-8&#39;))</span><br><span class="line"># 打印服务端返回的数据</span><br><span class="line">c.close()</span><br></pre></td></tr></table></figure>
<p>socket的编码模式基本上可以说是固定的，套用代码即可。<br>先运行服务端代码，再运行客户端代码：<br>客户端返回结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shuke呼叫总部</span><br></pre></td></tr></table></figure>
<p>服务端返回结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">总部收到总部收到</span><br></pre></td></tr></table></figure>
<p>这个就是固定的套路代码，如果想要让服务端一直接受客户端的请求的话，在这里修改代码即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s.bind((&#39;0.0.0.0&#39;,9999))</span><br><span class="line"># 绑定IP与端口，传入元组类型，</span><br><span class="line">s.listen()</span><br><span class="line"># 开始监听绑定的IP与端口</span><br><span class="line">while 1:</span><br><span class="line">    sock,addr &#x3D; s.accept()</span><br><span class="line">    # sock是传输对象，addr是传输对象的IP地址</span><br><span class="line"></span><br><span class="line">    data &#x3D; sock.recv(1024)</span><br><span class="line">    # 获取客户端发来的1kb大小的始据</span><br><span class="line">    print(data.decode(&#39;utf-8&#39;))</span><br><span class="line">    # 打印出客户端发来的数据，返回的是bytes类型，需要编码成utf-8</span><br><span class="line">    sock.send(&#39;总部收到总部收到&#39;.encode(&#39;utf-8&#39;))</span><br><span class="line">    # 然后向客户端发送一条数据</span><br><span class="line">    sock.close()</span><br><span class="line">    # 关闭连接</span><br></pre></td></tr></table></figure>
<p>注意socket发送的内容必须要是bytes类型的(python3)，这里说明一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于bytes编码的数据来说</span><br><span class="line">只有decode方法</span><br><span class="line">就是把bytes编码的数据转换成utf-8编码</span><br><span class="line"></span><br><span class="line">对于utf-8编码的数据来说</span><br><span class="line">只有encode方法</span><br><span class="line">就是把utf-8编码的数据转换成bytes编码，如果要转成其他编码</span><br><span class="line">.encdoe(&#39;gbk&#39;)即可</span><br></pre></td></tr></table></figure>

<h3 id="C-S端相互发消息"><a href="#C-S端相互发消息" class="headerlink" title="C/S端相互发消息"></a>C/S端相互发消息</h3><ol>
<li>服务端发送代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">s &#x3D; socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.bind((&#39;0.0.0.0&#39;,9999))</span><br><span class="line">s.listen()</span><br><span class="line">sock, addr &#x3D; s.accept()</span><br><span class="line"></span><br><span class="line">while 1:</span><br><span class="line">    inp &#x3D; input(&#39;输入消息:&#39;)</span><br><span class="line">    sock.send(inp.encode(&#39;utf-8&#39;))</span><br><span class="line">    data &#x3D; sock.recv(1024)</span><br><span class="line">    print(&#39;接收消息:&#39;+data.decode(&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure></li>
<li>客户端发送代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">c &#x3D; socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">c.connect((&#39;127.0.0.1&#39;,9999))</span><br><span class="line">while 1:</span><br><span class="line">    data &#x3D; c.recv(1024)</span><br><span class="line">    print(&#39;接收消息:&#39;+data.decode(&#39;utf-8&#39;))</span><br><span class="line">    inp &#x3D; input(&#39;输入消息:&#39;)</span><br><span class="line">    c.send(inp.encode(&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure>
服务端返回结果：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入消息:我是你爸爸</span><br><span class="line">接收消息:我是你爷爷</span><br><span class="line">输入消息:</span><br></pre></td></tr></table></figure>
客户端返回结果：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接收消息:我是你爸爸</span><br><span class="line">输入消息:我是你爷爷</span><br></pre></td></tr></table></figure>
<h3 id="多用户连接"><a href="#多用户连接" class="headerlink" title="多用户连接"></a>多用户连接</h3>从上面的代码中一个sock只能服务一个客户端，服务端只能服务一个对象，使用多线程即可完成一个服务端服务大量的客户端。<br>服务端代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import threading</span><br><span class="line">s &#x3D; socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.bind((&#39;0.0.0.0&#39;,9999))</span><br><span class="line">s.listen()</span><br><span class="line"></span><br><span class="line">def handle_sock(sock,addr):</span><br><span class="line">    while 1:</span><br><span class="line">        inp &#x3D; input(&#39;输入消息:&#39;)</span><br><span class="line">        sock.send(inp.encode(&#39;utf-8&#39;))</span><br><span class="line">        data &#x3D; sock.recv(1024)</span><br><span class="line">        print(&#39;接收消息:&#39; + data.decode(&#39;utf-8&#39;))</span><br><span class="line"></span><br><span class="line">while 1:</span><br><span class="line">    sock, addr &#x3D; s.accept()</span><br><span class="line">    clinent_thread &#x3D; threading.Thread(target&#x3D;handle_sock,args&#x3D;(sock,addr))</span><br><span class="line">    clinent_thread.start()</span><br></pre></td></tr></table></figure>
客户端代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">c &#x3D; socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">c.connect((&#39;127.0.0.1&#39;,9999))</span><br><span class="line">while 1:</span><br><span class="line">    data &#x3D; c.recv(1024)</span><br><span class="line">    print(&#39;接收消息:&#39;+data.decode(&#39;utf-8&#39;))</span><br><span class="line">    inp &#x3D; input(&#39;输入消息:&#39;)</span><br><span class="line">    c.send(inp.encode(&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure>
这个时候运行两个客户端发送请求一样可以被服务端获取到。</li>
</ol>
<h3 id="模拟HTTP请求"><a href="#模拟HTTP请求" class="headerlink" title="模拟HTTP请求"></a>模拟HTTP请求</h3><blockquote>
<p>requests本质上调用urllib发起网络请求，urllib通过调用socket发起网络请求。模拟socket对HTTP请求就是对本质上进行重写编程。<br>具体实现看代码，其实很简单的，不多描述</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">from urllib.parse import  urlparse</span><br><span class="line"># 对url做解析</span><br><span class="line"></span><br><span class="line">def get_url(url):</span><br><span class="line">    url &#x3D; urlparse(url)</span><br><span class="line">    # 对传入的网址进行解析，比如传入http:&#x2F;&#x2F;www.langzi.fun&#x2F;admin.php</span><br><span class="line">    host,path &#x3D; url.netloc,url.path</span><br><span class="line">    # 获取传入网址的主域名和后面的url路径</span><br><span class="line">    if path &#x3D;&#x3D; &#39;&#39;:</span><br><span class="line">        path &#x3D; &#39;&#x2F;&#39;</span><br><span class="line">    c &#x3D; socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    c.connect((host,80))</span><br><span class="line">    headers &#x3D; &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;71.0.3578.98 Safari&#x2F;537.36&#39;</span><br><span class="line">    # 绑定ip与端口</span><br><span class="line">    c.send(&#39;GET &#123;&#125;\r\nHost:&#123;&#125;\r\nUser-Agent:&#123;&#125;\r\n&#39;.format(path,host,headers).encode(&#39;utf-8&#39;))</span><br><span class="line">    # 发送请求，请求方式为GET 内容是url的路径，然后分隔换行</span><br><span class="line">    # 发送请求，请求的HOST主机就是主域名</span><br><span class="line">    # 在这里可以把请求头，cookie加进来</span><br><span class="line"></span><br><span class="line">    data &#x3D; b&#39;&#39;</span><br><span class="line">    # 获取数据</span><br><span class="line">    while 1:</span><br><span class="line">        d &#x3D; c.recv(1024)</span><br><span class="line">        if d:</span><br><span class="line">            data +&#x3D;d</span><br><span class="line">        else:</span><br><span class="line">            break</span><br><span class="line">    print(data.decode(&#39;utf-8&#39;))</span><br><span class="line"></span><br><span class="line">get_url(&#39;http:&#x2F;&#x2F;www.lancygroup.com&#x2F;&#39;)</span><br></pre></td></tr></table></figure>

<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="http://www.langzi.fun/socket%E7%BC%96%E7%A8%8B.html" target="_blank" rel="noopener">原文-socket编程</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb高可用集群部署</title>
    <url>/2020/04/23/mongodb%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="mongodb高可用集群部署"><a href="#mongodb高可用集群部署" class="headerlink" title="mongodb高可用集群部署"></a>mongodb高可用集群部署</h2><blockquote>
<p>mongodb是最常用的nosql数据库，在数据库排名中已经上升到了前六。这篇文章介绍如何搭建高可用的mongodb（分片+副本）集群。</p>
</blockquote>
<p>在搭建集群之前，需要首先了解几个概念：路由，分片、副本集、配置服务器等。</p>
<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><hr>
<p><img src="http://www.itmind.net/assets/images/2017/bigdata/sharded-cluster-production-architecture.bakedsvg.svg" alt="sharded-cluster"><br>从图中可以看到有四个组件：mongos、config server、shard、replica set。</p>
<ol>
<li><p>mongos，数据库集群请求的入口，所有的请求都通过mongos进行协调，不需要在应用程序添加一个路由选择器，mongos自己就是一个请求分发中心，它负责把对应的数据请求请求转发到对应的shard服务器上。在生产环境通常有多mongos作为请求的入口，防止其中一个挂掉所有的mongodb请求都没有办法操作。</p>
</li>
<li><p>config server，顾名思义为配置服务器，存储所有数据库元信息（路由、分片）的配置。mongos本身没有物理存储分片服务器和数据路由信息，只是缓存在内存里，配置服务器则实际存储这些数据。mongos第一次启动或者关掉重启就会从 config server 加载配置信息，以后如果配置服务器信息变化会通知到所有的 mongos 更新自己的状态，这样 mongos 就能继续准确路由。在生产环境通常有多个 config server 配置服务器，因为它存储了分片路由的元数据，防止数据丢失！</p>
</li>
<li><p>shard，分片（sharding）是指将数据库拆分，将其分散在不同的机器上的过程。将数据分散到不同的机器上，不需要功能强大的服务器就可以存储更多的数据和处理更大的负载。基本思想就是将集合切成小块，这些块分散到若干片里，每个片只负责总数据的一部分，最后通过一个均衡器来对各个分片进行均衡（数据迁移）。</p>
</li>
<li><p>replica set，中文翻译副本集，其实就是shard的备份，防止shard挂掉之后数据丢失。复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。</p>
</li>
<li><p>仲裁者（Arbiter），是复制集中的一个MongoDB实例，它并不保存数据。仲裁节点使用最小的资源并且不要求硬件设备，不能将Arbiter部署在同一个数据集节点中，可以部署在其他应用服务器或者监视服务器中，也可部署在单独的虚拟机中。为了确保复制集中有奇数的投票成员（包括primary），需要添加仲裁节点做为投票，否则primary不能运行时不会自动切换primary。</p>
</li>
</ol>
<p>简单了解之后，我们可以这样总结一下，应用请求mongos来操作mongodb的增删改查，配置服务器存储数据库元信息，并且和mongos做同步，数据最终存入在shard（分片）上，为了防止数据丢失同步在副本集中存储了一份，仲裁在数据存储到分片的时候决定存储到哪个节点。</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>系统系统 Ubuntu 18.04.1 LTS<br>三台服务器：10.20.71.135/10.20.73.182/10.20.70.61<br>安装包： mongodb-org-server_4.0.6_amd64.deb</p>
<h4 id="服务器规划"><a href="#服务器规划" class="headerlink" title="服务器规划"></a>服务器规划</h4><table>
<thead>
<tr>
<th>服务器mongo-135</th>
<th>服务器mongo-182</th>
<th>服务器mongo-61</th>
</tr>
</thead>
<tbody><tr>
<td>mongos</td>
<td>mongos</td>
<td>mongos</td>
</tr>
<tr>
<td>config server</td>
<td>config server</td>
<td>config server</td>
</tr>
<tr>
<td>shard server1 主节点</td>
<td>shard server1 副节点</td>
<td>shard server1 仲裁</td>
</tr>
<tr>
<td>shard server2 仲裁</td>
<td>shard server2 主节点</td>
<td>shard server2 主节点</td>
</tr>
<tr>
<td>shard server3 副节点</td>
<td>shard server3 仲裁</td>
<td>shard server3 主节点</td>
</tr>
</tbody></table>
<p>端口分配：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongos：20000</span><br><span class="line">config：21000</span><br><span class="line">shard1：27017</span><br><span class="line">shard2：27017</span><br><span class="line">shard3：27017</span><br></pre></td></tr></table></figure>
<h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><ol>
<li><p>mongodb源配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4</span><br><span class="line">echo &quot;deb [ arch&#x3D;amd64 ] https:&#x2F;&#x2F;repo.mongodb.org&#x2F;apt&#x2F;ubuntu bionic&#x2F;mongodb-org&#x2F;4.0 multiverse&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;mongodb-org-4.0.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">会安装对应源的mongo所有依赖包,此处不执行</span><br><span class="line"># sudo apt-get install -y mongodb-org</span><br><span class="line">echo &quot;mongodb-org hold&quot; | sudo dpkg --set-selections</span><br><span class="line">echo &quot;mongodb-org-server hold&quot; | sudo dpkg --set-selections</span><br><span class="line">echo &quot;mongodb-org-shell hold&quot; | sudo dpkg --set-selections</span><br><span class="line">echo &quot;mongodb-org-mongos hold&quot; | sudo dpkg --set-selections</span><br><span class="line">echo &quot;mongodb-org-tools hold&quot; | sudo dpkg --set-selections</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">apt install -y  mongodb-org-mongos mongodb-org-shell mongodb-org-tools</span><br></pre></td></tr></table></figure>
<p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/" target="_blank" rel="noopener">参考</a></p>
</li>
<li><p>mongodb安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;repo.mongodb.org&#x2F;apt&#x2F;ubuntu&#x2F;dists&#x2F;bionic&#x2F;mongodb-org&#x2F;4.0&#x2F;multiverse&#x2F;binary-amd64&#x2F;mongodb-org-server_4.0.6_amd64.deb</span><br><span class="line">dpkg -i mongodb-org-server_4.0.6_amd64.deb</span><br></pre></td></tr></table></figure>
<p>分别在每台机器建立conf、mongos、config、shard1、shard2、shard3六个目录，因为mongos不存储数据，只需要建立日志文件目录即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;conf</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;mongos&#x2F;log</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;configsvr&#x2F;&#123;data,log&#125;</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;shard1&#x2F;&#123;date,log&#125;</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;shard2&#x2F;&#123;data,log&#125;</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;shard3&#x2F;&#123;data,log&#125;</span><br></pre></td></tr></table></figure>
<h3 id="准备集群间通信使用的加密key"><a href="#准备集群间通信使用的加密key" class="headerlink" title="准备集群间通信使用的加密key"></a>准备集群间通信使用的加密key</h3><p>创建mongod、mongos之间通信所使用的key文件，在任意一台服务器上执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl rand -base64 756 &gt; &#x2F;etc&#x2F;mongodb&#x2F;conf&#x2F;key</span><br><span class="line">chmod 400 &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;key</span><br><span class="line"># 将&#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;key文件拷贝到其它服务器上，保持文件权限不变</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="connfig-server配置服务器"><a href="#connfig-server配置服务器" class="headerlink" title="connfig server配置服务器"></a>connfig server配置服务器</h3><p>mongodb3.4以后要求配置服务器也创建副本集，不然集群搭建不成功。<br>添加配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# cat configsrv.conf</span><br><span class="line">storage:</span><br><span class="line">  dbPath: &#x2F;data&#x2F;mongodb&#x2F;config&#x2F;data</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: &#x2F;data&#x2F;mongodb&#x2F;config&#x2F;log&#x2F;configsrv.log</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 21000</span><br><span class="line">  bindIp: 0.0.0.0</span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  timeZoneInfo: &#x2F;usr&#x2F;share&#x2F;zoneinfo</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">   keyFile: &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;key</span><br><span class="line">   authorization: enabled</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: configs</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: &quot;configsvr&quot;</span><br></pre></td></tr></table></figure>
<p>分别启动三台服务器的config server<br>方式一:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod -f &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;configsrv.conf</span><br></pre></td></tr></table></figure>
<p>方式二:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# cat &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mongosrv.service</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;MongoDB Database Config Server</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;mongodb</span><br><span class="line">Group&#x3D;mongodb</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;default&#x2F;mongod</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;mongod --config &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;configsrv.conf</span><br><span class="line">PIDFile&#x3D;&#x2F;data&#x2F;mongodb&#x2F;config&#x2F;log&#x2F;configsrv.pid</span><br><span class="line"># file size</span><br><span class="line">LimitFSIZE&#x3D;infinity</span><br><span class="line"># cpu time</span><br><span class="line">LimitCPU&#x3D;infinity</span><br><span class="line"># virtual memory size</span><br><span class="line">LimitAS&#x3D;infinity</span><br><span class="line"># open files</span><br><span class="line">LimitNOFILE&#x3D;64000</span><br><span class="line"># processes&#x2F;threads</span><br><span class="line">LimitNPROC&#x3D;64000</span><br><span class="line"># locked memory</span><br><span class="line">LimitMEMLOCK&#x3D;infinity</span><br><span class="line"># total threads (user+kernel)</span><br><span class="line">TasksMax&#x3D;infinity</span><br><span class="line">TasksAccounting&#x3D;false</span><br><span class="line"></span><br><span class="line"># Recommended limits for for mongod as specified in</span><br><span class="line"># http:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual&#x2F;reference&#x2F;ulimit&#x2F;#recommended-settings</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start mongosrv.service</span><br><span class="line">systemctl enable mongosrv.service</span><br></pre></td></tr></table></figure>
<p>登录任意一台配置服务器，初始化配置副本集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#连接</span><br><span class="line">mongo --port 21000</span><br><span class="line">#config变量</span><br><span class="line">config &#x3D; &#123;</span><br><span class="line">    _id : &quot;configs&quot;,</span><br><span class="line">     members : [</span><br><span class="line">         &#123;_id : 0, host : &quot;10.20.71.135:21000&quot; &#125;,</span><br><span class="line">         &#123;_id : 1, host : &quot;10.20.73.182:21000&quot; &#125;,</span><br><span class="line">         &#123;_id : 2, host : &quot;10.20.70.61:21000&quot; &#125;</span><br><span class="line">     ]</span><br><span class="line">&#125;</span><br><span class="line">#初始化副本集</span><br><span class="line">rs.initiate(config)</span><br></pre></td></tr></table></figure>
<p>其中，”_id” : “configs”应与配置文件中配置的 replicaction.replSetName 一致，”members” 中的 “host” 为三个节点的 ip 和 port</p>
<h3 id="配置分片副本集-三台机器"><a href="#配置分片副本集-三台机器" class="headerlink" title="配置分片副本集(三台机器)"></a>配置分片副本集(三台机器)</h3><h4 id="设置第一个分片副本集-shard1"><a href="#设置第一个分片副本集-shard1" class="headerlink" title="设置第一个分片副本集(shard1)"></a>设置第一个分片副本集(shard1)</h4><ol>
<li>配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# egrep -v ^# shard1.conf</span><br><span class="line">storage:</span><br><span class="line">  dbPath: &#x2F;data&#x2F;mongodb&#x2F;shard1&#x2F;data</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: &#x2F;data&#x2F;mongodb&#x2F;shard1&#x2F;log&#x2F;shard1.log</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 0.0.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  timeZoneInfo: &#x2F;usr&#x2F;share&#x2F;zoneinfo</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">   keyFile: &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;key</span><br><span class="line">   authorization: enabled</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: shard1</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: &quot;shardsvr&quot;</span><br></pre></td></tr></table></figure></li>
<li>制作服务启动文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# cat &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mongod-shard1.service</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;MongoDB Shard1 Database Server</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;mongodb</span><br><span class="line">Group&#x3D;mongodb</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;default&#x2F;mongod</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;mongod --config &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;shard1.conf</span><br><span class="line">PIDFile&#x3D;&#x2F;data&#x2F;mongodb&#x2F;shard1&#x2F;log&#x2F;shard1.pid</span><br><span class="line"># file size</span><br><span class="line">LimitFSIZE&#x3D;infinity</span><br><span class="line"># cpu time</span><br><span class="line">LimitCPU&#x3D;infinity</span><br><span class="line"># virtual memory size</span><br><span class="line">LimitAS&#x3D;infinity</span><br><span class="line"># open files</span><br><span class="line">LimitNOFILE&#x3D;64000</span><br><span class="line"># processes&#x2F;threads</span><br><span class="line">LimitNPROC&#x3D;64000</span><br><span class="line"># locked memory</span><br><span class="line">LimitMEMLOCK&#x3D;infinity</span><br><span class="line"># total threads (user+kernel)</span><br><span class="line">TasksMax&#x3D;infinity</span><br><span class="line">TasksAccounting&#x3D;false</span><br><span class="line"></span><br><span class="line"># Recommended limits for for mongod as specified in</span><br><span class="line"># http:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual&#x2F;reference&#x2F;ulimit&#x2F;#recommended-settings</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>
启动方式一:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# systemctl daemon-reload</span><br><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# systemctl start mongod-shard1.service</span><br><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# systemctl status mongod-shard1.service</span><br></pre></td></tr></table></figure>
启动方式二:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod -f &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;shard1.conf</span><br></pre></td></tr></table></figure>
登陆任意一台服务器，初始化副本集:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在任意一台服务上初始化复制集配置：</span><br><span class="line"></span><br><span class="line">mongo --port 27017</span><br><span class="line">#使用admin数据库</span><br><span class="line">use admin</span><br><span class="line">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class="line">config &#x3D; &#123;</span><br><span class="line">   _id : &quot;shard1&quot;,</span><br><span class="line">   members : [</span><br><span class="line">       &#123;_id : 0, host : &quot;10.20.71.135:27017&quot; &#125;,</span><br><span class="line">       &#123;_id : 1, host : &quot;10.20.73.182:27017&quot; &#125;,</span><br><span class="line">       &#123;_id : 2, host : &quot;10.20.70.61:27017&quot;, arbiterOnly: true &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">#初始化副本集配置</span><br><span class="line">rs.initiate(config);</span><br><span class="line">rs.status()</span><br><span class="line">rs.conf()</span><br></pre></td></tr></table></figure>
<h4 id="设置第二个分片副本集-shard2"><a href="#设置第二个分片副本集-shard2" class="headerlink" title="设置第二个分片副本集(shard2)"></a>设置第二个分片副本集(shard2)</h4></li>
<li>配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# egrep -v ^# shard2.conf</span><br><span class="line">storage:</span><br><span class="line">  dbPath: &#x2F;data&#x2F;mongodb&#x2F;shard2&#x2F;data</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: &#x2F;data&#x2F;mongodb&#x2F;shard2&#x2F;log&#x2F;shard2.log</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27018</span><br><span class="line">  bindIp: 0.0.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  timeZoneInfo: &#x2F;usr&#x2F;share&#x2F;zoneinfo</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">   keyFile: &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;key</span><br><span class="line">   authorization: enabled</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: shard2</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: &quot;shardsvr&quot;</span><br></pre></td></tr></table></figure></li>
<li>制作服务启动文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# cat &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mongod-shard2.service</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;MongoDB Shard2 Database Server</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;mongodb</span><br><span class="line">Group&#x3D;mongodb</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;default&#x2F;mongod</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;mongod --config &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;shard2.conf</span><br><span class="line">PIDFile&#x3D;&#x2F;data&#x2F;mongodb&#x2F;shard2&#x2F;log&#x2F;shard2.pid</span><br><span class="line"># file size</span><br><span class="line">LimitFSIZE&#x3D;infinity</span><br><span class="line"># cpu time</span><br><span class="line">LimitCPU&#x3D;infinity</span><br><span class="line"># virtual memory size</span><br><span class="line">LimitAS&#x3D;infinity</span><br><span class="line"># open files</span><br><span class="line">LimitNOFILE&#x3D;64000</span><br><span class="line"># processes&#x2F;threads</span><br><span class="line">LimitNPROC&#x3D;64000</span><br><span class="line"># locked memory</span><br><span class="line">LimitMEMLOCK&#x3D;infinity</span><br><span class="line"># total threads (user+kernel)</span><br><span class="line">TasksMax&#x3D;infinity</span><br><span class="line">TasksAccounting&#x3D;false</span><br><span class="line"></span><br><span class="line"># Recommended limits for for mongod as specified in</span><br><span class="line"># http:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual&#x2F;reference&#x2F;ulimit&#x2F;#recommended-settings</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>
启动方式一:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# systemctl daemon-reload</span><br><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# systemctl start mongod-shard2.service</span><br><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# systemctl status mongod-shard2.service</span><br></pre></td></tr></table></figure>
启动方式二:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod -f &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;shard2.conf</span><br></pre></td></tr></table></figure>
登陆任意一台服务器，初始化副本集:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在任意一台服务上初始化复制集配置：</span><br><span class="line"></span><br><span class="line">mongo --port 27018</span><br><span class="line">#使用admin数据库</span><br><span class="line">use admin</span><br><span class="line">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class="line">config &#x3D; &#123;</span><br><span class="line">   _id : &quot;shard2&quot;,</span><br><span class="line">   members : [</span><br><span class="line">       &#123;_id : 0, host : &quot;10.20.71.135:27018&quot; &#125;,</span><br><span class="line">       &#123;_id : 1, host : &quot;10.20.73.182:27018&quot;, arbiterOnly: true &#125;,</span><br><span class="line">       &#123;_id : 2, host : &quot;10.20.70.61:27018&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">#初始化副本集配置</span><br><span class="line">rs.initiate(config);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="设置第二个分片副本集-shard3"><a href="#设置第二个分片副本集-shard3" class="headerlink" title="设置第二个分片副本集(shard3)"></a>设置第二个分片副本集(shard3)</h4><ol>
<li>配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# egrep -v ^# shard3.conf</span><br><span class="line">storage:</span><br><span class="line">  dbPath: &#x2F;data&#x2F;mongodb&#x2F;shard3&#x2F;data</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: &#x2F;data&#x2F;mongodb&#x2F;shard3&#x2F;log&#x2F;shard3.log</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27019</span><br><span class="line">  bindIp: 0.0.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  timeZoneInfo: &#x2F;usr&#x2F;share&#x2F;zoneinfo</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">   keyFile: &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;key</span><br><span class="line">   authorization: enabled</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: shard3</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: &quot;shardsvr&quot;</span><br></pre></td></tr></table></figure></li>
<li>制作服务启动文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# cat &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mongod-shard3.service</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;MongoDB Shard3 Database Server</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;mongodb</span><br><span class="line">Group&#x3D;mongodb</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;default&#x2F;mongod</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;mongod --config &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;shard3.conf</span><br><span class="line">PIDFile&#x3D;&#x2F;data&#x2F;mongodb&#x2F;shard3&#x2F;log&#x2F;shard3.pid</span><br><span class="line"># file size</span><br><span class="line">LimitFSIZE&#x3D;infinity</span><br><span class="line"># cpu time</span><br><span class="line">LimitCPU&#x3D;infinity</span><br><span class="line"># virtual memory size</span><br><span class="line">LimitAS&#x3D;infinity</span><br><span class="line"># open files</span><br><span class="line">LimitNOFILE&#x3D;64000</span><br><span class="line"># processes&#x2F;threads</span><br><span class="line">LimitNPROC&#x3D;64000</span><br><span class="line"># locked memory</span><br><span class="line">LimitMEMLOCK&#x3D;infinity</span><br><span class="line"># total threads (user+kernel)</span><br><span class="line">TasksMax&#x3D;infinity</span><br><span class="line">TasksAccounting&#x3D;false</span><br><span class="line"></span><br><span class="line"># Recommended limits for for mongod as specified in</span><br><span class="line"># http:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual&#x2F;reference&#x2F;ulimit&#x2F;#recommended-settings</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>
启动方式一:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# systemctl daemon-reload</span><br><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# systemctl start mongod-shard3.service</span><br><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# systemctl status mongod-shard3.service</span><br></pre></td></tr></table></figure>
启动方式二:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod -f &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;shard3.conf</span><br></pre></td></tr></table></figure>
登陆任意一台服务器，初始化副本集:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongo --port 27019</span><br><span class="line"></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span><br><span class="line">config &#x3D; &#123;</span><br><span class="line">   _id : &quot;shard3&quot;,</span><br><span class="line">   members : [</span><br><span class="line">       &#123;_id : 0, host : &quot;10.20.71.135:27019&quot;,arbiterOnly: true &#125;,</span><br><span class="line">       &#123;_id : 1, host : &quot;10.20.73.182:27019&quot; &#125;,</span><br><span class="line">       &#123;_id : 2, host : &quot;10.20.70.61:27019&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#初始化副本集配置</span><br><span class="line">rs.initiate(config);</span><br></pre></td></tr></table></figure>
<h3 id="配置路由服务器-mongos"><a href="#配置路由服务器-mongos" class="headerlink" title="配置路由服务器 mongos"></a>配置路由服务器 mongos</h3>先启动配置服务器和分片服务器,后启动路由实例:（三台机器）</li>
<li>配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: &#x2F;data&#x2F;mongodb&#x2F;mongos&#x2F;log&#x2F;mongos.log</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 20000</span><br><span class="line">  bindIp: 0.0.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  timeZoneInfo: &#x2F;usr&#x2F;share&#x2F;zoneinfo</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">   keyFile: &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;key</span><br><span class="line">   clusterAuthMode: keyFile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  localPingThresholdMs: 15</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  #监听的配置服务器,只能有1个或者3个 configs为配置服务器的副本集名字</span><br><span class="line">  configDB: &quot;configs&#x2F;10.20.71.135:21000,10.20.73.182:21000,10.20.70.61:21000&quot;</span><br></pre></td></tr></table></figure></li>
<li>制作服务启动文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# cat &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mongos.service</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;MongoDB Mongos Database Server</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;mongodb</span><br><span class="line">Group&#x3D;mongodb</span><br><span class="line">EnvironmentFile&#x3D;-&#x2F;etc&#x2F;default&#x2F;mongod</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;mongos --config &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;mongos.conf</span><br><span class="line">PIDFile&#x3D;&#x2F;data&#x2F;mongodb&#x2F;mongos&#x2F;log&#x2F;mongos.pid</span><br><span class="line"># file size</span><br><span class="line">LimitFSIZE&#x3D;infinity</span><br><span class="line"># cpu time</span><br><span class="line">LimitCPU&#x3D;infinity</span><br><span class="line"># virtual memory size</span><br><span class="line">LimitAS&#x3D;infinity</span><br><span class="line"># open files</span><br><span class="line">LimitNOFILE&#x3D;64000</span><br><span class="line"># processes&#x2F;threads</span><br><span class="line">LimitNPROC&#x3D;64000</span><br><span class="line"># locked memory</span><br><span class="line">LimitMEMLOCK&#x3D;infinity</span><br><span class="line"># total threads (user+kernel)</span><br><span class="line">TasksMax&#x3D;infinity</span><br><span class="line">TasksAccounting&#x3D;false</span><br><span class="line"></span><br><span class="line"># Recommended limits for for mongod as specified in</span><br><span class="line"># http:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual&#x2F;reference&#x2F;ulimit&#x2F;#recommended-settings</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>
启动方式一:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# systemctl daemon-reload</span><br><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# systemctl enable mongos</span><br><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# systemctl start mongos.service</span><br><span class="line">root@mgo-db01cn-p001:&#x2F;data&#x2F;mongodb&#x2F;conf# systemctl status mongos.service</span><br></pre></td></tr></table></figure>
启动方式二:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod -f &#x2F;data&#x2F;mongodb&#x2F;conf&#x2F;shard3.conf</span><br></pre></td></tr></table></figure></li>
<li>启用分片<br>目前搭建了mongodb配置服务器、路由服务器，各个分片服务器，不过应用程序连接到mongos路由服务器并不能使用分片机制，还需要在程序里设置分片配置，让分片生效。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongo --port 20000</span><br><span class="line"></span><br><span class="line">#使用admin数据库</span><br><span class="line">use  admin</span><br><span class="line"></span><br><span class="line">#串联路由服务器与分配副本集</span><br><span class="line">sh.addShard(&quot;shard1&#x2F;10.20.71.135:27017,10.20.73.182:27017,10.20.70.61:27017&quot;)</span><br><span class="line">sh.addShard(&quot;shard2&#x2F;10.20.71.135:27018,10.20.73.182:27018,10.20.70.61:27018&quot;)</span><br><span class="line">sh.addShard(&quot;shard3&#x2F;10.20.71.135:27019,10.20.73.182:27019,10.20.70.61:27019&quot;)</span><br><span class="line"></span><br><span class="line">#查看集群状态</span><br><span class="line">sh.status()</span><br></pre></td></tr></table></figure>
⚠️ : 集群服务启动顺序<br>mongodb的启动顺序是，先启动配置服务器，在启动分片，最后启动mongos.<br>configsvr-&gt;shard-&gt;mongos<br>至此，整个mongodb高可用集群就搭建好了。</li>
</ol>
<h3 id="部署测试"><a href="#部署测试" class="headerlink" title="部署测试"></a>部署测试</h3><ol>
<li>先建一个database及user创建数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建一个admin用户</span><br><span class="line">$ mongo --port 20000</span><br><span class="line">&gt; use admin</span><br><span class="line">&gt; db.createUser(&#123; user: &quot;weadmin&quot;, pwd: &quot;123456&quot;,roles: [&#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125;,&#123; role: &quot;clusterManager&quot;, db : &quot;admin&quot;&#125;],passwordDigestor: &quot;server&quot;&#125;)</span><br><span class="line">&gt; exit</span><br><span class="line"></span><br><span class="line"># 创建一个database的访问用户</span><br><span class="line">$ mongo --username weadmin --password 123456 --authenticationDatabase admin --port 20000 admin</span><br><span class="line">&gt; use test</span><br><span class="line">&gt; db.createUser(&#123;user: &quot;test&quot;,pwd: &quot;123456&quot;,roles: [&#123; role: &quot;dbOwner&quot;, db: &quot;test&quot; &#125;],passwordDigestor: &quot;server&quot;&#125;);</span><br><span class="line">&gt; exit</span><br><span class="line"></span><br><span class="line"># 使用该用户访问database，并插入数据，创建索引</span><br><span class="line">$ mongo --username test --password 123456 --authenticationDatabase test --port 20000  test</span><br><span class="line">#插入测试数据</span><br><span class="line">&gt; for (var i &#x3D; 1; i &lt;&#x3D; 5000; i++)&#123;db.table1.save(&#123;id:i,&quot;name&quot;:&quot;shuke&quot;&#125;)&#125;;</span><br><span class="line">&gt; exit</span><br></pre></td></tr></table></figure></li>
<li>分片生效<br>目前配置服务、路由服务、分片服务、副本集服务都已经串联起来了，但我们的目的是希望插入数据，数据能够自动分片。连接在mongos上，准备让指定的数据库、指定的集合分片生效。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mongo --username weadmin --password 123456 --authenticationDatabase admin --port 20000 admin</span><br><span class="line">&gt; use admin</span><br><span class="line"># 认证</span><br><span class="line">&gt; db.auth(&quot;weadmin&quot;, &quot;123456&quot;)</span><br><span class="line">#指定testdb分片生效</span><br><span class="line">db.runCommand( &#123; enablesharding :&quot;test&quot;&#125;);</span><br><span class="line">#指定数据库里需要分片的集合和片键</span><br><span class="line">db.runCommand( &#123; shardcollection : &quot;test.table1&quot;,key : &#123;id: 1&#125; &#125; )</span><br></pre></td></tr></table></figure>
我们设置testdb的 table1 表需要分片，根据 id 自动分片到 shard1 ，shard2，shard3 上面去。要这样设置是因为不是所有mongodb 的数据库和表 都需要分片！</li>
<li>测试分片配置结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mongo --username test --password 123456 --authenticationDatabase test --port 20000  test</span><br><span class="line">&gt; use test</span><br><span class="line">&gt; db.auth(&quot;test&quot;, &quot;123456&quot;)</span><br><span class="line">#查看分片情况</span><br><span class="line">&gt; db.table1.stats();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>手工部署mongodb集群还是比较麻烦的，所以如果图省事儿，还是使用云厂商提供的PaaS服务好了，比如云数据库 MongoDB。如果一定要自己搭建，还是建议用现成的<a href="https://github.com/twoyao/ansible-mongodb-cluster" target="_blank" rel="noopener">ansible-mongodb-cluster</a>脚本好了。</p>
<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="https://jeremyxu2010.github.io/2018/10/mongodb%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/" target="_blank" rel="noopener">mongodb高可用集群部署 - jeremy的技术点滴</a><br><a href="http://www.ityouknow.com/mongodb/2017/08/05/mongodb-cluster-setup.html" target="_blank" rel="noopener">mongodb 3.4 集群搭建：分片+副本集 - 纯洁的微笑博客</a><br><a href="https://cloud.tencent.com/developer/article/1034843" target="_blank" rel="noopener">搭建 MongoDB分片（sharding） / 分区 / 集群环境 - 云+社区 - 腾讯云</a><br><a href="https://segmentfault.com/a/1190000012376769" target="_blank" rel="noopener">MongoDB副本集配置 - 个人文章 - SegmentFault 思否</a><br><a href="http://www.mongoing.com/docs/core/replica-set-architecture-three-members.html" target="_blank" rel="noopener">三个节点的复制集 — MongoDB Manual 3.4</a><br><a href="https://blog.lijunbo.com/2018/04/02/ubuntu_mongo_install/" target="_blank" rel="noopener">在Ubuntu上安装MongoDB社区版 | 静水流深</a></p>
]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>python-thrift使用实例</title>
    <url>/2020/04/23/python-thrift%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="python-thrift使用实例"><a href="#python-thrift使用实例" class="headerlink" title="python-thrift使用实例"></a>python-thrift使用实例</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>Apache Thrift 是 Facebook 实现的一种高效的、支持多种编程语言的远程服务调用的框架。本文将从 Python开发人员角度简单介绍 Apache Thrift 的架构、开发和使用。</p>
</blockquote>
<hr>
<h3 id="Thrift简介"><a href="#Thrift简介" class="headerlink" title="Thrift简介"></a>Thrift简介</h3><h4 id="Transport"><a href="#Transport" class="headerlink" title="Transport"></a>Transport</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Transport网络读写（socket，http等）抽象，用于和其他thrift组件解耦。</span><br><span class="line">Transport的接口包括：open, close, read, write, flush, isOpen, readAll。</span><br><span class="line">Server端需要ServerTransport（对监听socket的一种抽象），用于接收客户端连接，接口包括：listen, accept, close。</span><br><span class="line">python中Transport的实现包括：TSocket, THttpServer, TSSLSocket, TTwisted, TZlibTransport，都是对某种协议或框架的实现。还有两个装饰器，用于为已有的Transport添加功能，TBufferedTransport（增加缓冲）和TFramedTransport（添加帧）。</span><br><span class="line">在创建server时，传入的时Tranport的工厂，这些Factory包括：TTransportFactoryBase（没有任何修饰，直接返回），TBufferedTransportFactory（返回带缓冲的Transport）和TFramedTransportFactory（返回帧定位的Transport）。</span><br></pre></td></tr></table></figure>
<h4 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Protocol用于对数据格式抽象，在rpc调用时序列化请求和响应。</span><br><span class="line">TProtocol的实现包括：TJSONProtocol，TSimpleJSONProtocol，TBinaryProtocol，TBinaryPotocolAccelerated，TCompactProtocol。</span><br></pre></td></tr></table></figure>
<h4 id="Processor"><a href="#Processor" class="headerlink" title="Processor"></a>Processor</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Processor对stream读写抽象，最终会调用用户编写的handler已响应对应的service。具体的Processor有compiler生成，用户需要实现service的实现类。</span><br></pre></td></tr></table></figure>
<h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Server创建Transport，输入、输出的Protocol，以及响应service的handler，监听到client的请求然后委托给processor处理。</span><br><span class="line">TServer是基类，构造函数的参数包括：</span><br><span class="line">1) processor, serverTransport</span><br><span class="line">2) processor, serverTransport, transportFactory, protocolFactory</span><br><span class="line">3) processor, serverTransport, inputTransportFactory, outputTransportFactory, inputProtocolFactory, outputProtocolFactory </span><br><span class="line">TServer内部实际上需要3）所列的参数，1）和2）会导致对应的参数使用默认值。</span><br><span class="line">TServer的子类包括：TSimpleServer, TThreadedServer, TThreadPoolServer, TForkingServer, THttpServer, TNonblockingServer, TProcessPoolServer</span><br><span class="line">TServer的serve方法用于开始服务，接收client的请求。</span><br></pre></td></tr></table></figure>
<h4 id="Code-generated"><a href="#Code-generated" class="headerlink" title="Code generated"></a>Code generated</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">constants.py: 包含声明的所有常量</span><br><span class="line">ttypes.py: 声明的struct，实现了具体的序列化和反序列化</span><br><span class="line">SERVICE_NAME.py: 对应service的描述文件，包含了：</span><br><span class="line">Iface: service接口定义</span><br><span class="line">Client: client的rpc调用桩</span><br></pre></td></tr></table></figure>
<h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><p>Thrift的用法实际上很简单，定义好IDL，然后实现service对应的handler（方法名、参数列表与接口定义一致接口），最后就是选择各个组件。<br>需要选择的包括：Transport（一般都是socket，只是十分需要选择buffed和framed装饰器factory），Protocol，Server。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>简单记录下在mac下使用python thrift的过程</p>
<ol>
<li><p>安装 Thrift 的 python 库有两种方案(1. pip安装 2. 源码安装)具体参见文末链接<br> 1）pip安装： pip install thrift(最好在venv中使用)</p>
</li>
<li><p>安装 Thrift 的 IDL 编译工具（windows/linux安装见文末链接）<br> 1）mac下安装： brew install thrift<br> $ thrift -version，如果打印出来：Thrift version x.x.x 表明 complier 安装成功</p>
</li>
<li><p>建立项目目录(thrift_demo)并开始编码<br> 1）目录结构(example目录及其下的文件不用手动创建，是通过命令自动生成的，具体细节请往下看)<br> <img src="/2020/04/23/python-thrift%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/74bca25d-d3d4-4d76-b0e1-b1101520d45b/380b63e5.png" alt="dir.png"><br> &lt;1&gt; client目录下的 client.py 实现了客户端用于发送数据并打印接收到 server 端处理后的数据<br> &lt;2&gt; server 目录下的 server.py 实现了服务端用于接收客户端发送的数据，并对数据进行大写处理后返回给客户端<br> &lt;3&gt; thrift_file 用于存放 thrift 的 IDL 文件： *.thrift<br> 2) 定义 Thrift RPC 接口IDL文件 example.thrift:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace py example</span><br><span class="line"></span><br><span class="line">struct Data &#123;</span><br><span class="line">1: string name</span><br><span class="line">2: i32 age</span><br><span class="line">3: string addr</span><br><span class="line">4: i32 code &#x3D; 20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service format_data &#123;</span><br><span class="line">Data do_format(1:Data data),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进入 thrift_file 目录执行：$ thrift -out .. –gen py example.thrift，就会在 thrift_file 的同级目录下生成 python 的包：example<br>3) 实现 server 端server.py:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">sys.path.append(os.path.abspath(os.path.join(os.path.dirname(&#39;__file__&#39;), os.path.pardir)))</span><br><span class="line"></span><br><span class="line">from thrift.transport import TSocket</span><br><span class="line">from thrift.transport import TTransport</span><br><span class="line">from thrift.protocol import TBinaryProtocol</span><br><span class="line">from example.format_data import Client</span><br><span class="line">from example.format_data import Data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__HOST &#x3D; &#39;localhost&#39;</span><br><span class="line">__PORT &#x3D; 9000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    tsocket &#x3D; TSocket.TSocket(__HOST, __PORT)</span><br><span class="line">    transport &#x3D; TTransport.TBufferedTransport(tsocket)</span><br><span class="line">    protocol &#x3D; TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class="line">    client &#x3D; Client(protocol)</span><br><span class="line"></span><br><span class="line">    data &#x3D; Data(&#39;hello,world!&#39;, 123)</span><br><span class="line">    transport.open()</span><br><span class="line">    print(&#39;client-requets&#39;)</span><br><span class="line">    res &#x3D; client.do_format(data)</span><br><span class="line">    # print(client.do_format(data).text)</span><br><span class="line">    print(&#39;server-answer&#39;, res)</span><br><span class="line"></span><br><span class="line">    transport.close()</span><br><span class="line">except Thrift.TException as ex:</span><br><span class="line">    print(ex.message)</span><br></pre></td></tr></table></figure>
<p>4) 实现 client 端client.py:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: shuke</span><br><span class="line">@file: client.py </span><br><span class="line">@time: 2019&#x2F;04&#x2F;03 19:01</span><br><span class="line">@contact: zhaofengfeng@wecash.net</span><br><span class="line">@software:  learn</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># ! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">sys.path.append(os.path.abspath(os.path.join(os.path.dirname(&#39;__file__&#39;), os.path.pardir)))</span><br><span class="line"></span><br><span class="line">from thrift import Thrift</span><br><span class="line">from thrift.transport import TSocket</span><br><span class="line">from thrift.transport import TTransport</span><br><span class="line">from thrift.protocol import TBinaryProtocol</span><br><span class="line">from example.format_data import Client</span><br><span class="line">from example.format_data import Data</span><br><span class="line"></span><br><span class="line">__HOST &#x3D; &#39;localhost&#39;</span><br><span class="line">__PORT &#x3D; 9000</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    tsocket &#x3D; TSocket.TSocket(__HOST, __PORT)</span><br><span class="line">    transport &#x3D; TTransport.TBufferedTransport(tsocket)</span><br><span class="line">    protocol &#x3D; TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class="line">    client &#x3D; Client(protocol)</span><br><span class="line"></span><br><span class="line">    data &#x3D; Data(&#39;shuke&#39;, 18, &quot;BeiJing&quot;, code&#x3D;200)</span><br><span class="line">    transport.open()</span><br><span class="line">    print(&#39;client-requets&#39;)</span><br><span class="line">    res &#x3D; client.do_format(data)</span><br><span class="line">    # print(client.do_format(data).text)</span><br><span class="line">    print(&#39;server-answer&#39;, res, &quot;\n&quot;, res.__dict__)</span><br><span class="line">    transport.close()</span><br><span class="line">except Thrift.TException as ex:</span><br><span class="line">    print(ex.message)</span><br></pre></td></tr></table></figure></li>
<li><p>执行验证结果<br>1) 先启动 server(进入server目录，执行python server.py)，之后再另一个窗口执行 client（进入client目前，执行python client.py）:client 侧控制台打印的结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> $ python client.py</span><br><span class="line">client-requets</span><br><span class="line">server-answer Data(name&#x3D;&#39;SHUKE_Thrift&#39;, age&#x3D;18, addr&#x3D;&#39;BeiJing&#39;, code&#x3D;200)</span><br><span class="line"> &#123;&#39;name&#39;: &#39;SHUKE_Thrift&#39;, &#39;age&#39;: 18, &#39;addr&#39;: &#39;BeiJing&#39;, &#39;code&#39;: 200&#125;</span><br></pre></td></tr></table></figure>
<p>server侧控制台打印的结果为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> $ python server.py</span><br><span class="line">Starting the rpc server at localhost : 9000</span><br><span class="line">shuke 18 BeiJing 200</span><br></pre></td></tr></table></figure>
<p>证明 Thrift 的 RPC 接口定义成功.</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h4><p>在传输协议上总体划分为文本和二进制 ,为节约带宽，提高传输效率，一般情况下使用二进制类型的传输协议为多数.<br>TBinaryProtocol — 二进制编码格式进行数据传输<br>TCompactProtocol — 高效率的、密集的二进制编码格式进行数据传输<br>TJSONProtocol — 使用 JSON 的数据编码协议进行数据传输<br>TSimpleJSONProtocol — 只提供 JSON 只写的协议，适用于通过脚本语言解析<br>TDebugProtocol – 使用易懂的可读的文本格式，以便于 debug</p>
<h4 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h4><p>TSocket — 使用阻塞式 I/O 进行传输，是最常见的模式<br>TFramedTransport — 使用非阻塞方式，按块的大小进行传输<br>TNonblockingTransport — 使用非阻塞方式，用于构建异步客户端<br>TMemoryTransport – 将内存用于 I/O<br>TZlibTransport – 使用 zlib 进行压缩， 与其他传输方式联合使用<br>TFileTransport – 以文件形式进行传输</p>
<h4 id="服务端类型"><a href="#服务端类型" class="headerlink" title="服务端类型"></a>服务端类型</h4><p>TSimpleServer — 单线程服务器端使用标准的阻塞式 I/O<br>TThreadPoolServer —— 多线程服务器端使用标准的阻塞式 I/O<br>TNonblockingServer —— 多线程服务器端使用非阻塞式 I/O</p>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>Thrift 脚本可定义的数据类型包括以下几种类型：</p>
</li>
</ol>
<ul>
<li>基本类型：<ul>
<li>bool：布尔值，true 或 false</li>
<li>byte：8 位有符号整数</li>
<li>i16：16 位有符号整数</li>
<li>i32：32 位有符号整数</li>
<li>i64：64 位有符号整数</li>
<li>double：64 位浮点数</li>
<li>string：未知编码文本或二进制字符串</li>
</ul>
</li>
<li>结构体类型：<ul>
<li>struct：定义公共的对象，类似于 C 语言中的结构体定义</li>
</ul>
</li>
<li>容器类型：<ul>
<li>list：一系列 t1 类型的元素组成的有序表，元素可以重复</li>
<li>set：一系列 t1 类型的元素组成的无序表，元素唯一</li>
<li>map&lt;t1,t2&gt;：key/value 对（key 的类型是 t1 且 key 唯一，value 类型是 t2）</li>
</ul>
</li>
<li>异常类型：<ul>
<li>exception 异常在语法和功能上类似于结构体，它在语义上不同于结构体—当定义一个 RPC 服务时，开发者可能需要声明一个远程方法抛出一个异常。</li>
</ul>
</li>
<li>服务类型：<ul>
<li>service：对应服务的类</li>
</ul>
</li>
</ul>
<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="https://www.cnblogs.com/276815076/p/10078645.html" target="_blank" rel="noopener">python thrift使用实例-博客园</a><br><a href="https://thief.one/2018/10/22/1/" target="_blank" rel="noopener">基于rpc通信的原理及python中的rpc框架 | nMask’s Blog</a><br><a href="https://pypi.org/project/json-rpc/" target="_blank" rel="noopener">json-rpc · PyPI</a><br><a href="https://www.zerorpc.io/" target="_blank" rel="noopener">zerorpc</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>python单例模式</title>
    <url>/2020/04/23/python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="python单例模式"><a href="#python单例模式" class="headerlink" title="python单例模式"></a>python单例模式</h2><h2 id="一-什么是单例模式"><a href="#一-什么是单例模式" class="headerlink" title="一. 什么是单例模式"></a>一. 什么是单例模式</h2><p>单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。</p>
<p>比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个 AppConfig 的类来读取配置文件的信息。如果在程序运行期间，有很多地方都需要使用配置文件的内容，也就是说，很多地方都需要创建 AppConfig 对象的实例，这就导致系统中存在多个 AppConfig 的实例对象，而这样会严重浪费内存资源，尤其是在配置文件内容很多的情况下。事实上，类似 AppConfig 这样的类，我们希望在程序运行期间只存在一个实例对象。</p>
<h2 id="二-如何实现单例模式"><a href="#二-如何实现单例模式" class="headerlink" title="二. 如何实现单例模式"></a>二. 如何实现单例模式</h2><p>在 Python 中，我们可以用多种方法来实现单例模式：<br>使用模块<br>使用 <strong>new</strong><br>使用装饰器（decorator）<br>使用元类（metaclass)</p>
<h3 id="2-1-使用模块"><a href="#2-1-使用模块" class="headerlink" title="2.1 使用模块"></a>2.1 使用模块</h3><p>其实，Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysingleton.py</span><br><span class="line">class My_Singleton(object):</span><br><span class="line">    def foo(self):</span><br><span class="line">        pass</span><br><span class="line">        </span><br><span class="line">my_singleton &#x3D; My_Singleton()</span><br></pre></td></tr></table></figure>
<p>将上面的代码保存在文件 mysingleton.py 中，然后这样使用:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from mysingleton import my_singleton</span><br><span class="line">my_singleton.foo()</span><br></pre></td></tr></table></figure>

<h3 id="2-2-使用new"><a href="#2-2-使用new" class="headerlink" title="2.2 使用new"></a>2.2 使用<strong>new</strong></h3><p><strong>new</strong>()在<strong>init</strong>()之前被调用，用于生成实例对象。利用这个方法和类的属性的特点可以实现设计模式的单例模式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Singeton(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    单例模式</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        if not hasattr(cls, &#39;_instance&#39;):</span><br><span class="line">            # orig &#x3D; super(Singeton, cls)</span><br><span class="line">            cls._instance &#x3D; super(Singeton, cls).__new__(cls, *args, **kwargs)</span><br><span class="line">        return cls._instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyCLass(Singeton):</span><br><span class="line">    a &#x3D; 1</span><br><span class="line"></span><br><span class="line">one &#x3D; MyCLass()</span><br><span class="line">two &#x3D; MyCLass()</span><br><span class="line">print(one is two)</span><br><span class="line">print(one &#x3D;&#x3D; two)</span><br><span class="line">print(id(one), id(two))</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">输出:</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">4436793720 4436793720</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们将类的实例和一个类变量 _instance 关联起来，如果 cls._instance 为 None 则创建实例，否则直接返回 cls._instance</p>
<h3 id="2-3-共享属性"><a href="#2-3-共享属性" class="headerlink" title="2.3 共享属性"></a>2.3 共享属性</h3><p>创建实例时把所有实例的<strong>dict</strong>指向同一个字典,这样它们具有相同的属性和方法.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Borg(object):</span><br><span class="line">    _state &#x3D; &#123;&#125;</span><br><span class="line">    def __new__(cls, *args, **kw):</span><br><span class="line">        ob &#x3D; super(Borg, cls).__new__(cls, *args, **kw)</span><br><span class="line">        ob.__dict__ &#x3D; cls._state</span><br><span class="line">        return ob</span><br><span class="line"></span><br><span class="line">class MyClass2(Borg):</span><br><span class="line">    a &#x3D; 1</span><br><span class="line">    </span><br><span class="line"># 没明白该方式如何实现单例</span><br></pre></td></tr></table></figure>

<h3 id="2-4-装饰器方式"><a href="#2-4-装饰器方式" class="headerlink" title="2.4 装饰器方式"></a>2.4 装饰器方式</h3><p>我们知道，装饰器（decorator）可以动态地修改一个类或函数的功能。这里，我们也可以使用装饰器来装饰某个类，使其只能生成一个实例，代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def singleton(cls):</span><br><span class="line">    instances &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    @wraps(cls)</span><br><span class="line">    def getinstance(*args, **kw):</span><br><span class="line">        if cls not in instances:</span><br><span class="line">            instances[cls] &#x3D; cls(*args, **kw)</span><br><span class="line">        return instances[cls]</span><br><span class="line"></span><br><span class="line">    return getinstance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@singleton</span><br><span class="line">class MyClass(object):</span><br><span class="line">    a &#x3D; 1</span><br><span class="line"></span><br><span class="line">one &#x3D; MyClass()</span><br><span class="line">two &#x3D; MyClass()</span><br><span class="line">print(one is two)</span><br><span class="line">print(one &#x3D;&#x3D; two)</span><br><span class="line">print(id(one), id(two))</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">4492352536 4492352536</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>在上面，我们定义了一个装饰器singleton，它返回了一个内部函数 getinstance，该函数会判断某个类是否在字典 instances 中，如果不存在，则会将 cls 作为 key，cls(*args, **kw)作为 value存到instances中,否则,直接返回 instances[cls]。</p>
<h3 id="2-5-使用metaclass"><a href="#2-5-使用metaclass" class="headerlink" title="2.5 使用metaclass"></a>2.5 使用metaclass</h3><p>元类（metaclass）可以控制类的创建过程，它主要做三件事：</p>
<ul>
<li>拦截类的创建</li>
<li>修改类的定义</li>
<li>返回修改后的类<br>使用元类实现单例模式的代码如下:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Singleton(type):</span><br><span class="line">    _instances &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    def __call__(cls, *args, **kwargs):</span><br><span class="line">        if cls not in cls._instances:</span><br><span class="line">            cls._instances[cls] &#x3D; super(Singleton, cls).__call__(*args, **kwargs)</span><br><span class="line">        return cls._instances[cls]</span><br><span class="line"></span><br><span class="line"># Python2</span><br><span class="line">class MyClass(object):</span><br><span class="line">    __metaclass__ &#x3D; Singleton</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Python3</span><br><span class="line">class MyClass(metaclass&#x3D;Singleton):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>




</li>
</ul>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>在Django REST框架序列化器中动态排除或包含一个字段</title>
    <url>/2020/04/23/%E5%9C%A8Django-REST%E6%A1%86%E6%9E%B6%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E4%B8%AD%E5%8A%A8%E6%80%81%E6%8E%92%E9%99%A4%E6%88%96%E5%8C%85%E5%90%AB%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<h2 id="在Django-REST框架序列化器中动态排除或包含一个字段"><a href="#在Django-REST框架序列化器中动态排除或包含一个字段" class="headerlink" title="在Django REST框架序列化器中动态排除或包含一个字段"></a>在Django REST框架序列化器中动态排除或包含一个字段</h2><p>我在Django REST框架中有一个序列化程序，定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class QuestionSerializer(serializers.Serializer):</span><br><span class="line">    id &#x3D; serializers.CharField()</span><br><span class="line">    question_text &#x3D; QuestionTextSerializer()</span><br><span class="line">    topic &#x3D; TopicSerializer()</span><br></pre></td></tr></table></figure>

<p>现在我有两个使用上述序列化程序的API视图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class QuestionWithTopicView(generics.RetrieveAPIView):</span><br><span class="line">    # I wish to include all three fields - id, question_text</span><br><span class="line">    # and topic in this API.</span><br><span class="line">    serializer_class &#x3D; QuestionSerializer</span><br><span class="line"></span><br><span class="line">class QuestionWithoutTopicView(generics.RetrieveAPIView):</span><br><span class="line">    # I want to exclude topic in this API.</span><br><span class="line">    serializer_class &#x3D; ExamHistorySerializer</span><br></pre></td></tr></table></figure>

<h2 id="一个解决方案是写两个不同的串行器。但是，必须有一个更简单的解决方案来有条件地从给定的序列化程序中排除字段。"><a href="#一个解决方案是写两个不同的串行器。但是，必须有一个更简单的解决方案来有条件地从给定的序列化程序中排除字段。" class="headerlink" title="一个解决方案是写两个不同的串行器。但是，必须有一个更简单的解决方案来有条件地从给定的序列化程序中排除字段。"></a>一个解决方案是写两个不同的串行器。但是，必须有一个更简单的解决方案来有条件地从给定的序列化程序中排除字段。</h2><p>你试过这个技巧吗</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class QuestionSerializer(serializers.Serializer):</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        remove_fields &#x3D; kwargs.pop(&#39;remove_fields&#39;, None)</span><br><span class="line">        super(QuestionSerializer, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        if remove_fields:</span><br><span class="line">            # for multiple fields in a list</span><br><span class="line">            for field_name in remove_fields:</span><br><span class="line">                self.fields.pop(field_name)</span><br><span class="line"></span><br><span class="line">class QuestionWithoutTopicView(generics.RetrieveAPIView):</span><br><span class="line">        serializer_class &#x3D; QuestionSerializer(remove_fields&#x3D;[&#39;field_to_remove1&#39; &#39;field_to_remove2&#39;])</span><br></pre></td></tr></table></figure>
<p>如果没有,值得尝试。</p>
<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="https://codeday.me/bug/20180808/216472.html" target="_blank" rel="noopener">在Django REST框架序列化器中动态排除或包含一个字段</a></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix使用python获取阿里云SLB带宽</title>
    <url>/2020/04/23/zabbix%E4%BD%BF%E7%94%A8python%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91SLB%E5%B8%A6%E5%AE%BD/</url>
    <content><![CDATA[<h2 id="zabbix使用python获取阿里云SLB带宽"><a href="#zabbix使用python获取阿里云SLB带宽" class="headerlink" title="zabbix使用python获取阿里云SLB带宽"></a>zabbix使用python获取阿里云SLB带宽</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/qgRAExPhngfpWON9icxJarejKzj940jmKeg9B7m6hgribxIaWtbYNsndFU2NVpxOIVr9oZAT7Phn93Zulicjnladw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="展示图"></p>
<h3 id="阿里云SDK"><a href="#阿里云SDK" class="headerlink" title="阿里云SDK"></a>阿里云SDK</h3><p>阿里云目前提供了很多的SDK，并且可以使用在线调试工具，虽然有些bug</p>
<p><a href="https://develop.aliyun.com/tools/sdk?#/python" target="_blank" rel="noopener">Python-sdk</a></p>
<p><a href="https://api.aliyun.com/?spm=5176.143622.743215.5.524c6168naUyOU" target="_blank" rel="noopener">在线调试工具</a></p>
<p>但是主页面的SDK列表里面并没有SLB，并且翻了下aliyun-python-sdk-slb (2.1.2)这个包里面好像也没有带宽相关的描述。别急，我们还有云监控的SDK。</p>
<p>这里我们使用了阿里云云监控的SDK（aliyun-python-sdk-cms (5.0.0)）</p>
<p>获取SLB带宽<br>Python2.7调试通过，需要使用pip安装<code>liyun-python-sdk-core，aliyun-python-sdk-cms</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line">#coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">from aliyunsdkcore import client</span><br><span class="line"></span><br><span class="line">from aliyunsdkcms.request.v20170301 import QueryMetricListRequest</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">clt &#x3D; client.AcsClient(&#39;&lt;ACCESSKEY&gt;&#39;,&#39;&lt;SECRETKEY&gt;&#39;,&#39;cn-beijing&#39;)</span><br><span class="line"></span><br><span class="line">request &#x3D; QueryMetricListRequest.QueryMetricListRequest()</span><br><span class="line"></span><br><span class="line">request.set_accept_format(&#39;json&#39;)</span><br><span class="line"></span><br><span class="line">#两个参数按照预设值设定，参见参考资料描述</span><br><span class="line"></span><br><span class="line">request.set_Project(&#39;acs_slb&#39;)</span><br><span class="line"></span><br><span class="line">request.set_Metric(&#39;TrafficTXNew&#39;)</span><br><span class="line"></span><br><span class="line">#只获取1小时内的数据</span><br><span class="line"></span><br><span class="line">start_time &#x3D; time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time.localtime(time.time()-3600))</span><br><span class="line"></span><br><span class="line">timestamp_start &#x3D; int(time.mktime(time.strptime(start_time, &quot;%Y-%m-%d %H:%M:%S&quot;))) * 1000</span><br><span class="line"></span><br><span class="line">request.set_StartTime(timestamp_start)</span><br><span class="line"></span><br><span class="line">#从系统输入参数获取IP地址和SLB-ID</span><br><span class="line"></span><br><span class="line">slbip &#x3D; sys.argv[1]</span><br><span class="line"></span><br><span class="line">slbid &#x3D; sys.argv[2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">request.set_Dimensions(&#123;&#39;instanceId&#39;:slbid,&#39;port&#39;:&#39;443&#39;,&#39;vip&#39;:slbip&#125;)</span><br><span class="line"></span><br><span class="line">request.set_Period(&#39;60&#39;)</span><br><span class="line"></span><br><span class="line">#result &#x3D; clt.do_action(request)</span><br><span class="line"></span><br><span class="line">result &#x3D; clt.do_action_with_exception(request)</span><br><span class="line"></span><br><span class="line">#print result</span><br><span class="line"></span><br><span class="line">#json结果处理</span><br><span class="line"></span><br><span class="line">datadict &#x3D; json.loads(result)</span><br><span class="line"></span><br><span class="line">#取倒数第二条数据，因为倒数第一条不太准</span><br><span class="line"></span><br><span class="line">res &#x3D; datadict[&#39;Datapoints&#39;][-2][&#39;Average&#39;]</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<p>使用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python ali-slb.py  &lt;IP地址&gt;  &lt;SLB的ID&gt;</span><br></pre></td></tr></table></figure>
<p>然后接入zabbix，使用grafana就可以出图了。</p>
]]></content>
      <categories>
        <category>Zabbix</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>实战常用shell编写</title>
    <url>/2020/04/23/%E5%AE%9E%E6%88%98%E5%B8%B8%E7%94%A8shell%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<h2 id="实战常用shell编写"><a href="#实战常用shell编写" class="headerlink" title="实战常用shell编写"></a>实战常用shell编写</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li><p>开头加解释器：<code>#!/bin/bash</code></p>
</li>
<li><p>语法缩进，使用四个空格；多加注释说明。</p>
</li>
<li><p>命名建议规则：变量名大写、局部变量小写，函数名小写，名字体现出实际作用。</p>
</li>
<li><p>默认变量是全局的，在函数中变量local指定为局部变量，避免污染其他作用域。</p>
</li>
<li><p>有两个命令能帮助我调试脚本：set -e 遇到执行非0时退出脚本，set-x 打印执行过程。</p>
</li>
<li><p>写脚本一定先测试再到生产上。</p>
</li>
<li><p>获取随机字符串或数字<br>获取随机8位字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法1：</span><br><span class="line"># echo $RANDOM |md5sum |cut -c 1-8</span><br><span class="line">471b94f2</span><br><span class="line">方法2：</span><br><span class="line"># openssl rand -base64 4</span><br><span class="line">vg3BEg&#x3D;&#x3D;</span><br><span class="line">方法3：</span><br><span class="line"># cat &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;uuid |cut -c 1-8</span><br><span class="line">ed9e032c</span><br></pre></td></tr></table></figure>
<p>获取随机8位数字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法1：</span><br><span class="line"># echo $RANDOM |cksum |cut -c 1-8</span><br><span class="line">23648321</span><br><span class="line">方法2：</span><br><span class="line"># openssl rand -base64 4 |cksum |cut -c 1-8</span><br><span class="line">38571131</span><br><span class="line">方法3：</span><br><span class="line"># date +%N |cut -c 1-8</span><br><span class="line">69024815</span><br></pre></td></tr></table></figure>
<p>cksum：打印CRC效验和统计字节</p>
</li>
<li><p>定义一个颜色输出字符串函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法1：</span><br><span class="line">function echo_color() &#123;</span><br><span class="line">    if [ $1 &#x3D;&#x3D; &quot;green&quot; ]; then</span><br><span class="line">        echo -e &quot;[32;40m$2[0m&quot;</span><br><span class="line">    elif [ $1 &#x3D;&#x3D; &quot;red&quot; ]; then</span><br><span class="line">        echo -e &quot;[31;40m$2[0m&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">方法2：</span><br><span class="line">function echo_color() &#123;</span><br><span class="line">    case $1 in</span><br><span class="line">        green)</span><br><span class="line">            echo -e &quot;[32;40m$2[0m&quot;</span><br><span class="line">            ;;</span><br><span class="line">        red)</span><br><span class="line">            echo -e &quot;[31;40m$2[0m&quot; </span><br><span class="line">            ;;</span><br><span class="line">        *) </span><br><span class="line">            echo &quot;Example: echo_color red string&quot;</span><br><span class="line">    esac</span><br><span class="line">&#125;</span><br><span class="line">使用方法：echo_color green &quot;test&quot;</span><br></pre></td></tr></table></figure>
<p>function关键字定义一个函数，可加或不加。</p>
</li>
<li><p>批量创建用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">DATE&#x3D;$(date +%F_%T)</span><br><span class="line">USER_FILE&#x3D;user.txt</span><br><span class="line">echo_color()&#123;</span><br><span class="line">    if [ $1 &#x3D;&#x3D; &quot;green&quot; ]; then</span><br><span class="line">        echo -e &quot;[32;40m$2[0m&quot;</span><br><span class="line">    elif [ $1 &#x3D;&#x3D; &quot;red&quot; ]; then</span><br><span class="line">        echo -e &quot;[31;40m$2[0m&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"># 如果用户文件存在并且大小大于0就备份</span><br><span class="line">if [ -s $USER_FILE ]; then</span><br><span class="line">    mv $USER_FILE $&#123;USER_FILE&#125;-$&#123;DATE&#125;.bak</span><br><span class="line">    echo_color green &quot;$USER_FILE exist, rename $&#123;USER_FILE&#125;-$&#123;DATE&#125;.bak&quot;</span><br><span class="line">fi</span><br><span class="line">echo -e &quot;User	Password&quot; &gt;&gt; $USER_FILE</span><br><span class="line">echo &quot;----------------&quot; &gt;&gt; $USER_FILE</span><br><span class="line">for USER in user&#123;1..10&#125;; do</span><br><span class="line">    if ! id $USER &amp;&gt;&#x2F;dev&#x2F;null; then</span><br><span class="line">        PASS&#x3D;$(echo $RANDOM |md5sum |cut -c 1-8)</span><br><span class="line">        useradd $USER</span><br><span class="line">        echo $PASS |passwd --stdin $USER &amp;&gt;&#x2F;dev&#x2F;null</span><br><span class="line">        echo -e &quot;$USER	$PASS&quot; &gt;&gt; $USER_FILE</span><br><span class="line">        echo &quot;$USER User create successful.&quot;</span><br><span class="line">    else</span><br><span class="line">        echo_color red &quot;$USER User already exists!&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
<li><p>检查软件包是否安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">if rpm -q sysstat &amp;&gt;&#x2F;dev&#x2F;null; then</span><br><span class="line">    echo &quot;sysstat is already installed.&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;sysstat is not installed!&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查服务状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">PORT_C&#x3D;$(ss -anu |grep -c 123)</span><br><span class="line">PS_C&#x3D;$(ps -ef |grep ntpd |grep -vc grep)</span><br><span class="line">if [ $PORT_C -eq 0 -o $PS_C -eq 0 ]; then</span><br><span class="line">    echo &quot;内容&quot; | mail -s &quot;主题&quot; dst@example.com</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查主机存活状态<br>方法1：将错误IP放到数组里面判断是否ping失败三次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash  </span><br><span class="line">IP_LIST&#x3D;&quot;192.168.18.1 192.168.1.1 192.168.18.2&quot;</span><br><span class="line">for IP in $IP_LIST; do</span><br><span class="line">    NUM&#x3D;1</span><br><span class="line">    while [ $NUM -le 3 ]; do</span><br><span class="line">        if ping -c 1 $IP &gt; &#x2F;dev&#x2F;null; then</span><br><span class="line">            echo &quot;$IP Ping is successful.&quot;</span><br><span class="line">            break</span><br><span class="line">        else</span><br><span class="line">            # echo &quot;$IP Ping is failure $NUM&quot;</span><br><span class="line">            FAIL_COUNT[$NUM]&#x3D;$IP</span><br><span class="line">            let NUM++</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    if [ $&#123;#FAIL_COUNT[*]&#125; -eq 3 ];then</span><br><span class="line">        echo &quot;$&#123;FAIL_COUNT[1]&#125; Ping is failure!&quot;</span><br><span class="line">        unset FAIL_COUNT[*]</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>方法2：将错误次数放到FAIL_COUNT变量里面判断是否ping失败三次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash  </span><br><span class="line">IP_LIST&#x3D;&quot;192.168.18.1 192.168.1.1 192.168.18.2&quot;</span><br><span class="line">for IP in $IP_LIST; do</span><br><span class="line">    FAIL_COUNT&#x3D;0</span><br><span class="line">    for ((i&#x3D;1;i&lt;&#x3D;3;i++)); do</span><br><span class="line">        if ping -c 1 $IP &gt;&#x2F;dev&#x2F;null; then</span><br><span class="line">            echo &quot;$IP Ping is successful.&quot;</span><br><span class="line">            break</span><br><span class="line">        else</span><br><span class="line">            # echo &quot;$IP Ping is failure $i&quot;</span><br><span class="line">            let FAIL_COUNT++</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    if [ $FAIL_COUNT -eq 3 ]; then</span><br><span class="line">        echo &quot;$IP Ping is failure!&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>方法3：利用for循环将ping通就跳出循环继续，如果不跳出就会走到打印ping失败</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">ping_success_status() &#123;</span><br><span class="line">    if ping -c 1 $IP &gt;&#x2F;dev&#x2F;null; then</span><br><span class="line">        echo &quot;$IP Ping is successful.&quot;</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">IP_LIST&#x3D;&quot;192.168.18.1 192.168.1.1 192.168.18.2&quot;</span><br><span class="line">for IP in $IP_LIST; do</span><br><span class="line">    ping_success_status</span><br><span class="line">    ping_success_status</span><br><span class="line">    ping_success_status</span><br><span class="line">    echo &quot;$IP Ping is failure!&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
<li><p>监控CPU、内存和硬盘利用率</p>
</li>
</ol>
<ul>
<li>CPU<br>借助vmstat工具来分析CPU统计信息。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">DATE&#x3D;$(date +%F&quot; &quot;%H:%M)</span><br><span class="line">IP&#x3D;$(ifconfig eth0 |awk -F  [ :]+   &#x2F;inet addr&#x2F;&#123;print $4&#125; )  # 只支持CentOS6</span><br><span class="line">MAIL&#x3D;&quot;example@mail.com&quot;</span><br><span class="line">if ! which vmstat &amp;&gt;&#x2F;dev&#x2F;null; then</span><br><span class="line">    echo &quot;vmstat command no found, Please install procps package.&quot; </span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line">US&#x3D;$(vmstat |awk  NR&#x3D;&#x3D;3&#123;print $13&#125; )</span><br><span class="line">SY&#x3D;$(vmstat |awk  NR&#x3D;&#x3D;3&#123;print $14&#125; )</span><br><span class="line">IDLE&#x3D;$(vmstat |awk  NR&#x3D;&#x3D;3&#123;print $15&#125; )</span><br><span class="line">WAIT&#x3D;$(vmstat |awk  NR&#x3D;&#x3D;3&#123;print $16&#125; )</span><br><span class="line">USE&#x3D;$(($US+$SY))</span><br><span class="line">if [ $USE -ge 50 ]; then</span><br><span class="line">    echo &quot;</span><br><span class="line">    Date: $DATE</span><br><span class="line">    Host: $IP</span><br><span class="line">    Problem: CPU utilization $USE</span><br><span class="line">    &quot; | mail -s &quot;CPU Monitor&quot; $MAIL</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li>memory<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">DATE&#x3D;$(date +%F&quot; &quot;%H:%M)</span><br><span class="line">IP&#x3D;$(ifconfig eth0 |awk -F  [ :]+   &#x2F;inet addr&#x2F;&#123;print $4&#125; )  </span><br><span class="line">MAIL&#x3D;&quot;example@mail.com&quot;</span><br><span class="line">TOTAL&#x3D;$(free -m |awk  &#x2F;Mem&#x2F;&#123;print $2&#125; )</span><br><span class="line">USE&#x3D;$(free -m |awk  &#x2F;Mem&#x2F;&#123;print $3-$6-$7&#125; )</span><br><span class="line">FREE&#x3D;$(($TOTAL-$USE))</span><br><span class="line"># 内存小于1G发送报警邮件</span><br><span class="line">if [ $FREE -lt 1024 ]; then</span><br><span class="line">    echo &quot;</span><br><span class="line">    Date: $DATE</span><br><span class="line">    Host: $IP</span><br><span class="line">    Problem: Total&#x3D;$TOTAL,Use&#x3D;$USE,Free&#x3D;$FREE</span><br><span class="line">    &quot; | mail -s &quot;Memory Monitor&quot; $MAIL</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li>Disk<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">DATE&#x3D;$(date +%F&quot; &quot;%H:%M)</span><br><span class="line">IP&#x3D;$(ifconfig eth0 |awk -F  [ :]+   &#x2F;inet addr&#x2F;&#123;print $4&#125; )  </span><br><span class="line">MAIL&#x3D;&quot;example@mail.com&quot;</span><br><span class="line">TOTAL&#x3D;$(fdisk -l |awk -F [: ]+   BEGIN&#123;OFS&#x3D;&quot;&#x3D;&quot;&#125;&#x2F;^Disk &#x2F;dev&#x2F;&#123;printf &quot;%s&#x3D;%sG,&quot;,$2,$3&#125; )</span><br><span class="line">PART_USE&#x3D;$(df -h |awk  BEGIN&#123;OFS&#x3D;&quot;&#x3D;&quot;&#125;&#x2F;^&#x2F;dev&#x2F;&#123;print $1,int($5),$6&#125; )</span><br><span class="line">for i in $PART_USE; do</span><br><span class="line">    PART&#x3D;$(echo $i |cut -d&quot;&#x3D;&quot; -f1)</span><br><span class="line">    USE&#x3D;$(echo $i |cut -d&quot;&#x3D;&quot; -f2)</span><br><span class="line">    MOUNT&#x3D;$(echo $i |cut -d&quot;&#x3D;&quot; -f3)</span><br><span class="line">    if [ $USE -gt 80 ]; then</span><br><span class="line">        echo &quot;</span><br><span class="line">        Date: $DATE</span><br><span class="line">        Host: $IP</span><br><span class="line">        Total: $TOTAL</span><br><span class="line">        Problem: $PART&#x3D;$USE($MOUNT)</span><br><span class="line">        &quot; | mail -s &quot;Disk Monitor&quot; $MAIL</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="8">
<li>批量主机磁盘利用率监控<br>前提监控端和被监控端SSH免交互登录或者密钥登录。<br>写一个配置文件保存被监控主机SSH连接信息，文件内容格式：IP User Port<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">HOST_INFO&#x3D;host.info</span><br><span class="line">for IP in $(awk  &#x2F;^[^#]&#x2F;&#123;print $1&#125;  $HOST_INFO); do</span><br><span class="line">    USER&#x3D;$(awk -v ip&#x3D;$IP  ip&#x3D;&#x3D;$1&#123;print $2&#125;  $HOST_INFO)</span><br><span class="line">    PORT&#x3D;$(awk -v ip&#x3D;$IP  ip&#x3D;&#x3D;$1&#123;print $3&#125;  $HOST_INFO)</span><br><span class="line">    TMP_FILE&#x3D;&#x2F;tmp&#x2F;disk.tmp</span><br><span class="line">    ssh -p $PORT $USER@$IP  df -h  &gt; $TMP_FILE</span><br><span class="line">    USE_RATE_LIST&#x3D;$(awk  BEGIN&#123;OFS&#x3D;&quot;&#x3D;&quot;&#125;&#x2F;^&#x2F;dev&#x2F;&#123;print $1,int($5)&#125;  $TMP_FILE)</span><br><span class="line">    for USE_RATE in $USE_RATE_LIST; do</span><br><span class="line">        PART_NAME&#x3D;$&#123;USE_RATE%&#x3D;*&#125;</span><br><span class="line">        USE_RATE&#x3D;$&#123;USE_RATE#*&#x3D;&#125;</span><br><span class="line">        if [ $USE_RATE -ge 80 ]; then</span><br><span class="line">            echo &quot;Warning: $PART_NAME Partition usage $USE_RATE%!&quot;</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
<li>检查网站可用性</li>
</ol>
<ul>
<li>检查URL可用性<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法1：</span><br><span class="line">check_url() &#123;</span><br><span class="line">    HTTP_CODE&#x3D;$(curl -o &#x2F;dev&#x2F;null --connect-timeout 3 -s -w &quot;%&#123;http_code&#125;&quot; $1)</span><br><span class="line">    if [ $HTTP_CODE -ne 200 ]; then</span><br><span class="line">        echo &quot;Warning: $1 Access failure!&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">方法2：</span><br><span class="line">check_url() &#123;</span><br><span class="line">if ! wget -T 10 --tries&#x3D;1 --spider $1 &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1; then  </span><br><span class="line">#-T超时时间，--tries尝试1次，--spider爬虫模式</span><br><span class="line">        echo &quot;Warning: $1 Access failure!&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
使用方法：<code>check_url www.baidu.com</code></li>
<li>判断三次URL可用性<br>思路与上面检查主机存活状态一样。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法1：利用循环技巧，如果成功就跳出当前循环，否则执行到最后一行</span><br><span class="line">#!&#x2F;bin&#x2F;bash  </span><br><span class="line">check_url() &#123;</span><br><span class="line">    HTTP_CODE&#x3D;$(curl -o &#x2F;dev&#x2F;null --connect-timeout 3 -s -w &quot;%&#123;http_code&#125;&quot; $1)</span><br><span class="line">    if [ $HTTP_CODE -eq 200 ]; then</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">URL_LIST&#x3D;&quot;www.baidu.com www.agasgf.com&quot;</span><br><span class="line">for URL in $URL_LIST; do</span><br><span class="line">    check_url $URL</span><br><span class="line">    check_url $URL</span><br><span class="line">    check_url $URL</span><br><span class="line">    echo &quot;Warning: $URL Access failure!&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法2：错误次数保存到变量</span><br><span class="line">#!&#x2F;bin&#x2F;bash  </span><br><span class="line">URL_LIST&#x3D;&quot;www.baidu.com www.agasgf.com&quot;</span><br><span class="line">for URL in $URL_LIST; do</span><br><span class="line">    FAIL_COUNT&#x3D;0</span><br><span class="line">    for ((i&#x3D;1;i&lt;&#x3D;3;i++)); do</span><br><span class="line">        HTTP_CODE&#x3D;$(curl -o &#x2F;dev&#x2F;null --connect-timeout 3 -s -w &quot;%&#123;http_code&#125;&quot; $URL)</span><br><span class="line">        if [ $HTTP_CODE -ne 200 ]; then</span><br><span class="line">            let FAIL_COUNT++</span><br><span class="line">        else</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    if [ $FAIL_COUNT -eq 3 ]; then</span><br><span class="line">        echo &quot;Warning: $URL Access failure!&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法3：错误次数保存到数组</span><br><span class="line">#!&#x2F;bin&#x2F;bash  </span><br><span class="line">URL_LIST&#x3D;&quot;www.baidu.com www.agasgf.com&quot;</span><br><span class="line">for URL in $URL_LIST; do</span><br><span class="line">    NUM&#x3D;1</span><br><span class="line">    while [ $NUM -le 3 ]; do</span><br><span class="line">        HTTP_CODE&#x3D;$(curl -o &#x2F;dev&#x2F;null --connect-timeout 3 -s -w &quot;%&#123;http_code&#125;&quot; $URL)</span><br><span class="line">        if [ $HTTP_CODE -ne 200 ]; then</span><br><span class="line">            FAIL_COUNT[$NUM]&#x3D;$IP  #创建数组，以$NUM下标，$IP元素</span><br><span class="line">            let NUM++</span><br><span class="line">        else</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    if [ $&#123;#FAIL_COUNT[*]&#125; -eq 3 ]; then</span><br><span class="line">        echo &quot;Warning: $URL Access failure!&quot;</span><br><span class="line">        unset FAIL_COUNT[*]    #清空数组</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="10">
<li>检查MySQL主从同步状态<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash  </span><br><span class="line">USER&#x3D;bak</span><br><span class="line">PASSWD&#x3D;123456</span><br><span class="line">IO_SQL_STATUS&#x3D;$(mysql -u$USER -p$PASSWD -e  show slave statusG  |awk -F:  &#x2F;Slave_.*_Running&#x2F;&#123;gsub(&quot;: &quot;,&quot;:&quot;);print $0&#125; )  #gsub去除冒号后面的空格</span><br><span class="line">for i in $IO_SQL_STATUS; do</span><br><span class="line">    THREAD_STATUS_NAME&#x3D;$&#123;i%:*&#125;</span><br><span class="line">    THREAD_STATUS&#x3D;$&#123;i#*:&#125;</span><br><span class="line">    if [ &quot;$THREAD_STATUS&quot; !&#x3D; &quot;Yes&quot; ]; then</span><br><span class="line">        echo &quot;Error: MySQL Master-Slave $THREAD_STATUS_NAME status is $THREAD_STATUS!&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>SHELL</category>
      </categories>
      <tags>
        <tag>SHELL</tag>
      </tags>
  </entry>
  <entry>
    <title>一些python相关的知识点整理</title>
    <url>/2020/04/23/%E4%B8%80%E4%BA%9Bpython%E7%9B%B8%E5%85%B3%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="django相关"><a href="#django相关" class="headerlink" title="django相关"></a>django相关</h3><ol>
<li><p>中间件<br>中间件一般做认证或批量请求处理，django中的中间件，其实是一个类，在请求和结束后，django会根据自己的规则在合适的时机执行中间件中相应的方法，<br>如请求过来 执行process_request, view，process_response方法</p>
</li>
<li><p>Django、Tornado、Flask各自的优势<br>Django：Django无socket，django的目的是简便，快速开发，并遵循MVC设计，多个组件可以很方便的以“插件”形式服务于整个框架，<br>django有许多功能强大的第三方插件。django具有很强的可扩展性。<br>Tornado：它是非阻塞式服务器，而且速度相当快，得力于其 非阻塞的方式和对epoll的运用，Future对象，缺点：没有session，需要自定制<br>Flask：是一个微型的web框架，配合SQLALchemy来使用，jinja2模板， werkzeug接口                  </p>
</li>
<li><p>django版本，Python版本，linux版本<br>django：1.11<br>Python：3.5<br>linux：6.8</p>
</li>
<li><p>django的template的注释是什么样子的<br>单行：<br>多行注释：&#123;%comment%&#123;&#123;</p>
</li>
<li><p>django怎么弄并发的<br>nginx+uwsig为django提供高并发，nginx的并发能力超过，单台并发能力过完，在纯静态的web服务中更是突出其优越的地方，由于底层使用epoll异步IO模型进行处理。</p>
</li>
<li><p>tornodo的ioloop知道是什么吗？<br>事件循环</p>
</li>
<li><p>select_related和prefetch_related，Q和F<br>select_related：一对多使用，查询主动做连表<br>prefetch_related：多对多或者一对多的时候使用，不做连表，做多次查询<br>Q：用于构造复杂查询条件<br>F：更新时用于获取原来的值，专门取对象中某一列进行操作</p>
</li>
<li><p>什么是ORM？<br>ORM，即Object-Relational Mapping（对象关系映射），它的作用是在关系型数据库和业务实体对象之间做一个映射<br>ORM优缺点：<br>优点：摆脱复杂的SQL操作，适应快速开发，让数据结果变得简单，数据库迁移成本更低<br>缺点：性能较差，不适用于大型应用，复杂的SQL操作还需要通过SQL语句实现</p>
</li>
<li><p>CORS跨域资源共享<br>首先会发送”预检”opption”，请求，如果”预检”成功，则发送真实数据。</p>
</li>
<li><p>Django的Form主要具有以下功能？<br>生成HTMl标签，验证用户数据 is_vaild，HTML Form提交保留上次提交数据，初始化页面显示内容</p>
</li>
<li><p>CBV和FBV<br>CBV在指定的类上面加上装饰器或在此方法上面添加装饰器 @method_decorator,并继承view</p>
</li>
<li><p>cookie及session<br>cookie：是保留在客户端上面的一组键值对，cookie不是很安全，别人可以分析存放在本地的cookie<br>session：是保存在服务器上面的一组键值对，依赖与cookie，安全指数比cookie高</p>
</li>
<li><p>django的请求生命周期<br>请求来了先到uwsgi，把请求做一部分分装给django框架，然后经过所有的中间件，路由，视图，视图处理再返回给中间件，中间件在返回给uwsgi，在返回给用户。</p>
</li>
<li><p>uwsgi和wsgi<br>wsgi：是web服务器网关接口，是pyhton应用程序或框架和web服务器之间的一种接口，其广泛使用的是django框架。<br>uwsgi：是一个web服务器，它实现了wsgi协议，Nginx中HttpUwsgiModule的作用是与Uwsgi服务器进行交换</p>
</li>
<li><p>解释下django - debug -toolbar的使用<br>使用django开发站点时，可以使用django-debug-toolbar来进行调试，在settings.py中添加 ‘debug—toolbar.midleware.Debug ToolbarMiddleware’到项目的MIDDLEWARE_CLASSES内。</p>
</li>
</ol>
<h3 id="Python部分"><a href="#Python部分" class="headerlink" title="Python部分"></a>Python部分</h3><ol>
<li><p><strong>new</strong>.<strong>init</strong>区别，如何实现单例模式，有什么优点<br><strong>new</strong>是一个静态方法，<strong>init</strong>是一个实例方法<br><strong>new</strong>返回一个创建的实例，<strong>init</strong>什么都不返回<br><strong>new</strong>返回一个cls的实例时后面的<strong>init</strong>才能被调用<br>当创建一个新实例时调用<strong>new</strong>，初始化一个实例时调用<strong>init</strong></p>
</li>
<li><p>深浅拷贝<br>浅拷贝只是增加了一个指针指向一个存在的地址，而深拷贝是增加一个指针并且开辟了新的内存，这个增加的指针指向这个新的内存，<br>采用浅拷贝的情况，释放内存，会释放同一内存，深拷贝就不会出现释放同一内存的错误</p>
</li>
<li><p>HTTP/IP相关协议，分别位于哪层<br>http协议是超文本传输协议，http协议是基于TCP/IP通信协议来传递数据<br>http协议工作与c/s架构上，浏览器作为http的客户端通过URL向http服务端即web服务器发送所用请求。web服务器收到所有请求后，向客户端发送响应信息，<br>http特点是短连接，无状态<br>地址栏键输入URL，按下回车之后经历了什么？</p>
</li>
<li><p>浏览器向DNS服务器请求解析该URL中的域名所对应的IP地址</p>
</li>
<li><p>解析出IP地址后，根据IP地址和默认端口80，和服务器建立TCP连接</p>
</li>
<li><p>浏览器发出读取文件的http请求，该请求报文作为TCP三次握手的第三个报文的数据发送给服务器</p>
</li>
<li><p>服务器对浏览器请求做出响应，并把对应的html文件发送给浏览器</p>
</li>
<li><p>释放TCP连接</p>
</li>
<li><p>浏览器将该HMTL渲染并显示内容</p>
</li>
<li><p>TCP/UDP区别<br>TCP协议是面向连接，保证高可靠性（数据无丢失，数据无失序，数据无错误，数据无重复达到）传输层协议<br>UDP：数据丢失，无秩序的传输层协议（qq基于udp协议）</p>
</li>
<li><p>webscoket<br>websocket是基于http协议的，可持续化连接<br>轮询：浏览器每隔几秒就发送一次请求，询问服务器是否有新消息<br>长轮询：客户端发起连接后，如果没有消息，就一直不返回response给客户端，直到有消息返回，返回完之后，客户端再次发起连接</p>
</li>
<li><p>RabbitMQ:<br>服务器端有Erlang语言来编写，支持多种客户端，只会ajax，用于分布式系统中存储转发消息，在易用性、扩展性、高可用性的方面不俗。<br>connection是RabbitMQ的socket连接，它封装了socket部分相关协议逻辑<br>connectionFactroy为connection的制造工厂<br>channel是我们与RabbitMQ打交道的最重要的一个接口，大部分的业务操作是在chaanel这个接口中完成，包括定义Queue、定义Exchange、<br>绑定Queue与Exchange,发布消息等</p>
</li>
<li><p>装饰器<br>调用装饰器其实是一个闭包函数，为其他函数添加附加功能，不修改被修改的源代码和不修改被修饰的方式，装饰器的返回值也是一个函数对象。<br>比如：插入日志、性能测试、事物处理、缓存、权限验证等，有了装饰器，就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。</p>
</li>
<li><p>闭包</p>
</li>
<li><p>必须有一个内嵌函数</p>
</li>
<li><p>内嵌函数必须引用外部函数的变量（该函数包含对外作用域而不是全局作用域名字的引用）</p>
</li>
<li><p>外部函数的返回值必须是内嵌函数</p>
</li>
<li><p>迭代器与生成器<br>迭代可迭代对象对应_iter_（方法）和迭代器对应_next_（方法）的一个过程<br>生成器：包括含有yield这个关键字，生成器也是迭代器，调动next把函数变成迭代器。</p>
</li>
<li><p>classmethod，staticmethod，property<br>类方法：将类的函数转换成类方法，函数上装饰@classmethod会将函数的自动传值参数改成cls<br>静态方法：此方法相当于给类扩展一个功能，将类内的函数实例化，给类或对象使用，此时类内的函数就是普通函数，不管是类还是实例化的对象都可以使用<br>实例化：类的实例化就会产生一个实例（对象），可以理解为类（）把虚拟的东西实例化，得到具体存在的值</p>
</li>
<li><p>常用的状态码<br>200–服务器成功返回网页<br>204–请求收到,但返回信息为空<br>304–客户端已经执行了GET,但文件未变化<br>400–错误请求，如语法错误<br>403–无权限访问<br>404–请求的页面不存在<br>500–服务器产生内部错误<br>‍</p>
</li>
<li><p>多进程，多线程，协程，GIL<br>GIL:全局解释器锁，是锁在cpython解释器上，导致同一时刻，同一进程只能有一个线程被执行<br>多进程：多进程模块multiprocessing来实现，cpu密集型，IO计算型可以用多进程<br>多线程：多线程模块threading来实现，IO密集型，多线程可以提高效率<br>协程：依赖于geenlet，对于多线程应用。cpu通过切片的方式来切换线程间的执行，遇到IO操作自动切换，线程切换时需要耗时，<br>而协成好处没有切换的消耗，没有锁定概念。<br>进程：是资源管理单位，进行是相互独立的，实现并发和并发<br>线程：是最小的执行单位，线程的出现为了降低上下文切换的消耗，提供系统的并发性</p>
</li>
<li><p>IO多路复用/异步非阻塞<br>IO多路复用：通过一种机制，可以监听多个描述符 select/poll/epoll<br>select：连接数受限，查找配对速度慢，数据由内核拷贝到用户态<br>poll：改善了连接数，但是还是查找配对速度慢，数据由内核拷贝到用户态<br>epoll：epoll是linux下多路复用IO接口，是select/poll的增强版，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率<br>异步非阻塞：异步体现在回调上，回调就是有消息返回时告知一声儿进程进行处理。非阻塞就是不等待，不需要进程等待下去，<br>继续执行其他操作，不管其他进程的状态。</p>
</li>
<li><p>PEP8规范，规范的好处是什么？</p>
</li>
<li><p>缩进：4个空实现缩进，尽量不使用Tab</p>
</li>
<li><p>行：没行最大长度不超过79，换行可以使用反斜杠</p>
</li>
<li><p>命名规范：</p>
</li>
<li><p>注释规范：</p>
</li>
<li><p>range-and-xrange<br>都在循环时使用，xrange内存性能更好，xrange用法与range完全相同，range一个生成list对象，xrange是生成器</p>
</li>
<li><p>with上下文机制原理<br>_enter_和_exit_，上下文管理协议，即with语句，为了让一个对象兼容with语句，必须在这个对象类中声明_enter_和_exit_方法，<br>使用with语句的目的就是把代码块放入with中执行，with结束后，自动完成清理工作，无须收到干预</p>
</li>
<li><p>经典类、新式类<br>经典类遵循：深度优先，python2中<br>新式类遵循：广度优先，Python3中</p>
</li>
<li><p>有没有一个工具可以帮助查找Python的bug和进行静态的代码分析？<br>PyChecker是一个Python代码的静态分析工具，它可以帮助查找Python代码的bug，会对代码的复杂度和格式提出警告，<br>Pylint是另外一个工具可以进行codingstandard检查  </p>
</li>
<li><p>Python是如何进行内存管理的</p>
</li>
<li><p>对象引用计数：<br>  引用计数增加的情况：<br>  来保持追踪内存中的对象，所有对象都用引用计数，一个对象分配一个新名称<br>  将其放入一个容器中（列表，字典，元祖）<br>  引用计数减少的情况：<br>  使用del语句对对象别名显示的销毁<br>  引用超出作用域或被重新赋值<br>  sys.getrefcount()函数可以获得对象的当前引用计数</p>
</li>
<li><p>标记-清除机制</p>
</li>
<li><p>分代技术</p>
</li>
<li><p>什么是python？使用python有什么好处？<br>python是一种编程语言，它有对象、模块、线程、异常处理和自动内存管理。它简洁，简单、方便、容易扩展、有许多自带的数据结果，而且它开源</p>
</li>
<li><p>什么是pickling和unpickling？<br>Pickle模块读入任何python对象，将它们转换成字符串，然后使用dump函数将其转储到一个文件中——这个过程叫做pickling<br>反之从存储的字符串文件中提取原始python对象的过程，叫做unpickling</p>
</li>
<li><p>python是如何被解释的？<br>Python是一种解释性语言，它的源代码可以直接运行，Python解释器会将源代码转换成中间语言，之后再翻译成机器码再执行</p>
</li>
<li><p>数组和元祖之间的区别是什么？<br>数组和元祖之间的区别：数组内容可以被修改，而元祖内容是只读的，不可被修改的，另外元祖可以被哈希，比如作为字典的key</p>
</li>
<li><p>参数按值传递和引用传递是怎么实现的？<br>python中的一切都是类，所有的变量都是一个对象的引用。引用的值是由函数确定的，因此无法被改变，但是如果一个对象是可以被修改的，你可以改动对象</p>
</li>
<li><p>Python都有哪些自带的数据结构？<br>Python自带的数据结构分为可变和不可变的：可变的有：数组、集合、字典，不可变的是：字符串、元祖、整数</p>
</li>
<li><p>什么是python的命名空间？<br>在python中，所有的名字都存在于一个空间中，它们在改空间中存在和被操作——这就是命名空间，它就好像一个盒子，在每个变量名字都对应装着一个对象，<br>当查询变量的时候，会从该盒子里面寻找相应的对象</p>
</li>
<li><p>python中的unittest是什么？<br>在python中，unittest是python中的单元测试框架，它拥有支持共享搭建、自动测试、在测试中暂停代码、将不同测试迭代成一组</p>
</li>
<li><p><em>args与*</em>kwargs</p>
</li>
</ol>
<p><em>args代表位置参数，它会接收任意多个参数并把这些参数作为元祖传递给函数。*</em>kwargs代表的关键字参数，返回的是字典，位置参数一定要放在关键字前面</p>
<ol start="29">
<li><p>在Python中什么是slicing？<br>slicing是一种在有序的对象类型中（数组、元祖、字符串）节选某一段的语法</p>
</li>
<li><p>中的docstring是什么？<br>Python中文档字符串被称为docstring，它在Python中的作用是为函数、模块和类注释生成文档</p>
</li>
<li><p>os与sys区别：<br>os是模块负责程序与操作系统的交互，提供了访问操作系统底层的接口<br>sys模块是负责程序与python解释器的交互，提供了一系列的函数和变量，用于操控Python时运行的环境</p>
</li>
<li><p>实现一个单例模式<br>_new_（）在 _init_（）之前被调用，用于生成实例对象。利用这个方法和类的属性的特点可以实现设计模式的单例模式。<br>单例模式是指创建唯一对象，单例模式设计的类只能实例，实例化1个对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Singleton(object):</span><br><span class="line">    __instance&#x3D;None</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        if Singleton.__instance is None:</span><br><span class="line">            Singleton.__instance&#x3D;object.__new__(cls,*args,**kwargs)</span><br><span class="line">        return Singleton.__instance</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>同时迭代多个序列</title>
    <url>/2020/04/23/%E5%90%8C%E6%97%B6%E8%BF%AD%E4%BB%A3%E5%A4%9A%E4%B8%AA%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h2 id="同时迭代多个序列"><a href="#同时迭代多个序列" class="headerlink" title="同时迭代多个序列"></a>同时迭代多个序列</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>你想同时迭代多个序列，每次分别从一个序列中取一个元素。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>为了同时迭代多个序列，使用 zip() 函数。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; xpts &#x3D; [1, 5, 4, 2, 10, 7]</span><br><span class="line">&gt;&gt;&gt; ypts &#x3D; [101, 78, 37, 15, 62, 99]</span><br><span class="line">&gt;&gt;&gt; for x, y in zip(xpts, ypts):</span><br><span class="line">...     print(x,y)</span><br><span class="line">...</span><br><span class="line">1 101</span><br><span class="line">5 78</span><br><span class="line">4 37</span><br><span class="line">2 15</span><br><span class="line">10 62</span><br><span class="line">7 99</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p><code>zip(a, b)</code>会生成一个可返回元组 <code>(x, y)</code> 的迭代器，其中x来自a，y来自b。 一旦其中某个序列到底结尾，迭代宣告结束。 因此迭代长度跟参数中最短序列长度一致。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; b &#x3D; [&#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;]</span><br><span class="line">&gt;&gt;&gt; for i in zip(a,b):</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">(1, &#39;w&#39;)</span><br><span class="line">(2, &#39;x&#39;)</span><br><span class="line">(3, &#39;y&#39;)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>如果这个不是你想要的效果，那么还可以使用<code>itertools.zip_longest()</code> 函数来代替。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from itertools import zip_longest</span><br><span class="line">&gt;&gt;&gt; for i in zip_longest(a,b):</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">(1, &#39;w&#39;)</span><br><span class="line">(2, &#39;x&#39;)</span><br><span class="line">(3, &#39;y&#39;)</span><br><span class="line">(None, &#39;z&#39;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for i in zip_longest(a, b, fillvalue&#x3D;0):</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">(1, &#39;w&#39;)</span><br><span class="line">(2, &#39;x&#39;)</span><br><span class="line">(3, &#39;y&#39;)</span><br><span class="line">(0, &#39;z&#39;)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h3><p>当你想成对处理数据的时候 zip() 函数是很有用的。 比如，假设你头列表和一个值列表，就像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">headers &#x3D; [&#39;name&#39;, &#39;shares&#39;, &#39;price&#39;]</span><br><span class="line">values &#x3D; [&#39;ACME&#39;, 100, 490.1]</span><br></pre></td></tr></table></figure>
<p>使用zip()可以让你将它们打包并生成一个字典：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; dict(zip(headers,values))</span><br><span class="line">&gt;&gt;&gt; print(s)</span><br><span class="line">&#123;&#39;name&#39;: &#39;ACME&#39;, &#39;shares&#39;: 100, &#39;price&#39;: 490.1&#125;</span><br></pre></td></tr></table></figure>
<p>或者你也可以像下面这样产生输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for name, val in zip(headers, values):</span><br><span class="line">    print(name, &#39;&#x3D;&#39;, val)</span><br></pre></td></tr></table></figure>
<p>虽然不常见，但是 <code>zip()</code> 可以接受多于两个的序列的参数。 这时候所生成的结果元组中元素个数跟输入序列个数一样。比如;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; b &#x3D; [10, 11, 12]</span><br><span class="line">&gt;&gt;&gt; c &#x3D; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]</span><br><span class="line">&gt;&gt;&gt; for i in zip(a, b, c):</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">(1, 10, &#39;x&#39;)</span><br><span class="line">(2, 11, &#39;y&#39;)</span><br><span class="line">(3, 12, &#39;z&#39;)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>最后强调一点就是， <code>zip()</code> 会创建一个迭代器来作为结果返回。 如果你需要将结对的值存储在列表中，要使用 <code>list()</code> 函数。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; zip(a, b)</span><br><span class="line">&lt;zip object at 0x1007001b8&gt;</span><br><span class="line">&gt;&gt;&gt; list(zip(a, b))</span><br><span class="line">[(1, 10), (2, 11), (3, 12)]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h3><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c04/p11_iterate_over_multiple_sequences_simultaneously.html" target="_blank" rel="noopener">同时迭代多个序列 — python3-cookbook 3.0.0 文档</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>深入类与对象-上下文管理器</title>
    <url>/2020/04/23/%E6%B7%B1%E5%85%A5%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1-%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<h2 id="深入类与对象-上下文管理器"><a href="#深入类与对象-上下文管理器" class="headerlink" title="深入类与对象-上下文管理器"></a>深入类与对象-上下文管理器</h2><h3 id="mixin继承"><a href="#mixin继承" class="headerlink" title="mixin继承"></a>mixin继承</h3><p>多继承会造成关系混乱，导致MRO算法出现许多预料不到的问题，一般都是推荐MIXIN继承，最小继承，只继承一个类。</p>
<h3 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h3><p>with上下文管理器，这个用过很多次，比如在执行mysql语句的时候要先链接数据库，获取游标，执行sql语句，关闭连接。又或者是文本内容的读写，打开文本写入内容关闭文本。</p>
<p>如果每次执行一条语句都要做这么多操作，就会产生大量重复的代码，这个时候使用上下文管理器即可美观又轻松的解决这个问题。</p>
<p>with管理上下文的作用是对一些重复的代码简单化，并且能优化try/except/finally的写法。</p>
<p>上下文的实现是通过两个魔法函数enter和exit实现，后来更新再造后，使用contextlib提供的API可以更加方便的完成。</p>
<p>概念和功能都明白后，最重要的还是如何实现。</p>
<p>举个例子：shuke去给猫买饼干，每次买的时候都要做这些动作，掏出钱包，花出x元，收回钱包。每次都要重复掏钱包收钱包这个动作有些麻烦，并且万一忘了掏钱包就不能付钱，忘了收钱包的话，钱包就掉了。每次掏钱包收钱包都要写代码，有啥简介的方式嘛？</p>
<h3 id="使用enter和exit实现-1"><a href="#使用enter和exit实现-1" class="headerlink" title="使用enter和exit实现(1)"></a>使用enter和exit实现(1)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: shuke</span><br><span class="line">@file: 0325.py </span><br><span class="line">@time: 2019&#x2F;03&#x2F;25 16:28</span><br><span class="line">@contact: zhaofengfeng@shuke.net</span><br><span class="line">@software:  learn</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class wallet(object):</span><br><span class="line">    def __init__(self, man):</span><br><span class="line">        self.man &#x3D; man</span><br><span class="line"></span><br><span class="line">    def __enter__(self):</span><br><span class="line">        print(self.man + &#39;放心大胆的掏出了钱包&#39;)</span><br><span class="line"></span><br><span class="line">    def __exit__(self, exc_type, exc_val, exc_tb):</span><br><span class="line">        print(self.man + &#39;小心翼翼的收起来钱包&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def use_money(man):</span><br><span class="line">    return wallet(man)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with use_money(&#39;shuke&#39;) as a:</span><br><span class="line">    print(&#39;花了600块钱&#39;)</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shuke放心大胆的掏出了钱包</span><br><span class="line">花了600块钱</span><br><span class="line">shuke小心翼翼的收起来钱包</span><br></pre></td></tr></table></figure>
<h3 id="使用enter和exit实现-2"><a href="#使用enter和exit实现-2" class="headerlink" title="使用enter和exit实现(2)"></a>使用enter和exit实现(2)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class wallet(object):</span><br><span class="line">    def __init__(self, man):</span><br><span class="line">        self.man &#x3D; man</span><br><span class="line"></span><br><span class="line">    def __enter__(self):</span><br><span class="line">        print(self.man + &#39;放心大胆的掏出了钱包&#39;)</span><br><span class="line">        # return self 这一步非常重要，作用是返回实例</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __exit__(self, exc_type, exc_val, exc_tb):</span><br><span class="line">        print(self.man + &#39;小心翼翼的收起来钱包&#39;)</span><br><span class="line"></span><br><span class="line">    def use_money(self, money):</span><br><span class="line">        print(self.man + &#39;花了&#39; + money + &#39;元&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with wallet(&#39;shuke02&#39;)as a:</span><br><span class="line">    a.use_money(&#39;1000&#39;)</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shuke02放心大胆的掏出了钱包</span><br><span class="line">shuke02花了1000元</span><br><span class="line">shuke02小心翼翼的收起来钱包</span><br></pre></td></tr></table></figure>

<h3 id="使用contextlib实现"><a href="#使用contextlib实现" class="headerlink" title="使用contextlib实现"></a>使用contextlib实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import contextlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@contextlib.contextmanager</span><br><span class="line">def use_money(man):</span><br><span class="line">    try:</span><br><span class="line">        print(man + &#39;十分放心大胆的掏出钱包&#39;)</span><br><span class="line">        yield None</span><br><span class="line">        # yield生成器，运行到这里会返回一个值(你随便写一个就行)</span><br><span class="line">    finally:</span><br><span class="line">        print(man + &#39;万分谨慎的收起了钱包&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with use_money(&#39;shuke03&#39;)as a:</span><br><span class="line">    print(&#39;花了100块钱&#39;)</span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shuke03十分放心大胆的掏出钱包</span><br><span class="line">花了100块钱</span><br><span class="line">shuke03万分谨慎的收起了钱包</span><br></pre></td></tr></table></figure>
<p>这只是一个创建上下文管理器的方法，按照固定的格式书写就行.</p>
<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="http://www.langzi.fun/%E6%B7%B1%E5%85%A5%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1-%E4%B8%8B.html" target="_blank" rel="noopener">深入类与对象-下</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你用Strace诊断问题</title>
    <url>/2020/04/23/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%94%A8Strace%E8%AF%8A%E6%96%AD%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="手把手教你用Strace诊断问题"><a href="#手把手教你用Strace诊断问题" class="headerlink" title="手把手教你用Strace诊断问题"></a>手把手教你用Strace诊断问题</h2><p>早些年，如果你知道有个 strace 命令，就很牛了，而现在大家基本都知道 strace 了，如果你遇到性能问题求助别人，十有八九会建议你用 strace 挂上去看看，不过当你挂上去了，看着满屏翻滚的字符，却十有八九看不出个所以然。本文通过一个简单的案例，向你展示一下在用 strace 诊断问题时的一些套路。</p>
<p>如下真实案例，如有雷同，实属必然！让我们看一台高负载服务器的 top 结果：<br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/PiaIQldYWZNOicsPhk6EoxoZX7bGH8wwXV6xWge4S3ibM9kVibMTsuBCYIILYc4GhXuPbXibAfgLibWZf0Oz0RwFEeJA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1"></p>
<blockquote>
<p>技巧：运行 top 时，按「1」打开 CPU 列表，按「shift+p」以 CPU 排序。<br>在本例中大家很容易发现 CPU 主要是被若干个 PHP 进程占用了，同时 PHP 进程占用的比较多的内存，不过系统内存尚有结余，SWAP 也不严重，这并不是问题主因。</p>
</blockquote>
<p>不过在 CPU 列表中能看到 CPU 主要消耗在内核态「sy」，而不是用户态「us」，和我们的经验不符。Linux 操作系统有很多用来跟踪程序行为的工具，内核态的函数调用跟踪用「strace」，用户态的函数调用跟踪用「ltrace」，所以这里我们应该用「strace」：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; strace -p &lt;PID&gt;</span><br></pre></td></tr></table></figure>
<p>不过如果直接用 strace 跟踪某个进程的话，那么等待你的往往是满屏翻滚的字符，想从这里看出问题的症结并不是一件容易的事情，好在<code>strace</code>可以按操作汇总时间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; strace -cp &lt;PID&gt;</span><br></pre></td></tr></table></figure>
<p>通过「c」选项用来汇总各个操作的总耗时，运行后的结果大概如下图所示：<br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/PiaIQldYWZNOicsPhk6EoxoZX7bGH8wwXVFM4Y0EZjeOr8ibcoiake8lSsOqAMYVe7aDujibulxBM48vnrO8XXJuwVw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1"><br>很明显，我们能看到 CPU 主要被 clone 操作消耗了，还可以单独跟踪一下 clone：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; strace -T -e clone -p &lt;PID&gt;</span><br></pre></td></tr></table></figure>
<p>通过「T」选项可以获取操作实际消耗的时间，通过「e」选项可以跟踪某个操作：<br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/PiaIQldYWZNOicsPhk6EoxoZX7bGH8wwXVmBteMRoCe1dNVNZG4Q6cfJptt5Tj0CDx6aPCJw0y7yhiazMABzzfAuA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1"><br>strace -T -e clone -p<br>很明显，一个 clone 操作需要几百毫秒，至于 clone 的含义，参考 man 文档：</p>
<blockquote>
<p>clone() creates a new process, in a manner similar to fork(2). It is actually a library function layered on top of the underlying clone() system call, hereinafter referred to as sys_clone. A description of sys_clone is given towards the end of this page.<br>Unlike fork(2), these calls allow the child process to share parts of its execution context with the calling process, such as the memory space, the table of file descriptors, and the table of signal handlers. (Note that on this manual page, “calling process” normally corresponds to “parent process”. But see the description of CLONE_PARENT below.)<br>简单来说，就是创建一个新进程。那么在 PHP 里什么时候会出现此类系统调用呢？查询业务代码看到了<code>exec</code>函数，通过如下命令验证它确实会导致<code>clone</code>系统调用：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; strace -eclone php -r &#39;exec(&quot;ls&quot;);&#39;</span><br></pre></td></tr></table></figure>
<p>最后再考大家一个题：如果我们用 strace 跟踪一个进程，输出结果很少，是不是说明进程很空闲？其实试试 ltrace，可能会发现别有洞天。记住有内核态和用户态之分。</p>
<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p><a href="https://mp.weixin.qq.com/s/VDXO_nvaz7ZAIZz8NpPprQ" target="_blank" rel="noopener">Linux运维进阶:手把手教你用Strace诊断问题</a></p>
]]></content>
      <categories>
        <category>LINUX</category>
      </categories>
      <tags>
        <tag>LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象-使用枚举类</title>
    <url>/2020/04/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%BD%BF%E7%94%A8%E6%9E%9A%E4%B8%BE%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="面向对象-使用枚举类"><a href="#面向对象-使用枚举类" class="headerlink" title="面向对象-使用枚举类"></a>面向对象-使用枚举类</h2><p>当我们需要定义常量时，一个办法是用大写变量通过整数来定义，例如月份：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAN &#x3D; 1</span><br><span class="line">FEB &#x3D; 2</span><br><span class="line">MAR &#x3D; 3</span><br><span class="line">...</span><br><span class="line">NOV &#x3D; 11</span><br><span class="line">DEC &#x3D; 12</span><br></pre></td></tr></table></figure>
<p>好处是简单，缺点是类型是int，并且仍然是变量。</p>
<p>更好的方法是为这样的枚举类型定义一个class类型，然后，每个常量都是class的一个唯一实例。Python提供了Enum类来实现这个功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from enum import Enum</span><br><span class="line"></span><br><span class="line">Month &#x3D; Enum(&#39;Month&#39;, (&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;, &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;))</span><br></pre></td></tr></table></figure>

<p>这样我们就获得了Month类型的枚举类，可以直接使用Month.Jan来引用一个常量，或者枚举它的所有成员：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for name, member in Month.__members__.items():</span><br><span class="line">    print(name, &#39;&#x3D;&gt;&#39;, member, &#39;,&#39;, member.value)</span><br></pre></td></tr></table></figure>
<p>value属性则是自动赋给成员的int常量，默认从1开始计数。</p>
<p>如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from enum import Enum, unique</span><br><span class="line"></span><br><span class="line">@unique</span><br><span class="line">class Weekday(Enum):</span><br><span class="line">    Sun &#x3D; 0 # Sun的value被设定为0</span><br><span class="line">    Mon &#x3D; 1</span><br><span class="line">    Tue &#x3D; 2</span><br><span class="line">    Wed &#x3D; 3</span><br><span class="line">    Thu &#x3D; 4</span><br><span class="line">    Fri &#x3D; 5</span><br><span class="line">    Sat &#x3D; 6</span><br></pre></td></tr></table></figure>
<p>@unique装饰器可以帮助我们检查保证没有重复值。</p>
<p>访问这些枚举类型可以有若干种方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; day1 &#x3D; Weekday.Mon</span><br><span class="line">&gt;&gt;&gt; print(day1)</span><br><span class="line">Weekday.Mon</span><br><span class="line">&gt;&gt;&gt; print(Weekday.Tue)</span><br><span class="line">Weekday.Tue</span><br><span class="line">&gt;&gt;&gt; print(Weekday[&#39;Tue&#39;])</span><br><span class="line">Weekday.Tue</span><br><span class="line">&gt;&gt;&gt; print(Weekday.Tue.value)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; print(day1 &#x3D;&#x3D; Weekday.Mon)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; print(day1 &#x3D;&#x3D; Weekday.Tue)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; print(Weekday(1))</span><br><span class="line">Weekday.Mon</span><br><span class="line">&gt;&gt;&gt; print(day1 &#x3D;&#x3D; Weekday(1))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; Weekday(7)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: 7 is not a valid Weekday</span><br><span class="line">&gt;&gt;&gt; for name, member in Weekday.__members__.items():</span><br><span class="line">...     print(name, &#39;&#x3D;&gt;&#39;, member)</span><br><span class="line">...</span><br><span class="line">Sun &#x3D;&gt; Weekday.Sun</span><br><span class="line">Mon &#x3D;&gt; Weekday.Mon</span><br><span class="line">Tue &#x3D;&gt; Weekday.Tue</span><br><span class="line">Wed &#x3D;&gt; Weekday.Wed</span><br><span class="line">Thu &#x3D;&gt; Weekday.Thu</span><br><span class="line">Fri &#x3D;&gt; Weekday.Fri</span><br><span class="line">Sat &#x3D;&gt; Weekday.Sat</span><br></pre></td></tr></table></figure>
<p>可见，既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>把Student的gender属性改造为枚举类型，可以避免使用字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">from enum import Enum, unique</span><br><span class="line"></span><br><span class="line">class Gender(Enum):</span><br><span class="line">    Male &#x3D; 0</span><br><span class="line">    Female &#x3D; 1</span><br><span class="line"></span><br><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, gender):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.gender &#x3D; gender</span><br><span class="line"># 测试:</span><br><span class="line">bart &#x3D; Student(&#39;Bart&#39;, Gender.Male)</span><br><span class="line">if bart.gender &#x3D;&#x3D; Gender.Male:</span><br><span class="line">    print(bart.gender.value)</span><br><span class="line">    print(&#39;测试通过!&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;测试失败!&#39;)</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>Enum</code>可以把一组相关常量定义在一个class中，且class不可变，而且成员可以直接比较。</p>
<p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143191235886950998592cd3e426e91687cdae696e64b000" target="_blank" rel="noopener">原文地址</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>由ORM浅谈python元类</title>
    <url>/2020/04/23/%E7%94%B1ORM%E6%B5%85%E8%B0%88python%E5%85%83%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="由ORM浅谈python元类"><a href="#由ORM浅谈python元类" class="headerlink" title="由ORM浅谈python元类"></a>由ORM浅谈python元类</h2><blockquote>
<p>主要介绍了什么是类，如何动态的创建类，什么是元类，类的_metaclass_属性以及如何自己实现ORM。</p>
</blockquote>
<h3 id="在谈Python元类之前，我们先来看看ORM是什么"><a href="#在谈Python元类之前，我们先来看看ORM是什么" class="headerlink" title="在谈Python元类之前，我们先来看看ORM是什么?"></a>在谈Python元类之前，我们先来看看ORM是什么?</h3><p>ORM 为Object Relational Mapping 的简称，中文意思为对象关系映射，ORM的出现，是为了解决面向对象和关系数据库之间不相匹配而出现的技术，目的是使用面向对象的思想来实现对数据库中表的操作，从而屏蔽掉底层的SQL操作。</p>
<p>简单了解了ORM的概念，许多同学可能会想了解ORM是怎么实现的，以下代码摘自django项目ORM的部分实现代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def subclass_exception(name, parents, module, attached_to&#x3D;None):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Create exception subclass. Used by ModelBase below.</span><br><span class="line"></span><br><span class="line">    If &#39;attached_to&#39; is supplied, the exception will be created in a way that</span><br><span class="line">    allows it to be pickled, assuming the returned exception class will be added</span><br><span class="line">    as an attribute to the &#39;attached_to&#39; class.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    class_dict &#x3D; &#123;&#39;__module__&#39;: module&#125;</span><br><span class="line">    if attached_to is not None:</span><br><span class="line">            def __reduce__(self):</span><br><span class="line">               # Exceptions are special - they&#39;ve got state that isn&#39;t</span><br><span class="line">               # in self.__dict__. We assume it is all in self.args.</span><br><span class="line">               return (unpickle_inner_exception, (attached_to, name), self.args)</span><br><span class="line"></span><br><span class="line">            def __setstate__(self, args):</span><br><span class="line">               self.args &#x3D; args</span><br><span class="line"></span><br><span class="line">        class_dict[&#39;__reduce__&#39;] &#x3D; __reduce__</span><br><span class="line">        class_dict[&#39;__setstate__&#39;] &#x3D; __setstate__</span><br><span class="line"></span><br><span class="line">    return type(name, parents, class_dict)</span><br></pre></td></tr></table></figure>
<p>很多同学会好奇，type 不是一般来检测Python变量的类型的嘛，怎么在这里竟然可以接受这么多参数，在这里他的用法到底是什么呢？ 这就涉及到了Python 的元类(metaclass)相关知识，而ORM，则是元类的应用之一。</p>
<h3 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h3><blockquote>
<p>面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p>
</blockquote>
<p>仍以Student类为例，在Python中，定义类是通过class关键字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是(object)，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用object类，这是所有类最终都会继承的类。</p>
<p>定义好了Student类，就可以根据Student类创建出Student的实例，创建实例是通过类名+()实现的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart &#x3D; Student()</span><br><span class="line">&gt;&gt;&gt; bart</span><br><span class="line">&lt;__main__.Student object at 0x10a67a590&gt;</span><br><span class="line">&gt;&gt;&gt; Student</span><br><span class="line">&lt;class &#39;__main__.Student&#39;&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到，变量bart指向的就是一个Student的object，后面的0x10a67a590是内存地址，每个object的地址都不一样，而Student本身则是一个类。<br>可以自由地给一个实例变量绑定属性，比如，给实例bart绑定一个name属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart.name &#x3D; &#39;Bart Simpson&#39;</span><br><span class="line">&gt;&gt;&gt; bart.name</span><br><span class="line">&#39;Bart Simpson&#39;</span><br></pre></td></tr></table></figure>
<p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<strong>init</strong>方法，在创建实例的时候，就把name，score等属性绑上去：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.score &#x3D; score</span><br></pre></td></tr></table></figure>
<p>注意到<strong>init</strong>方法的第一个参数永远是self，表示创建的实例本身，因此，在<strong>init</strong>方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。</p>
<p>有了<strong>init</strong>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<strong>init</strong>方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart &#x3D; Student(&#39;Bart Simpson&#39;, 59)</span><br><span class="line">&gt;&gt;&gt; bart.name</span><br><span class="line">&#39;Bart Simpson&#39;</span><br><span class="line">&gt;&gt;&gt; bart.score</span><br><span class="line">59</span><br></pre></td></tr></table></figure>
<p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数和关键字参数。</p>
<h2 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h2><p>面向对象编程的一个重要特点就是数据封装。在上面的Student类中，每个实例就拥有各自的name和score这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def print_score(std):</span><br><span class="line">...     print &#39;%s: %s&#39; % (std.name, std.score)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; print_score(bart)</span><br><span class="line">Bart Simpson: 59</span><br></pre></td></tr></table></figure>
<p>但是，既然Student实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在Student类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和Student类本身是关联起来的，我们称之为类的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.score &#x3D; score</span><br><span class="line"></span><br><span class="line">    def print_score(self):</span><br><span class="line">        print &#39;%s: %s&#39; % (self.name, self.score)</span><br></pre></td></tr></table></figure>
<p>要定义一个方法，除了第一个参数是self外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了self不用传递，其他参数正常传入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart.print_score()</span><br><span class="line">Bart Simpson: 59</span><br></pre></td></tr></table></figure>
<p>这样一来，我们从外部看Student类，就只需要知道，创建实例需要给出name和score，而如何打印，都是在Student类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。<br>封装的另一个好处是可以给Student类增加新的方法，比如get_grade：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    def get_grade(self):</span><br><span class="line">        if self.score &gt;&#x3D; 90:</span><br><span class="line">            return &#39;A&#39;</span><br><span class="line">        elif self.score &gt;&#x3D; 60:</span><br><span class="line">            return &#39;B&#39;</span><br><span class="line">        else:</span><br><span class="line">            return &#39;C&#39;</span><br></pre></td></tr></table></figure>
<p>同样的，get_grade方法可以直接在实例变量上调用，不需要知道内部实现细节：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart.get_grade()</span><br><span class="line">&#39;C&#39;</span><br></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p>
<p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</p>
<p>通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。</p>
<p>和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart &#x3D; Student(&#39;Bart Simpson&#39;, 59)</span><br><span class="line">&gt;&gt;&gt; lisa &#x3D; Student(&#39;Lisa Simpson&#39;, 87)</span><br><span class="line">&gt;&gt;&gt; bart.age &#x3D; 8</span><br><span class="line">&gt;&gt;&gt; bart.age</span><br><span class="line">8</span><br><span class="line">&gt;&gt;&gt; bart.__dict__</span><br><span class="line">&#123;&#39;name&#39;: &#39;Bart Simpson&#39;, &#39;score&#39;: 59, &#39;age&#39;: 8&#125;</span><br><span class="line">&gt;&gt;&gt; lisa.age</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#39;Student&#39; object has no attribute &#39;age&#39;</span><br></pre></td></tr></table></figure>

<h3 id="如何动态的创建类？"><a href="#如何动态的创建类？" class="headerlink" title="如何动态的创建类？"></a>如何动态的创建类？</h3><p>最简单的方法，就是采用如下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def create_class(class_name):</span><br><span class="line">    if class_name &#x3D;&#x3D; &quot;MyClass&quot;:</span><br><span class="line">        class MyClass():</span><br><span class="line">            pass</span><br><span class="line">        return MyClass</span><br><span class="line">    else:</span><br><span class="line">        class OtherClasss():</span><br><span class="line">            pass</span><br><span class="line">        return OtherClasss</span><br></pre></td></tr></table></figure>
<p>但是此类方法，不能称之为真正的动态，因为只能支持有限的类的创建，那有什么方法，能真正实现动态创建一些类呢？ 所以，这里就不得不提到关键词type了<br>但是与此同时，type还有另一个神奇的能力，就是它也能动态的创建类。type可以接受一个类的相关信息作为参数，然后返回一个类。 下面是其用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type(类名, 父类的元组，包含属性的字典)</span><br></pre></td></tr></table></figure>

<h3 id="什么是元类？"><a href="#什么是元类？" class="headerlink" title="什么是元类？"></a>什么是元类？</h3><p>上面提到了类是一种特殊的对象，对象就必须有类来创建，而元类，就是用来创建这种类的。简单来说，用于创建类的类，就是元类。 可以理解为一下这种方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyClass &#x3D; MetaClass()</span><br><span class="line">MyObject &#x3D; MyClass()</span><br></pre></td></tr></table></figure>
<p>而type，就是元类，于是创建一个类，就可以使用如下这种方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyClass &#x3D; type(&quot;MyClass&quot;, (), &#123;&#125;)</span><br><span class="line">MyObject &#x3D; MyClass()</span><br></pre></td></tr></table></figure>
<h3 id="类的-metaclass-属性"><a href="#类的-metaclass-属性" class="headerlink" title="类的_metaclass_属性"></a>类的_metaclass_属性</h3><p>当我们创建一个类的时候为其添加<strong>metaclass</strong>属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Foo(object):</span><br><span class="line">    __metaclass__ &#x3D; something…</span><br><span class="line">[…]</span><br></pre></td></tr></table></figure>
<p>那么，Python就会采用你指定的方法，来创建这个类，否则，会使用type来创建这个类，下面演示如何自定义的指定metaclass属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def lower_attr(class_name, class_parents, class_attr):</span><br><span class="line">    lower_attr &#x3D; &#123;&#125;</span><br><span class="line">    for name, val in class_attr.items():</span><br><span class="line">        if name.startswith(&#39;__&#39;):</span><br><span class="line">           lower_attr[name] &#x3D; val</span><br><span class="line">        else:</span><br><span class="line">           lower_attr[name.lower()] &#x3D; val</span><br><span class="line">    return type(class_name, class_parents, lower_attr)</span><br><span class="line"></span><br><span class="line">class MyClss():</span><br><span class="line">    __metaclass__ &#x3D; lower_attr</span><br><span class="line">    A &#x3D; &#39;A&#39;</span><br><span class="line">    b &#x3D; &#39;b&#39;</span><br><span class="line"></span><br><span class="line">my_class &#x3D; MyClss()</span><br><span class="line"></span><br><span class="line">print(hasattr(my_class, &#39;A&#39;)) # False</span><br><span class="line">print(hasattr(my_class, &#39;b&#39;)) # True</span><br><span class="line">print(hasattr(my_class, &#39;a&#39;)) # True</span><br></pre></td></tr></table></figure>

<h2 id="如何自己实现ORM？"><a href="#如何自己实现ORM？" class="headerlink" title="如何自己实现ORM？"></a>如何自己实现ORM？</h2><p>首先来定义Field类，它负责保存数据库表的字段名和字段的类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Field(object):</span><br><span class="line">    def __init__(self, name, column_type):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.column_type &#x3D; column_type</span><br></pre></td></tr></table></figure>
<p>在Field的基础上，进一步定义各种具体类型的Field，比如StringField，IntegerField等等：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class StringField(Field):</span><br><span class="line">    def __init__(self, name, max_length):</span><br><span class="line">        super(StringField, self).__init__(name, &#39;varchar(%d)&#39; % max_length)</span><br><span class="line"></span><br><span class="line">class IntegerField(Field):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        super(IntegerField, self).__init__(name, &#39;int&#39;)</span><br></pre></td></tr></table></figure>
<p>下一步，就是编写最复杂的ModelMetaclass了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ModelMetaclass(type):</span><br><span class="line">    def __new__(cls, name, bases, attrs):</span><br><span class="line">        if name &#x3D;&#x3D; &#39;Model&#39;:</span><br><span class="line">            return type.__new__(cls, name, bases, attrs)</span><br><span class="line">        print(&#39;Found model: %s&#39; % name)</span><br><span class="line">        mappings &#x3D; dict()</span><br><span class="line">        for k, v in attrs.items():</span><br><span class="line">            if isinstance(v, Field):</span><br><span class="line">                mappings[k] &#x3D; v</span><br><span class="line">        for k in mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line">        attrs[&#39;__mappings__&#39;] &#x3D; mappings</span><br><span class="line">        attrs[&#39;__table__&#39;] &#x3D; name</span><br><span class="line">        return type.__new__(cls, name, bases, attrs)</span><br></pre></td></tr></table></figure>
<p>以及基类Model：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Model(dict, metaclass&#x3D;ModelMetaclass):</span><br><span class="line"></span><br><span class="line">    def __init__(self, **kw):</span><br><span class="line">        super(Model, self).__init__(**kw)</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        try:</span><br><span class="line">            return self[key]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(r&quot;&#39;Model&#39; object has no attribute &#39;%s&#39;&quot; % key)</span><br><span class="line"></span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        self[key] &#x3D; value</span><br><span class="line"></span><br><span class="line">    def save(self):</span><br><span class="line">        fields &#x3D; []</span><br><span class="line">        params &#x3D; []</span><br><span class="line">        args &#x3D; []</span><br><span class="line">        for k, v in self.__mappings__.items():</span><br><span class="line">            fields.append(v.name)</span><br><span class="line">            params.append(&#39;?&#39;)</span><br><span class="line">            args.append(getattr(self, k, None))</span><br><span class="line">        sql &#x3D; &#39;insert into %s (%s) values (%s)&#39; % (self.__table__, &#39;,&#39;.join(fields), &#39;,&#39;.join(params))</span><br><span class="line">        print(&#39;SQL: %s&#39; % sql)</span><br><span class="line">        print(&#39;ARGS: %s&#39; % str(args))</span><br></pre></td></tr></table></figure>
<p>创建User类，并调用save方法，保存：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User(Model):</span><br><span class="line">    id &#x3D; IntegerField(&#39;id&#39;)</span><br><span class="line">    name &#x3D; StringField(&#39;username&#39;, max_length&#x3D;48)</span><br><span class="line">    email &#x3D; StringField(&#39;email&#39;, max_length&#x3D;128)</span><br><span class="line">    password &#x3D; StringField(&#39;password&#39;, max_length&#x3D;24)</span><br><span class="line"></span><br><span class="line"># 创建一个实例：</span><br><span class="line">u &#x3D; User(id&#x3D;12345, name&#x3D;&#39;xiaoming&#39;, email&#x3D;&#39;xiaoming@xiaomi.com&#39;, password&#x3D;&#39;test&#39;)</span><br><span class="line"># 保存到数据库：</span><br><span class="line">u.save()</span><br></pre></td></tr></table></figure>
<p>上面，我们就简单实现了一个ORM。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386820064557c69858840b4c48d2b8411bc2ea9099ba000" target="_blank" rel="noopener">使用元类 - 廖雪峰的官方网站</a></p>
]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>给大家安利几个 Flask 学习资源</title>
    <url>/2020/04/23/%E7%BB%99%E5%A4%A7%E5%AE%B6%E5%AE%89%E5%88%A9%E5%87%A0%E4%B8%AA-Flask-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h2 id="给大家安利几个-Flask-学习资源"><a href="#给大家安利几个-Flask-学习资源" class="headerlink" title="给大家安利几个 Flask 学习资源"></a>给大家安利几个 Flask 学习资源</h2><p>Flask 是 Python 中最流行的 Web 框架之一，以小巧、灵活、可扩展性强著称，相比 Django，它给了开发者最大限度的自由，如果你不喜欢关系型数据库，ok，没问题，切换成本非常低，而 Django 呢？你能遇到的问题它都帮你想好并且提供了对应解决方案，你自己就不要去重复造轮子了，比如模版引擎，ORM，不爽想替换？这个有点难。</p>
<h3 id="1-The-Flask-Mega-Tutorial-教程"><a href="#1-The-Flask-Mega-Tutorial-教程" class="headerlink" title="1. The Flask Mega-Tutorial 教程"></a>1. The Flask Mega-Tutorial 教程</h3><p>这个教程是《Flask Web开发：基于Python的Web应用开发实战》作者 Miguel Grinberg 写的 2017版 Flask 教程，也是我强烈推荐给大家的 Flask 教程，英语阅读水平过得去的话，建议直接读原文，英语渣也有福音，国内已有网友把它翻译成了中文。</p>
<p><a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world" target="_blank" rel="noopener">英文地址</a><br><a href="https://github.com/luhuisicnu/The-Flask-Mega-Tutorial-zh" target="_blank" rel="noopener">中文地址</a></p>
<h3 id="2-Flask之旅"><a href="#2-Flask之旅" class="headerlink" title="2. Flask之旅"></a>2. Flask之旅</h3><p>如果你已经入门了Flask，肯定希望有一个 Flask 最佳实践指南，让你的 Flask 项目看起来更加 professional，而本书涉及的主题就是Flask的最佳编程实践和模式。尽量避免啰嗦官方文档中提到的内容，同时也会再次强调一些概念来加深印象。</p>
<p><a href="http://exploreflask.com/en/latest/" target="_blank" rel="noopener">英文地址</a><br><a href="https://spacewander.github.io/explore-flask-zh/index.html" target="_blank" rel="noopener">中文地址</a></p>
<h3 id="3-Flask-源码解析"><a href="#3-Flask-源码解析" class="headerlink" title="3. Flask 源码解析"></a>3. Flask 源码解析</h3><p>如果你已经熟练掌握了 Flask 框架，是不是惊叹于 Flask 框架背后的设计精髓，一个精悍的Web框架究竟是如何实现的？了解它最好的办法就是窥探它的源码，还好，这件事已经有人帮你做了。</p>
<p><a href="http://cizixs.com/2017/01/13/flask-insight-context" target="_blank" rel="noopener">地址</a></p>
<h3 id="4-Awesome-Flask"><a href="#4-Awesome-Flask" class="headerlink" title="4. Awesome Flask"></a>4. Awesome Flask</h3><p>最后强烈推荐的是这个 Awesome 系列的 Flask 资源大集合，涵盖了 Flask 的各方各面，包括第三方扩展插件以及教程、书籍和视频、PPT还有项目结构等等。</p>
<p><a href="https://github.com/humiaozuzu/awesome-flask" target="_blank" rel="noopener">地址</a></p>
<h3 id="5-Flask-for-Fun-and-Profit"><a href="#5-Flask-for-Fun-and-Profit" class="headerlink" title="5. Flask for Fun and Profit"></a>5. Flask for Fun and Profit</h3><p>Flask 作者 Armin Ronacher 在PyBay2016上的一个视频分享，手把手教你如何构建一个大型复杂的易于测试的API服务。同时还有在开发Flask的过程的一些设计思想。</p>
<p><a href="https://www.youtube.com/watch?v=1ByQhAM5c1I" target="_blank" rel="noopener">视频地址</a><br><a href="https://speakerdeck.com/player/94a53afb6a524ad88f301f62166a27e4?" target="_blank" rel="noopener">PPT</a></p>
<h3 id="再补充一些其它资源："><a href="#再补充一些其它资源：" class="headerlink" title="再补充一些其它资源："></a>再补充一些其它资源：</h3><p>Flask Web 开发入门<br><a href="https://funhacks.gitbooks.io/head-first-flask/content/chapter02/section2.03.html" target="_blank" rel="noopener">https://funhacks.gitbooks.io/head-first-flask/content/chapter02/section2.03.html</a></p>
<p><a href="http://www.bjhee.com/flask-1.html" target="_blank" rel="noopener">Flask入门系列教程</a></p>
<p><a href="http://www.bjhee.com/flask-ad1.html" target="_blank" rel="noopener">Flask进阶系列教程</a></p>
<p>Full Stack Web Development with Flask (视频教程，需要翻土啬)<br><a href="https://github.com/realpython/discover-flask" target="_blank" rel="noopener">https://github.com/realpython/discover-flask</a></p>
<p>Full Stack Python<br><a href="https://www.fullstackpython.com/flask.html" target="_blank" rel="noopener">https://www.fullstackpython.com/flask.html</a></p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>维护JAVA脚本</title>
    <url>/2020/04/23/%E7%BB%B4%E6%8A%A4JAVA%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="维护JAVA脚本"><a href="#维护JAVA脚本" class="headerlink" title="维护JAVA脚本"></a>维护JAVA脚本</h3><p>start_env.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">CURRENT_PATH&#x3D;$(cd &#96;dirname $0&#96;; pwd)</span><br><span class="line">PARENT_PATH&#x3D;$(cd &#96;dirname $0&#96;; cd ..; pwd)</span><br><span class="line">CURRENT_SERVICE_NAME&#x3D;$(echo $&#123;CURRENT_PATH&#125; | awk -F &#39;&#x2F;&#39; &#39;&#123;print $(NF)&#125;&#39;)</span><br><span class="line"></span><br><span class="line"># USE THOSE VARIABLE</span><br><span class="line">GC_LOG_PATH&#x3D;$&#123;CURRENT_PATH&#125;&#x2F;logs&#x2F;$&#123;CURRENT_SERVICE_NAME&#125;-gcdetail.log</span><br><span class="line">COMMON_CONFIG_PATH&#x3D;$&#123;PARENT_PATH&#125;</span><br><span class="line">CONFIG_PATH&#x3D;$&#123;CURRENT_PATH&#125;&#x2F;config</span><br><span class="line">JAR_PATH&#x3D;$&#123;CURRENT_PATH&#125;&#x2F;jar</span><br><span class="line">LOG_PATH&#x3D;$&#123;CURRENT_PATH&#125;&#x2F;logs</span><br><span class="line"></span><br><span class="line">## MODIFY FOLLOWING LINES</span><br><span class="line">EXECUT_JAR&#x3D;&quot;america-business-auth-impl-1.0-SNAPSHOT-all.jar&quot;</span><br><span class="line">DUBBO_PARAMETER&#x3D;&quot;</span><br><span class="line">-Dapp.id&#x3D;america-business-auth</span><br><span class="line">-Xdebug</span><br><span class="line">-server</span><br><span class="line">-Xmx512m</span><br><span class="line">-Xms512m</span><br><span class="line">-Xnoagent</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:NewRatio&#x3D;2</span><br><span class="line">-XX:SurvivorRatio&#x3D;8</span><br><span class="line">-XX:MetaspaceSize&#x3D;128m</span><br><span class="line">-XX:MaxMetaspaceSize&#x3D;128m</span><br><span class="line">-Xloggc:$&#123;GC_LOG_PATH&#125;</span><br><span class="line">-Ddubbo.registry.file&#x3D;$&#123;JAR_PATH&#125;&#x2F;dubbo.cache</span><br><span class="line">-Dconfig.path&#x3D;file:$&#123;COMMON_CONFIG_PATH&#125;&#x2F;common.properties;file:$&#123;CONFIG_PATH&#125;&#x2F;config.properties</span><br><span class="line">$&#123;JAR_PATH&#125;&#x2F;$&#123;EXECUT_JAR&#125;</span><br><span class="line">&quot;</span><br><span class="line">## STOP MODIFY</span><br><span class="line"></span><br><span class="line">java -jar $&#123;DUBBO_PARAMETER&#125; | &#x2F;usr&#x2F;bin&#x2F;cronolog $LOG_PATH&#x2F;out.%Y%m%d.nohup &gt;&gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>service_control.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">#set -x</span><br><span class="line"></span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line"># USE THOSE VARIABLE</span><br><span class="line">CURRENT_PATH&#x3D;$(cd &#96;dirname $0&#96;; pwd)</span><br><span class="line">PARENT_PATH&#x3D;$(cd &#96;dirname $0&#96;; cd ..; pwd)</span><br><span class="line">CURRENT_SERVICE_NAME&#x3D;$(echo $&#123;CURRENT_PATH&#125; | awk -F &#39;&#x2F;&#39; &#39;&#123;print $(NF)&#125;&#39;)</span><br><span class="line">STOP_WAIT_TIME&#x3D;10</span><br><span class="line">CURRENT_TIME&#x3D;&#96;date +%Y%m%d-%H%M%S&#96;</span><br><span class="line"></span><br><span class="line">DUMP_PATH&#x3D;$&#123;CURRENT_PATH&#125;&#x2F;dump</span><br><span class="line">LOG_PATH&#x3D;$&#123;CURRENT_PATH&#125;&#x2F;logs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log() &#123;</span><br><span class="line">    echo &quot;$(date +&quot;%Y-%m-%d %H:%M:%S&quot;): $1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exit_status() &#123;</span><br><span class="line">    if [ $? &#x3D;&#x3D; 0 ]</span><br><span class="line">    then</span><br><span class="line">        echo -e &quot;\\033[1;32m[OK]\\033[0;39m&quot;</span><br><span class="line">    else</span><br><span class="line">        echo -e &quot;\\033[1;31m[Failed]\\033[0;39m&quot;</span><br><span class="line">        log &quot;Error&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_user() &#123;</span><br><span class="line">    if [ &#96;whoami&#96; !&#x3D; &quot;app&quot; || &#96;whoami&#96; !&#x3D; &quot;root&quot; ]; then</span><br><span class="line">        log &quot;Please use app user to run this command.&quot;</span><br><span class="line">        false</span><br><span class="line">        exit_status</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop_service() &#123;</span><br><span class="line"></span><br><span class="line">    log &quot;Stop Service Service: $&#123;CURRENT_SERVICE_NAME&#125;&quot;</span><br><span class="line">    Service_NUM&#x3D;&#96;ps -ef|grep $&#123;CURRENT_SERVICE_NAME&#125;&#x2F;jar&#x2F;|grep -v grep|grep -v cronolog|grep -v $0|awk &#39;&#123;print $2&#125;&#39;|wc -l&#96;</span><br><span class="line">    if [ $((Service_NUM)) -gt 1 ]</span><br><span class="line">    then</span><br><span class="line">        log &quot;Service: $&#123;CURRENT_SERVICE_NAME&#125; run more than one process&quot;</span><br><span class="line">        false</span><br><span class="line">        exit_status</span><br><span class="line">    fi</span><br><span class="line">    Service_PID&#x3D;&#96;ps -ef|grep $&#123;CURRENT_SERVICE_NAME&#125;&#x2F;jar&#x2F;|grep -v grep|grep -v cronolog|grep -v $0|awk &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">    if [ x$Service_PID &#x3D;&#x3D; x ];then</span><br><span class="line">        log &quot;Service: $&#123;CURRENT_SERVICE_NAME&#125; process is NOT exist&quot;</span><br><span class="line">        exit_status</span><br><span class="line">    else</span><br><span class="line">        log &quot;KILL Service Service: $&#123;CURRENT_SERVICE_NAME&#125;&quot;</span><br><span class="line">        kill  $Service_PID</span><br><span class="line">        exit_status</span><br><span class="line">    fi</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">    log &quot;Search Service Process ...&quot;</span><br><span class="line">    Check&#x3D;N</span><br><span class="line">    N&#x3D;0</span><br><span class="line">    while [ $Check &#x3D;&#x3D; &quot;N&quot; ]</span><br><span class="line">    do</span><br><span class="line">        N&#x3D;$(($N+1))</span><br><span class="line">        Service_PID&#x3D;&#96;ps -ef|grep $&#123;CURRENT_SERVICE_NAME&#125;&#x2F;jar&#x2F;|grep -v grep|grep -v cronolog|grep -v $0|awk &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line"></span><br><span class="line">        if [ &quot;$Service_PID&quot; &#x3D; &quot;&quot; ]</span><br><span class="line">        then</span><br><span class="line">            log &quot;Not found Service PID alive&quot;</span><br><span class="line">            break</span><br><span class="line">        else</span><br><span class="line">            log &quot;$N: Check Service PID:$Service_PID, Sleep 1 Sec Wait Service Exit ...&quot;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        if [ $((N)) -gt $STOP_WAIT_TIME ]</span><br><span class="line">        then</span><br><span class="line">            log &quot;Force KILL Service: $&#123;CURRENT_SERVICE_NAME&#125;&quot;</span><br><span class="line">            #jstack $Service_PID &gt;&gt; &#x2F;var&#x2F;log&#x2F;jstack.log</span><br><span class="line">            #skill -9 $Service_PID</span><br><span class="line">            kill -9 $Service_PID</span><br><span class="line">            exit_status</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line">        sleep 1</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start_service() &#123;</span><br><span class="line"></span><br><span class="line">    log &quot;Start Service Service: $&#123;CURRENT_SERVICE_NAME&#125;&quot;</span><br><span class="line">    Service_NUM&#x3D;&#96;ps -ef|grep $&#123;CURRENT_SERVICE_NAME&#125;&#x2F;jar&#x2F; | grep -v grep |grep -v $0|awk &#39;&#123;print $2&#125;&#39;|wc -l&#96;</span><br><span class="line">    if [ $((Service_NUM)) -gt 0 ]</span><br><span class="line">    then</span><br><span class="line">        log &quot;Service: $&#123;CURRENT_SERVICE_NAME&#125; already running&quot;</span><br><span class="line">        false</span><br><span class="line">        exit_status</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    if [ ! -d $LOG_PATH ]; then</span><br><span class="line">        mkdir -p $LOG_PATH</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    nohup &#x2F;bin&#x2F;bash $CURRENT_PATH&#x2F;start_env.sh &amp;&gt;&gt; &#x2F;dev&#x2F;null &amp;</span><br><span class="line"></span><br><span class="line">    #exit_status</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">status() &#123;</span><br><span class="line"></span><br><span class="line">    Service_NUM&#x3D;&#96;ps -ef|grep $&#123;CURRENT_SERVICE_NAME&#125;&#x2F;jar&#x2F;|grep -v grep|grep -v cronolog|grep -v $0|awk &#39;&#123;print $2&#125;&#39;|wc -l&#96;</span><br><span class="line">    if [ $((Service_NUM)) -gt 1 ]</span><br><span class="line">    then</span><br><span class="line">        echo &quot;Service run more than one process,please check&quot;</span><br><span class="line">        false</span><br><span class="line">        exit_status</span><br><span class="line">    fi</span><br><span class="line">    Service_PID&#x3D;&#96;ps -ef|grep $&#123;CURRENT_SERVICE_NAME&#125;&#x2F;jar&#x2F;|grep -v grep|grep -v cronolog|grep -v $0|awk &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">    if [ x$Service_PID &#x3D;&#x3D; x ];then</span><br><span class="line">        echo &quot;Service: $&#123;CURRENT_SERVICE_NAME&#125; process is NOT exist&quot;</span><br><span class="line">        false</span><br><span class="line">        exit_status</span><br><span class="line">    else</span><br><span class="line">        Service_startTime&#x3D;&#96;ps -p $&#123;Service_PID&#125; -o lstart|grep -v &quot;START&quot;&#96;</span><br><span class="line">        echo -e &quot;service: $&#123;CURRENT_SERVICE_NAME&#125; started,\npid: $&#123;Service_PID&#125;,\nstartTime: $&#123;Service_startTime&#125;,\nlogPath: $&#123;LOG_PATH&#125;&#x2F;out.&#96;date +%Y%m%d&#96;.nohup&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dump() &#123;</span><br><span class="line">    if [ ! -d $DUMP_PATH ]; then</span><br><span class="line">        mkdir -p $DUMP_PATH</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    echo -e &quot;Dumping the $&#123;CURRENT_SERVICE_NAME&#125; ...\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jstack $Service_PID &gt; $DUMP_PATH&#x2F;jstack-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jinfo $Service_PID &gt; $DUMP_PATH&#x2F;jinfo-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jstat -gcutil $Service_PID &gt; $DUMP_PATH&#x2F;jstat-gcutil-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jstat -gccapacity $Service_PID &gt; $DUMP_PATH&#x2F;jstat-gccapacity-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jmap $Service_PID &gt; $DUMP_PATH&#x2F;jmap-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jmap -heap $Service_PID &gt; $DUMP_PATH&#x2F;jmap-heap-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    sudo &#x2F;usr&#x2F;local&#x2F;jdk&#x2F;bin&#x2F;jmap -histo $Service_PID &gt; $DUMP_PATH&#x2F;jmap-histo-$Service_PID.$&#123;CURRENT_TIME&#125;.dump 2&gt;&amp;1</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    if [ -r &#x2F;usr&#x2F;sbin&#x2F;lsof ]; then</span><br><span class="line">    &#x2F;usr&#x2F;sbin&#x2F;lsof -p $Service_PID &gt; $DUMP_PATH&#x2F;lsof-$Service_PID.$&#123;CURRENT_TIME&#125;.dump</span><br><span class="line">    echo -e &quot;.\c&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo -e &quot;\nDump Complete, files in $&#123;DUMP_PATH&#125;\n&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tail_log() &#123;</span><br><span class="line">    if [ ! -n &quot;$1&quot; ] ; then</span><br><span class="line">        tail_num&#x3D;10</span><br><span class="line">    else</span><br><span class="line">        tail_num&#x3D;$1</span><br><span class="line">    fi</span><br><span class="line">    tail -$&#123;tail_num&#125;f $&#123;LOG_PATH&#125;&#x2F;out.&#96;date +%Y%m%d&#96;.nohup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">help() &#123;</span><br><span class="line">    echo &quot;USAGE: $0 &#123;stop|start|restart|status|dump|log [tail line of numbers:200]|help&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ $# -gt 0 ] ; then</span><br><span class="line"></span><br><span class="line">    case $1 in</span><br><span class="line">    start)</span><br><span class="line">        log &quot;Will Start Service ...&quot;</span><br><span class="line">        start_service</span><br><span class="line">        log &quot;Sleep 3 Sec for Status ...&quot;</span><br><span class="line">        sleep 3</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        log &quot;Will Stop Service ...&quot;</span><br><span class="line">        stop_service</span><br><span class="line">        ;;</span><br><span class="line">    restart)</span><br><span class="line">        log &quot;Will Restart Service ...&quot;</span><br><span class="line"></span><br><span class="line">        stop_service</span><br><span class="line">        log &quot;Sleep 3 Sec&quot;</span><br><span class="line">        sleep 3</span><br><span class="line"></span><br><span class="line">        start_service</span><br><span class="line">        log &quot;Sleep 3 Sec for Status ...&quot;</span><br><span class="line">        sleep 3</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">    dump)</span><br><span class="line">        check_user</span><br><span class="line">        status</span><br><span class="line">        if [ $? &#x3D;&#x3D; 0 ]</span><br><span class="line">        then</span><br><span class="line">            dump</span><br><span class="line">        else</span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        ;;</span><br><span class="line">    log)</span><br><span class="line">        tail_log $2</span><br><span class="line">        ;;</span><br><span class="line">    help)</span><br><span class="line">        help</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo &quot;Bad Parameter: $1&quot;</span><br><span class="line">        help</span><br><span class="line">        exit 1</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">    help</span><br><span class="line">    exit 1;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>GitOps for k8s</title>
    <url>/2020/05/28/GitOps-for-k8s/</url>
    <content><![CDATA[<p><a href="https://mp.weixin.qq.com/s/ptcccaFY55wBKdeNqpu8cw" target="_blank" rel="noopener">gitops for k8s</a></p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>DevOps工具主题整理</title>
    <url>/2020/05/22/DevOps%E5%B7%A5%E5%85%B7%E4%B8%BB%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<img src="/2020/05/22/DevOps%E5%B7%A5%E5%85%B7%E4%B8%BB%E9%A2%98%E6%95%B4%E7%90%86/DevOps.svg">]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>python轻量级框架</title>
    <url>/2020/05/05/python%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="Responder框架"><a href="#Responder框架" class="headerlink" title="Responder框架"></a>Responder框架</h2><blockquote>
<p>responder是@kennethreitz新开发的一个项目， 是一个基于 Python 的 HTTP 服务框架. 底层用了 Starlette 的框架, Starlette 是一款轻量级的 ASGI 框架/工具包， 可以用 Starlette 构建高性能的异步 IO 服务.</p>
</blockquote>
<p>示例代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">@version: v0.1</span><br><span class="line">@Author: shu_ke163@163.com</span><br><span class="line">@Description: file content</span><br><span class="line">@Date: 2020-05-05 01:04:37</span><br><span class="line">@LastEditors: shuke</span><br><span class="line">@LastEditTime: 2020-05-05 02:07:37</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">import time</span><br><span class="line">import graphene</span><br><span class="line">import responder</span><br><span class="line"></span><br><span class="line">api &#x3D; responder.API()</span><br><span class="line"></span><br><span class="line">@api.route(&quot;&#x2F;&#123;greeting&#125;&quot;)</span><br><span class="line">async def greet_world(req, resp, *, greeting):</span><br><span class="line">    resp.text &#x3D; f&quot;&#123;greeting&#125;, world&quot;</span><br><span class="line"></span><br><span class="line">@api.route(&quot;&#x2F;&quot;)</span><br><span class="line">def hello(req, resp):</span><br><span class="line"></span><br><span class="line">    # 作为后台任务执行</span><br><span class="line">    @api.background.task</span><br><span class="line">    def sleep(s&#x3D;10):</span><br><span class="line">        time.sleep(s)</span><br><span class="line">        print(&quot;slept!&quot;)</span><br><span class="line"></span><br><span class="line">    sleep()</span><br><span class="line">    resp.content &#x3D; &quot;processing&quot;</span><br><span class="line"></span><br><span class="line">class Query(graphene.ObjectType):</span><br><span class="line">    hello &#x3D; graphene.String(name&#x3D;graphene.String(default_value&#x3D;&quot;stranger&quot;))</span><br><span class="line"></span><br><span class="line">    def resolve_hello(self, info, name):</span><br><span class="line">        return f&quot;Hello &#123;name&#125;&quot;</span><br><span class="line"></span><br><span class="line">schema &#x3D; graphene.Schema(query&#x3D;Query)</span><br><span class="line">view &#x3D; responder.ext.GraphQLView(api&#x3D;api, schema&#x3D;schema)</span><br><span class="line"></span><br><span class="line">api.add_route(&quot;&#x2F;graph&quot;, view)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    api.run()</span><br></pre></td></tr></table></figure>

<p><a href="https://responder.kennethreitz.org/en/latest/tour.html" target="_blank" rel="noopener">官方示例文档</a></p>
<h2 id="Starlette"><a href="#Starlette" class="headerlink" title="Starlette"></a>Starlette</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">@version: v0.1</span><br><span class="line">@Author: shu_ke163@163.com</span><br><span class="line">@Description: file content</span><br><span class="line">@Date: 2020-05-05 02:16:32</span><br><span class="line">@LastEditors: shuke</span><br><span class="line">@LastEditTime: 2020-05-05 02:22:39</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">from starlette.applications import Starlette</span><br><span class="line">from starlette.responses import JSONResponse</span><br><span class="line">from starlette.routing import Route</span><br><span class="line"></span><br><span class="line">async def homepage(request):</span><br><span class="line">    return JSONResponse(&#123;&quot;hello&quot;: &quot;shuke&#39;s world&quot;&#125;)</span><br><span class="line"></span><br><span class="line">routes &#x3D; [</span><br><span class="line">    Route(&quot;&#x2F;&quot;, endpoint&#x3D;homepage)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">app &#x3D; Starlette(debug&#x3D;True, routes&#x3D;routes)</span><br></pre></td></tr></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(base) ➜  uvicorn example:app --reload</span><br></pre></td></tr></table></figure>

<h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(base) ➜ http http:&#x2F;&#x2F;127.0.0.1:8000</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">content-length: 25</span><br><span class="line">content-type: application&#x2F;json</span><br><span class="line">date: Mon, 04 May 2020 18:27:23 GMT</span><br><span class="line">server: uvicorn</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;hello&quot;: &quot;shuke&#39;s world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.starlette.io/" target="_blank" rel="noopener">官方文档</a></p>
<h2 id="FastAPI"><a href="#FastAPI" class="headerlink" title="FastAPI"></a>FastAPI</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">@version: v0.1</span><br><span class="line">@Author: shu_ke163@163.com</span><br><span class="line">@Description: file content</span><br><span class="line">@Date: 2020-05-05 01:04:37</span><br><span class="line">@LastEditors: shuke</span><br><span class="line">@LastEditTime: 2020-05-05 02:48:43</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">from fastapi import FastAPI</span><br><span class="line"></span><br><span class="line">app &#x3D; FastAPI()</span><br><span class="line"></span><br><span class="line">@app.get(&quot;&#x2F;&quot;)</span><br><span class="line">async def read_root():</span><br><span class="line">    return &#123;&quot;hello&quot;: &quot;world!&quot;&#125;</span><br><span class="line"></span><br><span class="line">@app.get(&quot;&#x2F;items&#x2F;&#123;item_id&#125;&quot;)</span><br><span class="line">async def read_item(item_id: int, q: str &#x3D; None) -&gt; dict:</span><br><span class="line">    return &#123;&quot;item_id&quot;: item_id, &quot;q&quot;: q&#125;</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">(base) ➜  learn uvicorn main:app --reload</span><br></pre></td></tr></table></figure>

<h2 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(base) ➜  http http:&#x2F;&#x2F;127.0.0.1:8000</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">content-length: 18</span><br><span class="line">content-type: application&#x2F;json</span><br><span class="line">date: Mon, 04 May 2020 18:52:08 GMT</span><br><span class="line">server: uvicorn</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;hello&quot;: &quot;world!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(base) ➜  http http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;items&#x2F;5\?q\&#x3D;shuke</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">content-length: 25</span><br><span class="line">content-type: application&#x2F;json</span><br><span class="line">date: Mon, 04 May 2020 18:55:40 GMT</span><br><span class="line">server: uvicorn</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;item_id&quot;: 5,</span><br><span class="line">    &quot;q&quot;: &quot;shuke&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="api-docs"><a href="#api-docs" class="headerlink" title="api docs"></a>api docs</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;docs</span><br></pre></td></tr></table></figure>

<h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;learnku.com&#x2F;python&#x2F;t&#x2F;38942</span><br><span class="line">https:&#x2F;&#x2F;fastapi.tiangolo.com&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PYTHON</category>
      </categories>
      <tags>
        <tag>PYTHON</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐几个好用的DevOps小工具</title>
    <url>/2020/04/30/%E6%8E%A8%E8%8D%90%E5%87%A0%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84DevOps%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h2><ol>
<li>文档管理</li>
</ol>
<ul>
<li>wiki</li>
<li>MM-wiki</li>
<li>gitbook(推荐)</li>
<li>Docusaurus(推荐)</li>
<li>hexo</li>
</ul>
<ol start="2">
<li>bug管理</li>
</ol>
<ul>
<li>git-bug</li>
<li>蝉道</li>
<li>Readme</li>
</ul>
<ol start="3">
<li>code review</li>
</ol>
<ul>
<li>Phabricator(PHA)</li>
</ul>
<ol start="4">
<li>markdown 绘图工具</li>
</ol>
<ul>
<li>PlantUML</li>
<li>Graphviz</li>
<li>Mermaid</li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是RESTful API以及Django RestFramework</title>
    <url>/2020/04/20/%E4%BB%80%E4%B9%88%E6%98%AFRESTful-API%E4%BB%A5%E5%8F%8ADjango-RestFramework/</url>
    <content><![CDATA[<h2 id="一-什么是RESTful-API以及Django-RestFramework"><a href="#一-什么是RESTful-API以及Django-RestFramework" class="headerlink" title="一. 什么是RESTful API以及Django RestFramework"></a>一. 什么是RESTful API以及Django RestFramework</h2><h3 id="1-协议"><a href="#1-协议" class="headerlink" title="1. 协议"></a>1. 协议</h3><p>API与用户的通信协议，总是使用HTTPS协议。</p>
<h3 id="2-域名"><a href="#2-域名" class="headerlink" title="2. 域名"></a>2. 域名</h3><ul>
<li>应该尽量将API部署在专用域名之下(存在跨域问题): <a href="https://api.example.com" target="_blank" rel="noopener">https://api.example.com</a></li>
<li>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下: <a href="https://example.org/api/" target="_blank" rel="noopener">https://example.org/api/</a></li>
</ul>
<h3 id="3-版本"><a href="#3-版本" class="headerlink" title="3. 版本"></a>3. 版本</h3><p>应该将API的版本号放入URL: <a href="https://api.example.com/v1/" target="_blank" rel="noopener">https://api.example.com/v1/</a><br>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。<a href="https://developer.github.com/v3/media/#request-specific-version" target="_blank" rel="noopener">GitHub Developer Guide</a>采用这种做法,跨域时会引发多次请求</p>
<h3 id="4-路径-Endpoint"><a href="#4-路径-Endpoint" class="headerlink" title="4. 路径(Endpoint)"></a>4. 路径(Endpoint)</h3><p>路径又称”终点”（endpoint），表示API的具体网址。<br>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。<br>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.example.com&#x2F;v1&#x2F;zoos</span><br><span class="line">https:&#x2F;&#x2F;api.example.com&#x2F;v1&#x2F;animals</span><br><span class="line">https:&#x2F;&#x2F;api.example.com&#x2F;v1&#x2F;employees</span><br></pre></td></tr></table></figure>

<h3 id="5-HTTP动词"><a href="#5-HTTP动词" class="headerlink" title="5. HTTP动词"></a>5. HTTP动词</h3><p>对于资源的具体操作类型，由HTTP动词表示。<br>常用的HTTP动词有下面五个(括号里是对应的SQL命令)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET（SELECT）：从服务器取出资源（一项或多项）</span><br><span class="line">POST（CREATE）：在服务器新建一个资源</span><br><span class="line">PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）</span><br><span class="line">PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）</span><br><span class="line">DELETE（DELETE）：从服务器删除资源</span><br></pre></td></tr></table></figure>
<p>还有两个不常用的HTTP动词</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HEAD：获取资源的元数据</span><br><span class="line">OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的</span><br></pre></td></tr></table></figure>
<p>下面是一些栗子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;zoos：列出所有动物园</span><br><span class="line">POST &#x2F;zoos：新建一个动物园</span><br><span class="line">GET &#x2F;zoos&#x2F;ID：获取某个指定动物园的信息</span><br><span class="line">PUT &#x2F;zoos&#x2F;ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="line">PATCH &#x2F;zoos&#x2F;ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="line">DELETE &#x2F;zoos&#x2F;ID：删除某个动物园</span><br><span class="line">GET &#x2F;zoos&#x2F;ID&#x2F;animals：列出某个指定动物园的所有动物</span><br><span class="line">DELETE &#x2F;zoos&#x2F;ID&#x2F;animals&#x2F;ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure>

<h3 id="6-过滤信息-Filtering"><a href="#6-过滤信息-Filtering" class="headerlink" title="6. 过滤信息(Filtering)"></a>6. 过滤信息(Filtering)</h3><p>如果记录数量很多,服务器不可能都将它们返回给用户.API应该提供参数,过滤返回结果<br>常见的参数形式如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?limit&#x3D;10：指定返回记录的数量</span><br><span class="line">?offset&#x3D;10：指定返回记录的开始位置。</span><br><span class="line">?page&#x3D;2&amp;per_page&#x3D;100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby&#x3D;name&amp;order&#x3D;asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id&#x3D;1：指定筛选条件</span><br></pre></td></tr></table></figure>
<p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p>
<h3 id="7-状态码-Status-Codes"><a href="#7-状态码-Status-Codes" class="headerlink" title="7. 状态码(Status Codes)"></a>7. 状态码(Status Codes)</h3><p>服务器向用户返回的状态码和提示信息，常见的有以下一些(方括号中是该状态码对应的HTTP动词)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST&#x2F;PUT&#x2F;PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST&#x2F;PUT&#x2F;PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST&#x2F;PUT&#x2F;PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功</span><br></pre></td></tr></table></figure>
<p>注意: 状态码的完全列表参见<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">这里</a></p>
<h3 id="8-错误处理-Error-handling"><a href="#8-错误处理-Error-handling" class="headerlink" title="8. 错误处理(Error handling)"></a>8. 错误处理(Error handling)</h3><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    error: &quot;Invalid API key&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-返回结果"><a href="#9-返回结果" class="headerlink" title="9. 返回结果"></a>9. 返回结果</h3><p>针对不同操作，服务器向用户返回的结果应该符合以下规范</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;collection：返回资源对象的列表（数组）</span><br><span class="line">GET &#x2F;collection&#x2F;resource：返回单个资源对象</span><br><span class="line">POST &#x2F;collection：返回新生成的资源对象</span><br><span class="line">PUT &#x2F;collection&#x2F;resource：返回完整的资源对象</span><br><span class="line">PATCH &#x2F;collection&#x2F;resource：返回完整的资源对象</span><br><span class="line">DELETE &#x2F;collection&#x2F;resource：返回一个空文档</span><br></pre></td></tr></table></figure>

<h3 id="10-Hypermedia-API"><a href="#10-Hypermedia-API" class="headerlink" title="10. Hypermedia API"></a>10. Hypermedia API</h3><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。<br>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;link&quot;: &#123;</span><br><span class="line">  &quot;rel&quot;:   &quot;collection https:&#x2F;&#x2F;www.example.com&#x2F;zoos&quot;,</span><br><span class="line">  &quot;href&quot;:  &quot;https:&#x2F;&#x2F;api.example.com&#x2F;zoos&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;List of zoos&quot;,</span><br><span class="line">  &quot;type&quot;:  &quot;application&#x2F;vnd.yourformat+json&quot;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。<br>Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问api.github.com会得到一个所有可用API的网址列表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;current_user_url&quot;: &quot;https:&#x2F;&#x2F;api.github.com&#x2F;user&quot;,</span><br><span class="line">  &quot;authorizations_url&quot;: &quot;https:&#x2F;&#x2F;api.github.com&#x2F;authorizations&quot;,</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面可以看到，如果想获取当前用户的信息，应该去访问\api.github.com/user，然后就得到了下面结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;message&quot;: &quot;Requires authentication&quot;,</span><br><span class="line">  &quot;documentation_url&quot;: &quot;https:&#x2F;&#x2F;developer.github.com&#x2F;v3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码表示，服务器给出了提示信息，以及文档的网址</p>
<h3 id="11-其他"><a href="#11-其他" class="headerlink" title="11. 其他"></a>11. 其他</h3><ul>
<li>API的身份认证应该使用<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">OAuth 2.0</a>框架。</li>
<li>服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</li>
</ul>
<p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南 - 阮一峰的网络日志</a><br><a href="https://github.com/aisuhua/restful-api-design-references" target="_blank" rel="noopener">GitHub - aisuhua/restful-api-design-references: RESTful API 设计参考文献列表</a>  </p>
<h2 id="二-基于Django的实现"><a href="#二-基于Django的实现" class="headerlink" title="二. 基于Django的实现"></a>二. 基于Django的实现</h2><h3 id="2-1-路由系统"><a href="#2-1-路由系统" class="headerlink" title="2.1 路由系统"></a>2.1 路由系统</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from app01 import views</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^users&#39;, views.UserView.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="2-2-CBV试图"><a href="#2-2-CBV试图" class="headerlink" title="2.2 CBV试图"></a>2.2 CBV试图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class UserView(View):</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        result &#x3D; &#123;&quot;status&quot;: True, &quot;data&quot;: &quot;This is a get request&quot;, &quot;msg&quot;: None, &quot;code&quot;: 2000&#125;</span><br><span class="line">        return JsonResponse(result, status&#x3D;200)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        result &#x3D; &#123;&quot;status&quot;: True, &quot;data&quot;: &quot;This is a post request&quot;, &quot;msg&quot;: None, &quot;code&quot;: 2000&#125;</span><br><span class="line">        return JsonResponse(result, status&#x3D;200)</span><br></pre></td></tr></table></figure>

<h2 id="三-基于Django-Rest-Framework-框架实现"><a href="#三-基于Django-Rest-Framework-框架实现" class="headerlink" title="三. 基于Django Rest Framework 框架实现"></a>三. 基于Django Rest Framework 框架实现</h2><h3 id="3-1-基本流程"><a href="#3-1-基本流程" class="headerlink" title="3.1 基本流程"></a>3.1 基本流程</h3><p>路由:URL.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^index&#39;, views.IndexView.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>试图: views.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">class IndexView(APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    请求到来之后，都要执行dispatch方法，dispatch方法根据请求方式不同触发反射 get&#x2F;post&#x2F;put 等方法</span><br><span class="line">    注意：APIView中的dispatch方法有好多好多的功能</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        return super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure>
<p>⚠️ : 以上是Django rest framework框架基本流程,重要的功能是在APIView的dispatch中触发,也是框架的源码入口</p>
<h3 id="3-2-认证和授权"><a href="#3-2-认证和授权" class="headerlink" title="3.2 认证和授权"></a>3.2 认证和授权</h3><h4 id="3-2-1-基于token的验证"><a href="#3-2-1-基于token的验证" class="headerlink" title="3.2.1 基于token的验证"></a>3.2.1 基于token的验证</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat models.py </span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class UserInfo(models.Model):</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;64)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserToken(models.Model):</span><br><span class="line">    user &#x3D; models.OneToOneField(&#39;UserInfo&#39;, on_delete&#x3D;True)</span><br><span class="line">    token &#x3D; models.CharField(max_length&#x3D;64)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat views.py</span><br><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from app01 import models</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line">class AuthView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []    # 登录认证接口覆盖默认的toekn认证类</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        response &#x3D; &#123;&#39;code&#39;: 1000&#125;</span><br><span class="line">        user &#x3D; request.data.get(&#39;username&#39;)</span><br><span class="line">        pwd &#x3D; request.data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;user, password&#x3D;pwd).first()</span><br><span class="line">        if not obj:</span><br><span class="line">            response[&#39;code&#39;] &#x3D; 1001</span><br><span class="line">            response[&#39;msg&#39;] &#x3D; &#39;用户或密码错误&#39;</span><br><span class="line">            return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            response[&#39;token&#39;] &#x3D; token</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">        return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return HttpResponse(&#39;user.get: %s&#39; % request.user)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&#39;user.post&#39;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;auth.py</span><br><span class="line"></span><br><span class="line">from rest_framework.authentication import BaseAuthentication</span><br><span class="line">from rest_framework.exceptions import AuthenticationFailed</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line">class TokenAuthtication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        (user,auth) 表示认证成功,并将元组分别赋值给request.user&#x2F;request.auth</span><br><span class="line">        :raise AuthenticationFailed(&#39;认证失败&#39;)  表示认证失败</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        token &#x3D; request.query_params.get(&#39;token&#39;)</span><br><span class="line">        if not token:</span><br><span class="line">            raise AuthenticationFailed(&quot;用户Token未携带&quot;)</span><br><span class="line"></span><br><span class="line">        token_obj &#x3D; models.UserToken.objects.filter(token&#x3D;token).first()</span><br><span class="line">        if not token_obj:</span><br><span class="line">            raise AuthenticationFailed(&quot;Token已失效或错误&quot;)</span><br><span class="line">        return (token_obj.user.username, token_obj)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat settings.py</span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: [&#39;app01.utils.auth.TokenAuthtication&#39;, ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>验证:</p>
<ol>
<li>首先在数据库中构造请求登录的用户名密码</li>
<li>构造数据获取token信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -X POST \</span><br><span class="line">&gt;   http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;auth&#x2F; \</span><br><span class="line">&gt;   -H &#39;Cache-Control: no-cache&#39; \</span><br><span class="line">&gt;   -H &#39;Content-Type: application&#x2F;json&#39; \</span><br><span class="line">&gt;   -H &#39;Postman-Token: 8439ce0a-94ff-3970-c8c2-4c6bc200bb4f&#39; \</span><br><span class="line">&gt;   -d &#39;&#123;&quot;username&quot;: &quot;eric&quot;,&quot;password&quot;:&quot;123&quot;&#125;&#39;</span><br><span class="line">返回:</span><br><span class="line">&#123;&quot;code&quot;: 1000, &quot;token&quot;: &quot;4c90f696-008b-4e30-86fa-4b00b6fc9237&quot;&#125;</span><br></pre></td></tr></table></figure></li>
<li>携带token访问user接口,获取用户信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;   &#39;http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;user&#x2F;?token&#x3D;4c90f696-008b-4e30-86fa-4b00b6fc9237&#39; \</span><br><span class="line">&gt;   -H &#39;Cache-Control: no-cache&#39; \</span><br><span class="line">&gt;   -H &#39;Postman-Token: 1b4125ad-7ad1-1cca-70fd-6a00cca16d96&#39;</span><br><span class="line">返回:</span><br><span class="line">user.get: eric</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-2-2-基于请求头认证"><a href="#3-2-2-基于请求头认证" class="headerlink" title="3.2.2 基于请求头认证"></a>3.2.2 基于请求头认证</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;auth.py</span><br><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;6&#x2F;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from rest_framework.authentication import BaseAuthentication</span><br><span class="line">from rest_framework.exceptions import AuthenticationFailed</span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line">class HeaderAuthentication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        用户认证，如果验证成功后返回元组： (用户,用户Token)</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">            None,表示跳过该验证；</span><br><span class="line">                如果跳过了所有认证，默认用户和Token和使用配置文件进行设置</span><br><span class="line">                self._authenticator &#x3D; None</span><br><span class="line">                if api_settings.UNAUTHENTICATED_USER:</span><br><span class="line">                    self.user &#x3D; api_settings.UNAUTHENTICATED_USER()</span><br><span class="line">                else:</span><br><span class="line">                    self.user &#x3D; None</span><br><span class="line"></span><br><span class="line">                if api_settings.UNAUTHENTICATED_TOKEN:</span><br><span class="line">                    self.auth &#x3D; api_settings.UNAUTHENTICATED_TOKEN()</span><br><span class="line">                else:</span><br><span class="line">                    self.auth &#x3D; None</span><br><span class="line">            (user,token)表示验证通过并设置用户名和Token；</span><br><span class="line">            AuthenticationFailed异常</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        import base64</span><br><span class="line">        import uuid</span><br><span class="line">        auth &#x3D; request.META.get(&#39;HTTP_AUTHORIZATION&#39;, b&#39;&#39;)</span><br><span class="line">        if auth:</span><br><span class="line">            auth &#x3D; auth.encode(&#39;utf-8&#39;)</span><br><span class="line">        auth &#x3D; auth.split()</span><br><span class="line">        if not auth or auth[0].lower() !&#x3D; b&#39;basic&#39;:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        if len(auth) !&#x3D; 2:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        username, part, password &#x3D; base64.b64decode(auth[1]).decode(&#39;utf-8&#39;).partition(&#39;:&#39;)</span><br><span class="line">        try:</span><br><span class="line">            obj &#x3D; models.UserInfo.objects.filter(username&#x3D;username, password&#x3D;password).first()</span><br><span class="line">            if not obj:</span><br><span class="line">                raise exceptions.AuthenticationFailed(&#39;用户名或密码错误&#39;)</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            token_obj, status &#x3D; models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            return (token_obj.user.username, token_obj)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line"></span><br><span class="line">    def authenticate_header(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Return a string to be used as the value of the &#96;WWW-Authenticate&#96;</span><br><span class="line">        header in a &#96;401 Unauthenticated&#96; response, or &#96;None&#96; if the</span><br><span class="line">        authentication scheme should return &#96;403 Permission Denied&#96; responses.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return &#39;Basic realm&#x3D;api&#39;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat views.py</span><br><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from app01.utils.auth import HeaderAuthentication</span><br><span class="line">from app01 import models</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AuthView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        response &#x3D; &#123;&#39;code&#39;: 1000&#125;</span><br><span class="line">        user &#x3D; request.data.get(&#39;username&#39;)</span><br><span class="line">        pwd &#x3D; request.data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;user, password&#x3D;pwd).first()</span><br><span class="line">        if not obj:</span><br><span class="line">            response[&#39;code&#39;] &#x3D; 1001</span><br><span class="line">            response[&#39;msg&#39;] &#x3D; &#39;用户或密码错误&#39;</span><br><span class="line">            return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            response[&#39;token&#39;] &#x3D; token</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">        return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    authentication_classes &#x3D; [HeaderAuthentication, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return HttpResponse(&#39;user.get: %s,token: %s&#39; % (request.user, request.auth))</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&#39;user.post&#39;)</span><br></pre></td></tr></table></figure>
<p>验证:</p>
<ol>
<li>首先在数据库中构造请求登录的用户名密码</li>
<li>构造数据获取token信息,建议使用postman进行构造测试<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -X GET \</span><br><span class="line">  http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;user&#x2F; \</span><br><span class="line">  -H &#39;Authorization: Basic c2h1a2U6MTIz&#39; \</span><br><span class="line">  -H &#39;Cache-Control: no-cache&#39; \</span><br><span class="line">  -H &#39;Postman-Token: ba3f99ce-da6a-7e5f-3e0b-3c79129ecca1&#39;</span><br><span class="line">返回:</span><br><span class="line">user.get: shuke,token: 2d3af34a-1598-4d5a-af56-7f29a706a26e</span><br></pre></td></tr></table></figure>
<h4 id="3-2-3-多个认证规则"><a href="#3-2-3-多个认证规则" class="headerlink" title="3.2.3 多个认证规则"></a>3.2.3 多个认证规则</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;auth.py</span><br><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;6&#x2F;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from rest_framework.authentication import BaseAuthentication</span><br><span class="line">from rest_framework.exceptions import AuthenticationFailed</span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TokenAuthtication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        (user,auth) 表示认证成功,并将元组分别赋值给request.user&#x2F;request.auth</span><br><span class="line">        :raise AuthenticationFailed(&#39;认证失败&#39;)  表示认证失败</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        token &#x3D; request.query_params.get(&#39;token&#39;)</span><br><span class="line">        if not token:</span><br><span class="line">            raise AuthenticationFailed(&quot;用户Token未携带&quot;)</span><br><span class="line"></span><br><span class="line">        token_obj &#x3D; models.UserToken.objects.filter(token&#x3D;token).first()</span><br><span class="line">        if not token_obj:</span><br><span class="line">            raise AuthenticationFailed(&quot;Token已失效或错误&quot;)</span><br><span class="line">        return (token_obj.user.username, token_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HeaderAuthentication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        用户认证，如果验证成功后返回元组： (用户,用户Token)</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">            None,表示跳过该验证；</span><br><span class="line">                如果跳过了所有认证，默认用户和Token和使用配置文件进行设置</span><br><span class="line">                self._authenticator &#x3D; None</span><br><span class="line">                if api_settings.UNAUTHENTICATED_USER:</span><br><span class="line">                    self.user &#x3D; api_settings.UNAUTHENTICATED_USER()</span><br><span class="line">                else:</span><br><span class="line">                    self.user &#x3D; None</span><br><span class="line"></span><br><span class="line">                if api_settings.UNAUTHENTICATED_TOKEN:</span><br><span class="line">                    self.auth &#x3D; api_settings.UNAUTHENTICATED_TOKEN()</span><br><span class="line">                else:</span><br><span class="line">                    self.auth &#x3D; None</span><br><span class="line">            (user,token)表示验证通过并设置用户名和Token；</span><br><span class="line">            AuthenticationFailed异常</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        import base64</span><br><span class="line">        import uuid</span><br><span class="line">        auth &#x3D; request.META.get(&#39;HTTP_AUTHORIZATION&#39;, b&#39;&#39;)</span><br><span class="line">        if auth:</span><br><span class="line">            auth &#x3D; auth.encode(&#39;utf-8&#39;)</span><br><span class="line">        auth &#x3D; auth.split()</span><br><span class="line">        if not auth or auth[0].lower() !&#x3D; b&#39;basic&#39;:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        if len(auth) !&#x3D; 2:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        username, part, password &#x3D; base64.b64decode(auth[1]).decode(&#39;utf-8&#39;).partition(&#39;:&#39;)</span><br><span class="line">        try:</span><br><span class="line">            obj &#x3D; models.UserInfo.objects.filter(username&#x3D;username, password&#x3D;password).first()</span><br><span class="line">            if not obj:</span><br><span class="line">                raise exceptions.AuthenticationFailed(&#39;用户名或密码错误&#39;)</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            token_obj, status &#x3D; models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            return (token_obj.user.username, token_obj)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line"></span><br><span class="line">    def authenticate_header(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Return a string to be used as the value of the &#96;WWW-Authenticate&#96;</span><br><span class="line">        header in a &#96;401 Unauthenticated&#96; response, or &#96;None&#96; if the</span><br><span class="line">        authentication scheme should return &#96;403 Permission Denied&#96; responses.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return &#39;Basic realm&#x3D;api&#39;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat views.py</span><br><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from app01.utils.auth import HeaderAuthentication, TokenAuthtication</span><br><span class="line">from app01 import models</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AuthView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        response &#x3D; &#123;&#39;code&#39;: 1000&#125;</span><br><span class="line">        user &#x3D; request.data.get(&#39;username&#39;)</span><br><span class="line">        pwd &#x3D; request.data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;user, password&#x3D;pwd).first()</span><br><span class="line">        if not obj:</span><br><span class="line">            response[&#39;code&#39;] &#x3D; 1001</span><br><span class="line">            response[&#39;msg&#39;] &#x3D; &#39;用户或密码错误&#39;</span><br><span class="line">            return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            response[&#39;token&#39;] &#x3D; token</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">        return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    authentication_classes &#x3D; [HeaderAuthentication, TokenAuthtication]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return HttpResponse(&#39;user.get: %s,token: %s&#39; % (request.user, request.auth))</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&#39;user.post&#39;)</span><br></pre></td></tr></table></figure>
验证:</li>
<li>首先在数据库中构造请求登录的用户名密码</li>
<li>构造数据获取token信息,建议使用postman进行构造测试<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -X GET \</span><br><span class="line">  http:&#x2F;&#x2F;127.0.0.1:8001&#x2F;api&#x2F;v1&#x2F;user&#x2F; \</span><br><span class="line">  -H &#39;Authorization: Basic c2h1a2U6MTIz&#39; \</span><br><span class="line">  -H &#39;Cache-Control: no-cache&#39; \</span><br><span class="line">  -H &#39;Postman-Token: f91805b7-c742-b713-0010-c75cdbfbb24a&#39;</span><br><span class="line">返回:</span><br><span class="line">user.get: shuke,token: 9c3ca96a-ac03-4207-aaec-20433bae6058</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-2-4-认证和权限"><a href="#3-2-4-认证和权限" class="headerlink" title="3.2.4 认证和权限"></a>3.2.4 认证和权限</h4><p>路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>model</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserInfo(models.Model):</span><br><span class="line">    user_type_choices &#x3D; (</span><br><span class="line">        (1, &#39;普通用户&#39;),</span><br><span class="line">        (2, &#39;管理员&#39;),</span><br><span class="line">        (3, &#39;超级管理员&#39;),</span><br><span class="line">    )</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;32)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;64)</span><br><span class="line">    user_type &#x3D; models.IntegerField(choices&#x3D;user_type_choices, default&#x3D;1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserToken(models.Model):</span><br><span class="line">    user &#x3D; models.OneToOneField(&#39;UserInfo&#39;, on_delete&#x3D;True)</span><br><span class="line">    token &#x3D; models.CharField(max_length&#x3D;64)</span><br></pre></td></tr></table></figure>
<p>认证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;auth.py</span><br><span class="line"></span><br><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;6&#x2F;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from rest_framework.authentication import BaseAuthentication</span><br><span class="line">from rest_framework.exceptions import AuthenticationFailed</span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from app01 import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TokenAuthtication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        (user,auth) 表示认证成功,并将元组分别赋值给request.user&#x2F;request.auth</span><br><span class="line">        :raise AuthenticationFailed(&#39;认证失败&#39;)  表示认证失败</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        token &#x3D; request.query_params.get(&#39;token&#39;)</span><br><span class="line">        if not token:</span><br><span class="line">            raise AuthenticationFailed(&quot;用户Token未携带&quot;)</span><br><span class="line"></span><br><span class="line">        token_obj &#x3D; models.UserToken.objects.filter(token&#x3D;token).first()</span><br><span class="line">        if not token_obj:</span><br><span class="line">            raise AuthenticationFailed(&quot;Token已失效或错误&quot;)</span><br><span class="line">        return (token_obj.user.username, token_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HeaderAuthentication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        用户认证，如果验证成功后返回元组： (用户,用户Token)</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">            None,表示跳过该验证；</span><br><span class="line">                如果跳过了所有认证，默认用户和Token和使用配置文件进行设置</span><br><span class="line">                self._authenticator &#x3D; None</span><br><span class="line">                if api_settings.UNAUTHENTICATED_USER:</span><br><span class="line">                    self.user &#x3D; api_settings.UNAUTHENTICATED_USER()</span><br><span class="line">                else:</span><br><span class="line">                    self.user &#x3D; None</span><br><span class="line"></span><br><span class="line">                if api_settings.UNAUTHENTICATED_TOKEN:</span><br><span class="line">                    self.auth &#x3D; api_settings.UNAUTHENTICATED_TOKEN()</span><br><span class="line">                else:</span><br><span class="line">                    self.auth &#x3D; None</span><br><span class="line">            (user,token)表示验证通过并设置用户名和Token；</span><br><span class="line">            AuthenticationFailed异常</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        import base64</span><br><span class="line">        import uuid</span><br><span class="line">        auth &#x3D; request.META.get(&#39;HTTP_AUTHORIZATION&#39;, b&#39;&#39;)</span><br><span class="line">        if auth:</span><br><span class="line">            auth &#x3D; auth.encode(&#39;utf-8&#39;)</span><br><span class="line">        auth &#x3D; auth.split()</span><br><span class="line">        if not auth or auth[0].lower() !&#x3D; b&#39;basic&#39;:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        if len(auth) !&#x3D; 2:</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line">        username, part, password &#x3D; base64.b64decode(auth[1]).decode(&#39;utf-8&#39;).partition(&#39;:&#39;)</span><br><span class="line">        try:</span><br><span class="line">            obj &#x3D; models.UserInfo.objects.filter(username&#x3D;username, password&#x3D;password).first()</span><br><span class="line">            if not obj:</span><br><span class="line">                raise exceptions.AuthenticationFailed(&#39;用户名或密码错误&#39;)</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            token_obj, status &#x3D; models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            return (token_obj.user.username, token_obj)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">            raise exceptions.AuthenticationFailed(&#39;验证失败&#39;)</span><br><span class="line"></span><br><span class="line">    def authenticate_header(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Return a string to be used as the value of the &#96;WWW-Authenticate&#96;</span><br><span class="line">        header in a &#96;401 Unauthenticated&#96; response, or &#96;None&#96; if the</span><br><span class="line">        authentication scheme should return &#96;403 Permission Denied&#96; responses.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return &#39;Basic realm&#x3D;api&#39;</span><br></pre></td></tr></table></figure>
<p>权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat app01&#x2F;utils&#x2F;permission.py</span><br><span class="line"></span><br><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># __author__ &#x3D; &quot;shuke&quot;</span><br><span class="line"># Date: 2018&#x2F;6&#x2F;3</span><br><span class="line">from rest_framework.permissions import BasePermission</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserPermission(BasePermission):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    权限验证</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def has_permission(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        判断是否有权限访问当前请求</span><br><span class="line">        Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.</span><br><span class="line">        :param request:</span><br><span class="line">        :param view:</span><br><span class="line">        :return: True有权限；False无权限</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        user_type_id &#x3D; request.auth.user.user_type</span><br><span class="line">        if user_type_id &gt; 0:</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    # GenericAPIView中get_object时调用</span><br><span class="line">    def has_object_permission(self, request, view, obj):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        视图继承GenericAPIView，并在其中使用get_object时获取对象时，触发单独对象权限验证</span><br><span class="line">        Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.</span><br><span class="line">        :param request:</span><br><span class="line">        :param view:</span><br><span class="line">        :param obj:</span><br><span class="line">        :return: True有权限；False无权限</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        user_type_id &#x3D; request.auth.user.user_type</span><br><span class="line">        if user_type_id &gt; 0:</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ManagerPermission(BasePermission):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    视图继承GenericAPIView，并在其中使用get_object时获取对象时，触发单独对象权限验证</span><br><span class="line">    Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.</span><br><span class="line">    :param request:</span><br><span class="line">    :param view:</span><br><span class="line">    :param obj:</span><br><span class="line">    :return: True有权限；False无权限</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def has_permission(self, request, view):</span><br><span class="line">        user_type_id &#x3D; request.auth.user.user_type</span><br><span class="line">        if user_type_id &gt; 1:</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    # GenericAPIView中get_object时调用</span><br><span class="line">    def has_object_permission(self, request, view, obj):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        视图继承GenericAPIView，并在其中使用get_object时获取对象时，触发单独对象权限验证</span><br><span class="line">        Return &#96;True&#96; if permission is granted, &#96;False&#96; otherwise.</span><br><span class="line">        :param request:</span><br><span class="line">        :param view:</span><br><span class="line">        :param obj:</span><br><span class="line">        :return: True有权限；False无权限</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        user_type_id &#x3D; request.auth.user.user_type</span><br><span class="line">        if user_type_id &gt; 1:</span><br><span class="line">            return True</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure>
<p>试图函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render, HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from app01.utils.auth import HeaderAuthentication, TokenAuthtication</span><br><span class="line">from app01.utils.permission import UserPermission, ManagerPermission</span><br><span class="line">from app01 import models</span><br><span class="line">import uuid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AuthView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        response &#x3D; &#123;&#39;code&#39;: 1000&#125;</span><br><span class="line">        user &#x3D; request.data.get(&#39;username&#39;)</span><br><span class="line">        pwd &#x3D; request.data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        obj &#x3D; models.UserInfo.objects.filter(username&#x3D;user, password&#x3D;pwd).first()</span><br><span class="line">        if not obj:</span><br><span class="line">            response[&#39;code&#39;] &#x3D; 1001</span><br><span class="line">            response[&#39;msg&#39;] &#x3D; &#39;用户或密码错误&#39;</span><br><span class="line">            return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line">        try:</span><br><span class="line">            token &#x3D; str(uuid.uuid4())</span><br><span class="line">            models.UserToken.objects.update_or_create(user&#x3D;obj, defaults&#x3D;&#123;&quot;token&quot;: token&#125;)</span><br><span class="line">            response[&#39;token&#39;] &#x3D; token</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&quot;Error: &quot;, e)</span><br><span class="line">        return JsonResponse(response, json_dumps_params&#x3D;&#123;&#39;ensure_ascii&#39;: False&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    # 认证的动作是由request.user触发</span><br><span class="line">    authentication_classes &#x3D; [HeaderAuthentication, TokenAuthtication]</span><br><span class="line"></span><br><span class="line">    # 循环执行所有的权限,当前试图只允许管理员以上权限访问</span><br><span class="line">    permission_classes &#x3D; [ManagerPermission, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return HttpResponse(&#39;user.get: %s,token: %s&#39; % (request.user, request.auth))</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return HttpResponse(&#39;user.post&#39;)</span><br></pre></td></tr></table></figure>
<p>验证:<br><img src="https://note.youdao.com/yws/api/personal/file/WEB9df3ae98ed15b4c4725de0cc826fabe9?method=download&shareKey=f430295de0aa74cb2fa4f45b94d245ec" alt="无访问权限"><br><img src="https://note.youdao.com/yws/api/personal/file/WEBfa5e5818486654600b9b0563e7d4c262?method=download&shareKey=a547b0c96cdd95d95323c1fdbb9b2294" alt="有访问权限"></p>
<p>全局应用权限<br>上述操作中均是对单独视图进行特殊配置，如果想要对全局进行配置，则需要再配置文件中写入即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;UNAUTHENTICATED_USER&#39;: None,</span><br><span class="line">    &#39;UNAUTHENTICATED_TOKEN&#39;: None,</span><br><span class="line">    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: [&#39;app01.utils.auth.HeaderAuthentication&#39;, ],</span><br><span class="line">    &quot;DEFAULT_PERMISSION_CLASSES&quot;: [</span><br><span class="line">        &quot;app01.utils.permission.ManagerPermission&quot;,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^api&#x2F;(?P&lt;version&gt;\w+)&#x2F;&#39;, include(&#39;app01.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ cat app01&#x2F;urls.py </span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^auth&#x2F;$&#39;, views.AuthView.as_view()),</span><br><span class="line">    url(r&#39;^user&#x2F;$&#39;, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>试图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat views.py</span><br><span class="line"></span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure>
<h3 id="3-3-用户访问次数-频率限制"><a href="#3-3-用户访问次数-频率限制" class="headerlink" title="3.3 用户访问次数/频率限制"></a>3.3 用户访问次数/频率限制</h3><h4 id="3-3-1-基于用户IP访问限制频率"><a href="#3-3-1-基于用户IP访问限制频率" class="headerlink" title="3.3.1 基于用户IP访问限制频率"></a>3.3.1 基于用户IP访问限制频率</h4><p>路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat urls.py</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>试图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import time</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from rest_framework.throttling import BaseThrottle</span><br><span class="line">from rest_framework.settings import api_settings</span><br><span class="line"></span><br><span class="line"># 保存访问记录</span><br><span class="line">RECORD &#x3D; &#123;</span><br><span class="line">    &#39;用户IP&#39;: [12312139, 12312135, 12312133, ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestThrottle(BaseThrottle):</span><br><span class="line">    ctime &#x3D; time.time</span><br><span class="line"></span><br><span class="line">    def get_ident(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        根据用户IP和代理IP，当做请求者的唯一IP</span><br><span class="line">        Identify the machine making the request by parsing HTTP_X_FORWARDED_FOR</span><br><span class="line">        if present and number of proxies is &gt; 0. If not use all of</span><br><span class="line">        HTTP_X_FORWARDED_FOR if it is available, if not use REMOTE_ADDR.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        xff &#x3D; request.META.get(&#39;HTTP_X_FORWARDED_FOR&#39;)</span><br><span class="line">        remote_addr &#x3D; request.META.get(&#39;REMOTE_ADDR&#39;)</span><br><span class="line">        num_proxies &#x3D; api_settings.NUM_PROXIES</span><br><span class="line"></span><br><span class="line">        if num_proxies is not None:</span><br><span class="line">            if num_proxies &#x3D;&#x3D; 0 or xff is None:</span><br><span class="line">                return remote_addr</span><br><span class="line">            addrs &#x3D; xff.split(&#39;,&#39;)</span><br><span class="line">            client_addr &#x3D; addrs[-min(num_proxies, len(addrs))]</span><br><span class="line">            return client_addr.strip()</span><br><span class="line"></span><br><span class="line">        return &#39;&#39;.join(xff.split()) if xff else remote_addr</span><br><span class="line"></span><br><span class="line">    def allow_request(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        是否仍然在允许范围内</span><br><span class="line">        Return &#96;True&#96; if the request should be allowed, &#96;False&#96; otherwise.</span><br><span class="line">        :param request: </span><br><span class="line">        :param view: </span><br><span class="line">        :return: True，表示可以通过；False表示已超过限制，不允许访问</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 获取用户唯一标识（如：IP）</span><br><span class="line"></span><br><span class="line">        # 允许一分钟访问10次</span><br><span class="line">        num_request &#x3D; 10</span><br><span class="line">        time_request &#x3D; 60</span><br><span class="line"></span><br><span class="line">        now &#x3D; self.ctime()</span><br><span class="line">        ident &#x3D; self.get_ident(request)</span><br><span class="line">        self.ident &#x3D; ident</span><br><span class="line">        if ident not in RECORD:</span><br><span class="line">            RECORD[ident] &#x3D; [now, ]</span><br><span class="line">            return True</span><br><span class="line">        history &#x3D; RECORD[ident]</span><br><span class="line">        while history and history[-1] &lt;&#x3D; now - time_request:</span><br><span class="line">            history.pop()</span><br><span class="line">        if len(history) &lt; num_request:</span><br><span class="line">            history.insert(0, now)</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">    def wait(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        多少秒后可以允许继续访问</span><br><span class="line">        Optionally, return a recommended number of seconds to wait before</span><br><span class="line">        the next request.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        last_time &#x3D; RECORD[self.ident][0]</span><br><span class="line">        now &#x3D; self.ctime()</span><br><span class="line">        return int(60 + last_time - now)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    throttle_classes &#x3D; [TestThrottle, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def throttled(self, request, wait):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        访问次数被限制时，定制错误信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        class Throttled(exceptions.Throttled):</span><br><span class="line">            default_detail &#x3D; &#39;请求被限制.&#39;</span><br><span class="line">            extra_detail_singular &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line">            extra_detail_plural &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line">            </span><br><span class="line">        raise Throttled(wait)</span><br></pre></td></tr></table></figure>
<h4 id="3-3-2-基于用户IP控制访问频率-利用Django缓存"><a href="#3-3-2-基于用户IP控制访问频率-利用Django缓存" class="headerlink" title="3.3.2 基于用户IP控制访问频率(利用Django缓存)"></a>3.3.2 基于用户IP控制访问频率(利用Django缓存)</h4><p>全局配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;test_scope&#39;: &#39;10&#x2F;m&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>试图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from rest_framework.throttling import SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestThrottle(SimpleRateThrottle):</span><br><span class="line"></span><br><span class="line">    # 配置文件定义的显示频率的Key</span><br><span class="line">    scope &#x3D; &quot;test_scope&quot;</span><br><span class="line"></span><br><span class="line">    def get_cache_key(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Should return a unique cache-key which can be used for throttling.</span><br><span class="line">        Must be overridden.</span><br><span class="line"></span><br><span class="line">        May return &#96;None&#96; if the request should not be throttled.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not request.user:</span><br><span class="line">            ident &#x3D; self.get_ident(request)</span><br><span class="line">        else:</span><br><span class="line">            ident &#x3D; request.user</span><br><span class="line"></span><br><span class="line">        return self.cache_format % &#123;</span><br><span class="line">            &#39;scope&#39;: self.scope,</span><br><span class="line">            &#39;ident&#39;: ident</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    throttle_classes &#x3D; [TestThrottle, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def throttled(self, request, wait):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        访问次数被限制时，定制错误信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        class Throttled(exceptions.Throttled):</span><br><span class="line">            default_detail &#x3D; &#39;请求被限制.&#39;</span><br><span class="line">            extra_detail_singular &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line">            extra_detail_plural &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line"></span><br><span class="line">        raise Throttled(wait)</span><br></pre></td></tr></table></figure>
<h4 id="3-3-3-在试图中限制请求频率"><a href="#3-3-3-在试图中限制请求频率" class="headerlink" title="3.3.3 在试图中限制请求频率"></a>3.3.3 在试图中限制请求频率</h4><p>全局配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;request_scope&#39;: &#39;10&#x2F;m&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>试图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from rest_framework import exceptions</span><br><span class="line">from rest_framework.throttling import ScopedRateThrottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 继承 ScopedRateThrottle</span><br><span class="line">class TestThrottle(ScopedRateThrottle):</span><br><span class="line"></span><br><span class="line">    def get_cache_key(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Should return a unique cache-key which can be used for throttling.</span><br><span class="line">        Must be overridden.</span><br><span class="line"></span><br><span class="line">        May return &#96;None&#96; if the request should not be throttled.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not request.user:</span><br><span class="line">            ident &#x3D; self.get_ident(request)</span><br><span class="line">        else:</span><br><span class="line">            ident &#x3D; request.user</span><br><span class="line"></span><br><span class="line">        return self.cache_format % &#123;</span><br><span class="line">            &#39;scope&#39;: self.scope,</span><br><span class="line">            &#39;ident&#39;: ident</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    throttle_classes &#x3D; [TestThrottle, ]</span><br><span class="line"></span><br><span class="line">    # 在settings中获取 xxxxxx 对应的频率限制值</span><br><span class="line">    throttle_scope &#x3D; &quot;xxxxxx&quot;</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def throttled(self, request, wait):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        访问次数被限制时，定制错误信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        class Throttled(exceptions.Throttled):</span><br><span class="line">            default_detail &#x3D; &#39;请求被限制.&#39;</span><br><span class="line">            extra_detail_singular &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line">            extra_detail_plural &#x3D; &#39;请 &#123;wait&#125; 秒之后再重试.&#39;</span><br><span class="line"></span><br><span class="line">        raise Throttled(wait)</span><br></pre></td></tr></table></figure>
<h4 id="3-3-4-匿名时用IP限制-登录时用Token限制"><a href="#3-3-4-匿名时用IP限制-登录时用Token限制" class="headerlink" title="3.3.4 匿名时用IP限制+登录时用Token限制"></a>3.3.4 匿名时用IP限制+登录时用Token限制</h4><p>全局配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;UNAUTHENTICATED_USER&#39;: None,</span><br><span class="line">    &#39;UNAUTHENTICATED_TOKEN&#39;: None,</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;backend_anon&#39;: &#39;10&#x2F;m&#39;,</span><br><span class="line">        &#39;backend_user&#39;: &#39;20&#x2F;m&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views.s3_throttling import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>试图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># !&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">from rest_framework.throttling import SimpleRateThrottle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BackendAnonRateThrottle(SimpleRateThrottle):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    匿名用户，根据IP进行限制</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    scope &#x3D; &quot;backend_anon&quot;</span><br><span class="line"></span><br><span class="line">    def get_cache_key(self, request, view):</span><br><span class="line">        # 用户已登录，则跳过 匿名频率限制</span><br><span class="line">        if request.user:</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        return self.cache_format % &#123;</span><br><span class="line">            &#39;scope&#39;: self.scope,</span><br><span class="line">            &#39;ident&#39;: self.get_ident(request)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BackendUserRateThrottle(SimpleRateThrottle):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    登录用户，根据用户token限制</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    scope &#x3D; &quot;backend_user&quot;</span><br><span class="line"></span><br><span class="line">    def get_ident(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        认证成功时：request.user是用户对象；request.auth是token对象</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # return request.auth.token</span><br><span class="line">        return &quot;user_token&quot;</span><br><span class="line"></span><br><span class="line">    def get_cache_key(self, request, view):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        获取缓存key</span><br><span class="line">        :param request:</span><br><span class="line">        :param view:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 未登录用户，则跳过 Token限制</span><br><span class="line">        if not request.user:</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        return self.cache_format % &#123;</span><br><span class="line">            &#39;scope&#39;: self.scope,</span><br><span class="line">            &#39;ident&#39;: self.get_ident(request)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    throttle_classes &#x3D; [BackendAnonRateThrottle, BackendUserRateThrottle, ]</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # self.dispatch</span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure>
<h4 id="3-3-5-全局使用"><a href="#3-3-5-全局使用" class="headerlink" title="3.3.5 全局使用"></a>3.3.5 全局使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_THROTTLE_CLASSES&#39;: [</span><br><span class="line">        &#39;api.utils.throttles.throttles.BackendAnonRateThrottle&#39;,</span><br><span class="line">        &#39;api.utils.throttles.throttles.BackendUserRateThrottle&#39;,</span><br><span class="line">    ],</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;anon&#39;: &#39;10&#x2F;day&#39;,</span><br><span class="line">        &#39;user&#39;: &#39;10&#x2F;day&#39;,</span><br><span class="line">        &#39;backend_anon&#39;: &#39;10&#x2F;m&#39;,</span><br><span class="line">        &#39;backend_user&#39;: &#39;20&#x2F;m&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-版本"><a href="#3-4-版本" class="headerlink" title="3.4 版本"></a>3.4 版本</h3><p>共6个类</p>
<ol>
<li>BaseVersioning</li>
<li>AcceptHeaderVersioning</li>
<li>URLPathVersioning</li>
<li>NamespaceVersioning</li>
<li>HostNameVersioning</li>
<li>QueryParameterVersioning<br>而且还可以看到BaseVersioning类是其余5个类的父类,并且这其余的5个类,每个类中都有一个determine_version方法,在项目的视图函数中导入其中任意一个类,打印versioning_class<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render,HttpResponse</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from django.views import View</span><br><span class="line">from rest_framework.versioning import QueryParameterVersioning</span><br><span class="line"></span><br><span class="line">class UsersView(APIView):</span><br><span class="line">    versioning_class&#x3D;QueryParameterVersioning</span><br><span class="line"></span><br><span class="line">    def get(self,request,*args,**kwargs):</span><br><span class="line">        print(self.versioning_class)        #打印versioning_class</span><br><span class="line"></span><br><span class="line">        return HttpResponse(&quot;aaaa&quot;)</span><br></pre></td></tr></table></figure>
输出结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;class &#39;rest_framework.versioning.QueryParameterVersioning&#39;&gt;</span><br></pre></td></tr></table></figure>
所以versioning_class是一个类,并且versioning_class类中有一个determine_version方法</li>
</ol>
<h4 id="3-4-1-基于URL的GET传参方式"><a href="#3-4-1-基于URL的GET传参方式" class="headerlink" title="3.4.1 基于URL的GET传参方式"></a>3.4.1 基于URL的GET传参方式</h4><p>如：/users?version=v1<br>全局配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,            # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],   # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;          # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url, include</span><br><span class="line">from app01.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>试图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import QueryParameterVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    versioning_class &#x3D; QueryParameterVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line"></span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure>
<h4 id="3-4-2-基于URL的正则方式"><a href="#3-4-2-基于URL的正则方式" class="headerlink" title="3.4.2 基于URL的正则方式"></a>3.4.2 基于URL的正则方式</h4><p>如: /v1/users/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,            # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],   # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;          # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^(?P&lt;version&gt;[v1|v2]+)&#x2F;test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>试图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import URLPathVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    versioning_class &#x3D; URLPathVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line"></span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容&#39;)</span><br></pre></td></tr></table></figure>
<h4 id="3-4-3-基于accept请求头方式"><a href="#3-4-3-基于accept请求头方式" class="headerlink" title="3.4.3 基于accept请求头方式"></a>3.4.3 基于accept请求头方式</h4><p>如：Accept: application/json; version=1.0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,            # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],   # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;          # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>试图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># !&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import AcceptHeaderVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    versioning_class &#x3D; AcceptHeaderVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本 HTTP_ACCEPT头</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容,基于Accept请求头方式&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容，基于Accept请求头方式&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容，基于Accept请求头方式&#39;)</span><br></pre></td></tr></table></figure>
<h4 id="3-4-4-基于主机名方式"><a href="#3-4-4-基于主机名方式" class="headerlink" title="3.4.4 基于主机名方式"></a>3.4.4 基于主机名方式</h4><p>如: v1.example.com</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALLOWED_HOSTS &#x3D; [&#39;*&#39;]</span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,  # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],  # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;  # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from web.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>试图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># !&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import HostNameVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    versioning_class &#x3D; HostNameVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容,基于主机名方式&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容,基于主机名方式&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容,基于主机名方式&#39;)</span><br></pre></td></tr></table></figure>
<h4 id="3-4-5-基于Django路由系统的namespace"><a href="#3-4-5-基于Django路由系统的namespace" class="headerlink" title="3.4.5 基于Django路由系统的namespace"></a>3.4.5 基于Django路由系统的namespace</h4><p>如: example.com/v1/users/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_VERSION&#39;: &#39;v1&#39;,  # 默认版本</span><br><span class="line">    &#39;ALLOWED_VERSIONS&#39;: [&#39;v1&#39;, &#39;v2&#39;],  # 允许的版本</span><br><span class="line">    &#39;VERSION_PARAM&#39;: &#39;version&#39;  # URL中获取值的key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from app01.views import TestView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^v1&#x2F;&#39;, ([</span><br><span class="line">                      url(r&#39;test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test1&#39;)</span><br><span class="line">                  ], None, &#39;v1&#39;)),</span><br><span class="line">    url(r&#39;^v2&#x2F;&#39;, ([</span><br><span class="line">                      url(r&#39;test&#x2F;&#39;, TestView.as_view(), name&#x3D;&#39;test2&#39;)</span><br><span class="line">                  ], None, &#39;v2&#39;)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>试图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># !&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.versioning import NamespaceVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestView(APIView):</span><br><span class="line">    authentication_classes &#x3D; []</span><br><span class="line">    permission_classes &#x3D; []</span><br><span class="line">    versioning_class &#x3D; NamespaceVersioning</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        # 获取版本</span><br><span class="line">        print(request.version)</span><br><span class="line">        # 获取版本管理的类</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line">        # 反向生成URL</span><br><span class="line">        reverse_url &#x3D; request.versioning_scheme.reverse(&#39;test1&#39;, request&#x3D;request)</span><br><span class="line">        print(reverse_url)</span><br><span class="line"></span><br><span class="line">        return Response(&#39;GET请求，响应内容,基于Django路由系统的namespace&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;POST请求，响应内容,基于Django路由系统的namespace&#39;)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return Response(&#39;PUT请求，响应内容,基于Django路由系统的namespace&#39;)</span><br><span class="line">&#96;&#96;&#96;        </span><br><span class="line">#### 3.4.6 全局应用</span><br></pre></td></tr></table></figure>
<p>REST_FRAMEWORK = {<br>    ‘DEFAULT_VERSIONING_CLASS’:”rest_framework.versioning.URLPathVersioning”,<br>    ‘DEFAULT_VERSION’: ‘v1’,<br>    ‘ALLOWED_VERSIONS’: [‘v1’, ‘v2’],<br>    ‘VERSION_PARAM’: ‘version’<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.4.7 自定义版本控制方案</span><br><span class="line">要实现自定义版本控制方案，请继承 BaseVersioning并覆盖 .determine_version 方法。</span><br><span class="line">举个栗子</span><br><span class="line">以下示例使用自定义的 X-API-Version header 来确定所请求的版本</span><br></pre></td></tr></table></figure>
<p>class XAPIVersionScheme(versioning.BaseVersioning):<br>    def determine_version(self, request, <em>args, *</em>kwargs):<br>        return request.META.get(‘HTTP_X_API_VERSION’, None)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果你的版本控制方案基于请求 URL，则还需要更改版本化 URL 的确定方式。为了做到这一点，你应该重写类的 .reverse()方法。有关示例，请参阅源代码。</span><br><span class="line"></span><br><span class="line">### 3.5 解析器(parser)</span><br><span class="line">根据请求头content-type选择对应的解析器就请求体内容进行处理</span><br><span class="line">#### 3.5.1 仅处理请求头content-type为application&#x2F;json的请求体</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from web.views.s5_parser import TestView</p>
<p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<h1 id="usr-bin-env-python"><a href="#usr-bin-env-python" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.parsers import JSONParser</p>
<p>class TestView(APIView):<br>    parser_classes = [JSONParser, ]</p>
<pre><code>def post(self, request, *args, **kwargs):
    print(request.content_type)

    # 获取请求的值，并使用对应的JSONParser进行处理
    print(request.data)

    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值
    print(request.POST)
    print(request.FILES)

    return Response(&apos;POST请求，请求内容: %s&apos; % request.data)

def put(self, request, *args, **kwargs):
    return Response(&apos;PUT请求，响应内容，解析器&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.5.2 仅处理请求头content-type为application&#x2F;x-www-form-urlencoded的请求体</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from web.views import TestView</p>
<p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-1"><a href="#coding-utf-8-1" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.request import Request<br>from rest_framework.parsers import FormParser</p>
<p>class TestView(APIView):<br>    parser_classes = [FormParser, ]</p>
<pre><code>def post(self, request, *args, **kwargs):
    print(request.content_type)

    # 获取请求的值，并使用对应的JSONParser进行处理
    print(request.data)

    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值
    print(request.POST)
    print(request.FILES)

    return Response(&apos;POST请求，响应内容&apos;)

def put(self, request, *args, **kwargs):
    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.5.3 仅处理请求头content-type为multipart&#x2F;form-data的请求体</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from web.views import TestView</p>
<p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<h1 id="usr-bin-env-python-1"><a href="#usr-bin-env-python-1" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-2"><a href="#coding-utf-8-2" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from django.shortcuts import render<br>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.parsers import MultiPartParser</p>
<p>class TestView(APIView):<br>    authentication_classes = []<br>    permission_classes = []<br>    parser_classes = [MultiPartParser, ]</p>
<pre><code>def get(self, request, *args, **kwargs):
    return render(request, &apos;test.html&apos;)

def post(self, request, *args, **kwargs):
    print(request.content_type)

    # 获取请求的值，并使用对应的JSONParser进行处理
    print(request.data)
    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值
    print(request.POST)
    print(request.FILES)
    return Response(&apos;POST请求，响应内容&apos;)

def put(self, request, *args, **kwargs):
    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">模版文件</span><br></pre></td></tr></table></figure>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
<meta name="generator" content="Hexo 4.2.0"><link rel="alternate" href="/atom.xml" title="shuke's Blog" type="application/atom+xml">
</head>
<body>
<form action="http://127.0.0.1:8000/test/" method="post" enctype="multipart/form-data">
    <input type="text" name="user">
    <input type="file" name="img">

<pre><code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</code></pre></form>
</body>
</html>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.5.4 仅上传文件</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
from django.conf.urls import url, include
from web.views import TestView

<p>urlpatterns = [<br>    url(r’test/(?P<filename>[^/]+)’, TestView.as_view(), name=’test’),<br>]</filename></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<h1 id="usr-bin-env-python-2"><a href="#usr-bin-env-python-2" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-3"><a href="#coding-utf-8-3" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.parsers import FileUploadParser</p>
<p>class TestView(APIView):<br>    authentication_classes = []<br>    permission_classes = []<br>    parser_classes = [FileUploadParser, ]</p>
<pre><code>def get(self, request, *args, **kwargs):
    return render(request, &apos;test.html&apos;)

def post(self, request, filename, *args, **kwargs):
    print(filename)
    print(request.content_type)

    # 获取请求的值，并使用对应的JSONParser进行处理
    print(request.data)
    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值
    print(request.POST)
    print(request.FILES)
    return Response(&apos;POST请求，响应内容&apos;)

def put(self, request, *args, **kwargs):
    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">模版文件</span><br></pre></td></tr></table></figure>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<form action="http://127.0.0.1:8000/test/f1.numbers" method="post" enctype="multipart/form-data">
    <input type="text" name="user">
    <input type="file" name="img">

<pre><code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</code></pre></form>
</body>
</html>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.5.5 同时多个Parser</span><br><span class="line">当同时使用多个parser时，rest framework会根据请求头content-type自动进行比对，并使用对应parser</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
from django.conf.urls import url, include
from web.views import TestView

<p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<h1 id="usr-bin-env-python-3"><a href="#usr-bin-env-python-3" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-4"><a href="#coding-utf-8-4" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework.parsers import JSONParser, FormParser, MultiPartParser</p>
<p>class TestView(APIView):<br>    parser_classes = [JSONParser, FormParser, MultiPartParser, ]</p>
<pre><code>def post(self, request, *args, **kwargs):
    print(request.content_type)

    # 获取请求的值，并使用对应的JSONParser进行处理
    print(request.data)
    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值
    print(request.POST)
    print(request.FILES)
    return Response(&apos;POST请求，响应内容&apos;)

def put(self, request, *args, **kwargs):
    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.5.6 全局应用</span><br></pre></td></tr></table></figure>
<p>REST_FRAMEWORK = {<br>    ‘DEFAULT_PARSER_CLASSES’:[<br>        ‘rest_framework.parsers.JSONParser’<br>        ‘rest_framework.parsers.FormParser’<br>        ‘rest_framework.parsers.MultiPartParser’<br>    ]</p>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from web.views import TestView</p>
<p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-5"><a href="#coding-utf-8-5" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response</p>
<p>class TestView(APIView):<br>    def post(self, request, <em>args, *</em>kwargs):<br>        print(request.content_type)</p>
<pre><code>    # 获取请求的值，并使用对应的JSONParser进行处理
    print(request.data)
    # application/x-www-form-urlencoded 或 multipart/form-data时，request.POST中才有值
    print(request.POST)
    print(request.FILES)
    return Response(&apos;POST请求，响应内容&apos;)

def put(self, request, *args, **kwargs):
    return Response(&apos;PUT请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">⚠️ 个别特殊的值可以通过Django的request对象 request\.\_request 来进行获取</span><br><span class="line"></span><br><span class="line">### 3.6 序列化</span><br><span class="line">序列化用于对用户请求数据进行验证和数据进行序列化</span><br><span class="line">#### 3.6.1 自定义字段</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from app01.views import TestView</p>
<p>urlpatterns = [<br>    url(r’^test/‘, TestView.as_view(), name=’test’),<br>]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">models</span><br></pre></td></tr></table></figure>
<p>from django.db import models</p>
<h1 id="Create-your-models-here"><a href="#Create-your-models-here" class="headerlink" title="Create your models here."></a>Create your models here.</h1><p>from django.db import models</p>
<p>class UserInfo(models.Model):<br>    user_type_choices = (<br>        (1, ‘普通用户’),<br>        (2, ‘管理员’),<br>        (3, ‘超级管理员’),<br>    )<br>    username = models.CharField(max_length=32)<br>    password = models.CharField(max_length=64)<br>    user_type = models.IntegerField(choices=user_type_choices, default=1)</p>
<p>class UserToken(models.Model):<br>    user = models.OneToOneField(‘UserInfo’, on_delete=True)<br>    token = models.CharField(max_length=64)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<h1 id="usr-bin-env-python-4"><a href="#usr-bin-env-python-4" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-6"><a href="#coding-utf-8-6" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from . import models</p>
<p>class PasswordValidator(object):<br>    def <strong>init</strong>(self, base):<br>        self.base = base</p>
<pre><code>def __call__(self, value):
    if value != self.base:
        message = &apos;This field must be %s.&apos; % self.base
        raise serializers.ValidationError(message)

def set_context(self, serializer_field):
    &quot;&quot;&quot;
    This hook is called by the serializer instance,
    prior to the validation call being made.
    &quot;&quot;&quot;
    # 执行验证之前调用,serializer_fields是当前字段对象
    pass</code></pre><p>class UserSerializer(serializers.Serializer):<br>    user_type = serializers.IntegerField()<br>    username = serializers.CharField(min_length=3)<br>    password = serializers.CharField(error_messages={‘required’: ‘密码不能为空’}, validators=[PasswordValidator(‘666’)])</p>
<p>class TestView(APIView):<br>    authentication_classes = []<br>    permission_classes = []</p>
<pre><code>def get(self, request, *args, **kwargs):

    # 序列化，将数据库查询字段序列化为字典
    data_list = models.UserInfo.objects.all()
    ser = UserSerializer(instance=data_list, many=True)
    # 或
    # obj = models.UserInfo.objects.all().first()
    # ser = UserSerializer(instance=obj, many=False)
    return Response(ser.data)

def post(self, request, *args, **kwargs):
    # 验证，对请求发来的数据进行验证
    ser = UserSerializer(data=request.data)
    if ser.is_valid():
        print(ser.validated_data)
    else:
        print(ser.errors)

    return Response(&apos;POST请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST验证:</span><br></pre></td></tr></table></figure>
<p>curl -X POST <br>  <a href="http://127.0.0.1:8001/test/" target="_blank" rel="noopener">http://127.0.0.1:8001/test/</a> <br>  -H ‘Cache-Control: no-cache’ <br>  -H ‘Content-Type: application/json’ <br>  -H ‘Postman-Token: 4ea5d1d1-e3b1-38a3-19f6-25070ace2342’ <br>  -d ‘{<br>        “user_type”: 2,<br>        “username”: “python”,<br>        “password”: “666”<br>    }’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.6.2 基于Model自动生成字段</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from web.views.s6_serializers import TestView</p>
<p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-7"><a href="#coding-utf-8-7" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from .. import models</p>
<p>class PasswordValidator(object):<br>    def <strong>init</strong>(self, base):<br>        self.base = str(base)</p>
<pre><code>def __call__(self, value):
    if value != self.base:
        message = &apos;This field must be %s.&apos; % self.base
        raise serializers.ValidationError(message)

def set_context(self, serializer_field):
    &quot;&quot;&quot;
    This hook is called by the serializer instance,
    prior to the validation call being made.
    &quot;&quot;&quot;
    # 执行验证之前调用,serializer_fields是当前字段对象
    pass</code></pre><p>class ModelUserSerializer(serializers.ModelSerializer):</p>
<pre><code>user = serializers.CharField(max_length=32)

class Meta:
    model = models.UserInfo
    fields = &quot;__all__&quot;
    # fields = [&apos;user&apos;, &apos;pwd&apos;, &apos;ut&apos;]
    depth = 2
    extra_kwargs = {&apos;user&apos;: {&apos;min_length&apos;: 6}, &apos;pwd&apos;: {&apos;validators&apos;: [PasswordValidator(666), ]}}
    # read_only_fields = [&apos;user&apos;]</code></pre><p>class TestView(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):</p>
<pre><code>    # 序列化，将数据库查询字段序列化为字典
    data_list = models.UserInfo.objects.all()
    ser = ModelUserSerializer(instance=data_list, many=True)
    # 或
    # obj = models.UserInfo.objects.all().first()
    # ser = UserSerializer(instance=obj, many=False)
    return Response(ser.data)

def post(self, request, *args, **kwargs):
    # 验证，对请求发来的数据进行验证
    print(request.data)
    ser = ModelUserSerializer(data=request.data)
    if ser.is_valid():
        print(ser.validated_data)
    else:
        print(ser.errors)

    return Response(&apos;POST请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.6.3 生成URL</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from web.views.s6_serializers import TestView</p>
<p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>    url(r’detail/(?P<pk>\d+)/‘, TestView.as_view(), name=’detail’),<br>]</pk></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">models</span><br></pre></td></tr></table></figure>
<p>from django.db import models</p>
<h1 id="Create-your-models-here-1"><a href="#Create-your-models-here-1" class="headerlink" title="Create your models here."></a>Create your models here.</h1><p>from django.db import models</p>
<p>class UserInfo(models.Model):<br>    user_type_choices = (<br>        (1, ‘普通用户’),<br>        (2, ‘管理员’),<br>        (3, ‘超级管理员’),<br>    )<br>    username = models.CharField(max_length=32)<br>    password = models.CharField(max_length=64)<br>    user_type = models.IntegerField(choices=user_type_choices, default=1)</p>
<p>class UserToken(models.Model):<br>    user = models.OneToOneField(‘UserInfo’, on_delete=True)<br>    token = models.CharField(max_length=64)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<h1 id="usr-bin-env-python-5"><a href="#usr-bin-env-python-5" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-8"><a href="#coding-utf-8-8" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from . import models</p>
<p>class PasswordValidator(object):<br>    def <strong>init</strong>(self, base):<br>        self.base = str(base)</p>
<pre><code>def __call__(self, value):
    if value != self.base:
        message = &apos;This field must be %s.&apos; % self.base
        raise serializers.ValidationError(message)

def set_context(self, serializer_field):
    &quot;&quot;&quot;
    This hook is called by the serializer instance,
    prior to the validation call being made.
    &quot;&quot;&quot;
    # 执行验证之前调用,serializer_fields是当前字段对象
    pass</code></pre><p>class ModelUserSerializer(serializers.ModelSerializer):<br>    user_type = serializers.HyperlinkedIdentityField(view_name=’detail’)</p>
<pre><code>class Meta:
    model = models.UserInfo
    fields = &quot;__all__&quot;

    extra_kwargs = {
        &apos;username&apos;: {&apos;min_length&apos;: 6},
        &apos;pasword&apos;: {&apos;validators&apos;: [PasswordValidator(666), ]},
    }</code></pre><p>class TestView(APIView):<br>    authentication_classes = []<br>    permission_classes = []</p>
<pre><code>def get(self, request, *args, **kwargs):

    # 序列化，将数据库查询字段序列化为字典
    data_list = models.UserInfo.objects.all()
    ser = ModelUserSerializer(instance=data_list, many=True, context={&apos;request&apos;: request})
    # 或
    # obj = models.UserInfo.objects.all().first()
    # ser = UserSerializer(instance=obj, many=False)
    return Response(ser.data)

def post(self, request, *args, **kwargs):
    # 验证，对请求发来的数据进行验证
    print(request.data)
    ser = ModelUserSerializer(data=request.data)
    if ser.is_valid():
        print(ser.validated_data)
    else:
        print(ser.errors)

    return Response(&apos;POST请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请求如下图所示:</span><br><span class="line">![images](https:&#x2F;&#x2F;note.youdao.com&#x2F;yws&#x2F;api&#x2F;personal&#x2F;file&#x2F;WEBe8cf0d66e9af86eaccbbfdc47f098d67?method&#x3D;download&amp;shareKey&#x3D;cff9deb39e5ad27072b3d2ccae7b1307)</span><br><span class="line"></span><br><span class="line">#### 3.6.4 自动生成URL</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from app01.views import TestView</p>
<p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view(), name=’test’),<br>    url(r’detail/(?P<pk>\d+)/‘, TestView.as_view(), name=’detail-info’),<br>]</pk></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<h1 id="usr-bin-env-python-6"><a href="#usr-bin-env-python-6" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-9"><a href="#coding-utf-8-9" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from . import models</p>
<p>class PasswordValidator(object):<br>    def <strong>init</strong>(self, base):<br>        self.base = str(base)</p>
<pre><code>def __call__(self, value):
    if value != self.base:
        message = &apos;This field must be %s.&apos; % self.base
        raise serializers.ValidationError(message)

def set_context(self, serializer_field):
    &quot;&quot;&quot;
    This hook is called by the serializer instance,
    prior to the validation call being made.
    &quot;&quot;&quot;
    # 执行验证之前调用,serializer_fields是当前字段对象
    pass</code></pre><p>class ModelUserSerializer(serializers.HyperlinkedModelSerializer):<br>    ll = serializers.HyperlinkedIdentityField(view_name=’detail-info’)<br>    tt = serializers.CharField(required=False)</p>
<pre><code>class Meta:
    model = models.UserInfo
    fields = &quot;__all__&quot;
    list_serializer_class = serializers.ListSerializer

    extra_kwargs = {
        &apos;username&apos;: {&apos;min_length&apos;: 6},
        &apos;password&apos;: {&apos;validators&apos;: [PasswordValidator(666), ]},
        &apos;url&apos;: {&apos;view_name&apos;: &apos;detail-info&apos;},
        &apos;ut&apos;: {&apos;view_name&apos;: &apos;detail-info&apos;},
    }</code></pre><p>class TestView(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        # # 序列化，将数据库查询字段序列化为字典<br>        data_list = models.UserInfo.objects.all()<br>        ser = ModelUserSerializer(instance=data_list, many=True, context={‘request’: request})<br>        # # 如果Many=True<br>        # # 或<br>        # # obj = models.UserInfo.objects.all().first()<br>        # # ser = UserSerializer(instance=obj, many=False)<br>        return Response(ser.data)</p>
<pre><code>def post(self, request, *args, **kwargs):
    # 验证，对请求发来的数据进行验证
    print(request.data)
    ser = ModelUserSerializer(data=request.data)
    if ser.is_valid():
        print(ser.validated_data)
    else:
        print(ser.errors)

    return Response(&apos;POST请求，响应内容&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.7 分页</span><br><span class="line">#### 3.7.1 根据页码进行分页</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from app01.views import UserViewSet</p>
<p>urlpatterns = [<br>    url(r’test/‘, UserViewSet.as_view(), name=’test’),<br>]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<h1 id="usr-bin-env-python-7"><a href="#usr-bin-env-python-7" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-10"><a href="#coding-utf-8-10" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework import serializers<br>from . import models</p>
<p>from rest_framework.pagination import PageNumberPagination</p>
<p>class StandardResultsSetPagination(PageNumberPagination):<br>    # 默认每页显示的数据条数<br>    page_size = 1<br>    # 获取URL参数中设置的每页显示数据条数<br>    page_size_query_param = ‘page_size’</p>
<pre><code># 获取URL参数中传入的页码key
page_query_param = &apos;page&apos;

# 最大支持的每页显示的数据条数
max_page_size = 1</code></pre><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p>
<p>class UserViewSet(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        user_list = models.UserInfo.objects.all().order_by(‘-id’)</p>
<pre><code># 实例化分页对象，获取数据库中的分页数据
paginator = StandardResultsSetPagination()
page_user_list = paginator.paginate_queryset(user_list, self.request, view=self)

# 序列化对象
serializer = UserSerializer(page_user_list, many=True)

# 生成分页和数据
response = paginator.get_paginated_response(serializer.data)
return response</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">访问验证:</span><br></pre></td></tr></table></figure>
<p><a href="http://127.0.0.1:8001/test/?page=1" target="_blank" rel="noopener">http://127.0.0.1:8001/test/?page=1</a><br><a href="http://127.0.0.1:8001/test/?page=2" target="_blank" rel="noopener">http://127.0.0.1:8001/test/?page=2</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.7.2 位置和个数进行分页</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from app01.views import UserViewSet</p>
<p>urlpatterns = [<br>    url(r’test/‘, UserViewSet.as_view(), name=’test’),<br>]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<h1 id="usr-bin-env-python-8"><a href="#usr-bin-env-python-8" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-11"><a href="#coding-utf-8-11" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework import serializers<br>from . import models</p>
<p>from rest_framework.pagination import PageNumberPagination, LimitOffsetPagination</p>
<p>class StandardResultsSetPagination(LimitOffsetPagination):<br>    # 默认每页显示的数据条数<br>    default_limit = 2<br>    # URL中传入的显示数据条数的参数<br>    limit_query_param = ‘limit’<br>    # URL中传入的数据位置的参数<br>    offset_query_param = ‘offset’<br>    # 最大每页显得条数<br>    max_limit = None</p>
<p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p>
<p>class UserViewSet(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        user_list = models.UserInfo.objects.all().order_by(‘-id’)</p>
<pre><code># 实例化分页对象，获取数据库中的分页数据
paginator = StandardResultsSetPagination()
page_user_list = paginator.paginate_queryset(user_list, self.request, view=self)

# 序列化对象
serializer = UserSerializer(page_user_list, many=True)

# 生成分页和数据
response = paginator.get_paginated_response(serializer.data)
return response</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">验证:</span><br><span class="line">![位置分页](https:&#x2F;&#x2F;note.youdao.com&#x2F;yws&#x2F;api&#x2F;personal&#x2F;file&#x2F;WEBdebc8cfb0c33b1533d1e041ed9925422?method&#x3D;download&amp;shareKey&#x3D;2b1d435332858dbe629d4c3d78b670d8)</span><br><span class="line"></span><br><span class="line">#### 3.7.3 游标分页</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from app01.views import UserViewSet</p>
<p>urlpatterns = [<br>    url(r’test/‘, UserViewSet.as_view(), name=’test’),<br>]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<h1 id="usr-bin-env-python-9"><a href="#usr-bin-env-python-9" class="headerlink" title="!/usr/bin/env python"></a>!/usr/bin/env python</h1><h1 id="coding-utf-8-12"><a href="#coding-utf-8-12" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework import serializers<br>from . import models</p>
<p>from rest_framework.pagination import PageNumberPagination, LimitOffsetPagination, CursorPagination</p>
<p>class StandardResultsSetPagination(CursorPagination):<br>    # URL传入的游标参数<br>    cursor_query_param = ‘cursor’<br>    # 默认每页显示的数据条数<br>    page_size = 10<br>    # URL传入的每页显示条数的参数<br>    page_size_query_param = ‘page_size’<br>    # 每页显示数据最大条数<br>    max_page_size = 1000</p>
<pre><code># 根据ID从大到小排列
ordering = &quot;id&quot;</code></pre><p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p>
<p>class UserViewSet(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        user_list = models.UserInfo.objects.all().order_by(‘-id’)</p>
<pre><code># 实例化分页对象，获取数据库中的分页数据
paginator = StandardResultsSetPagination()
page_user_list = paginator.paginate_queryset(user_list, self.request, view=self)

# 序列化对象
serializer = UserSerializer(page_user_list, many=True)

# 生成分页和数据
response = paginator.get_paginated_response(serializer.data)
return response</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 3.8  路由系统</span><br><span class="line">#### 3.8.1 自定义路由</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from web.views import s11_render</p>
<p>urlpatterns = [<br>    url(r’^test/$’, s11_render.TestView.as_view()),<br>    url(r’^test.(?P<format>[a-z0-9]+)$’, s11_render.TestView.as_view()),<br>    url(r’^test/(?P<pk>[^/.]+)/$’, s11_render.TestView.as_view()),<br>    url(r’^test/(?P<pk>[^/.]+).(?P<format>[a-z0-9]+)$’, s11_render.TestView.as_view())<br>]</format></pk></pk></format></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from .. import models</p>
<p>class TestView(APIView):<br>    def get(self, request, <em>args, *</em>kwargs):<br>        print(kwargs)<br>        print(self.renderer_classes)<br>        return Response(‘…’)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.8.2 半自动路由</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from web.views import s10_generic</p>
<p>urlpatterns = [<br>    url(r’^test/$’, s10_generic.UserViewSet.as_view({‘get’: ‘list’, ‘post’: ‘create’})),<br>    url(r’^test/(?P<pk>\d+)/$’, s10_generic.UserViewSet.as_view(<br>        {‘get’: ‘retrieve’, ‘put’: ‘update’, ‘patch’: ‘partial_update’, ‘delete’: ‘destroy’})),<br>]</pk></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-13"><a href="#coding-utf-8-13" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.viewsets import ModelViewSet<br>from rest_framework import serializers<br>from .. import models</p>
<p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p>
<p>class UserViewSet(ModelViewSet):<br>    queryset = models.UserInfo.objects.all()<br>    serializer_class = UserSerializer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.8.3 全自动路由</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from rest_framework import routers<br>from web.views import s10_generic</p>
<p>router = routers.DefaultRouter()<br>router.register(r’users’, s10_generic.UserViewSet)</p>
<p>urlpatterns = [<br>    url(r’^’, include(router.urls)),<br>]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<p>from rest_framework.viewsets import ModelViewSet<br>from rest_framework import serializers<br>from .. import models</p>
<p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p>
<p>class UserViewSet(ModelViewSet):<br>    queryset = models.UserInfo.objects.all()<br>    serializer_class = UserSerializer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 3.9 试图</span><br><span class="line">#### 3.9.1 GenericViewSet</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from web.views.s7_viewset import TestView</p>
<p>urlpatterns = [<br>    url(r’test/‘, TestView.as_view({‘get’:’list’}), name=’test’),<br>    url(r’detail/(?P<pk>\d+)/‘, TestView.as_view({‘get’:’list’}), name=’xxxx’),<br>]</pk></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-14"><a href="#coding-utf-8-14" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework import viewsets<br>from rest_framework.response import Response</p>
<p>class TestView(viewsets.GenericViewSet):<br>    def list(self, request, <em>args, *</em>kwargs):<br>        return Response(‘…’)</p>
<pre><code>def add(self, request, *args, **kwargs):
    pass

def delete(self, request, *args, **kwargs):
    pass

def edit(self, request, *args, **kwargs):
    pass</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.9.2 ModelViewSet(自定义URL)</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from web.views import s10_generic</p>
<p>urlpatterns = [<br>    url(r’^test/$’, s10_generic.UserViewSet.as_view({‘get’: ‘list’, ‘post’: ‘create’})),<br>    url(r’^test/(?P<pk>\d+)/$’, s10_generic.UserViewSet.as_view(<br>        {‘get’: ‘retrieve’, ‘put’: ‘update’, ‘patch’: ‘partial_update’, ‘delete’: ‘destroy’})),<br>]</pk></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-15"><a href="#coding-utf-8-15" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.viewsets import ModelViewSet<br>from rest_framework import serializers<br>from .. import models</p>
<p>class UserSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p>
<p>class UserViewSet(ModelViewSet):<br>    queryset = models.UserInfo.objects.all()<br>    serializer_class = UserSerializer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.9.3 ModelViewSet(rest framework路由)</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from rest_framework import routers<br>from app01 import views</p>
<p>router = routers.DefaultRouter()<br>router.register(r’users’, views.UserViewSet)<br>router.register(r’groups’, views.GroupViewSet)</p>
<h1 id="Wire-up-our-API-using-automatic-URL-routing"><a href="#Wire-up-our-API-using-automatic-URL-routing" class="headerlink" title="Wire up our API using automatic URL routing."></a>Wire up our API using automatic URL routing.</h1><h1 id="Additionally-we-include-login-URLs-for-the-browsable-API"><a href="#Additionally-we-include-login-URLs-for-the-browsable-API" class="headerlink" title="Additionally, we include login URLs for the browsable API."></a>Additionally, we include login URLs for the browsable API.</h1><p>urlpatterns = [<br>    url(r’^’, include(router.urls)),<br>]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<p>from rest_framework import viewsets<br>from rest_framework import serializers</p>
<p>class UserSerializer(serializers.HyperlinkedModelSerializer):<br>    class Meta:<br>        model = models.User<br>        fields = (‘url’, ‘username’, ‘email’, ‘groups’)</p>
<p>class GroupSerializer(serializers.HyperlinkedModelSerializer):<br>    class Meta:<br>        model = models.Group<br>        fields = (‘url’, ‘name’)</p>
<p>class UserViewSet(viewsets.ModelViewSet):<br>    “””<br>    API endpoint that allows users to be viewed or edited.<br>    “””<br>    queryset = User.objects.all().order_by(‘-date_joined’)<br>    serializer_class = UserSerializer</p>
<p>class GroupViewSet(viewsets.ModelViewSet):<br>    “””<br>    API endpoint that allows groups to be viewed or edited.<br>    “””<br>    queryset = Group.objects.all()<br>    serializer_class = GroupSerializer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 3.10 渲染器</span><br><span class="line">根据用户请求URL或用户可接受的类型,筛选出合适的渲染组件</span><br><span class="line">用户请求URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;json</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.json</span><br><span class="line">用户请求头:</span><br><span class="line">- Accept:text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8</span><br><span class="line"></span><br><span class="line">#### 3.10.1 Json</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;json</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.json</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">路由:</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from web.views import s11_render</p>
<p>urlpatterns = [<br>    url(r’^test/$’, s11_render.TestView.as_view()),<br>    url(r’^test.(?P<format>[a-z0-9]+)’, s11_render.TestView.as_view()),<br>]</format></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图:</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-16"><a href="#coding-utf-8-16" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers</p>
<p>from rest_framework.renderers import JSONRenderer</p>
<p>from .. import models</p>
<p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p>
<p>class TestView(APIView):<br>    renderer_classes = [JSONRenderer, ]</p>
<pre><code>def get(self, request, *args, **kwargs):
    user_list = models.UserInfo.objects.all()
    ser = TestSerializer(instance=user_list, many=True)
    return Response(ser.data)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.10.2 表格</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;admin</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.admin</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">试图:</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-17"><a href="#coding-utf-8-17" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from rest_framework.renderers import AdminRenderer<br>from . import models</p>
<p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p>
<p>class TestView(APIView):<br>    renderer_classes = [AdminRenderer, ]</p>
<pre><code>def get(self, request, *args, **kwargs):
    user_list = models.UserInfo.objects.all()
    ser = TestSerializer(instance=user_list, many=True)
    return Response(ser.data)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.10.3 Form表单</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;form</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.form</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">试图:</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-18"><a href="#coding-utf-8-18" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers</p>
<p>from rest_framework.renderers import JSONRenderer<br>from rest_framework.renderers import AdminRenderer<br>from rest_framework.renderers import HTMLFormRendere<br>from . import models</p>
<p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p>
<p>class TestView(APIView):<br>    renderer_classes = [HTMLFormRenderer, ]</p>
<pre><code>def get(self, request, *args, **kwargs):
    user_list = models.UserInfo.objects.all().first()
    ser = TestSerializer(instance=user_list, many=False)
    return Response(ser.data)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.10.4 自定义显示模版</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;html</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.html</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">路由</span><br></pre></td></tr></table></figure>
<p>from django.conf.urls import url, include<br>from web.views import s11_render</p>
<p>urlpatterns = [<br>    url(r’^test/$’, s11_render.TestView.as_view()),<br>    url(r’^test.(?P<format>[a-z0-9]+)’, s11_render.TestView.as_view()),<br>]</format></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">试图</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/env python</p>
<h1 id="coding-utf-8-19"><a href="#coding-utf-8-19" class="headerlink" title="-- coding:utf-8 --"></a>-<em>- coding:utf-8 -</em>-</h1><p>from rest_framework.views import APIView<br>from rest_framework.response import Response<br>from rest_framework import serializers<br>from rest_framework.renderers import TemplateHTMLRenderer<br>from . import models</p>
<p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p>
<p>class TestView(APIView):<br>    renderer_classes = [TemplateHTMLRenderer, ]</p>
<pre><code>def get(self, request, *args, **kwargs):
    user_list = models.UserInfo.objects.all().first()
    ser = TestSerializer(instance=user_list, many=False)
    return Response(ser.data, template_name=&apos;user_detail.html&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">模版</span><br></pre></td></tr></table></figure>
<p>$ cat user_detail.html<br><!DOCTYPE html></p>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    
    
    
</body>
</html>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3.10.5 浏览器API+JSON</span><br><span class="line">访问URL:</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;?format&#x3D;api</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test.api</span><br><span class="line">- http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;test&#x2F;</span><br><span class="line">试图:</span><br></pre></td></tr></table></figure>
#!/usr/bin/env python
# -*- coding:utf-8 -*-
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import serializers
from rest_framework.renderers import JSONRenderer
from rest_framework.renderers import BrowsableAPIRenderer
from . import models

<p>class TestSerializer(serializers.ModelSerializer):<br>    class Meta:<br>        model = models.UserInfo<br>        fields = “<strong>all</strong>“</p>
<p>class CustomBrowsableAPIRenderer(BrowsableAPIRenderer):<br>    def get_default_renderer(self, view):<br>        return JSONRenderer()</p>
<p>class TestView(APIView):<br>    renderer_classes = [CustomBrowsableAPIRenderer, ]</p>
<pre><code>def get(self, request, *args, **kwargs):
    user_list = models.UserInfo.objects.all().first()
    ser = TestSerializer(instance=user_list, many=False)
    return Response(ser.data, template_name=&apos;user_detail.html&apos;)</code></pre><pre><code>注意: 如果同时多个存在时,自动根据URL后缀来选择渲染器


[原文地址](http://www.cnblogs.com/wupeiqi/articles/7805382.html)





</code></pre>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
</search>
